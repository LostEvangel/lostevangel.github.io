{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/my_js/clicklove.js","path":"js/my_js/clicklove.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/my_js/love.js","path":"js/my_js/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"source/avatar/avatar.gif","path":"avatar/avatar.gif","modified":0,"renderable":0},{"_id":"source/avatar/avatar.png","path":"avatar/avatar.png","modified":0,"renderable":0},{"_id":"source/image/background.jpeg","path":"image/background.jpeg","modified":0,"renderable":0},{"_id":"source/image/blog1.png","path":"image/blog1.png","modified":0,"renderable":0},{"_id":"source/image/logo.jpg","path":"image/logo.jpg","modified":0,"renderable":0},{"_id":"source/image/ssclient.png","path":"image/ssclient.png","modified":0,"renderable":0},{"_id":"source/image/ReentrantLock/enq.png","path":"image/ReentrantLock/enq.png","modified":0,"renderable":0},{"_id":"source/image/ReentrantLock/加入同步队列到成功获取锁的过程.png","path":"image/ReentrantLock/加入同步队列到成功获取锁的过程.png","modified":0,"renderable":0},{"_id":"source/image/ReentrantLock/抢占.png","path":"image/ReentrantLock/抢占.png","modified":0,"renderable":0},{"_id":"source/image/ReentrantLock/公平锁tryAcquire.png","path":"image/ReentrantLock/公平锁tryAcquire.png","modified":0,"renderable":0},{"_id":"source/image/ReentrantLock/继承关系.png","path":"image/ReentrantLock/继承关系.png","modified":0,"renderable":0},{"_id":"source/image/ReentrantLock/非公平模式下的加锁流程.png","path":"image/ReentrantLock/非公平模式下的加锁流程.png","modified":0,"renderable":0},{"_id":"source/image/ReentrantLock/解锁流程.png","path":"image/ReentrantLock/解锁流程.png","modified":0,"renderable":0},{"_id":"source/image/cover/1.jpg","path":"image/cover/1.jpg","modified":0,"renderable":0},{"_id":"source/image/cover/2.jpg","path":"image/cover/2.jpg","modified":0,"renderable":0},{"_id":"source/image/cover/3.jpg","path":"image/cover/3.jpg","modified":0,"renderable":0},{"_id":"source/image/cover/4.jpg","path":"image/cover/4.jpg","modified":0,"renderable":0},{"_id":"source/image/java/常量池中的String.png","path":"image/java/常量池中的String.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/AbstractFactory.png","path":"image/interview_prep/AbstractFactory.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/Adapter.png","path":"image/interview_prep/Adapter.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/Decorator.png","path":"image/interview_prep/Decorator.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/FactoryMethod.png","path":"image/interview_prep/FactoryMethod.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/Observer.png","path":"image/interview_prep/Observer.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/Proxy.png","path":"image/interview_prep/Proxy.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/TemplateMethod.png","path":"image/interview_prep/TemplateMethod.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/collection.jpg","path":"image/interview_prep/collection.jpg","modified":0,"renderable":0},{"_id":"source/image/interview_prep/architecture.png","path":"image/interview_prep/architecture.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/jvm.jpg","path":"image/interview_prep/jvm.jpg","modified":0,"renderable":0},{"_id":"source/image/interview_prep/springmvc.png","path":"image/interview_prep/springmvc.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/JVM/CMS.png","path":"image/interview_prep/JVM/CMS.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/JVM/parnew.png","path":"image/interview_prep/JVM/parnew.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/JVM/serial.png","path":"image/interview_prep/JVM/serial.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/java/aqc_ex.png","path":"image/interview_prep/java/aqc_ex.png","modified":0,"renderable":0},{"_id":"source/image/interview_prep/java/aqs_nano.png","path":"image/interview_prep/java/aqs_nano.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1740314473832},{"_id":"source/_posts/CAS和concurrent.atomic.md","hash":"fd5e83f680f7c9af67ea67fa97e57721f91c7e09","modified":1740250339815},{"_id":"source/_posts/CopyOnWriteArrayList和CopyOnWriteArraySet.md","hash":"33d79ee5b36e97e62cd065e9c073a166cea16648","modified":1740250339816},{"_id":"source/_posts/ConcurrentHashMap.md","hash":"50ad2ccbbd714f2f6d674e75e26b10010e5e364a","modified":1740250339815},{"_id":"source/_posts/GC相关.md","hash":"bed8df2bafb86156465e9f98db5d2c030d8da55b","modified":1740250339816},{"_id":"source/_posts/Hexo-nexT玩法.md","hash":"30280c92de3bc141b0834935a54b6ad8bc41a4ec","modified":1740250339817},{"_id":"source/_posts/JVM内存模型和对象.md","hash":"d3034900343ed827ae8cf8300d4d96bf46996665","modified":1740250339817},{"_id":"source/_posts/Java常见基础知识汇总.md","hash":"4fcd3274ad305330e99225e30f8d4d1c7c57b00a","modified":1740250339818},{"_id":"source/_posts/Lambda序列化问题.md","hash":"d4c3abcb1f38849981e534b0161f1fece31ee887","modified":1740250339818},{"_id":"source/_posts/ReentrantLock-重入锁-的源码解析.md","hash":"61a2db0a349f8e4a8c9dc9b28623ed083c58e131","modified":1740250339819},{"_id":"source/_posts/ScrapyDemo.md","hash":"e17a90b91867ef322e8ec89983db1f6a725e48f6","modified":1740250339819},{"_id":"source/_posts/Spring知识总结整理.md","hash":"b9a8c71fd9bfbb4cf468e632d83a6cf20b8b7a0c","modified":1740250339820},{"_id":"source/_posts/centos7安装nginx.md","hash":"b78fe6318b310769f3af437b7dfd03d5d5c30baf","modified":1740250339820},{"_id":"source/_posts/hexo 踩坑实录.md","hash":"8c7cadc33500dfe47c83fd998f474dcc1ce706bf","modified":1740326564968},{"_id":"source/_posts/hexo换电脑要做的.md","hash":"eb83e4ed9b380457eb6dd9a7b139a9614e7c2560","modified":1740250339822},{"_id":"source/_posts/java集合总结.md","hash":"3a053b0067f6df3d8eb2da2a1978981740e20989","modified":1740250339823},{"_id":"source/_posts/jdk代理.md","hash":"50a80e835585b78e2bbb6fc39af4866f32ecedd1","modified":1740250339823},{"_id":"source/_posts/剑指offer算法题 27-36.md","hash":"367c1642cde6ab2e5e2a7626533675dbf7193756","modified":1740250339823},{"_id":"source/_posts/剑指offer算法题 3-26.md","hash":"248963108bd8a12d4d1de558c1067b6180bd2891","modified":1740250339824},{"_id":"source/_posts/常用排序算法-java实现.md","hash":"3fc637781c699c2417383ebf7c22f3e012b1c7e8","modified":1740250339824},{"_id":"source/_posts/常用设计模式.md","hash":"bf314f5801f417d416df108ebbe7c57ae66ed501","modified":1740250339825},{"_id":"source/_posts/微信跳一跳python脚本.md","hash":"b744bee27d8f9f5a07669306f0f7f08c87bd0c74","modified":1740250339825},{"_id":"source/_posts/搭建ShadowSocks.md","hash":"d210d8eef13b1f9f9c54604c3f1d1cfd3afd635f","modified":1740250339825},{"_id":"source/_posts/操作系统.md","hash":"404b384134a1438c433a6ead4c069d6add4ea744","modified":1740250339826},{"_id":"source/_posts/数据库事务.md","hash":"1328acefec36820f99806bc7fd196b464b420453","modified":1740250339826},{"_id":"source/_posts/数据库知识整理.md","hash":"ccadbbdfa52c62e41b8cf0e1fe2e9ac66e3f59ba","modified":1740250339826},{"_id":"source/_posts/数据库范式.md","hash":"68a6b7df0ba940770538ce57ad01ace7a0c73ccc","modified":1740250339827},{"_id":"source/_posts/数据库其他知识.md","hash":"77212f2f630984cf275e6683633c17f2b073118b","modified":1740250339826},{"_id":"source/_posts/数据库索引.md","hash":"b8b354509db2566ad06ce8d5b4aa81f14d49aa92","modified":1740250339827},{"_id":"source/_posts/文件夹中右键打开命令行窗口.md","hash":"ca430be5716b8863ff4b9c981972618b08c2840f","modified":1740250339827},{"_id":"source/_posts/计算机网络.md","hash":"f2f5b010150cd2b8c2ecbcd9387347260ce2bd19","modified":1740250339827},{"_id":"source/_posts/队列同步器.md","hash":"7680c55c637800d7bc86d1f2a4c59fcf00cd77ea","modified":1740250339828},{"_id":"source/avatar/avatar.gif","hash":"abc056c579344be57ea90a945708b7a900ac57dc","modified":1740250339829},{"_id":"source/about/index.md","hash":"0b4906a3a5688b8231eeaf91eed7dfda8f0ad333","modified":1740250339828},{"_id":"source/categories/index.md","hash":"e65aef2f4492e80f319d4aea80f2ed1f08d1439c","modified":1740250339833},{"_id":"source/image/logo.jpg","hash":"4e73a4d86c893a85ced6745a7eb9594afe023324","modified":1740250339899},{"_id":"source/tags/index.md","hash":"9b21736a74d3e921fb01f410a0275458fde1f0bb","modified":1740250339900},{"_id":"source/image/ssclient.png","hash":"aa002715a0a9e9c99ff722b42d0e0aa82ee332c7","modified":1740250339899},{"_id":"source/image/ReentrantLock/enq.png","hash":"d7102fa8cc2a855d75dd3d0181e73a504c4c348a","modified":1740250339834},{"_id":"source/image/ReentrantLock/抢占.png","hash":"9863214374b553ba96f86cc576322fff2ae3553b","modified":1740250339837},{"_id":"source/image/ReentrantLock/非公平模式下的加锁流程.png","hash":"dc983c9794058e3eb8b51b0497d9b5aa0acf226c","modified":1740250339839},{"_id":"source/image/ReentrantLock/解锁流程.png","hash":"633f57b9679ae7957344a9e7eddb02b2f541b697","modified":1740250339839},{"_id":"source/image/ReentrantLock/继承关系.png","hash":"53c925c1cd18594f3232a391876bdae175a17d41","modified":1740250339838},{"_id":"source/image/interview_prep/Adapter.png","hash":"a2f0de8c8fa8a5921f94b1272ffdcdc4287e4956","modified":1740250339882},{"_id":"source/image/interview_prep/AbstractFactory.png","hash":"9b588ed990d2c03db0abffd7fa4096b225ea41b5","modified":1740250339881},{"_id":"source/image/java/常量池中的String.png","hash":"cb44cd4729094ed736b22fdb1d7b3e6f6f9b6476","modified":1740250339898},{"_id":"source/image/interview_prep/Decorator.png","hash":"83a877471fe72425c853a001584b7f4d9b3b5702","modified":1740250339882},{"_id":"source/image/interview_prep/FactoryMethod.png","hash":"f468c76263de80760348873060a3685add74cde1","modified":1740250339883},{"_id":"source/image/interview_prep/Proxy.png","hash":"fc835ab05d0a938602eeb41d0eccab3c71343631","modified":1740250339887},{"_id":"source/image/interview_prep/Observer.png","hash":"33bbe2ea3cb6659ef7f320fbd9e25c232231f243","modified":1740250339886},{"_id":"source/image/interview_prep/collection.jpg","hash":"c5f77a40305917e96133fe23831dcdf5e891d76e","modified":1740250339892},{"_id":"source/image/interview_prep/TemplateMethod.png","hash":"9e1ae4de3d3425897ee8c905ae1096c1d338e619","modified":1740250339887},{"_id":"source/image/interview_prep/JVM/CMS.png","hash":"3bd364d98a3636fdc5587d8955a833ad980f2e5b","modified":1740250339884},{"_id":"source/image/interview_prep/JVM/serial.png","hash":"d5d9b5c0a694b9c45c271ed8a67e359fd3be3418","modified":1740250339886},{"_id":"source/image/interview_prep/JVM/parnew.png","hash":"320b617f8651706fc635e3dd2e6ab4d9b8c66fa2","modified":1740250339885},{"_id":"source/image/blog1.png","hash":"356f8a141bf1b938bb9a6a41be3266b21556da8e","modified":1740250339842},{"_id":"source/image/ReentrantLock/加入同步队列到成功获取锁的过程.png","hash":"40e2e4c3a542ed34a6f9731acdfb1a234c1c7bf9","modified":1740250339837},{"_id":"source/image/ReentrantLock/公平锁tryAcquire.png","hash":"b9cb4dd2edcd9d31dc33e284e9c54d521880b354","modified":1740250339835},{"_id":"source/image/interview_prep/java/aqc_ex.png","hash":"1f5a8f9b4231e28264693641b3d69801cbbc0e6a","modified":1740250339893},{"_id":"source/image/interview_prep/java/aqs_nano.png","hash":"f595a80da3312cae6b881ac14e511c56c3a5c582","modified":1740250339894},{"_id":"source/image/interview_prep/springmvc.png","hash":"f103f67ff659c1a1f6edb0ddbd9a400b2d0fb6a2","modified":1740250339898},{"_id":"source/image/interview_prep/jvm.jpg","hash":"e0f0f10da6b18d173990fb1422b34acdd1df1502","modified":1740250339896},{"_id":"source/image/background.jpeg","hash":"decc0f52130fa7514e0eacd7cba215267ce5280b","modified":1740250339841},{"_id":"source/avatar/avatar.png","hash":"9c4e0c02fa9ae09dcf0be9a744144edba7767477","modified":1740250339832},{"_id":"source/image/cover/3.jpg","hash":"c6faa8f30f389d4b1e3688501d55fe006818f1ab","modified":1740250339876},{"_id":"source/image/cover/4.jpg","hash":"356763da40b8e1d7d31ad3614866bf0f797f6a04","modified":1740250339878},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1585668906000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1585668906000},{"_id":"source/image/interview_prep/architecture.png","hash":"971ded565cb868a3c841d8c0fffa4b178494cb75","modified":1740250339890},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1585668906000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1585668906000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1585668906000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1585668906000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1585668906000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1585668906000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1585668906000},{"_id":"themes/next/_config.yml","hash":"9db5af9539c5b32976409d3bdb949b77f1eccc09","modified":1740323922133},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1585668906000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1585668906000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1585668906000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1585668906000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1585668906000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1585668906000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1585668906000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1585668906000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1585668906000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1585668906000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1585668906000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1585668906000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1585668906000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1585668906000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1585668906000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1585668906000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1585668906000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1585668906000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1585668906000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1585668906000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1585668906000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1585668906000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1585668906000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585668906000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1585668906000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585668906000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1585668906000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1585668906000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1585668906000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1585668906000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1585668906000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1585668906000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1585668906000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1585668906000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1585668906000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1585668906000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1585668906000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1585668906000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1585668906000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1585668906000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1585668906000},{"_id":"themes/next/languages/zh-CN.yml","hash":"1253d7cd44d226f6b45613714985ffa6fe4436d7","modified":1740320785215},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1585668906000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1585668906000},{"_id":"themes/next/layout/.DS_Store","hash":"1cf15f91963cc567f2f24c1ed5565cacc192287f","modified":1740311702588},{"_id":"themes/next/layout/_layout.swig","hash":"970b47dbb587eb6ff72869ef61755fdccc2deb37","modified":1740313288543},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1585668906000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1585668906000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1585668906000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1585668906000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1585668906000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1585668906000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1585668906000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1585668906000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1585668906000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1585668906000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1585668906000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1585668906000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1585668906000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1585668906000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1585668906000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"c4ec5822d644ddcedf2401837e6f6e6d3b63fbcd","modified":1585668906000},{"_id":"themes/next/layout/_macro/post.swig","hash":"71e4dc5a56cbc403d9785526f7719d824f4c8911","modified":1585668906000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1585668906000},{"_id":"themes/next/layout/_custom/custom.swig","hash":"a5b936d10c237f6d36f2e7f4ed0a9eab1fac89d3","modified":1740311429281},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1585668906000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"af2d688f688923080aaf8f20be33cfda629797ea","modified":1585668906000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1585668906000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1585668906000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1585668906000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1585668906000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1585668906000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1585668906000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1585668906000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1585668906000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1585668906000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1585668906000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1585668906000},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1585668906000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1585668906000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1585668906000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1585668906000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"22d77bd511fc7c1bbd12339d65004ed5bfb0713c","modified":1585668906000},{"_id":"themes/next/scripts/filters/post.js","hash":"d86849559ae54a4098aef4e2ab9dc8f99a1d186c","modified":1585668906000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1585668906000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1585668906000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1585668906000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1585668906000},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1585668906000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1585668906000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1585668906000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1585668906000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1585668906000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1585668906000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1585668906000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1585668906000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1585668906000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1585668906000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1585668906000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1585668906000},{"_id":"themes/next/source/css/_colors.styl","hash":"19c836f367977fb712b9868f3281ff5d757a8d5c","modified":1585668906000},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1585668906000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585668906000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585668906000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585668906000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585668906000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585668906000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585668906000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585668906000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585668906000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1585668906000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1585668906000},{"_id":"themes/next/source/js/.DS_Store","hash":"87ed68e935f54eddeeb2ad4a91aa2a4aee09edfa","modified":1740312993791},{"_id":"themes/next/source/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1585668906000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1585668906000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1585668906000},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1585668906000},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1585668906000},{"_id":"themes/next/source/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1585668906000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1585668906000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1585668906000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"958e097790551c9520426a1233add03515034f35","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1585668906000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1585668906000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"12cd9adb0c33adc484201f9e8a4e64ccf3011bae","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1585668906000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1585668906000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1585668906000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1585668906000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"ec20ff43845723e0ac2a245047c7a7e5aead6e88","modified":1585668906000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1585668906000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585668906000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585668906000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585668906000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585668906000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1585668906000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1585668906000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1585668906000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1585668906000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1585668906000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1585668906000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1585668906000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1585668906000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1585668906000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1585668906000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1585668906000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1585668906000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1585668906000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1585668906000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1585668906000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1585668906000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1585668906000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1585668906000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"799fdf4f258a51d45d1e2b02fb59b337e46b5b3c","modified":1585668906000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1585668906000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1585668906000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dae390efcb5da9c021ad7f25fe2d39ff36938cc6","modified":1585668906000},{"_id":"themes/next/source/js/my_js/clicklove.js","hash":"b9086043cb741b546da440c8ec8751454e8d7a49","modified":1740312973567},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1585668906000},{"_id":"themes/next/source/js/my_js/love.js","hash":"d0f622c2284c7645f05cc559e0d65f2d91218203","modified":1740250340075},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1585668906000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585668906000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"220da37051ed5dac9cf7bd126451f6aba4f94d21","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"5e644b1303ab6dcd1b65ee0fd6b91309b04ce64d","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1740323267791},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"89f76380091f1be49936c69bac02e984dae5ff87","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"66211794e4ed47e779ca81150cef588e0b4f2fc5","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1585668906000},{"_id":"source/image/cover/1.jpg","hash":"710a968926c1fb7f255dc8f005478c8ec134a1b5","modified":1740250339854},{"_id":"source/image/cover/2.jpg","hash":"e92ca6a48ce19d72930c4ede040a75d5246f0c41","modified":1740250339872},{"_id":"source/.DS_Store","hash":"86ad29707a212d6f0d976c8899843ae8513eaf6b","modified":1740322071597},{"_id":"public/search.xml","hash":"6d622f1e6b8839d7877b16a585131d594836959a","modified":1740326577716},{"_id":"public/about/index.html","hash":"7dfcc4aae5186117d2a10f5f6eca61d0ff944510","modified":1740325770433},{"_id":"public/categories/index.html","hash":"fc397299d3219d44e86cd8f1762ea08406fad23b","modified":1740325770433},{"_id":"public/tags/index.html","hash":"37ba072b7adcccd0095644f1e1b39f8840db7cc2","modified":1740325770433},{"_id":"public/2025/02/23/hexo 踩坑实录/index.html","hash":"0f6ed742594e5a1e11cb592204d76bef22b50e02","modified":1740326577716},{"_id":"public/2019/10/12/jdk代理/index.html","hash":"6a6667f184e7fac5cb1b066179c218e47172f67d","modified":1740325770433},{"_id":"public/2019/07/01/操作系统/index.html","hash":"1225114051e8a2f52e90d941ae3e139aea3397fa","modified":1740325770433},{"_id":"public/2019/06/27/CopyOnWriteArrayList和CopyOnWriteArraySet/index.html","hash":"70e426bd9b45230e84e820b91a0b4c1f6184991f","modified":1740325770433},{"_id":"public/2019/06/25/Java常见基础知识汇总/index.html","hash":"a8be03f32b4173437bce6a498c6aaaee813062ee","modified":1740325770433},{"_id":"public/2019/06/25/centos7安装nginx/index.html","hash":"9caebba129fa571553ab49e1ff185c6ce87dd3f5","modified":1740325770433},{"_id":"public/2019/06/21/CAS和concurrent.atomic/index.html","hash":"d666ebe40208b814b86ce85307c2e88fc7d304fa","modified":1740325770433},{"_id":"public/2019/06/20/ConcurrentHashMap/index.html","hash":"d82728e74389f86552b12f08e5a5fe4264a0ad1a","modified":1740325770433},{"_id":"public/2019/06/13/ReentrantLock-重入锁-的源码解析/index.html","hash":"84ee41665969200941408a110cd4a986dae9632d","modified":1740325770433},{"_id":"public/2019/05/11/队列同步器/index.html","hash":"16dae8a155e496f15b7cbcf34d5c582046d8046f","modified":1740325770433},{"_id":"public/2019/04/16/GC相关/index.html","hash":"82f711731bad9dbe0cf40d39b1bace3b8f6adc2f","modified":1740325770433},{"_id":"public/2019/03/30/数据库知识整理/index.html","hash":"712ee2f71e145f6e07dd170be7d4b505570dd355","modified":1740325770433},{"_id":"public/2019/04/15/JVM内存模型和对象/index.html","hash":"e73ecc4e15bfbd24a33f3b831ed3bbe50d0af72b","modified":1740325770433},{"_id":"public/2019/03/29/Spring知识总结整理/index.html","hash":"a74a75030e60488332c627d024676d038423f303","modified":1740325770433},{"_id":"public/2019/03/28/常用设计模式/index.html","hash":"19a5ba356962e5cbe6adfbb1ee599f7d5b2b4b41","modified":1740325770433},{"_id":"public/2019/03/27/java集合总结/index.html","hash":"871df0df6e8d3a94a199052b2cacbc0d03bab9e1","modified":1740325770433},{"_id":"public/2019/03/26/计算机网络/index.html","hash":"ad834855f9c594acc7f6d100be20f95586d4fab1","modified":1740325770433},{"_id":"public/2019/03/24/数据库事务/index.html","hash":"031ad078089ea94e29d8b3fceeb7e6a2abd02b13","modified":1740325770433},{"_id":"public/2019/03/24/数据库其他知识/index.html","hash":"1a341757f8917ca2dbdff1e8ca422029da1711eb","modified":1740325770433},{"_id":"public/2019/03/25/常用排序算法-java实现/index.html","hash":"a35d2bc02cbddb845566cef451cefe47452927b1","modified":1740325770433},{"_id":"public/2019/03/23/剑指offer算法题 27-36/index.html","hash":"fca21cf62dbbdda655a678bce9e9b0921e96b6bf","modified":1740325770433},{"_id":"public/2019/03/24/hexo换电脑要做的/index.html","hash":"744fad2d68ec96a3281b05097146cfda68ae642b","modified":1740325770433},{"_id":"public/2019/03/22/数据库范式/index.html","hash":"ead04a197dc24dfae11d8f3ae3ce54609fb947e6","modified":1740325770433},{"_id":"public/2019/03/22/数据库索引/index.html","hash":"df0bb8613adef80e72277d7a73e1f70452dd166f","modified":1740325770433},{"_id":"public/2019/03/21/剑指offer算法题 3-26/index.html","hash":"6a8394de3f3b10c3db1dafcb89120b561e3f1e19","modified":1740325770433},{"_id":"public/2018/09/21/搭建ShadowSocks/index.html","hash":"51839162f48599e32bd0423dbd66d2e43b90839d","modified":1740325770433},{"_id":"public/2018/07/20/文件夹中右键打开命令行窗口/index.html","hash":"f699b263c0263796746a9cef0b86f4fc04829389","modified":1740325770433},{"_id":"public/2018/01/09/微信跳一跳python脚本/index.html","hash":"be081ea7c38e3e6360cb84f69abf7885b48332c2","modified":1740325770433},{"_id":"public/2017/12/12/Lambda序列化问题/index.html","hash":"70761bec1393663b8829a2b9c985e8c6e66258e2","modified":1740325770433},{"_id":"public/2017/11/30/ScrapyDemo/index.html","hash":"7c08e3d387306945931c2894430270a85786a5e4","modified":1740325770433},{"_id":"public/2017/11/22/Hexo-nexT玩法/index.html","hash":"9a8466394983393bc903f25f80642b07d2e5e4be","modified":1740325770433},{"_id":"public/books/index.html","hash":"d9c0fd8f6abc4af79ce8dcddda2f76fc3cd11e35","modified":1740325770433},{"_id":"public/songs/index.html","hash":"b33b4f077f6d65f31e1d0236b217661b1718279a","modified":1740325770433},{"_id":"public/movies/index.html","hash":"13b159f876527e026951b81e73eaca9ee24290bc","modified":1740325770433},{"_id":"public/games/index.html","hash":"da8b472cb92ceb5d46b128500dffff8e7aa81853","modified":1740325770433},{"_id":"public/archives/index.html","hash":"2de9d823219f247c737ff2e5440640cb0a12a69d","modified":1740325770433},{"_id":"public/archives/page/2/index.html","hash":"8ff96ce83622b6447f78708fbfaa46ee8c37076c","modified":1740325770433},{"_id":"public/archives/page/3/index.html","hash":"1ad908ef4482b5fb55a0ef14deace8ef0106fda4","modified":1740325770433},{"_id":"public/archives/page/4/index.html","hash":"39596b58a1d4878ec9445cf56e22ccb88a327dc6","modified":1740325770433},{"_id":"public/archives/2017/index.html","hash":"95f4e0a6e2eb6fa35a78d2cc0414b89fe541a1e3","modified":1740325770433},{"_id":"public/archives/2017/11/index.html","hash":"61bae1be741fa224f0bb4559f9262f8310744887","modified":1740325770433},{"_id":"public/archives/2017/12/index.html","hash":"d2f5e3304e51c4668067df2ebb0d8c0b4d032a0f","modified":1740325770433},{"_id":"public/archives/2018/index.html","hash":"ed309161f835d6f511b73fe453c95d04b440a7bc","modified":1740325770433},{"_id":"public/archives/2018/01/index.html","hash":"d73f8f46a380965c97913ab7c57b812449bff143","modified":1740325770433},{"_id":"public/archives/2018/07/index.html","hash":"aee674a191900ed9ee7780a3e5f0fba131d980a4","modified":1740325770433},{"_id":"public/archives/2018/09/index.html","hash":"3eb31eb71dc765fcd5e093b4cf4891bd4dea4d98","modified":1740325770433},{"_id":"public/archives/2019/index.html","hash":"fff6dd793b5a589bf820a989595c559093c2d625","modified":1740325770433},{"_id":"public/archives/2019/page/2/index.html","hash":"cd2a2a5af9a1a76bf516a0f1bcb80e8a3f30529f","modified":1740325770433},{"_id":"public/archives/2019/page/3/index.html","hash":"9d8f7049a5ee0eab05fc55c0ba6a3cb4c2112fcb","modified":1740325770433},{"_id":"public/archives/2019/03/index.html","hash":"e7ab85695ca3fa3db3f31576b75fa6864c84825a","modified":1740325770433},{"_id":"public/archives/2019/03/page/2/index.html","hash":"35b1abe0793777b5c43eb29dc2c64e2c20eac625","modified":1740325770433},{"_id":"public/archives/2019/04/index.html","hash":"3fa1d80700ef35aa78e1ac60ee32c098f409023b","modified":1740325770433},{"_id":"public/archives/2019/05/index.html","hash":"4b444dfd309fcb8bb461b4861b34fd128c2e08bb","modified":1740325770433},{"_id":"public/archives/2019/06/index.html","hash":"ffc99b103d4719fff4d892a8860a8f35cd868e2d","modified":1740325770433},{"_id":"public/archives/2019/07/index.html","hash":"230fbbdd3e729d41acbe73c33a33577e15ebe793","modified":1740325770433},{"_id":"public/archives/2019/10/index.html","hash":"d283e77d5b630dc8185c4acd03f5039ff07efd38","modified":1740325770433},{"_id":"public/archives/2025/index.html","hash":"c2f9860f564fe35badbf7e009d3b26837935caf0","modified":1740325770433},{"_id":"public/archives/2025/02/index.html","hash":"2778d6c0a5feb5a5094e325cc219ca4c5fb226d0","modified":1740325770433},{"_id":"public/categories/面试/index.html","hash":"4f13e4e15820638e5d1b15dc66e9daf757fbcdef","modified":1740325770433},{"_id":"public/categories/面试/page/2/index.html","hash":"43b9f1bc7793ff6307695b1a370f8a93e002df38","modified":1740325770433},{"_id":"public/categories/Java/index.html","hash":"9c94c23ae7487621c60d7190b5e23905252b4c7c","modified":1740325770433},{"_id":"public/categories/面试/JVM/index.html","hash":"632684df6dfac38e2c49f84e715137a3512b4d44","modified":1740325770433},{"_id":"public/categories/面试/Java/index.html","hash":"c5d8fd42230b74fabbaba4e7d898b275dd86c3a4","modified":1740325770433},{"_id":"public/categories/Hexo/index.html","hash":"507a74c02bb6bda31c0468bcc82661ccbad265ab","modified":1740325770433},{"_id":"public/categories/Lambda表达式/index.html","hash":"bd62da0a427b6f49813d3fbfde9767c27ee6e3df","modified":1740325770433},{"_id":"public/categories/爬虫/index.html","hash":"88c570ae02f168f478838abc2670f7f000ff1ebd","modified":1740325770433},{"_id":"public/categories/面试/Spring/index.html","hash":"8aa9c6e4c73c05d6418d278274596e9fc4da1040","modified":1740325770433},{"_id":"public/categories/Nginx/index.html","hash":"ea438b4b459f07b0a00e3437ba98d3ff6c6bda86","modified":1740325770433},{"_id":"public/categories/面试/算法题/index.html","hash":"35667912988d10c60a306d2e85798efe4943d601","modified":1740325770433},{"_id":"public/categories/面试/设计模式/index.html","hash":"a5227df77ff42aa2d7bf486de6d543def760c509","modified":1740325770433},{"_id":"public/categories/Python/index.html","hash":"637b90d46969fa539c9019e6d836e8174e9ccaf5","modified":1740325770433},{"_id":"public/categories/科学上网/index.html","hash":"e79e1eddea0196fa82427265e3ce64c8f33897fc","modified":1740325770433},{"_id":"public/categories/面试/数据库/index.html","hash":"dba3498abc2f32a1f4472d15aca0e93c87a6f746","modified":1740325770433},{"_id":"public/categories/Windows-tips/index.html","hash":"1793fc998b02dac479e01d1e552f822d1b010db5","modified":1740325770433},{"_id":"public/categories/面试/Java/锁/index.html","hash":"42d6ccddc2da3201b5dcb22519d2da8ba4753a3d","modified":1740325770433},{"_id":"public/index.html","hash":"bcb9fb5ba66446fbf9bedc66f6431f9d60fe5d32","modified":1740326577716},{"_id":"public/page/2/index.html","hash":"76c3a871ce63031f072ac62cd41ef0adab920ea2","modified":1740325770433},{"_id":"public/page/3/index.html","hash":"7b7f57fba7e4ece345ddc235c6de95a89e0fa9f4","modified":1740325770433},{"_id":"public/page/4/index.html","hash":"b69b74435c8586601078f4a3cf6a5b5d9b3e8034","modified":1740325770433},{"_id":"public/tags/面试/index.html","hash":"2b80438be04e36091296b8271da95316dfc6bbdf","modified":1740325770433},{"_id":"public/tags/面试/page/2/index.html","hash":"5342cbc139ac3921229f48216a65aef80dcad11e","modified":1740325770433},{"_id":"public/tags/Java/index.html","hash":"f96a2685ff969d7dd69cc76a1eb210be27bd0e2e","modified":1740325770433},{"_id":"public/tags/并发编程/index.html","hash":"fc5c809c754a7dae8ce043ad9360f8070b76b594","modified":1740325770433},{"_id":"public/tags/JVM/index.html","hash":"4c0651380f601a62a2da786d36119385dcae3547","modified":1740325770433},{"_id":"public/tags/Hexo/index.html","hash":"6dad91025cb61e58edd8113a370bc6a7d3e47883","modified":1740325770433},{"_id":"public/tags/Python/index.html","hash":"b034684e0a1c0ef6a99555262fa8fe92ec7bf1c4","modified":1740325770433},{"_id":"public/tags/scrapy/index.html","hash":"d099464ab39a62b5210816a8c0987a754b05994c","modified":1740325770433},{"_id":"public/tags/Spring/index.html","hash":"8f77a0d17c24e951ce5907078dc61f59d445b188","modified":1740325770433},{"_id":"public/tags/Nginx/index.html","hash":"0f87404c7dd61f49c9b5d5f81cc26d0dd7a09699","modified":1740325770433},{"_id":"public/tags/刷题/index.html","hash":"58cb12a9823f0c288ee246d568ef9886e2d310ad","modified":1740325770433},{"_id":"public/tags/设计模式/index.html","hash":"b0267fb03bee10eafff34daf7f142c627c1078e5","modified":1740325770433},{"_id":"public/tags/ShadowSocks/index.html","hash":"23f0ce197d60d26d6f1388c758888fda70d5f433","modified":1740325770433},{"_id":"public/tags/数据库/index.html","hash":"e830384d761d2164d3bbe6fa9b8e79c386876afa","modified":1740325770433},{"_id":"public/tags/tips/index.html","hash":"f1137d57bb7a1c812d2e4f3bacc388a01b718122","modified":1740325770433},{"_id":"public/tags/锁/index.html","hash":"b7f5ee0ba8d2fa006b1539844497c18f925e2ade","modified":1740325770433},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1740325770433},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1740325770433},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1740325770433},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1740325770433},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1740325770433},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1740325770433},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1740325770433},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1740325770433},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1740325770433},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1740325770433},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1740325770433},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1740325770433},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1740325770433},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1740325770433},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1740325770433},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1740325770433},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1740325770433},{"_id":"public/avatar/avatar.gif","hash":"abc056c579344be57ea90a945708b7a900ac57dc","modified":1740325770433},{"_id":"public/image/ssclient.png","hash":"aa002715a0a9e9c99ff722b42d0e0aa82ee332c7","modified":1740325770433},{"_id":"public/image/ReentrantLock/enq.png","hash":"d7102fa8cc2a855d75dd3d0181e73a504c4c348a","modified":1740325770433},{"_id":"public/image/logo.jpg","hash":"4e73a4d86c893a85ced6745a7eb9594afe023324","modified":1740325770433},{"_id":"public/image/ReentrantLock/继承关系.png","hash":"53c925c1cd18594f3232a391876bdae175a17d41","modified":1740325770433},{"_id":"public/image/ReentrantLock/抢占.png","hash":"9863214374b553ba96f86cc576322fff2ae3553b","modified":1740325770433},{"_id":"public/image/ReentrantLock/非公平模式下的加锁流程.png","hash":"dc983c9794058e3eb8b51b0497d9b5aa0acf226c","modified":1740325770433},{"_id":"public/image/ReentrantLock/解锁流程.png","hash":"633f57b9679ae7957344a9e7eddb02b2f541b697","modified":1740325770433},{"_id":"public/image/java/常量池中的String.png","hash":"cb44cd4729094ed736b22fdb1d7b3e6f6f9b6476","modified":1740325770433},{"_id":"public/image/interview_prep/AbstractFactory.png","hash":"9b588ed990d2c03db0abffd7fa4096b225ea41b5","modified":1740325770433},{"_id":"public/image/interview_prep/Adapter.png","hash":"a2f0de8c8fa8a5921f94b1272ffdcdc4287e4956","modified":1740325770433},{"_id":"public/image/interview_prep/FactoryMethod.png","hash":"f468c76263de80760348873060a3685add74cde1","modified":1740325770433},{"_id":"public/image/interview_prep/Observer.png","hash":"33bbe2ea3cb6659ef7f320fbd9e25c232231f243","modified":1740325770433},{"_id":"public/image/interview_prep/Decorator.png","hash":"83a877471fe72425c853a001584b7f4d9b3b5702","modified":1740325770433},{"_id":"public/image/interview_prep/TemplateMethod.png","hash":"9e1ae4de3d3425897ee8c905ae1096c1d338e619","modified":1740325770433},{"_id":"public/image/interview_prep/Proxy.png","hash":"fc835ab05d0a938602eeb41d0eccab3c71343631","modified":1740325770433},{"_id":"public/image/interview_prep/collection.jpg","hash":"c5f77a40305917e96133fe23831dcdf5e891d76e","modified":1740325770433},{"_id":"public/image/interview_prep/JVM/serial.png","hash":"d5d9b5c0a694b9c45c271ed8a67e359fd3be3418","modified":1740325770433},{"_id":"public/image/interview_prep/JVM/CMS.png","hash":"3bd364d98a3636fdc5587d8955a833ad980f2e5b","modified":1740325770433},{"_id":"public/image/interview_prep/JVM/parnew.png","hash":"320b617f8651706fc635e3dd2e6ab4d9b8c66fa2","modified":1740325770433},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1740325770433},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1740325770433},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1740325770433},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1740325770433},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1740325770433},{"_id":"public/image/blog1.png","hash":"356f8a141bf1b938bb9a6a41be3266b21556da8e","modified":1740325770433},{"_id":"public/image/ReentrantLock/加入同步队列到成功获取锁的过程.png","hash":"40e2e4c3a542ed34a6f9731acdfb1a234c1c7bf9","modified":1740325770433},{"_id":"public/image/ReentrantLock/公平锁tryAcquire.png","hash":"b9cb4dd2edcd9d31dc33e284e9c54d521880b354","modified":1740325770433},{"_id":"public/image/interview_prep/java/aqc_ex.png","hash":"1f5a8f9b4231e28264693641b3d69801cbbc0e6a","modified":1740325770433},{"_id":"public/image/interview_prep/java/aqs_nano.png","hash":"f595a80da3312cae6b881ac14e511c56c3a5c582","modified":1740325770433},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1740325770433},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1740325770433},{"_id":"public/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1740325770433},{"_id":"public/css/main.css","hash":"7af1fd74368eae33a144aebb9872ca506fc8476e","modified":1740325770433},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1740325770433},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1740325770433},{"_id":"public/js/my_js/clicklove.js","hash":"b9086043cb741b546da440c8ec8751454e8d7a49","modified":1740325770433},{"_id":"public/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1740325770433},{"_id":"public/js/my_js/love.js","hash":"d0f622c2284c7645f05cc559e0d65f2d91218203","modified":1740325770433},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1740325770433},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1740325770433},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1740325770433},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1740325770433},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1740325770433},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1740325770433},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1740325770433},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1740325770433},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1740325770433},{"_id":"public/image/interview_prep/springmvc.png","hash":"f103f67ff659c1a1f6edb0ddbd9a400b2d0fb6a2","modified":1740325770433},{"_id":"public/image/interview_prep/jvm.jpg","hash":"e0f0f10da6b18d173990fb1422b34acdd1df1502","modified":1740325770433},{"_id":"public/image/background.jpeg","hash":"decc0f52130fa7514e0eacd7cba215267ce5280b","modified":1740325770433},{"_id":"public/avatar/avatar.png","hash":"9c4e0c02fa9ae09dcf0be9a744144edba7767477","modified":1740325770433},{"_id":"public/image/cover/4.jpg","hash":"356763da40b8e1d7d31ad3614866bf0f797f6a04","modified":1740325770433},{"_id":"public/image/cover/3.jpg","hash":"c6faa8f30f389d4b1e3688501d55fe006818f1ab","modified":1740325770433},{"_id":"public/image/interview_prep/architecture.png","hash":"971ded565cb868a3c841d8c0fffa4b178494cb75","modified":1740325770433},{"_id":"public/image/cover/1.jpg","hash":"710a968926c1fb7f255dc8f005478c8ec134a1b5","modified":1740325770433},{"_id":"public/image/cover/2.jpg","hash":"e92ca6a48ce19d72930c4ede040a75d5246f0c41","modified":1740325770433}],"Category":[{"name":"面试","_id":"cm7hqj8ac0004v00189hr1kx7"},{"name":"Java","_id":"cm7hqj8aj000ev001eepufku2"},{"name":"JVM","parent":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8am000kv00189485dj4"},{"name":"Java","parent":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8ao000sv00104aj4a5b"},{"name":"Hexo","_id":"cm7hqj8ar0010v0010zgybugh"},{"name":"Lambda表达式","_id":"cm7hqj8az001uv001elpmhdzn"},{"name":"爬虫","_id":"cm7hqj8b10024v0015259e9tg"},{"name":"Spring","parent":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b3002dv0018ekr7ui4"},{"name":"Nginx","_id":"cm7hqj8b5002lv001hcxy9cqe"},{"name":"算法题","parent":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b80035v001dz0jbtt9"},{"name":"设计模式","parent":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b9003hv001b6d45ad4"},{"name":"Python","_id":"cm7hqj8ba003pv001hpwxcqb9"},{"name":"科学上网","_id":"cm7hqj8bb003vv001d1yibcqc"},{"name":"数据库","parent":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8bb0041v0014byfe1ab"},{"name":"Windows tips","_id":"cm7hqj8bg004qv001655q65dk"},{"name":"锁","parent":"cm7hqj8ao000sv00104aj4a5b","_id":"cm7hqj8bi004xv001288cciu6"}],"Data":[],"Page":[{"title":"","date":"2017-11-22T07:16:20.000Z","_content":"\n## 关于我\n\n~~搞事~~\n\n重新开始更新了\n\n\n\n\n博客搭建采用Hexo+NexT.Mist主题\n\n联系方式：\nEmail:cherry_wangk@163.com\n","source":"about/index.md","raw":"---\ntitle: \ndate: 2017-11-22 15:16:20\n---\n\n## 关于我\n\n~~搞事~~\n\n重新开始更新了\n\n\n\n\n博客搭建采用Hexo+NexT.Mist主题\n\n联系方式：\nEmail:cherry_wangk@163.com\n","updated":"2025-02-22T18:52:19.828Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm7hqj8a30000v001e9wv6c8s","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p><del>搞事</del></p>\n<p>重新开始更新了</p>\n<p>博客搭建采用Hexo+NexT.Mist主题</p>\n<p>联系方式：<br>Email:<a href=\"mailto:&#99;&#x68;&#101;&#x72;&#114;&#x79;&#95;&#x77;&#x61;&#110;&#103;&#x6b;&#x40;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;\">&#99;&#x68;&#101;&#x72;&#114;&#x79;&#95;&#x77;&#x61;&#110;&#103;&#x6b;&#x40;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n","length":162,"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p><del>搞事</del></p>\n<p>重新开始更新了</p>\n<p>博客搭建采用Hexo+NexT.Mist主题</p>\n<p>联系方式：<br>Email:<a href=\"mailto:&#99;&#x68;&#101;&#x72;&#114;&#x79;&#95;&#x77;&#x61;&#110;&#103;&#x6b;&#x40;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;\">&#99;&#x68;&#101;&#x72;&#114;&#x79;&#95;&#x77;&#x61;&#110;&#103;&#x6b;&#x40;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n"},{"title":"categories","date":"2017-11-22T07:39:22.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-11-22 15:39:22\ntype: \"categories\"\n---\n","updated":"2025-02-22T18:52:19.833Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm7hqj8a90002v0017060h152","content":"","length":0,"excerpt":"","more":""},{"title":"tags","date":"2017-11-22T07:14:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-11-22 15:14:03\ntype: \"tags\"\n---\n","updated":"2025-02-22T18:52:19.900Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm7hqj8ae0006v0019w8pbk8y","content":"","length":0,"excerpt":"","more":""}],"Post":[{"title":"CAS和concurrent.atomic","date":"2019-06-21T13:13:16.000Z","photos":["https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true"],"description":"CAS和并发包中的原子操作类(Atomic系列)","_content":"\n# CAS和concurrent.atomic\n\n<https://www.jianshu.com/p/a897c4b8929f>\n\n<https://blog.csdn.net/javazejian/article/details/72772470>\n\n## CAS\n\n**CAS,compare and swap比较并替换。 CAS有三个参数：需要读写的内存位值（V）、进行比较的预期原值（A）和拟写入的新值(B)。当且仅当V的值等于A时，CAS才会通过原子方式用新值B来更新V的值，否则不会执行任何操作。**\n\nCAS是一项乐观的技术，它希望能成功地执行更新操作，并且如果有另一个线程在最近一次检查后更新了该变量，那么CAS能检测到这个错误。当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其他线程都将失败。但是，失败的线程并不会被挂起（这就是与获取锁的机制不同之处），而是被告知在这次竞争中失败，并可以多次尝试。这种灵活性就大大减少了与锁相关的活跃性风险。\n\n## 并发包中的原子操作类(Atomic系列)\n\n原子更新基本类型主要包括3个类：\n\n- AtomicBoolean：原子更新布尔类型\n- AtomicInteger：原子更新整型\n- AtomicLong：原子更新长整型\n\n\n\n```JAVA\npublic class AtomicInteger extends Number implements java.io.Serializable {\n    private static final long serialVersionUID = 6214790243416807050L;\n\n    // 获取指针类Unsafe\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n\n    //下述变量value在AtomicInteger实例对象内的内存偏移量\n    private static final long valueOffset;\n\n    static {\n        try {\n           //通过unsafe类的objectFieldOffset()方法，获取value变量在对象内存中的偏移\n           //通过该偏移量valueOffset，unsafe类的内部方法可以获取到变量value对其进行取值或赋值操作\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicInteger.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n   //当前AtomicInteger封装的int变量value\n    private volatile int value;\n\n    public AtomicInteger(int initialValue) {\n        value = initialValue;\n    }\n    public AtomicInteger() {\n    }\n   //获取当前最新值，\n    public final int get() {\n        return value;\n    }\n    //设置当前值，具备volatile效果，方法用final修饰是为了更进一步的保证线程安全。\n    public final void set(int newValue) {\n        value = newValue;\n    }\n    //最终会设置成newValue，使用该方法后可能导致其他线程在之后的一小段时间内可以获取到旧值，有点类似于延迟加载\n    public final void lazySet(int newValue) {\n        unsafe.putOrderedInt(this, valueOffset, newValue);\n    }\n   //设置新值并获取旧值，底层调用的是CAS操作即unsafe.compareAndSwapInt()方法\n    public final int getAndSet(int newValue) {\n        return unsafe.getAndSetInt(this, valueOffset, newValue);\n    }\n   //如果当前值为expect，则设置为update(当前值指的是value变量)\n    public final boolean compareAndSet(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n    }\n    //当前值加1返回旧值，底层CAS操作\n    public final int getAndIncrement() {\n        return unsafe.getAndAddInt(this, valueOffset, 1);\n    }\n    //当前值减1，返回旧值，底层CAS操作\n    public final int getAndDecrement() {\n        return unsafe.getAndAddInt(this, valueOffset, -1);\n    }\n   //当前值增加delta，返回旧值，底层CAS操作\n    public final int getAndAdd(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta);\n    }\n    //当前值加1，返回新值，底层CAS操作\n    public final int incrementAndGet() {\n        return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n    }\n    //当前值减1，返回新值，底层CAS操作\n    public final int decrementAndGet() {\n        return unsafe.getAndAddInt(this, valueOffset, -1) - 1;\n    }\n   //当前值增加delta，返回新值，底层CAS操作\n    public final int addAndGet(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta) + delta;\n    }\n   //省略一些不常用的方法....\n}\n\n```\n\n\n通过上述的分析，可以发现AtomicInteger原子类的内部几乎是基于前面分析过Unsafe类中的CAS相关操作的方法实现的，这也同时证明AtomicInteger是基于无锁实现的，这里重点分析自增操作实现过程，其他方法自增实现原理一样。\n\n我们发现AtomicInteger类中所有自增或自减的方法都间接调用Unsafe类中的getAndAddInt()方法实现了CAS操作，从而保证了线程安全，关于getAndAddInt其实前面已分析过，它是Unsafe类中1.8新增的方法，源码如下\n\n```JAVA\n//Unsafe类中的getAndAddInt方法\npublic final int getAndAddInt(Object o, long offset, int delta) {\n        int v;\n        do {\n            v = getIntVolatile(o, offset);\n        } while (!compareAndSwapInt(o, offset, v, v + delta));\n        return v;\n }\n```\n\n\n​    \n\n---------------------","source":"_posts/CAS和concurrent.atomic.md","raw":"---\ntitle: CAS和concurrent.atomic\ndate: 2019-6-21 21:13:16\ntags: [面试,Java]\ncategories: [面试,Java]\nphotos:\n  - \"https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true\"\ndescription: CAS和并发包中的原子操作类(Atomic系列)\n---\n\n# CAS和concurrent.atomic\n\n<https://www.jianshu.com/p/a897c4b8929f>\n\n<https://blog.csdn.net/javazejian/article/details/72772470>\n\n## CAS\n\n**CAS,compare and swap比较并替换。 CAS有三个参数：需要读写的内存位值（V）、进行比较的预期原值（A）和拟写入的新值(B)。当且仅当V的值等于A时，CAS才会通过原子方式用新值B来更新V的值，否则不会执行任何操作。**\n\nCAS是一项乐观的技术，它希望能成功地执行更新操作，并且如果有另一个线程在最近一次检查后更新了该变量，那么CAS能检测到这个错误。当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其他线程都将失败。但是，失败的线程并不会被挂起（这就是与获取锁的机制不同之处），而是被告知在这次竞争中失败，并可以多次尝试。这种灵活性就大大减少了与锁相关的活跃性风险。\n\n## 并发包中的原子操作类(Atomic系列)\n\n原子更新基本类型主要包括3个类：\n\n- AtomicBoolean：原子更新布尔类型\n- AtomicInteger：原子更新整型\n- AtomicLong：原子更新长整型\n\n\n\n```JAVA\npublic class AtomicInteger extends Number implements java.io.Serializable {\n    private static final long serialVersionUID = 6214790243416807050L;\n\n    // 获取指针类Unsafe\n    private static final Unsafe unsafe = Unsafe.getUnsafe();\n\n    //下述变量value在AtomicInteger实例对象内的内存偏移量\n    private static final long valueOffset;\n\n    static {\n        try {\n           //通过unsafe类的objectFieldOffset()方法，获取value变量在对象内存中的偏移\n           //通过该偏移量valueOffset，unsafe类的内部方法可以获取到变量value对其进行取值或赋值操作\n            valueOffset = unsafe.objectFieldOffset\n                (AtomicInteger.class.getDeclaredField(\"value\"));\n        } catch (Exception ex) { throw new Error(ex); }\n    }\n   //当前AtomicInteger封装的int变量value\n    private volatile int value;\n\n    public AtomicInteger(int initialValue) {\n        value = initialValue;\n    }\n    public AtomicInteger() {\n    }\n   //获取当前最新值，\n    public final int get() {\n        return value;\n    }\n    //设置当前值，具备volatile效果，方法用final修饰是为了更进一步的保证线程安全。\n    public final void set(int newValue) {\n        value = newValue;\n    }\n    //最终会设置成newValue，使用该方法后可能导致其他线程在之后的一小段时间内可以获取到旧值，有点类似于延迟加载\n    public final void lazySet(int newValue) {\n        unsafe.putOrderedInt(this, valueOffset, newValue);\n    }\n   //设置新值并获取旧值，底层调用的是CAS操作即unsafe.compareAndSwapInt()方法\n    public final int getAndSet(int newValue) {\n        return unsafe.getAndSetInt(this, valueOffset, newValue);\n    }\n   //如果当前值为expect，则设置为update(当前值指的是value变量)\n    public final boolean compareAndSet(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n    }\n    //当前值加1返回旧值，底层CAS操作\n    public final int getAndIncrement() {\n        return unsafe.getAndAddInt(this, valueOffset, 1);\n    }\n    //当前值减1，返回旧值，底层CAS操作\n    public final int getAndDecrement() {\n        return unsafe.getAndAddInt(this, valueOffset, -1);\n    }\n   //当前值增加delta，返回旧值，底层CAS操作\n    public final int getAndAdd(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta);\n    }\n    //当前值加1，返回新值，底层CAS操作\n    public final int incrementAndGet() {\n        return unsafe.getAndAddInt(this, valueOffset, 1) + 1;\n    }\n    //当前值减1，返回新值，底层CAS操作\n    public final int decrementAndGet() {\n        return unsafe.getAndAddInt(this, valueOffset, -1) - 1;\n    }\n   //当前值增加delta，返回新值，底层CAS操作\n    public final int addAndGet(int delta) {\n        return unsafe.getAndAddInt(this, valueOffset, delta) + delta;\n    }\n   //省略一些不常用的方法....\n}\n\n```\n\n\n通过上述的分析，可以发现AtomicInteger原子类的内部几乎是基于前面分析过Unsafe类中的CAS相关操作的方法实现的，这也同时证明AtomicInteger是基于无锁实现的，这里重点分析自增操作实现过程，其他方法自增实现原理一样。\n\n我们发现AtomicInteger类中所有自增或自减的方法都间接调用Unsafe类中的getAndAddInt()方法实现了CAS操作，从而保证了线程安全，关于getAndAddInt其实前面已分析过，它是Unsafe类中1.8新增的方法，源码如下\n\n```JAVA\n//Unsafe类中的getAndAddInt方法\npublic final int getAndAddInt(Object o, long offset, int delta) {\n        int v;\n        do {\n            v = getIntVolatile(o, offset);\n        } while (!compareAndSwapInt(o, offset, v, v + delta));\n        return v;\n }\n```\n\n\n​    \n\n---------------------","slug":"CAS和concurrent.atomic","published":1,"updated":"2025-02-22T18:52:19.815Z","comments":1,"layout":"post","_id":"cm7hqj8a60001v0012bemdjk9","content":"<h1 id=\"CAS和concurrent-atomic\"><a href=\"#CAS和concurrent-atomic\" class=\"headerlink\" title=\"CAS和concurrent.atomic\"></a>CAS和concurrent.atomic</h1><p><a href=\"https://www.jianshu.com/p/a897c4b8929f\">https://www.jianshu.com/p/a897c4b8929f</a></p>\n<p><a href=\"https://blog.csdn.net/javazejian/article/details/72772470\">https://blog.csdn.net/javazejian/article/details/72772470</a></p>\n<h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h2><p><strong>CAS,compare and swap比较并替换。 CAS有三个参数：需要读写的内存位值（V）、进行比较的预期原值（A）和拟写入的新值(B)。当且仅当V的值等于A时，CAS才会通过原子方式用新值B来更新V的值，否则不会执行任何操作。</strong></p>\n<p>CAS是一项乐观的技术，它希望能成功地执行更新操作，并且如果有另一个线程在最近一次检查后更新了该变量，那么CAS能检测到这个错误。当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其他线程都将失败。但是，失败的线程并不会被挂起（这就是与获取锁的机制不同之处），而是被告知在这次竞争中失败，并可以多次尝试。这种灵活性就大大减少了与锁相关的活跃性风险。</p>\n<h2 id=\"并发包中的原子操作类-Atomic系列\"><a href=\"#并发包中的原子操作类-Atomic系列\" class=\"headerlink\" title=\"并发包中的原子操作类(Atomic系列)\"></a>并发包中的原子操作类(Atomic系列)</h2><p>原子更新基本类型主要包括3个类：</p>\n<ul>\n<li>AtomicBoolean：原子更新布尔类型</li>\n<li>AtomicInteger：原子更新整型</li>\n<li>AtomicLong：原子更新长整型</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">6214790243416807050L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指针类Unsafe</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Unsafe</span> <span class=\"variable\">unsafe</span> <span class=\"operator\">=</span> Unsafe.getUnsafe();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//下述变量value在AtomicInteger实例对象内的内存偏移量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//通过unsafe类的objectFieldOffset()方法，获取value变量在对象内存中的偏移</span></span><br><span class=\"line\">           <span class=\"comment\">//通过该偏移量valueOffset，unsafe类的内部方法可以获取到变量value对其进行取值或赋值操作</span></span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicInteger.class.getDeclaredField(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//当前AtomicInteger封装的int变量value</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AtomicInteger</span><span class=\"params\">(<span class=\"type\">int</span> initialValue)</span> &#123;</span><br><span class=\"line\">        value = initialValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AtomicInteger</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//获取当前最新值，</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//设置当前值，具备volatile效果，方法用final修饰是为了更进一步的保证线程安全。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(<span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//最终会设置成newValue，使用该方法后可能导致其他线程在之后的一小段时间内可以获取到旧值，有点类似于延迟加载</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lazySet</span><span class=\"params\">(<span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        unsafe.putOrderedInt(<span class=\"built_in\">this</span>, valueOffset, newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//设置新值并获取旧值，底层调用的是CAS操作即unsafe.compareAndSwapInt()方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndSet</span><span class=\"params\">(<span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndSetInt(<span class=\"built_in\">this</span>, valueOffset, newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//如果当前值为expect，则设置为update(当前值指的是value变量)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSet</span><span class=\"params\">(<span class=\"type\">int</span> expect, <span class=\"type\">int</span> update)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"built_in\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前值加1返回旧值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndIncrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前值减1，返回旧值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndDecrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//当前值增加delta，返回旧值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndAdd</span><span class=\"params\">(<span class=\"type\">int</span> delta)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前值加1，返回新值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">incrementAndGet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前值减1，返回新值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">decrementAndGet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, -<span class=\"number\">1</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//当前值增加delta，返回新值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">addAndGet</span><span class=\"params\">(<span class=\"type\">int</span> delta)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, delta) + delta;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//省略一些不常用的方法....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>通过上述的分析，可以发现AtomicInteger原子类的内部几乎是基于前面分析过Unsafe类中的CAS相关操作的方法实现的，这也同时证明AtomicInteger是基于无锁实现的，这里重点分析自增操作实现过程，其他方法自增实现原理一样。</p>\n<p>我们发现AtomicInteger类中所有自增或自减的方法都间接调用Unsafe类中的getAndAddInt()方法实现了CAS操作，从而保证了线程安全，关于getAndAddInt其实前面已分析过，它是Unsafe类中1.8新增的方法，源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Unsafe类中的getAndAddInt方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndAddInt</span><span class=\"params\">(Object o, <span class=\"type\">long</span> offset, <span class=\"type\">int</span> delta)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            v = getIntVolatile(o, offset);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>​    </p>\n<hr>\n","length":3139,"excerpt":"","more":"<h1 id=\"CAS和concurrent-atomic\"><a href=\"#CAS和concurrent-atomic\" class=\"headerlink\" title=\"CAS和concurrent.atomic\"></a>CAS和concurrent.atomic</h1><p><a href=\"https://www.jianshu.com/p/a897c4b8929f\">https://www.jianshu.com/p/a897c4b8929f</a></p>\n<p><a href=\"https://blog.csdn.net/javazejian/article/details/72772470\">https://blog.csdn.net/javazejian/article/details/72772470</a></p>\n<h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h2><p><strong>CAS,compare and swap比较并替换。 CAS有三个参数：需要读写的内存位值（V）、进行比较的预期原值（A）和拟写入的新值(B)。当且仅当V的值等于A时，CAS才会通过原子方式用新值B来更新V的值，否则不会执行任何操作。</strong></p>\n<p>CAS是一项乐观的技术，它希望能成功地执行更新操作，并且如果有另一个线程在最近一次检查后更新了该变量，那么CAS能检测到这个错误。当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其他线程都将失败。但是，失败的线程并不会被挂起（这就是与获取锁的机制不同之处），而是被告知在这次竞争中失败，并可以多次尝试。这种灵活性就大大减少了与锁相关的活跃性风险。</p>\n<h2 id=\"并发包中的原子操作类-Atomic系列\"><a href=\"#并发包中的原子操作类-Atomic系列\" class=\"headerlink\" title=\"并发包中的原子操作类(Atomic系列)\"></a>并发包中的原子操作类(Atomic系列)</h2><p>原子更新基本类型主要包括3个类：</p>\n<ul>\n<li>AtomicBoolean：原子更新布尔类型</li>\n<li>AtomicInteger：原子更新整型</li>\n<li>AtomicLong：原子更新长整型</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AtomicInteger</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Number</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">6214790243416807050L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取指针类Unsafe</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Unsafe</span> <span class=\"variable\">unsafe</span> <span class=\"operator\">=</span> Unsafe.getUnsafe();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//下述变量value在AtomicInteger实例对象内的内存偏移量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> valueOffset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"comment\">//通过unsafe类的objectFieldOffset()方法，获取value变量在对象内存中的偏移</span></span><br><span class=\"line\">           <span class=\"comment\">//通过该偏移量valueOffset，unsafe类的内部方法可以获取到变量value对其进行取值或赋值操作</span></span><br><span class=\"line\">            valueOffset = unsafe.objectFieldOffset</span><br><span class=\"line\">                (AtomicInteger.class.getDeclaredField(<span class=\"string\">&quot;value&quot;</span>));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(ex); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//当前AtomicInteger封装的int变量value</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AtomicInteger</span><span class=\"params\">(<span class=\"type\">int</span> initialValue)</span> &#123;</span><br><span class=\"line\">        value = initialValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AtomicInteger</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//获取当前最新值，</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//设置当前值，具备volatile效果，方法用final修饰是为了更进一步的保证线程安全。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(<span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//最终会设置成newValue，使用该方法后可能导致其他线程在之后的一小段时间内可以获取到旧值，有点类似于延迟加载</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lazySet</span><span class=\"params\">(<span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        unsafe.putOrderedInt(<span class=\"built_in\">this</span>, valueOffset, newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//设置新值并获取旧值，底层调用的是CAS操作即unsafe.compareAndSwapInt()方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndSet</span><span class=\"params\">(<span class=\"type\">int</span> newValue)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndSetInt(<span class=\"built_in\">this</span>, valueOffset, newValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//如果当前值为expect，则设置为update(当前值指的是value变量)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSet</span><span class=\"params\">(<span class=\"type\">int</span> expect, <span class=\"type\">int</span> update)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"built_in\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前值加1返回旧值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndIncrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前值减1，返回旧值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndDecrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, -<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//当前值增加delta，返回旧值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndAdd</span><span class=\"params\">(<span class=\"type\">int</span> delta)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, delta);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前值加1，返回新值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">incrementAndGet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//当前值减1，返回新值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">decrementAndGet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, -<span class=\"number\">1</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//当前值增加delta，返回新值，底层CAS操作</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">addAndGet</span><span class=\"params\">(<span class=\"type\">int</span> delta)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, delta) + delta;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//省略一些不常用的方法....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>通过上述的分析，可以发现AtomicInteger原子类的内部几乎是基于前面分析过Unsafe类中的CAS相关操作的方法实现的，这也同时证明AtomicInteger是基于无锁实现的，这里重点分析自增操作实现过程，其他方法自增实现原理一样。</p>\n<p>我们发现AtomicInteger类中所有自增或自减的方法都间接调用Unsafe类中的getAndAddInt()方法实现了CAS操作，从而保证了线程安全，关于getAndAddInt其实前面已分析过，它是Unsafe类中1.8新增的方法，源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Unsafe类中的getAndAddInt方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndAddInt</span><span class=\"params\">(Object o, <span class=\"type\">long</span> offset, <span class=\"type\">int</span> delta)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            v = getIntVolatile(o, offset);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>​    </p>\n<hr>\n"},{"title":"ConcurrentHashMap和HashMap部分源码解读","date":"2019-06-20T15:52:44.000Z","photos":["https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/2.jpg?raw=true"],"description":"ConcurrentHashMap的put和扩容，HashMap的put、扩容、链树转化。","_content":"\n\n\n# ConcurrentHashMap\n\n## 1. put方法\n\n<https://www.jianshu.com/p/0fb89aefac66>\n\n1. 检查key/value是否为空，如果为空，抛出异常。\n\n2. 进入for死循环\n\n3. table是否为null，如果为空，initTable，然后2\n\n4. 根据hash，计算出索引，取到该索引的节点f\n\n5. 检查f是否为空，如果为空，直接new一个新节点，并CAS插入，退出循环\n\n6. 如果f不空，检查f.hash == MOVED(-1)，如果相等，帮助扩容\n\n7. 如果f.hash != MOVED(-1)，synchronized该节点\n\n8. 如果链表中找到值为key的节点，更新节点的value；如果没有，new节点，增加到尾部\n\n9. 如果节点数>8，treeifyBin转换红黑树\n\n```java\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n\n/** Implementation for put and putIfAbsent */\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    //计算hash值\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    for (Node<K,V>[] tab = table;;) {//自旋\n        //f:索引节点; n:tab.length; i:新节点索引 (n - 1) & hash; fh:f.hash\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            //初始化\n            tab = initTable();\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {//索引i节点为空，直接插入\n            //cas插入节点,成功则跳出循环\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                   // no lock when adding to empty bin\n        }\n        //当前节点处于移动状态-其他线程正在进行节点转移操作\n        else if ((fh = f.hash) == MOVED)\n            //帮助转移\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {//check stable\n                    //f.hash>=0,说明f是链表的头结点\n                    if (fh >= 0) {\n                        binCount = 1;//记录链表节点数，用于后面是否转换为红黑树做判断\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            //key相同 修改\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            //到这里说明已经是链表尾，把当前值作为新的节点插入到队尾\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    //红黑树节点操作\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            if (binCount != 0) {\n                //如果链表中节点数binCount >= TREEIFY_THRESHOLD(默认是8)，则把链表转化为红黑树结构\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    //更新新元素个数\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n\n\n## 2. 扩容transfer\n\n<https://www.jianshu.com/p/2829fe36a8dd>\n\n1. 计算转移幅度`stride`（或者说是当前线程需要转移的节点数），最小为16；\n2. 创建一个相当于当前 table 两倍容量的 Node 数组`nextTab`，转移完成后用作新的 table ；\n3. 从`transferIndex`（初始为`table.length`，也就是 table 的最后一个节点）开始，依次向前处理`stride`个节点。用`i`作为索引控制流程。如果`table[i]`为空，用`fwd`占位，如果为`fwd`，跳过。如果`table[i]`是正常节点，用算法将链表/红黑树节点分割成两份，`nextTab`中生成索引为`i`和`i+n`的节点。\n4. 最后把操作过的节点都设为 ForwardingNode 节点（hash= MOVED，这样别的线程就可以检测到）\n\n再来看看源码和注释。\n\n```java\n/**\n * Moves and/or copies the nodes in each bin to new table. See\n * above for explanation.\n * \n * transferIndex 表示转移时的下标，初始为扩容前的 length。\n * \n * 我们假设长度是 32\n */\nprivate final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n    int n = tab.length, stride;\n    // 转移幅度( tab.length/(NCPU*8) )，最小为16\n    if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)\n        stride = MIN_TRANSFER_STRIDE; // subdivide range 细分范围 stridea：TODO\n    // 新的 table 尚未初始化\n    if (nextTab == null) {            // initiating\n        try {\n            // 扩容  2 倍\n            Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1];\n            // 更新\n            nextTab = nt;\n        } catch (Throwable ex) {      // try to cope with OOME\n            // 扩容失败， sizeCtl 使用 int 最大值。\n            sizeCtl = Integer.MAX_VALUE;\n            return;// 结束\n        }\n        // 更新成员变量\n        nextTable = nextTab;\n        // 更新转移下标，就是 老的 tab 的 length\n        transferIndex = n;\n    }\n    // 新 tab 的 length\n    int nextn = nextTab.length;\n    // 创建一个 fwd 节点，用于占位。当别的线程发现这个槽位中是 fwd 类型的节点，则跳过这个节点。\n    ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);\n    // 首次推进为 true，如果等于 true，说明需要再次推进一个下标（i--），反之，如果是 false，那么就不能推进下标，需要将当前的下标处理完毕才能继续推进\n    boolean advance = true;\n    // 完成状态，如果是 true，就结束此方法。\n    boolean finishing = false; // to ensure sweep before committing nextTab\n    // i：当前处理的Node索引；bound：需要处理节点的索引边界\n    for (int i = 0, bound = 0;;) {\n        // f:当前处理i位置的node; fh:f.hash\n        Node<K,V> f; int fh;\n        // 如果当前线程可以向后推进；这个循环就是控制 i 递减。同时，每个线程都会进入这里取得自己需要转移的桶的区间\n        while (advance) {\n            //nextIndex:下一个要处理的节点索引; nextBound:下一个需要处理的节点的索引边界\n            int nextIndex, nextBound;\n            // 通过while循环获取本次需要移动的节点索引i\n            // 通常，第一次进入循环，i-- 这个判断会无法通过，从而走下面的 nextIndex 赋值操作（获取最新的转移下标）。其余情况都是：如果可以推进，将 i 减一，然后修改成不可推进。如果 i 对应的桶处理成功了，改成可以推进。\n            if (--i >= bound || finishing)\n                advance = false;\n            // 节点已全部转移。\n            else if ((nextIndex = transferIndex) <= 0) {\n                // 如果小于等于0，说明没有区间了 ，i 改成 -1，推进状态变成 false，不再推进，表示，扩容结束了，当前线程可以退出了\n                // 这个 -1 会在下面的 if 块里判断，从而进入完成状态判断\n                i = -1;\n                advance = false;// 这里设置 false，是为了防止在没有成功处理一个桶的情况下却进行了推进\n            }\n            //transferIndex（初值为最后一个节点的索引），表示从transferIndex开始后面所有的节点都已分配，\n            //每次线程领取扩容任务后，需要更新transferIndex的值(transferIndex-stride)。\n            //CAS修改transferIndex，即 length - 区间值，留下剩余的区间值供后面的线程使用\n            else if (U.compareAndSwapInt\n                     (this, TRANSFERINDEX, nextIndex,\n                      nextBound = (nextIndex > stride ?\n                                   nextIndex - stride : 0))) {\n                bound = nextBound;// 这个值就是当前线程可以处理的最小当前区间最小下标\n                i = nextIndex - 1; // 初次对i 赋值，这个就是当前线程可以处理的当前区间的最大下标\n                advance = false; \n            }\n        }// 如果 i 小于0 （不在 tab 下标内，按照上面的判断，领取最后一段区间的线程扩容结束）\n        //  如果 i >= tab.length(不知道为什么这么判断)\n        //  如果 i + tab.length >= nextTable.length  （不知道为什么这么判断）\n        if (i < 0 || i >= n || i + n >= nextn) {\n            int sc;\n            if (finishing) { // 如果完成了扩容\n                nextTable = null;// 删除成员变量\n                table = nextTab;// 更新 table\n                sizeCtl = (n << 1) - (n >>> 1); // 更新阈值\n                return;// 结束方法。\n            }\n            //当前线程已经完成转移，但可能还有其他线程正在进行转移操作\n            //每个线程完成自己的扩容操作后就对sizeCtl-1\n            if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {// 尝试将 sc -1. 表示这个线程结束帮助扩容了，将 sc 的低 16 位减一。\n                if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)// 如果 sc - 2 不等于标识符左移 16 位。不相等，说明这里还有其他线程正在操作，直接返回。\n                    return; //如果还有其他线程正在操作，直接返回，否则的话重新初始化i对原tab进行一遍检查然后再提交\n                finishing = advance = true;// 如果相等，扩容结束了，更新 finising 变量\n                i = n; // 再次循环检查一下整张表\n            }\n        }\n        else if ((f = tabAt(tab, i)) == null) // 获取老 tab i 下标位置的变量，如果是 null，就使用 fwd 占位。\n            advance = casTabAt(tab, i, null, fwd);// 如果成功写入 fwd 占位，再次推进一个下标\n        else if ((fh = f.hash) == MOVED)// 如果不是 null 且 hash 值是 MOVED。\n            advance = true; // already processed // 说明别的线程已经处理过了，再次推进一个下标\n        else {// 到这里，说明这个位置有实际值了，且不是占位符。对这个节点上锁。为什么上锁，防止 putVal 的时候向链表插入数据\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    Node<K,V> ln, hn;//处理当前拿到的节点,构建两个node:ln/hn。ln:原位置; hn:i+n位置\n                    // 如果 f 的 hash 值大于 0 。TreeBin 的 hash 是 -2\n                    if (fh >= 0) {//当前为链表节点（fh>=0）\n                        // 对老长度进行与运算, 把原链表中的元素分成两份\n                        // 由于 Map 的长度都是 2 的次方（000001000 这类的数字），那么取于 length 只有 2 种结果，一种是 0，一种是1\n                        //  如果是结果是0 ，Doug Lea 将其放在低位，反之放在高位，目的是将链表重新 hash，放到对应的位置上，使新的索引为i+n或i不变\n                        int runBit = fh & n;\n                        //最后一个与头节点f索引不同的节点\n                        Node<K,V> lastRun = f; \n                        //从索引i的节点开始向后查找最后一个有效节点\n                        for (Node<K,V> p = f.next; p != null; p = p.next) {\n                            int b = p.hash & n;\n                            if (b != runBit) {\n                                runBit = b; // 更新 runBit，用于下面判断 lastRun 该赋值给 ln 还是 hn。\n                                lastRun = p; // 这个 lastRun 保证后面的节点与自己的取于值相同，避免后面没有必要的循环\n                            }\n                        }\n                        if (runBit == 0) {// 如果最后更新的 runBit 是 0 ，索引为i不变\n                            ln = lastRun;\n                            hn = null;\n                        }\n                        else {\n                            hn = lastRun; // 如果最后更新的 runBit 是 1，新的索引为i+n\n                            ln = null;\n                        }// 再次循环，生成两个链表，lastRun 作为停止条件，这样就是避免无谓的循环（lastRun 后面都是相同的取于结果）\n                        for (Node<K,V> p = f; p != lastRun; p = p.next) {\n                            int ph = p.hash; K pk = p.key; V pv = p.val;\n                            // 如果与运算结果是 0，那么就还在低位\n                            if ((ph & n) == 0) // 如果是0 ，那么创建低位节点\n                                ln = new Node<K,V>(ph, pk, pv, ln);\n                            else // 1 则创建高位\n                                hn = new Node<K,V>(ph, pk, pv, hn);\n                        }\n                        // 其实这里类似 hashMap \n                        // 设置低位链表放在新链表的 i\n                        setTabAt(nextTab, i, ln);\n                        // 设置高位链表，在原有长度上加 n\n                        setTabAt(nextTab, i + n, hn);\n                        // 将旧的链表设置成占位符\n                        setTabAt(tab, i, fwd);\n                        // 继续向后推进\n                        advance = true;\n                    }// 如果是红黑树\n                    else if (f instanceof TreeBin) {\n                        TreeBin<K,V> t = (TreeBin<K,V>)f;\n                        TreeNode<K,V> lo = null, loTail = null;\n                        TreeNode<K,V> hi = null, hiTail = null;\n                        int lc = 0, hc = 0;\n                        // 遍历\n                        for (Node<K,V> e = t.first; e != null; e = e.next) {\n                            int h = e.hash;\n                            TreeNode<K,V> p = new TreeNode<K,V>\n                                (h, e.key, e.val, null, null);\n                            // 和链表相同的判断，与运算 == 0 的放在原位置\n                            if ((h & n) == 0) {\n                                if ((p.prev = loTail) == null)\n                                    lo = p;\n                                else\n                                    loTail.next = p;\n                                loTail = p;\n                                ++lc;\n                            } // 不是 0 的放在i+n\n                            else {\n                                if ((p.prev = hiTail) == null)\n                                    hi = p;\n                                else\n                                    hiTail.next = p;\n                                hiTail = p;\n                                ++hc;\n                            }\n                        }\n                        // 如果树的节点数小于等于 6，那么转成链表，反之，创建一个新的树\n                        ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) :\n                            (hc != 0) ? new TreeBin<K,V>(lo) : t;\n                        hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) :\n                            (lc != 0) ? new TreeBin<K,V>(hi) : t;\n                        // 低位树\n                        setTabAt(nextTab, i, ln);\n                        // 高位数\n                        setTabAt(nextTab, i + n, hn);\n                        // 旧的设置成占位符\n                        setTabAt(tab, i, fwd);\n                        // 继续向后推进\n                        advance = true;\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n## 3. helpTransfer方法\n\n如果索引到的节点的 hash 为-1，说明当前节点处于移动状态（或者说是其他线程正在对 f 节点进行转移操作。这里主要是靠 ForwardingNode 节点来检测，因为ForwardingNode 中有指向nextTable的指针，可以得到nextTable。这个线程就可以先去帮助扩容。\n\n```java\n//帮助其他线程进行转移操作\nfinal Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) {\n    Node<K,V>[] nextTab; int sc;\n    if (tab != null && (f instanceof ForwardingNode) &&\n        (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) {\n        //计算操作栈校验码\n        int rs = resizeStamp(tab.length);\n        while (nextTab == nextTable && table == tab &&\n               (sc = sizeCtl) < 0) {\n            if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                sc == rs + MAX_RESIZERS || transferIndex <= 0)//不需要帮助转移，跳出\n                break;\n            if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) {//CAS更新帮助转移的线程数\n                transfer(tab, nextTab);\n                break;\n            }\n        }\n        return nextTab;\n    }\n    return table;\n}\n```\n\n# HashMap\n\n底层数据结构`数组+链表+红黑树`\n\n## 1. 初始化时tableSizeFor方法\n\n找到大于或等于 cap 的最小2的幂的数作为table的size。\n\n```java\n/**\n * Returns a power of two size for the given target capacity.\n */\nstatic final int tableSizeFor(int cap) {\n    int n = cap - 1;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}\n```\n\n## 2. 查找\n\n`(n - 1)& hash`相当于取这个数的二进制的n-1位，得到的就是映射到table的位置索引。\n\n> hash :             1011 1001\n>\n> n-1:                 0000 1111\n>\n> (n - 1)& hash :0000 1001\n\n```java\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    // first索引到的table的节点\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && // always check first node\n            // 如果first的key就是要查找的key，直接返回这个节点\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        // 如果不是，并且还有next的节点，继续查找\n        if ((e = first.next) != null) {\n            // 如果 first 是 TreeNode 类型，则调用黑红树查找方法\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                \n            // 对链表进行查找\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\n## 3. 遍历\n\n用Iterator迭代器遍历，不多赘述。遍历顺序是先数组，数组中有链表/红黑树时，遍历它们。**所以插入顺序和遍历顺序会不一致。**\n\n## 4. 插入\n\n```java\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    // 如果table还未被初始化，先初始化\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    // 如果table[i]没有节点，新生成一个节点\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        // 如果键的值以及节点 hash 等于链表中的第一个键值对节点时，则将 e 指向该键值对\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n            \n        // 如果桶中的引用类型为 TreeNode，则调用红黑树的插入方法\n        else if (p instanceof TreeNode)  \n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            // 对链表进行遍历，并统计链表长度\n            for (int binCount = 0; ; ++binCount) {\n                // 链表中不包含要插入的键值对节点时，则将该节点接在链表的最后\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    // 如果链表长度大于或等于树化阈值，则进行树化操作\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                \n                // 条件为 true，表示当前链表包含要插入的键值对，终止遍历\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        \n        // 判断要插入的键值对是否存在 HashMap 中\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            // onlyIfAbsent 表示是否仅在 oldValue 为 null 的情况下更新键值对的值\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    // 键值对数量超过阈值时，则进行扩容\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n## 5. 扩容\n\n1. 计算新桶数组的容量 newCap 和新阈值 newThr\n2. 根据计算出的 newCap 创建新的桶数组，桶数组 table 也是在这里进行初始化的\n3. 将键值对节点重新映射到新的桶数组里。如果节点是 TreeNode 类型，则需要拆分红黑树。如果是普通节点，则节点按原顺序进行分组。\n\n```java\nfinal Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    // 如果 table 不为空，表明已经初始化过了\n    if (oldCap > 0) {\n        // 当 table 容量超过容量最大值，则不再扩容\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        } \n        // 按旧容量和阈值的2倍计算新容量和阈值的大小\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    } else if (oldThr > 0) // initial capacity was placed in threshold\n        /*\n         * 初始化时，将 threshold 的值赋值给 newCap，\n         * HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值\n         */ \n        newCap = oldThr;\n    else {               // zero initial threshold signifies using defaults\n        /*\n         * 调用无参构造方法时，桶数组容量为默认容量，\n         * 阈值为默认容量与默认负载因子乘积\n         */\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    \n    // newThr 为 0 时，按阈值计算公式进行计算\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    // 创建新的桶数组，桶数组的初始化也是在这里完成的\n    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab;\n    if (oldTab != null) {\n        // 如果旧的桶数组不为空，则遍历桶数组，并将键值对映射到新的桶数组中\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    // 重新映射时，需要对红黑树进行拆分\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { // preserve order\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    // 遍历链表，并将链表节点按原顺序进行分组\n                    do {\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    // 将分组后的链表映射到新桶中\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n\n## 6. 链表树化、红黑树链化与拆分\n\n### 6.1 键值比较\n\nHashMap 是做了三步处理，确保可以比较出两个键的大小，如下：\n\n1. 比较键与键之间 hash 的大小，如果 hash 相同，继续往下比较\n2. 检测键类是否实现了 Comparable 接口，如果实现调用 compareTo 方法进行比较\n3. 如果仍未比较出大小，就需要进行仲裁了，仲裁方法为 tieBreakOrder（大家自己看源码吧）\n\n### 6.2 红黑树拆分\n\n扩容后，普通节点需要重新映射，红黑树节点也不例外。按照一般的思路，我们可以先把红黑树转成链表，之后再重新映射链表即可。这种处理方式是大家比较容易想到的，但这样做会损失一定的效率。不同于上面的处理方式，HashMap 实现的思路则是上好佳（上好佳请把广告费打给我）。如上节所说，在将普通链表转成红黑树时，HashMap 通过两个额外的引用 next 和 prev 保留了原链表的节点顺序。这样再对红黑树进行重新映射时，完全可以按照映射链表的方式进行。这样就避免了将红黑树转成链表后再进行映射，无形中提高了效率。\n\n### 6.3 红黑树链化\n\n前面说过，红黑树中仍然保留了原链表节点顺序。有了这个前提，再将红黑树转成链表就简单多了，仅需将 TreeNode 链表转成 Node 类型的链表即可。\n\n## 7. transient \n\n如果大家细心阅读 HashMap 的源码，会发现桶数组 table 被申明为 transient。transient 表示易变的意思，在 Java 中，被该关键字修饰的变量不会被默认的序列化机制序列化。我们再回到源码中，考虑一个问题：桶数组 table 是 HashMap 底层重要的数据结构，不序列化的话，别人还怎么还原呢？\n\n这里简单说明一下吧，HashMap 并没有使用默认的序列化机制，而是通过实现`readObject/writeObject`两个方法自定义了序列化的内容。这样做是有原因的，试问一句，HashMap 中存储的内容是什么？不用说，大家也知道是`键值对`。所以只要我们把键值对序列化了，我们就可以根据键值对数据重建 HashMap。有的朋友可能会想，序列化 table 不是可以一步到位，后面直接还原不就行了吗？这样一想，倒也是合理。但序列化 talbe 存在着两个问题：\n\n1. table 多数情况下是无法被存满的，序列化未使用的部分，浪费空间\n2. 同一个键值对在不同 JVM 下，所处的桶位置可能是不同的，在不同的 JVM 下反序列化 table 可能会发生错误。\n\n以上两个问题中，第一个问题比较好理解，第二个问题解释一下。HashMap 的`get/put/remove`等方法第一步就是根据 hash 找到键所在的桶位置，但如果键没有覆写 hashCode 方法，计算 hash 时最终调用 Object 中的 hashCode 方法。但 Object 中的 hashCode 方法是 native 型的，不同的 JVM 下，可能会有不同的实现，产生的 hash 可能也是不一样的。也就是说同一个键在不同平台下可能会产生不同的 hash，此时再对在同一个 table 继续操作，就会出现问题。\n\n综上所述，大家应该能明白 HashMap 不序列化 table 的原因了。","source":"_posts/ConcurrentHashMap.md","raw":"---\n\ntitle: ConcurrentHashMap和HashMap部分源码解读\ndate: 2019-6-20 23:52:44\ntags: [面试,Java]\ncategories: [面试,Java]\nphotos:\n  - \"https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/2.jpg?raw=true\"\ndescription: ConcurrentHashMap的put和扩容，HashMap的put、扩容、链树转化。\n\n---\n\n\n\n# ConcurrentHashMap\n\n## 1. put方法\n\n<https://www.jianshu.com/p/0fb89aefac66>\n\n1. 检查key/value是否为空，如果为空，抛出异常。\n\n2. 进入for死循环\n\n3. table是否为null，如果为空，initTable，然后2\n\n4. 根据hash，计算出索引，取到该索引的节点f\n\n5. 检查f是否为空，如果为空，直接new一个新节点，并CAS插入，退出循环\n\n6. 如果f不空，检查f.hash == MOVED(-1)，如果相等，帮助扩容\n\n7. 如果f.hash != MOVED(-1)，synchronized该节点\n\n8. 如果链表中找到值为key的节点，更新节点的value；如果没有，new节点，增加到尾部\n\n9. 如果节点数>8，treeifyBin转换红黑树\n\n```java\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n\n/** Implementation for put and putIfAbsent */\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    //计算hash值\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    for (Node<K,V>[] tab = table;;) {//自旋\n        //f:索引节点; n:tab.length; i:新节点索引 (n - 1) & hash; fh:f.hash\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            //初始化\n            tab = initTable();\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {//索引i节点为空，直接插入\n            //cas插入节点,成功则跳出循环\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                   // no lock when adding to empty bin\n        }\n        //当前节点处于移动状态-其他线程正在进行节点转移操作\n        else if ((fh = f.hash) == MOVED)\n            //帮助转移\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {//check stable\n                    //f.hash>=0,说明f是链表的头结点\n                    if (fh >= 0) {\n                        binCount = 1;//记录链表节点数，用于后面是否转换为红黑树做判断\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            //key相同 修改\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            //到这里说明已经是链表尾，把当前值作为新的节点插入到队尾\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    //红黑树节点操作\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            if (binCount != 0) {\n                //如果链表中节点数binCount >= TREEIFY_THRESHOLD(默认是8)，则把链表转化为红黑树结构\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    //更新新元素个数\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n\n\n## 2. 扩容transfer\n\n<https://www.jianshu.com/p/2829fe36a8dd>\n\n1. 计算转移幅度`stride`（或者说是当前线程需要转移的节点数），最小为16；\n2. 创建一个相当于当前 table 两倍容量的 Node 数组`nextTab`，转移完成后用作新的 table ；\n3. 从`transferIndex`（初始为`table.length`，也就是 table 的最后一个节点）开始，依次向前处理`stride`个节点。用`i`作为索引控制流程。如果`table[i]`为空，用`fwd`占位，如果为`fwd`，跳过。如果`table[i]`是正常节点，用算法将链表/红黑树节点分割成两份，`nextTab`中生成索引为`i`和`i+n`的节点。\n4. 最后把操作过的节点都设为 ForwardingNode 节点（hash= MOVED，这样别的线程就可以检测到）\n\n再来看看源码和注释。\n\n```java\n/**\n * Moves and/or copies the nodes in each bin to new table. See\n * above for explanation.\n * \n * transferIndex 表示转移时的下标，初始为扩容前的 length。\n * \n * 我们假设长度是 32\n */\nprivate final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n    int n = tab.length, stride;\n    // 转移幅度( tab.length/(NCPU*8) )，最小为16\n    if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)\n        stride = MIN_TRANSFER_STRIDE; // subdivide range 细分范围 stridea：TODO\n    // 新的 table 尚未初始化\n    if (nextTab == null) {            // initiating\n        try {\n            // 扩容  2 倍\n            Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1];\n            // 更新\n            nextTab = nt;\n        } catch (Throwable ex) {      // try to cope with OOME\n            // 扩容失败， sizeCtl 使用 int 最大值。\n            sizeCtl = Integer.MAX_VALUE;\n            return;// 结束\n        }\n        // 更新成员变量\n        nextTable = nextTab;\n        // 更新转移下标，就是 老的 tab 的 length\n        transferIndex = n;\n    }\n    // 新 tab 的 length\n    int nextn = nextTab.length;\n    // 创建一个 fwd 节点，用于占位。当别的线程发现这个槽位中是 fwd 类型的节点，则跳过这个节点。\n    ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);\n    // 首次推进为 true，如果等于 true，说明需要再次推进一个下标（i--），反之，如果是 false，那么就不能推进下标，需要将当前的下标处理完毕才能继续推进\n    boolean advance = true;\n    // 完成状态，如果是 true，就结束此方法。\n    boolean finishing = false; // to ensure sweep before committing nextTab\n    // i：当前处理的Node索引；bound：需要处理节点的索引边界\n    for (int i = 0, bound = 0;;) {\n        // f:当前处理i位置的node; fh:f.hash\n        Node<K,V> f; int fh;\n        // 如果当前线程可以向后推进；这个循环就是控制 i 递减。同时，每个线程都会进入这里取得自己需要转移的桶的区间\n        while (advance) {\n            //nextIndex:下一个要处理的节点索引; nextBound:下一个需要处理的节点的索引边界\n            int nextIndex, nextBound;\n            // 通过while循环获取本次需要移动的节点索引i\n            // 通常，第一次进入循环，i-- 这个判断会无法通过，从而走下面的 nextIndex 赋值操作（获取最新的转移下标）。其余情况都是：如果可以推进，将 i 减一，然后修改成不可推进。如果 i 对应的桶处理成功了，改成可以推进。\n            if (--i >= bound || finishing)\n                advance = false;\n            // 节点已全部转移。\n            else if ((nextIndex = transferIndex) <= 0) {\n                // 如果小于等于0，说明没有区间了 ，i 改成 -1，推进状态变成 false，不再推进，表示，扩容结束了，当前线程可以退出了\n                // 这个 -1 会在下面的 if 块里判断，从而进入完成状态判断\n                i = -1;\n                advance = false;// 这里设置 false，是为了防止在没有成功处理一个桶的情况下却进行了推进\n            }\n            //transferIndex（初值为最后一个节点的索引），表示从transferIndex开始后面所有的节点都已分配，\n            //每次线程领取扩容任务后，需要更新transferIndex的值(transferIndex-stride)。\n            //CAS修改transferIndex，即 length - 区间值，留下剩余的区间值供后面的线程使用\n            else if (U.compareAndSwapInt\n                     (this, TRANSFERINDEX, nextIndex,\n                      nextBound = (nextIndex > stride ?\n                                   nextIndex - stride : 0))) {\n                bound = nextBound;// 这个值就是当前线程可以处理的最小当前区间最小下标\n                i = nextIndex - 1; // 初次对i 赋值，这个就是当前线程可以处理的当前区间的最大下标\n                advance = false; \n            }\n        }// 如果 i 小于0 （不在 tab 下标内，按照上面的判断，领取最后一段区间的线程扩容结束）\n        //  如果 i >= tab.length(不知道为什么这么判断)\n        //  如果 i + tab.length >= nextTable.length  （不知道为什么这么判断）\n        if (i < 0 || i >= n || i + n >= nextn) {\n            int sc;\n            if (finishing) { // 如果完成了扩容\n                nextTable = null;// 删除成员变量\n                table = nextTab;// 更新 table\n                sizeCtl = (n << 1) - (n >>> 1); // 更新阈值\n                return;// 结束方法。\n            }\n            //当前线程已经完成转移，但可能还有其他线程正在进行转移操作\n            //每个线程完成自己的扩容操作后就对sizeCtl-1\n            if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {// 尝试将 sc -1. 表示这个线程结束帮助扩容了，将 sc 的低 16 位减一。\n                if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)// 如果 sc - 2 不等于标识符左移 16 位。不相等，说明这里还有其他线程正在操作，直接返回。\n                    return; //如果还有其他线程正在操作，直接返回，否则的话重新初始化i对原tab进行一遍检查然后再提交\n                finishing = advance = true;// 如果相等，扩容结束了，更新 finising 变量\n                i = n; // 再次循环检查一下整张表\n            }\n        }\n        else if ((f = tabAt(tab, i)) == null) // 获取老 tab i 下标位置的变量，如果是 null，就使用 fwd 占位。\n            advance = casTabAt(tab, i, null, fwd);// 如果成功写入 fwd 占位，再次推进一个下标\n        else if ((fh = f.hash) == MOVED)// 如果不是 null 且 hash 值是 MOVED。\n            advance = true; // already processed // 说明别的线程已经处理过了，再次推进一个下标\n        else {// 到这里，说明这个位置有实际值了，且不是占位符。对这个节点上锁。为什么上锁，防止 putVal 的时候向链表插入数据\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    Node<K,V> ln, hn;//处理当前拿到的节点,构建两个node:ln/hn。ln:原位置; hn:i+n位置\n                    // 如果 f 的 hash 值大于 0 。TreeBin 的 hash 是 -2\n                    if (fh >= 0) {//当前为链表节点（fh>=0）\n                        // 对老长度进行与运算, 把原链表中的元素分成两份\n                        // 由于 Map 的长度都是 2 的次方（000001000 这类的数字），那么取于 length 只有 2 种结果，一种是 0，一种是1\n                        //  如果是结果是0 ，Doug Lea 将其放在低位，反之放在高位，目的是将链表重新 hash，放到对应的位置上，使新的索引为i+n或i不变\n                        int runBit = fh & n;\n                        //最后一个与头节点f索引不同的节点\n                        Node<K,V> lastRun = f; \n                        //从索引i的节点开始向后查找最后一个有效节点\n                        for (Node<K,V> p = f.next; p != null; p = p.next) {\n                            int b = p.hash & n;\n                            if (b != runBit) {\n                                runBit = b; // 更新 runBit，用于下面判断 lastRun 该赋值给 ln 还是 hn。\n                                lastRun = p; // 这个 lastRun 保证后面的节点与自己的取于值相同，避免后面没有必要的循环\n                            }\n                        }\n                        if (runBit == 0) {// 如果最后更新的 runBit 是 0 ，索引为i不变\n                            ln = lastRun;\n                            hn = null;\n                        }\n                        else {\n                            hn = lastRun; // 如果最后更新的 runBit 是 1，新的索引为i+n\n                            ln = null;\n                        }// 再次循环，生成两个链表，lastRun 作为停止条件，这样就是避免无谓的循环（lastRun 后面都是相同的取于结果）\n                        for (Node<K,V> p = f; p != lastRun; p = p.next) {\n                            int ph = p.hash; K pk = p.key; V pv = p.val;\n                            // 如果与运算结果是 0，那么就还在低位\n                            if ((ph & n) == 0) // 如果是0 ，那么创建低位节点\n                                ln = new Node<K,V>(ph, pk, pv, ln);\n                            else // 1 则创建高位\n                                hn = new Node<K,V>(ph, pk, pv, hn);\n                        }\n                        // 其实这里类似 hashMap \n                        // 设置低位链表放在新链表的 i\n                        setTabAt(nextTab, i, ln);\n                        // 设置高位链表，在原有长度上加 n\n                        setTabAt(nextTab, i + n, hn);\n                        // 将旧的链表设置成占位符\n                        setTabAt(tab, i, fwd);\n                        // 继续向后推进\n                        advance = true;\n                    }// 如果是红黑树\n                    else if (f instanceof TreeBin) {\n                        TreeBin<K,V> t = (TreeBin<K,V>)f;\n                        TreeNode<K,V> lo = null, loTail = null;\n                        TreeNode<K,V> hi = null, hiTail = null;\n                        int lc = 0, hc = 0;\n                        // 遍历\n                        for (Node<K,V> e = t.first; e != null; e = e.next) {\n                            int h = e.hash;\n                            TreeNode<K,V> p = new TreeNode<K,V>\n                                (h, e.key, e.val, null, null);\n                            // 和链表相同的判断，与运算 == 0 的放在原位置\n                            if ((h & n) == 0) {\n                                if ((p.prev = loTail) == null)\n                                    lo = p;\n                                else\n                                    loTail.next = p;\n                                loTail = p;\n                                ++lc;\n                            } // 不是 0 的放在i+n\n                            else {\n                                if ((p.prev = hiTail) == null)\n                                    hi = p;\n                                else\n                                    hiTail.next = p;\n                                hiTail = p;\n                                ++hc;\n                            }\n                        }\n                        // 如果树的节点数小于等于 6，那么转成链表，反之，创建一个新的树\n                        ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) :\n                            (hc != 0) ? new TreeBin<K,V>(lo) : t;\n                        hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) :\n                            (lc != 0) ? new TreeBin<K,V>(hi) : t;\n                        // 低位树\n                        setTabAt(nextTab, i, ln);\n                        // 高位数\n                        setTabAt(nextTab, i + n, hn);\n                        // 旧的设置成占位符\n                        setTabAt(tab, i, fwd);\n                        // 继续向后推进\n                        advance = true;\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n## 3. helpTransfer方法\n\n如果索引到的节点的 hash 为-1，说明当前节点处于移动状态（或者说是其他线程正在对 f 节点进行转移操作。这里主要是靠 ForwardingNode 节点来检测，因为ForwardingNode 中有指向nextTable的指针，可以得到nextTable。这个线程就可以先去帮助扩容。\n\n```java\n//帮助其他线程进行转移操作\nfinal Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) {\n    Node<K,V>[] nextTab; int sc;\n    if (tab != null && (f instanceof ForwardingNode) &&\n        (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) {\n        //计算操作栈校验码\n        int rs = resizeStamp(tab.length);\n        while (nextTab == nextTable && table == tab &&\n               (sc = sizeCtl) < 0) {\n            if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                sc == rs + MAX_RESIZERS || transferIndex <= 0)//不需要帮助转移，跳出\n                break;\n            if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) {//CAS更新帮助转移的线程数\n                transfer(tab, nextTab);\n                break;\n            }\n        }\n        return nextTab;\n    }\n    return table;\n}\n```\n\n# HashMap\n\n底层数据结构`数组+链表+红黑树`\n\n## 1. 初始化时tableSizeFor方法\n\n找到大于或等于 cap 的最小2的幂的数作为table的size。\n\n```java\n/**\n * Returns a power of two size for the given target capacity.\n */\nstatic final int tableSizeFor(int cap) {\n    int n = cap - 1;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}\n```\n\n## 2. 查找\n\n`(n - 1)& hash`相当于取这个数的二进制的n-1位，得到的就是映射到table的位置索引。\n\n> hash :             1011 1001\n>\n> n-1:                 0000 1111\n>\n> (n - 1)& hash :0000 1001\n\n```java\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    // first索引到的table的节点\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && // always check first node\n            // 如果first的key就是要查找的key，直接返回这个节点\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        // 如果不是，并且还有next的节点，继续查找\n        if ((e = first.next) != null) {\n            // 如果 first 是 TreeNode 类型，则调用黑红树查找方法\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                \n            // 对链表进行查找\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\n## 3. 遍历\n\n用Iterator迭代器遍历，不多赘述。遍历顺序是先数组，数组中有链表/红黑树时，遍历它们。**所以插入顺序和遍历顺序会不一致。**\n\n## 4. 插入\n\n```java\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    // 如果table还未被初始化，先初始化\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    // 如果table[i]没有节点，新生成一个节点\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        // 如果键的值以及节点 hash 等于链表中的第一个键值对节点时，则将 e 指向该键值对\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n            \n        // 如果桶中的引用类型为 TreeNode，则调用红黑树的插入方法\n        else if (p instanceof TreeNode)  \n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            // 对链表进行遍历，并统计链表长度\n            for (int binCount = 0; ; ++binCount) {\n                // 链表中不包含要插入的键值对节点时，则将该节点接在链表的最后\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    // 如果链表长度大于或等于树化阈值，则进行树化操作\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                \n                // 条件为 true，表示当前链表包含要插入的键值对，终止遍历\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        \n        // 判断要插入的键值对是否存在 HashMap 中\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            // onlyIfAbsent 表示是否仅在 oldValue 为 null 的情况下更新键值对的值\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    // 键值对数量超过阈值时，则进行扩容\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n## 5. 扩容\n\n1. 计算新桶数组的容量 newCap 和新阈值 newThr\n2. 根据计算出的 newCap 创建新的桶数组，桶数组 table 也是在这里进行初始化的\n3. 将键值对节点重新映射到新的桶数组里。如果节点是 TreeNode 类型，则需要拆分红黑树。如果是普通节点，则节点按原顺序进行分组。\n\n```java\nfinal Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    // 如果 table 不为空，表明已经初始化过了\n    if (oldCap > 0) {\n        // 当 table 容量超过容量最大值，则不再扩容\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        } \n        // 按旧容量和阈值的2倍计算新容量和阈值的大小\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                 oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1; // double threshold\n    } else if (oldThr > 0) // initial capacity was placed in threshold\n        /*\n         * 初始化时，将 threshold 的值赋值给 newCap，\n         * HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值\n         */ \n        newCap = oldThr;\n    else {               // zero initial threshold signifies using defaults\n        /*\n         * 调用无参构造方法时，桶数组容量为默认容量，\n         * 阈值为默认容量与默认负载因子乘积\n         */\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    \n    // newThr 为 0 时，按阈值计算公式进行计算\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                  (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    // 创建新的桶数组，桶数组的初始化也是在这里完成的\n    Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab;\n    if (oldTab != null) {\n        // 如果旧的桶数组不为空，则遍历桶数组，并将键值对映射到新的桶数组中\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    // 重新映射时，需要对红黑树进行拆分\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else { // preserve order\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    // 遍历链表，并将链表节点按原顺序进行分组\n                    do {\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    // 将分组后的链表映射到新桶中\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n\n## 6. 链表树化、红黑树链化与拆分\n\n### 6.1 键值比较\n\nHashMap 是做了三步处理，确保可以比较出两个键的大小，如下：\n\n1. 比较键与键之间 hash 的大小，如果 hash 相同，继续往下比较\n2. 检测键类是否实现了 Comparable 接口，如果实现调用 compareTo 方法进行比较\n3. 如果仍未比较出大小，就需要进行仲裁了，仲裁方法为 tieBreakOrder（大家自己看源码吧）\n\n### 6.2 红黑树拆分\n\n扩容后，普通节点需要重新映射，红黑树节点也不例外。按照一般的思路，我们可以先把红黑树转成链表，之后再重新映射链表即可。这种处理方式是大家比较容易想到的，但这样做会损失一定的效率。不同于上面的处理方式，HashMap 实现的思路则是上好佳（上好佳请把广告费打给我）。如上节所说，在将普通链表转成红黑树时，HashMap 通过两个额外的引用 next 和 prev 保留了原链表的节点顺序。这样再对红黑树进行重新映射时，完全可以按照映射链表的方式进行。这样就避免了将红黑树转成链表后再进行映射，无形中提高了效率。\n\n### 6.3 红黑树链化\n\n前面说过，红黑树中仍然保留了原链表节点顺序。有了这个前提，再将红黑树转成链表就简单多了，仅需将 TreeNode 链表转成 Node 类型的链表即可。\n\n## 7. transient \n\n如果大家细心阅读 HashMap 的源码，会发现桶数组 table 被申明为 transient。transient 表示易变的意思，在 Java 中，被该关键字修饰的变量不会被默认的序列化机制序列化。我们再回到源码中，考虑一个问题：桶数组 table 是 HashMap 底层重要的数据结构，不序列化的话，别人还怎么还原呢？\n\n这里简单说明一下吧，HashMap 并没有使用默认的序列化机制，而是通过实现`readObject/writeObject`两个方法自定义了序列化的内容。这样做是有原因的，试问一句，HashMap 中存储的内容是什么？不用说，大家也知道是`键值对`。所以只要我们把键值对序列化了，我们就可以根据键值对数据重建 HashMap。有的朋友可能会想，序列化 table 不是可以一步到位，后面直接还原不就行了吗？这样一想，倒也是合理。但序列化 talbe 存在着两个问题：\n\n1. table 多数情况下是无法被存满的，序列化未使用的部分，浪费空间\n2. 同一个键值对在不同 JVM 下，所处的桶位置可能是不同的，在不同的 JVM 下反序列化 table 可能会发生错误。\n\n以上两个问题中，第一个问题比较好理解，第二个问题解释一下。HashMap 的`get/put/remove`等方法第一步就是根据 hash 找到键所在的桶位置，但如果键没有覆写 hashCode 方法，计算 hash 时最终调用 Object 中的 hashCode 方法。但 Object 中的 hashCode 方法是 native 型的，不同的 JVM 下，可能会有不同的实现，产生的 hash 可能也是不一样的。也就是说同一个键在不同平台下可能会产生不同的 hash，此时再对在同一个 table 继续操作，就会出现问题。\n\n综上所述，大家应该能明白 HashMap 不序列化 table 的原因了。","slug":"ConcurrentHashMap","published":1,"updated":"2025-02-22T18:52:19.815Z","comments":1,"layout":"post","_id":"cm7hqj8aa0003v001110qfsyt","content":"<h1 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h1><h2 id=\"1-put方法\"><a href=\"#1-put方法\" class=\"headerlink\" title=\"1. put方法\"></a>1. put方法</h2><p><a href=\"https://www.jianshu.com/p/0fb89aefac66\">https://www.jianshu.com/p/0fb89aefac66</a></p>\n<ol>\n<li><p>检查key&#x2F;value是否为空，如果为空，抛出异常。</p>\n</li>\n<li><p>进入for死循环</p>\n</li>\n<li><p>table是否为null，如果为空，initTable，然后2</p>\n</li>\n<li><p>根据hash，计算出索引，取到该索引的节点f</p>\n</li>\n<li><p>检查f是否为空，如果为空，直接new一个新节点，并CAS插入，退出循环</p>\n</li>\n<li><p>如果f不空，检查f.hash &#x3D;&#x3D; MOVED(-1)，如果相等，帮助扩容</p>\n</li>\n<li><p>如果f.hash !&#x3D; MOVED(-1)，synchronized该节点</p>\n</li>\n<li><p>如果链表中找到值为key的节点，更新节点的value；如果没有，new节点，增加到尾部</p>\n</li>\n<li><p>如果节点数&gt;8，treeifyBin转换红黑树</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Implementation for put and putIfAbsent */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span> || value == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"comment\">//计算hash值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;<span class=\"comment\">//自旋</span></span><br><span class=\"line\">        <span class=\"comment\">//f:索引节点; n:tab.length; i:新节点索引 (n - 1) &amp; hash; fh:f.hash</span></span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//初始化</span></span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"literal\">null</span>) &#123;<span class=\"comment\">//索引i节点为空，直接插入</span></span><br><span class=\"line\">            <span class=\"comment\">//cas插入节点,成功则跳出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"literal\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key, value, <span class=\"literal\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                   <span class=\"comment\">// no lock when adding to empty bin</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前节点处于移动状态-其他线程正在进行节点转移操作</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            <span class=\"comment\">//帮助转移</span></span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldVal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;<span class=\"comment\">//check stable</span></span><br><span class=\"line\">                    <span class=\"comment\">//f.hash&gt;=0,说明f是链表的头结点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;<span class=\"comment\">//记录链表节点数，用于后面是否转换为红黑树做判断</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"comment\">//key相同 修改</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"literal\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"comment\">//到这里说明已经是链表尾，把当前值作为新的节点插入到队尾</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//红黑树节点操作</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果链表中节点数binCount &gt;= TREEIFY_THRESHOLD(默认是8)，则把链表转化为红黑树结构</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//更新新元素个数</span></span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-扩容transfer\"><a href=\"#2-扩容transfer\" class=\"headerlink\" title=\"2. 扩容transfer\"></a>2. 扩容transfer</h2><p><a href=\"https://www.jianshu.com/p/2829fe36a8dd\">https://www.jianshu.com/p/2829fe36a8dd</a></p>\n<ol>\n<li>计算转移幅度<code>stride</code>（或者说是当前线程需要转移的节点数），最小为16；</li>\n<li>创建一个相当于当前 table 两倍容量的 Node 数组<code>nextTab</code>，转移完成后用作新的 table ；</li>\n<li>从<code>transferIndex</code>（初始为<code>table.length</code>，也就是 table 的最后一个节点）开始，依次向前处理<code>stride</code>个节点。用<code>i</code>作为索引控制流程。如果<code>table[i]</code>为空，用<code>fwd</code>占位，如果为<code>fwd</code>，跳过。如果<code>table[i]</code>是正常节点，用算法将链表&#x2F;红黑树节点分割成两份，<code>nextTab</code>中生成索引为<code>i</code>和<code>i+n</code>的节点。</li>\n<li>最后把操作过的节点都设为 ForwardingNode 节点（hash&#x3D; MOVED，这样别的线程就可以检测到）</li>\n</ol>\n<p>再来看看源码和注释。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Moves and/or copies the nodes in each bin to new table. See</span></span><br><span class=\"line\"><span class=\"comment\"> * above for explanation.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * transferIndex 表示转移时的下标，初始为扩容前的 length。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 我们假设长度是 32</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transfer</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> tab.length, stride;</span><br><span class=\"line\">    <span class=\"comment\">// 转移幅度( tab.length/(NCPU*8) )，最小为16</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((stride = (NCPU &gt; <span class=\"number\">1</span>) ? (n &gt;&gt;&gt; <span class=\"number\">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class=\"line\">        stride = MIN_TRANSFER_STRIDE; <span class=\"comment\">// subdivide range 细分范围 stridea：TODO</span></span><br><span class=\"line\">    <span class=\"comment\">// 新的 table 尚未初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextTab == <span class=\"literal\">null</span>) &#123;            <span class=\"comment\">// initiating</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 扩容  2 倍</span></span><br><span class=\"line\">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">// 更新</span></span><br><span class=\"line\">            nextTab = nt;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;      <span class=\"comment\">// try to cope with OOME</span></span><br><span class=\"line\">            <span class=\"comment\">// 扩容失败， sizeCtl 使用 int 最大值。</span></span><br><span class=\"line\">            sizeCtl = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;<span class=\"comment\">// 结束</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新成员变量</span></span><br><span class=\"line\">        nextTable = nextTab;</span><br><span class=\"line\">        <span class=\"comment\">// 更新转移下标，就是 老的 tab 的 length</span></span><br><span class=\"line\">        transferIndex = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 新 tab 的 length</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">nextn</span> <span class=\"operator\">=</span> nextTab.length;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 fwd 节点，用于占位。当别的线程发现这个槽位中是 fwd 类型的节点，则跳过这个节点。</span></span><br><span class=\"line\">    ForwardingNode&lt;K,V&gt; fwd = <span class=\"keyword\">new</span> <span class=\"title class_\">ForwardingNode</span>&lt;K,V&gt;(nextTab);</span><br><span class=\"line\">    <span class=\"comment\">// 首次推进为 true，如果等于 true，说明需要再次推进一个下标（i--），反之，如果是 false，那么就不能推进下标，需要将当前的下标处理完毕才能继续推进</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">advance</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 完成状态，如果是 true，就结束此方法。</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">finishing</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>; <span class=\"comment\">// to ensure sweep before committing nextTab</span></span><br><span class=\"line\">    <span class=\"comment\">// i：当前处理的Node索引；bound：需要处理节点的索引边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, bound = <span class=\"number\">0</span>;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// f:当前处理i位置的node; fh:f.hash</span></span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> fh;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前线程可以向后推进；这个循环就是控制 i 递减。同时，每个线程都会进入这里取得自己需要转移的桶的区间</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (advance) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//nextIndex:下一个要处理的节点索引; nextBound:下一个需要处理的节点的索引边界</span></span><br><span class=\"line\">            <span class=\"type\">int</span> nextIndex, nextBound;</span><br><span class=\"line\">            <span class=\"comment\">// 通过while循环获取本次需要移动的节点索引i</span></span><br><span class=\"line\">            <span class=\"comment\">// 通常，第一次进入循环，i-- 这个判断会无法通过，从而走下面的 nextIndex 赋值操作（获取最新的转移下标）。其余情况都是：如果可以推进，将 i 减一，然后修改成不可推进。如果 i 对应的桶处理成功了，改成可以推进。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--i &gt;= bound || finishing)</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 节点已全部转移。</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((nextIndex = transferIndex) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果小于等于0，说明没有区间了 ，i 改成 -1，推进状态变成 false，不再推进，表示，扩容结束了，当前线程可以退出了</span></span><br><span class=\"line\">                <span class=\"comment\">// 这个 -1 会在下面的 if 块里判断，从而进入完成状态判断</span></span><br><span class=\"line\">                i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;<span class=\"comment\">// 这里设置 false，是为了防止在没有成功处理一个桶的情况下却进行了推进</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//transferIndex（初值为最后一个节点的索引），表示从transferIndex开始后面所有的节点都已分配，</span></span><br><span class=\"line\">            <span class=\"comment\">//每次线程领取扩容任务后，需要更新transferIndex的值(transferIndex-stride)。</span></span><br><span class=\"line\">            <span class=\"comment\">//CAS修改transferIndex，即 length - 区间值，留下剩余的区间值供后面的线程使用</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt</span><br><span class=\"line\">                     (<span class=\"built_in\">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class=\"line\">                      nextBound = (nextIndex &gt; stride ?</span><br><span class=\"line\">                                   nextIndex - stride : <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">                bound = nextBound;<span class=\"comment\">// 这个值就是当前线程可以处理的最小当前区间最小下标</span></span><br><span class=\"line\">                i = nextIndex - <span class=\"number\">1</span>; <span class=\"comment\">// 初次对i 赋值，这个就是当前线程可以处理的当前区间的最大下标</span></span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 如果 i 小于0 （不在 tab 下标内，按照上面的判断，领取最后一段区间的线程扩容结束）</span></span><br><span class=\"line\">        <span class=\"comment\">//  如果 i &gt;= tab.length(不知道为什么这么判断)</span></span><br><span class=\"line\">        <span class=\"comment\">//  如果 i + tab.length &gt;= nextTable.length  （不知道为什么这么判断）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> sc;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finishing) &#123; <span class=\"comment\">// 如果完成了扩容</span></span><br><span class=\"line\">                nextTable = <span class=\"literal\">null</span>;<span class=\"comment\">// 删除成员变量</span></span><br><span class=\"line\">                table = nextTab;<span class=\"comment\">// 更新 table</span></span><br><span class=\"line\">                sizeCtl = (n &lt;&lt; <span class=\"number\">1</span>) - (n &gt;&gt;&gt; <span class=\"number\">1</span>); <span class=\"comment\">// 更新阈值</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;<span class=\"comment\">// 结束方法。</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当前线程已经完成转移，但可能还有其他线程正在进行转移操作</span></span><br><span class=\"line\">            <span class=\"comment\">//每个线程完成自己的扩容操作后就对sizeCtl-1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc = sizeCtl, sc - <span class=\"number\">1</span>)) &#123;<span class=\"comment\">// 尝试将 sc -1. 表示这个线程结束帮助扩容了，将 sc 的低 16 位减一。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc - <span class=\"number\">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)<span class=\"comment\">// 如果 sc - 2 不等于标识符左移 16 位。不相等，说明这里还有其他线程正在操作，直接返回。</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>; <span class=\"comment\">//如果还有其他线程正在操作，直接返回，否则的话重新初始化i对原tab进行一遍检查然后再提交</span></span><br><span class=\"line\">                finishing = advance = <span class=\"literal\">true</span>;<span class=\"comment\">// 如果相等，扩容结束了，更新 finising 变量</span></span><br><span class=\"line\">                i = n; <span class=\"comment\">// 再次循环检查一下整张表</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i)) == <span class=\"literal\">null</span>) <span class=\"comment\">// 获取老 tab i 下标位置的变量，如果是 null，就使用 fwd 占位。</span></span><br><span class=\"line\">            advance = casTabAt(tab, i, <span class=\"literal\">null</span>, fwd);<span class=\"comment\">// 如果成功写入 fwd 占位，再次推进一个下标</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)<span class=\"comment\">// 如果不是 null 且 hash 值是 MOVED。</span></span><br><span class=\"line\">            advance = <span class=\"literal\">true</span>; <span class=\"comment\">// already processed // 说明别的线程已经处理过了，再次推进一个下标</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 到这里，说明这个位置有实际值了，且不是占位符。对这个节点上锁。为什么上锁，防止 putVal 的时候向链表插入数据</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    Node&lt;K,V&gt; ln, hn;<span class=\"comment\">//处理当前拿到的节点,构建两个node:ln/hn。ln:原位置; hn:i+n位置</span></span><br><span class=\"line\">                    <span class=\"comment\">// 如果 f 的 hash 值大于 0 。TreeBin 的 hash 是 -2</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;<span class=\"comment\">//当前为链表节点（fh&gt;=0）</span></span><br><span class=\"line\">                        <span class=\"comment\">// 对老长度进行与运算, 把原链表中的元素分成两份</span></span><br><span class=\"line\">                        <span class=\"comment\">// 由于 Map 的长度都是 2 的次方（000001000 这类的数字），那么取于 length 只有 2 种结果，一种是 0，一种是1</span></span><br><span class=\"line\">                        <span class=\"comment\">//  如果是结果是0 ，Doug Lea 将其放在低位，反之放在高位，目的是将链表重新 hash，放到对应的位置上，使新的索引为i+n或i不变</span></span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">runBit</span> <span class=\"operator\">=</span> fh &amp; n;</span><br><span class=\"line\">                        <span class=\"comment\">//最后一个与头节点f索引不同的节点</span></span><br><span class=\"line\">                        Node&lt;K,V&gt; lastRun = f; </span><br><span class=\"line\">                        <span class=\"comment\">//从索引i的节点开始向后查找最后一个有效节点</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class=\"literal\">null</span>; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> p.hash &amp; n;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (b != runBit) &#123;</span><br><span class=\"line\">                                runBit = b; <span class=\"comment\">// 更新 runBit，用于下面判断 lastRun 该赋值给 ln 还是 hn。</span></span><br><span class=\"line\">                                lastRun = p; <span class=\"comment\">// 这个 lastRun 保证后面的节点与自己的取于值相同，避免后面没有必要的循环</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (runBit == <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 如果最后更新的 runBit 是 0 ，索引为i不变</span></span><br><span class=\"line\">                            ln = lastRun;</span><br><span class=\"line\">                            hn = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            hn = lastRun; <span class=\"comment\">// 如果最后更新的 runBit 是 1，新的索引为i+n</span></span><br><span class=\"line\">                            ln = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;<span class=\"comment\">// 再次循环，生成两个链表，lastRun 作为停止条件，这样就是避免无谓的循环（lastRun 后面都是相同的取于结果）</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">ph</span> <span class=\"operator\">=</span> p.hash; <span class=\"type\">K</span> <span class=\"variable\">pk</span> <span class=\"operator\">=</span> p.key; <span class=\"type\">V</span> <span class=\"variable\">pv</span> <span class=\"operator\">=</span> p.val;</span><br><span class=\"line\">                            <span class=\"comment\">// 如果与运算结果是 0，那么就还在低位</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((ph &amp; n) == <span class=\"number\">0</span>) <span class=\"comment\">// 如果是0 ，那么创建低位节点</span></span><br><span class=\"line\">                                ln = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"comment\">// 1 则创建高位</span></span><br><span class=\"line\">                                hn = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 其实这里类似 hashMap </span></span><br><span class=\"line\">                        <span class=\"comment\">// 设置低位链表放在新链表的 i</span></span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        <span class=\"comment\">// 设置高位链表，在原有长度上加 n</span></span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        <span class=\"comment\">// 将旧的链表设置成占位符</span></span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        <span class=\"comment\">// 继续向后推进</span></span><br><span class=\"line\">                        advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;<span class=\"comment\">// 如果是红黑树</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; lo = <span class=\"literal\">null</span>, loTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; hi = <span class=\"literal\">null</span>, hiTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">lc</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class=\"literal\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> e.hash;</span><br><span class=\"line\">                            TreeNode&lt;K,V&gt; p = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>&lt;K,V&gt;</span><br><span class=\"line\">                                (h, e.key, e.val, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                            <span class=\"comment\">// 和链表相同的判断，与运算 == 0 的放在原位置</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((h &amp; n) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = loTail) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    lo = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    loTail.next = p;</span><br><span class=\"line\">                                loTail = p;</span><br><span class=\"line\">                                ++lc;</span><br><span class=\"line\">                            &#125; <span class=\"comment\">// 不是 0 的放在i+n</span></span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = hiTail) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    hi = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    hiTail.next = p;</span><br><span class=\"line\">                                hiTail = p;</span><br><span class=\"line\">                                ++hc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果树的节点数小于等于 6，那么转成链表，反之，创建一个新的树</span></span><br><span class=\"line\">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class=\"line\">                            (hc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> <span class=\"title class_\">TreeBin</span>&lt;K,V&gt;(lo) : t;</span><br><span class=\"line\">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class=\"line\">                            (lc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> <span class=\"title class_\">TreeBin</span>&lt;K,V&gt;(hi) : t;</span><br><span class=\"line\">                        <span class=\"comment\">// 低位树</span></span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        <span class=\"comment\">// 高位数</span></span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        <span class=\"comment\">// 旧的设置成占位符</span></span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        <span class=\"comment\">// 继续向后推进</span></span><br><span class=\"line\">                        advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-helpTransfer方法\"><a href=\"#3-helpTransfer方法\" class=\"headerlink\" title=\"3. helpTransfer方法\"></a>3. helpTransfer方法</h2><p>如果索引到的节点的 hash 为-1，说明当前节点处于移动状态（或者说是其他线程正在对 f 节点进行转移操作。这里主要是靠 ForwardingNode 节点来检测，因为ForwardingNode 中有指向nextTable的指针，可以得到nextTable。这个线程就可以先去帮助扩容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//帮助其他线程进行转移操作</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] nextTab; <span class=\"type\">int</span> sc;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab != <span class=\"literal\">null</span> &amp;&amp; (f <span class=\"keyword\">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class=\"line\">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算操作栈校验码</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> resizeStamp(tab.length);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class=\"line\">               (sc = sizeCtl) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class=\"number\">0</span>)<span class=\"comment\">//不需要帮助转移，跳出</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>)) &#123;<span class=\"comment\">//CAS更新帮助转移的线程数</span></span><br><span class=\"line\">                transfer(tab, nextTab);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextTab;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h1><p>底层数据结构<code>数组+链表+红黑树</code></p>\n<h2 id=\"1-初始化时tableSizeFor方法\"><a href=\"#1-初始化时tableSizeFor方法\" class=\"headerlink\" title=\"1. 初始化时tableSizeFor方法\"></a>1. 初始化时tableSizeFor方法</h2><p>找到大于或等于 cap 的最小2的幂的数作为table的size。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a power of two size for the given target capacity.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">tableSizeFor</span><span class=\"params\">(<span class=\"type\">int</span> cap)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> cap - <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-查找\"><a href=\"#2-查找\" class=\"headerlink\" title=\"2. 查找\"></a>2. 查找</h2><p><code>(n - 1)&amp; hash</code>相当于取这个数的二进制的n-1位，得到的就是映射到table的位置索引。</p>\n<blockquote>\n<p>hash :             1011 1001</p>\n<p>n-1:                 0000 1111</p>\n<p>(n - 1)&amp; hash :0000 1001</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title function_\">getNode</span><span class=\"params\">(<span class=\"type\">int</span> hash, Object key)</span> &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"type\">int</span> n; K k;</span><br><span class=\"line\">    <span class=\"comment\">// first索引到的table的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"literal\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果first的key就是要查找的key，直接返回这个节点</span></span><br><span class=\"line\">            ((k = first.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不是，并且还有next的节点，继续查找</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 first 是 TreeNode 类型，则调用黑红树查找方法</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// 对链表进行查找</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-遍历\"><a href=\"#3-遍历\" class=\"headerlink\" title=\"3. 遍历\"></a>3. 遍历</h2><p>用Iterator迭代器遍历，不多赘述。遍历顺序是先数组，数组中有链表&#x2F;红黑树时，遍历它们。<strong>所以插入顺序和遍历顺序会不一致。</strong></p>\n<h2 id=\"4-插入\"><a href=\"#4-插入\" class=\"headerlink\" title=\"4. 插入\"></a>4. 插入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(<span class=\"type\">int</span> hash, K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent,</span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"type\">boolean</span> evict)</span> &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"type\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"comment\">// 如果table还未被初始化，先初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">// 如果table[i]没有节点，新生成一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"comment\">// 如果键的值以及节点 hash 等于链表中的第一个键值对节点时，则将 e 指向该键值对</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// 如果桶中的引用类型为 TreeNode，则调用红黑树的插入方法</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)  </span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"built_in\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对链表进行遍历，并统计链表长度</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 链表中不包含要插入的键值对节点时，则将该节点接在链表的最后</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 如果链表长度大于或等于树化阈值，则进行树化操作</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 条件为 true，表示当前链表包含要插入的键值对，终止遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 判断要插入的键值对是否存在 HashMap 中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> e.value;</span><br><span class=\"line\">            <span class=\"comment\">// onlyIfAbsent 表示是否仅在 oldValue 为 null 的情况下更新键值对的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"comment\">// 键值对数量超过阈值时，则进行扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-扩容\"><a href=\"#5-扩容\" class=\"headerlink\" title=\"5. 扩容\"></a>5. 扩容</h2><ol>\n<li>计算新桶数组的容量 newCap 和新阈值 newThr</li>\n<li>根据计算出的 newCap 创建新的桶数组，桶数组 table 也是在这里进行初始化的</li>\n<li>将键值对节点重新映射到新的桶数组里。如果节点是 TreeNode 类型，则需要拆分红黑树。如果是普通节点，则节点按原顺序进行分组。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldCap</span> <span class=\"operator\">=</span> (oldTab == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldThr</span> <span class=\"operator\">=</span> threshold;</span><br><span class=\"line\">    <span class=\"type\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 table 不为空，表明已经初始化过了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当 table 容量超过容量最大值，则不再扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">// 按旧容量和阈值的2倍计算新容量和阈值的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 初始化时，将 threshold 的值赋值给 newCap，</span></span><br><span class=\"line\"><span class=\"comment\">         * HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span> </span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 调用无参构造方法时，桶数组容量为默认容量，</span></span><br><span class=\"line\"><span class=\"comment\">         * 阈值为默认容量与默认负载因子乘积</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"type\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// newThr 为 0 时，按阈值计算公式进行计算</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> (<span class=\"type\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"type\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                  (<span class=\"type\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"comment\">// 创建新的桶数组，桶数组的初始化也是在这里完成的</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[newCap];</span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果旧的桶数组不为空，则遍历桶数组，并将键值对映射到新的桶数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    <span class=\"comment\">// 重新映射时，需要对红黑树进行拆分</span></span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"built_in\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"literal\">null</span>, loTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"literal\">null</span>, hiTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"comment\">// 遍历链表，并将链表节点按原顺序进行分组</span></span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 将分组后的链表映射到新桶中</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-链表树化、红黑树链化与拆分\"><a href=\"#6-链表树化、红黑树链化与拆分\" class=\"headerlink\" title=\"6. 链表树化、红黑树链化与拆分\"></a>6. 链表树化、红黑树链化与拆分</h2><h3 id=\"6-1-键值比较\"><a href=\"#6-1-键值比较\" class=\"headerlink\" title=\"6.1 键值比较\"></a>6.1 键值比较</h3><p>HashMap 是做了三步处理，确保可以比较出两个键的大小，如下：</p>\n<ol>\n<li>比较键与键之间 hash 的大小，如果 hash 相同，继续往下比较</li>\n<li>检测键类是否实现了 Comparable 接口，如果实现调用 compareTo 方法进行比较</li>\n<li>如果仍未比较出大小，就需要进行仲裁了，仲裁方法为 tieBreakOrder（大家自己看源码吧）</li>\n</ol>\n<h3 id=\"6-2-红黑树拆分\"><a href=\"#6-2-红黑树拆分\" class=\"headerlink\" title=\"6.2 红黑树拆分\"></a>6.2 红黑树拆分</h3><p>扩容后，普通节点需要重新映射，红黑树节点也不例外。按照一般的思路，我们可以先把红黑树转成链表，之后再重新映射链表即可。这种处理方式是大家比较容易想到的，但这样做会损失一定的效率。不同于上面的处理方式，HashMap 实现的思路则是上好佳（上好佳请把广告费打给我）。如上节所说，在将普通链表转成红黑树时，HashMap 通过两个额外的引用 next 和 prev 保留了原链表的节点顺序。这样再对红黑树进行重新映射时，完全可以按照映射链表的方式进行。这样就避免了将红黑树转成链表后再进行映射，无形中提高了效率。</p>\n<h3 id=\"6-3-红黑树链化\"><a href=\"#6-3-红黑树链化\" class=\"headerlink\" title=\"6.3 红黑树链化\"></a>6.3 红黑树链化</h3><p>前面说过，红黑树中仍然保留了原链表节点顺序。有了这个前提，再将红黑树转成链表就简单多了，仅需将 TreeNode 链表转成 Node 类型的链表即可。</p>\n<h2 id=\"7-transient\"><a href=\"#7-transient\" class=\"headerlink\" title=\"7. transient\"></a>7. transient</h2><p>如果大家细心阅读 HashMap 的源码，会发现桶数组 table 被申明为 transient。transient 表示易变的意思，在 Java 中，被该关键字修饰的变量不会被默认的序列化机制序列化。我们再回到源码中，考虑一个问题：桶数组 table 是 HashMap 底层重要的数据结构，不序列化的话，别人还怎么还原呢？</p>\n<p>这里简单说明一下吧，HashMap 并没有使用默认的序列化机制，而是通过实现<code>readObject/writeObject</code>两个方法自定义了序列化的内容。这样做是有原因的，试问一句，HashMap 中存储的内容是什么？不用说，大家也知道是<code>键值对</code>。所以只要我们把键值对序列化了，我们就可以根据键值对数据重建 HashMap。有的朋友可能会想，序列化 table 不是可以一步到位，后面直接还原不就行了吗？这样一想，倒也是合理。但序列化 talbe 存在着两个问题：</p>\n<ol>\n<li>table 多数情况下是无法被存满的，序列化未使用的部分，浪费空间</li>\n<li>同一个键值对在不同 JVM 下，所处的桶位置可能是不同的，在不同的 JVM 下反序列化 table 可能会发生错误。</li>\n</ol>\n<p>以上两个问题中，第一个问题比较好理解，第二个问题解释一下。HashMap 的<code>get/put/remove</code>等方法第一步就是根据 hash 找到键所在的桶位置，但如果键没有覆写 hashCode 方法，计算 hash 时最终调用 Object 中的 hashCode 方法。但 Object 中的 hashCode 方法是 native 型的，不同的 JVM 下，可能会有不同的实现，产生的 hash 可能也是不一样的。也就是说同一个键在不同平台下可能会产生不同的 hash，此时再对在同一个 table 继续操作，就会出现问题。</p>\n<p>综上所述，大家应该能明白 HashMap 不序列化 table 的原因了。</p>\n","length":15079,"excerpt":"","more":"<h1 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h1><h2 id=\"1-put方法\"><a href=\"#1-put方法\" class=\"headerlink\" title=\"1. put方法\"></a>1. put方法</h2><p><a href=\"https://www.jianshu.com/p/0fb89aefac66\">https://www.jianshu.com/p/0fb89aefac66</a></p>\n<ol>\n<li><p>检查key&#x2F;value是否为空，如果为空，抛出异常。</p>\n</li>\n<li><p>进入for死循环</p>\n</li>\n<li><p>table是否为null，如果为空，initTable，然后2</p>\n</li>\n<li><p>根据hash，计算出索引，取到该索引的节点f</p>\n</li>\n<li><p>检查f是否为空，如果为空，直接new一个新节点，并CAS插入，退出循环</p>\n</li>\n<li><p>如果f不空，检查f.hash &#x3D;&#x3D; MOVED(-1)，如果相等，帮助扩容</p>\n</li>\n<li><p>如果f.hash !&#x3D; MOVED(-1)，synchronized该节点</p>\n</li>\n<li><p>如果链表中找到值为key的节点，更新节点的value；如果没有，new节点，增加到尾部</p>\n</li>\n<li><p>如果节点数&gt;8，treeifyBin转换红黑树</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(key, value, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Implementation for put and putIfAbsent */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"literal\">null</span> || value == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"comment\">//计算hash值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">hash</span> <span class=\"operator\">=</span> spread(key.hashCode());</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;<span class=\"comment\">//自旋</span></span><br><span class=\"line\">        <span class=\"comment\">//f:索引节点; n:tab.length; i:新节点索引 (n - 1) &amp; hash; fh:f.hash</span></span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> n, i, fh;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tab == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//初始化</span></span><br><span class=\"line\">            tab = initTable();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i = (n - <span class=\"number\">1</span>) &amp; hash)) == <span class=\"literal\">null</span>) &#123;<span class=\"comment\">//索引i节点为空，直接插入</span></span><br><span class=\"line\">            <span class=\"comment\">//cas插入节点,成功则跳出循环</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (casTabAt(tab, i, <span class=\"literal\">null</span>,</span><br><span class=\"line\">                         <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key, value, <span class=\"literal\">null</span>)))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;                   <span class=\"comment\">// no lock when adding to empty bin</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前节点处于移动状态-其他线程正在进行节点转移操作</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)</span><br><span class=\"line\">            <span class=\"comment\">//帮助转移</span></span><br><span class=\"line\">            tab = helpTransfer(tab, f);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldVal</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;<span class=\"comment\">//check stable</span></span><br><span class=\"line\">                    <span class=\"comment\">//f.hash&gt;=0,说明f是链表的头结点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        binCount = <span class=\"number\">1</span>;<span class=\"comment\">//记录链表节点数，用于后面是否转换为红黑树做判断</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class=\"line\">                            K ek;</span><br><span class=\"line\">                            <span class=\"comment\">//key相同 修改</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                                ((ek = e.key) == key ||</span><br><span class=\"line\">                                 (ek != <span class=\"literal\">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class=\"line\">                                oldVal = e.val;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                    e.val = value;</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Node&lt;K,V&gt; pred = e;</span><br><span class=\"line\">                            <span class=\"comment\">//到这里说明已经是链表尾，把当前值作为新的节点插入到队尾</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((e = e.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                                pred.next = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class=\"line\">                                                          value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//红黑树节点操作</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        Node&lt;K,V&gt; p;</span><br><span class=\"line\">                        binCount = <span class=\"number\">2</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class=\"line\">                                                       value)) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                            oldVal = p.val;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!onlyIfAbsent)</span><br><span class=\"line\">                                p.val = value;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (binCount != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果链表中节点数binCount &gt;= TREEIFY_THRESHOLD(默认是8)，则把链表转化为红黑树结构</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class=\"line\">                    treeifyBin(tab, i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVal != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> oldVal;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//更新新元素个数</span></span><br><span class=\"line\">    addCount(<span class=\"number\">1L</span>, binCount);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-扩容transfer\"><a href=\"#2-扩容transfer\" class=\"headerlink\" title=\"2. 扩容transfer\"></a>2. 扩容transfer</h2><p><a href=\"https://www.jianshu.com/p/2829fe36a8dd\">https://www.jianshu.com/p/2829fe36a8dd</a></p>\n<ol>\n<li>计算转移幅度<code>stride</code>（或者说是当前线程需要转移的节点数），最小为16；</li>\n<li>创建一个相当于当前 table 两倍容量的 Node 数组<code>nextTab</code>，转移完成后用作新的 table ；</li>\n<li>从<code>transferIndex</code>（初始为<code>table.length</code>，也就是 table 的最后一个节点）开始，依次向前处理<code>stride</code>个节点。用<code>i</code>作为索引控制流程。如果<code>table[i]</code>为空，用<code>fwd</code>占位，如果为<code>fwd</code>，跳过。如果<code>table[i]</code>是正常节点，用算法将链表&#x2F;红黑树节点分割成两份，<code>nextTab</code>中生成索引为<code>i</code>和<code>i+n</code>的节点。</li>\n<li>最后把操作过的节点都设为 ForwardingNode 节点（hash&#x3D; MOVED，这样别的线程就可以检测到）</li>\n</ol>\n<p>再来看看源码和注释。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Moves and/or copies the nodes in each bin to new table. See</span></span><br><span class=\"line\"><span class=\"comment\"> * above for explanation.</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * transferIndex 表示转移时的下标，初始为扩容前的 length。</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * 我们假设长度是 32</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transfer</span><span class=\"params\">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> tab.length, stride;</span><br><span class=\"line\">    <span class=\"comment\">// 转移幅度( tab.length/(NCPU*8) )，最小为16</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((stride = (NCPU &gt; <span class=\"number\">1</span>) ? (n &gt;&gt;&gt; <span class=\"number\">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class=\"line\">        stride = MIN_TRANSFER_STRIDE; <span class=\"comment\">// subdivide range 细分范围 stridea：TODO</span></span><br><span class=\"line\">    <span class=\"comment\">// 新的 table 尚未初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nextTab == <span class=\"literal\">null</span>) &#123;            <span class=\"comment\">// initiating</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 扩容  2 倍</span></span><br><span class=\"line\">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">// 更新</span></span><br><span class=\"line\">            nextTab = nt;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ex) &#123;      <span class=\"comment\">// try to cope with OOME</span></span><br><span class=\"line\">            <span class=\"comment\">// 扩容失败， sizeCtl 使用 int 最大值。</span></span><br><span class=\"line\">            sizeCtl = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;<span class=\"comment\">// 结束</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 更新成员变量</span></span><br><span class=\"line\">        nextTable = nextTab;</span><br><span class=\"line\">        <span class=\"comment\">// 更新转移下标，就是 老的 tab 的 length</span></span><br><span class=\"line\">        transferIndex = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 新 tab 的 length</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">nextn</span> <span class=\"operator\">=</span> nextTab.length;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 fwd 节点，用于占位。当别的线程发现这个槽位中是 fwd 类型的节点，则跳过这个节点。</span></span><br><span class=\"line\">    ForwardingNode&lt;K,V&gt; fwd = <span class=\"keyword\">new</span> <span class=\"title class_\">ForwardingNode</span>&lt;K,V&gt;(nextTab);</span><br><span class=\"line\">    <span class=\"comment\">// 首次推进为 true，如果等于 true，说明需要再次推进一个下标（i--），反之，如果是 false，那么就不能推进下标，需要将当前的下标处理完毕才能继续推进</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">advance</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 完成状态，如果是 true，就结束此方法。</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">finishing</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>; <span class=\"comment\">// to ensure sweep before committing nextTab</span></span><br><span class=\"line\">    <span class=\"comment\">// i：当前处理的Node索引；bound：需要处理节点的索引边界</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, bound = <span class=\"number\">0</span>;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// f:当前处理i位置的node; fh:f.hash</span></span><br><span class=\"line\">        Node&lt;K,V&gt; f; <span class=\"type\">int</span> fh;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前线程可以向后推进；这个循环就是控制 i 递减。同时，每个线程都会进入这里取得自己需要转移的桶的区间</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (advance) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//nextIndex:下一个要处理的节点索引; nextBound:下一个需要处理的节点的索引边界</span></span><br><span class=\"line\">            <span class=\"type\">int</span> nextIndex, nextBound;</span><br><span class=\"line\">            <span class=\"comment\">// 通过while循环获取本次需要移动的节点索引i</span></span><br><span class=\"line\">            <span class=\"comment\">// 通常，第一次进入循环，i-- 这个判断会无法通过，从而走下面的 nextIndex 赋值操作（获取最新的转移下标）。其余情况都是：如果可以推进，将 i 减一，然后修改成不可推进。如果 i 对应的桶处理成功了，改成可以推进。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--i &gt;= bound || finishing)</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 节点已全部转移。</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((nextIndex = transferIndex) &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果小于等于0，说明没有区间了 ，i 改成 -1，推进状态变成 false，不再推进，表示，扩容结束了，当前线程可以退出了</span></span><br><span class=\"line\">                <span class=\"comment\">// 这个 -1 会在下面的 if 块里判断，从而进入完成状态判断</span></span><br><span class=\"line\">                i = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>;<span class=\"comment\">// 这里设置 false，是为了防止在没有成功处理一个桶的情况下却进行了推进</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//transferIndex（初值为最后一个节点的索引），表示从transferIndex开始后面所有的节点都已分配，</span></span><br><span class=\"line\">            <span class=\"comment\">//每次线程领取扩容任务后，需要更新transferIndex的值(transferIndex-stride)。</span></span><br><span class=\"line\">            <span class=\"comment\">//CAS修改transferIndex，即 length - 区间值，留下剩余的区间值供后面的线程使用</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (U.compareAndSwapInt</span><br><span class=\"line\">                     (<span class=\"built_in\">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class=\"line\">                      nextBound = (nextIndex &gt; stride ?</span><br><span class=\"line\">                                   nextIndex - stride : <span class=\"number\">0</span>))) &#123;</span><br><span class=\"line\">                bound = nextBound;<span class=\"comment\">// 这个值就是当前线程可以处理的最小当前区间最小下标</span></span><br><span class=\"line\">                i = nextIndex - <span class=\"number\">1</span>; <span class=\"comment\">// 初次对i 赋值，这个就是当前线程可以处理的当前区间的最大下标</span></span><br><span class=\"line\">                advance = <span class=\"literal\">false</span>; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"comment\">// 如果 i 小于0 （不在 tab 下标内，按照上面的判断，领取最后一段区间的线程扩容结束）</span></span><br><span class=\"line\">        <span class=\"comment\">//  如果 i &gt;= tab.length(不知道为什么这么判断)</span></span><br><span class=\"line\">        <span class=\"comment\">//  如果 i + tab.length &gt;= nextTable.length  （不知道为什么这么判断）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> sc;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (finishing) &#123; <span class=\"comment\">// 如果完成了扩容</span></span><br><span class=\"line\">                nextTable = <span class=\"literal\">null</span>;<span class=\"comment\">// 删除成员变量</span></span><br><span class=\"line\">                table = nextTab;<span class=\"comment\">// 更新 table</span></span><br><span class=\"line\">                sizeCtl = (n &lt;&lt; <span class=\"number\">1</span>) - (n &gt;&gt;&gt; <span class=\"number\">1</span>); <span class=\"comment\">// 更新阈值</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;<span class=\"comment\">// 结束方法。</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当前线程已经完成转移，但可能还有其他线程正在进行转移操作</span></span><br><span class=\"line\">            <span class=\"comment\">//每个线程完成自己的扩容操作后就对sizeCtl-1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc = sizeCtl, sc - <span class=\"number\">1</span>)) &#123;<span class=\"comment\">// 尝试将 sc -1. 表示这个线程结束帮助扩容了，将 sc 的低 16 位减一。</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((sc - <span class=\"number\">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)<span class=\"comment\">// 如果 sc - 2 不等于标识符左移 16 位。不相等，说明这里还有其他线程正在操作，直接返回。</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span>; <span class=\"comment\">//如果还有其他线程正在操作，直接返回，否则的话重新初始化i对原tab进行一遍检查然后再提交</span></span><br><span class=\"line\">                finishing = advance = <span class=\"literal\">true</span>;<span class=\"comment\">// 如果相等，扩容结束了，更新 finising 变量</span></span><br><span class=\"line\">                i = n; <span class=\"comment\">// 再次循环检查一下整张表</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((f = tabAt(tab, i)) == <span class=\"literal\">null</span>) <span class=\"comment\">// 获取老 tab i 下标位置的变量，如果是 null，就使用 fwd 占位。</span></span><br><span class=\"line\">            advance = casTabAt(tab, i, <span class=\"literal\">null</span>, fwd);<span class=\"comment\">// 如果成功写入 fwd 占位，再次推进一个下标</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((fh = f.hash) == MOVED)<span class=\"comment\">// 如果不是 null 且 hash 值是 MOVED。</span></span><br><span class=\"line\">            advance = <span class=\"literal\">true</span>; <span class=\"comment\">// already processed // 说明别的线程已经处理过了，再次推进一个下标</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 到这里，说明这个位置有实际值了，且不是占位符。对这个节点上锁。为什么上锁，防止 putVal 的时候向链表插入数据</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (f) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class=\"line\">                    Node&lt;K,V&gt; ln, hn;<span class=\"comment\">//处理当前拿到的节点,构建两个node:ln/hn。ln:原位置; hn:i+n位置</span></span><br><span class=\"line\">                    <span class=\"comment\">// 如果 f 的 hash 值大于 0 。TreeBin 的 hash 是 -2</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fh &gt;= <span class=\"number\">0</span>) &#123;<span class=\"comment\">//当前为链表节点（fh&gt;=0）</span></span><br><span class=\"line\">                        <span class=\"comment\">// 对老长度进行与运算, 把原链表中的元素分成两份</span></span><br><span class=\"line\">                        <span class=\"comment\">// 由于 Map 的长度都是 2 的次方（000001000 这类的数字），那么取于 length 只有 2 种结果，一种是 0，一种是1</span></span><br><span class=\"line\">                        <span class=\"comment\">//  如果是结果是0 ，Doug Lea 将其放在低位，反之放在高位，目的是将链表重新 hash，放到对应的位置上，使新的索引为i+n或i不变</span></span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">runBit</span> <span class=\"operator\">=</span> fh &amp; n;</span><br><span class=\"line\">                        <span class=\"comment\">//最后一个与头节点f索引不同的节点</span></span><br><span class=\"line\">                        Node&lt;K,V&gt; lastRun = f; </span><br><span class=\"line\">                        <span class=\"comment\">//从索引i的节点开始向后查找最后一个有效节点</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class=\"literal\">null</span>; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> p.hash &amp; n;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (b != runBit) &#123;</span><br><span class=\"line\">                                runBit = b; <span class=\"comment\">// 更新 runBit，用于下面判断 lastRun 该赋值给 ln 还是 hn。</span></span><br><span class=\"line\">                                lastRun = p; <span class=\"comment\">// 这个 lastRun 保证后面的节点与自己的取于值相同，避免后面没有必要的循环</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (runBit == <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 如果最后更新的 runBit 是 0 ，索引为i不变</span></span><br><span class=\"line\">                            ln = lastRun;</span><br><span class=\"line\">                            hn = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            hn = lastRun; <span class=\"comment\">// 如果最后更新的 runBit 是 1，新的索引为i+n</span></span><br><span class=\"line\">                            ln = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        &#125;<span class=\"comment\">// 再次循环，生成两个链表，lastRun 作为停止条件，这样就是避免无谓的循环（lastRun 后面都是相同的取于结果）</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">ph</span> <span class=\"operator\">=</span> p.hash; <span class=\"type\">K</span> <span class=\"variable\">pk</span> <span class=\"operator\">=</span> p.key; <span class=\"type\">V</span> <span class=\"variable\">pv</span> <span class=\"operator\">=</span> p.val;</span><br><span class=\"line\">                            <span class=\"comment\">// 如果与运算结果是 0，那么就还在低位</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((ph &amp; n) == <span class=\"number\">0</span>) <span class=\"comment\">// 如果是0 ，那么创建低位节点</span></span><br><span class=\"line\">                                ln = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class=\"line\">                            <span class=\"keyword\">else</span> <span class=\"comment\">// 1 则创建高位</span></span><br><span class=\"line\">                                hn = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 其实这里类似 hashMap </span></span><br><span class=\"line\">                        <span class=\"comment\">// 设置低位链表放在新链表的 i</span></span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        <span class=\"comment\">// 设置高位链表，在原有长度上加 n</span></span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        <span class=\"comment\">// 将旧的链表设置成占位符</span></span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        <span class=\"comment\">// 继续向后推进</span></span><br><span class=\"line\">                        advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;<span class=\"comment\">// 如果是红黑树</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f <span class=\"keyword\">instanceof</span> TreeBin) &#123;</span><br><span class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; lo = <span class=\"literal\">null</span>, loTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        TreeNode&lt;K,V&gt; hi = <span class=\"literal\">null</span>, hiTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        <span class=\"type\">int</span> <span class=\"variable\">lc</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, hc = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 遍历</span></span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class=\"literal\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">                            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> e.hash;</span><br><span class=\"line\">                            TreeNode&lt;K,V&gt; p = <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>&lt;K,V&gt;</span><br><span class=\"line\">                                (h, e.key, e.val, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                            <span class=\"comment\">// 和链表相同的判断，与运算 == 0 的放在原位置</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((h &amp; n) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = loTail) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    lo = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    loTail.next = p;</span><br><span class=\"line\">                                loTail = p;</span><br><span class=\"line\">                                ++lc;</span><br><span class=\"line\">                            &#125; <span class=\"comment\">// 不是 0 的放在i+n</span></span><br><span class=\"line\">                            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> ((p.prev = hiTail) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                    hi = p;</span><br><span class=\"line\">                                <span class=\"keyword\">else</span></span><br><span class=\"line\">                                    hiTail.next = p;</span><br><span class=\"line\">                                hiTail = p;</span><br><span class=\"line\">                                ++hc;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 如果树的节点数小于等于 6，那么转成链表，反之，创建一个新的树</span></span><br><span class=\"line\">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class=\"line\">                            (hc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> <span class=\"title class_\">TreeBin</span>&lt;K,V&gt;(lo) : t;</span><br><span class=\"line\">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class=\"line\">                            (lc != <span class=\"number\">0</span>) ? <span class=\"keyword\">new</span> <span class=\"title class_\">TreeBin</span>&lt;K,V&gt;(hi) : t;</span><br><span class=\"line\">                        <span class=\"comment\">// 低位树</span></span><br><span class=\"line\">                        setTabAt(nextTab, i, ln);</span><br><span class=\"line\">                        <span class=\"comment\">// 高位数</span></span><br><span class=\"line\">                        setTabAt(nextTab, i + n, hn);</span><br><span class=\"line\">                        <span class=\"comment\">// 旧的设置成占位符</span></span><br><span class=\"line\">                        setTabAt(tab, i, fwd);</span><br><span class=\"line\">                        <span class=\"comment\">// 继续向后推进</span></span><br><span class=\"line\">                        advance = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-helpTransfer方法\"><a href=\"#3-helpTransfer方法\" class=\"headerlink\" title=\"3. helpTransfer方法\"></a>3. helpTransfer方法</h2><p>如果索引到的节点的 hash 为-1，说明当前节点处于移动状态（或者说是其他线程正在对 f 节点进行转移操作。这里主要是靠 ForwardingNode 节点来检测，因为ForwardingNode 中有指向nextTable的指针，可以得到nextTable。这个线程就可以先去帮助扩容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//帮助其他线程进行转移操作</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] nextTab; <span class=\"type\">int</span> sc;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tab != <span class=\"literal\">null</span> &amp;&amp; (f <span class=\"keyword\">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class=\"line\">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算操作栈校验码</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> resizeStamp(tab.length);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class=\"line\">               (sc = sizeCtl) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class=\"number\">1</span> ||</span><br><span class=\"line\">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class=\"number\">0</span>)<span class=\"comment\">//不需要帮助转移，跳出</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (U.compareAndSwapInt(<span class=\"built_in\">this</span>, SIZECTL, sc, sc + <span class=\"number\">1</span>)) &#123;<span class=\"comment\">//CAS更新帮助转移的线程数</span></span><br><span class=\"line\">                transfer(tab, nextTab);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nextTab;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h1><p>底层数据结构<code>数组+链表+红黑树</code></p>\n<h2 id=\"1-初始化时tableSizeFor方法\"><a href=\"#1-初始化时tableSizeFor方法\" class=\"headerlink\" title=\"1. 初始化时tableSizeFor方法\"></a>1. 初始化时tableSizeFor方法</h2><p>找到大于或等于 cap 的最小2的幂的数作为table的size。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns a power of two size for the given target capacity.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">tableSizeFor</span><span class=\"params\">(<span class=\"type\">int</span> cap)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> cap - <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    n |= n &gt;&gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (n &lt; <span class=\"number\">0</span>) ? <span class=\"number\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-查找\"><a href=\"#2-查找\" class=\"headerlink\" title=\"2. 查找\"></a>2. 查找</h2><p><code>(n - 1)&amp; hash</code>相当于取这个数的二进制的n-1位，得到的就是映射到table的位置索引。</p>\n<blockquote>\n<p>hash :             1011 1001</p>\n<p>n-1:                 0000 1111</p>\n<p>(n - 1)&amp; hash :0000 1001</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt; <span class=\"title function_\">getNode</span><span class=\"params\">(<span class=\"type\">int</span> hash, Object key)</span> &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class=\"type\">int</span> n; K k;</span><br><span class=\"line\">    <span class=\"comment\">// first索引到的table的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) != <span class=\"literal\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        (first = tab[(n - <span class=\"number\">1</span>) &amp; hash]) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first.hash == hash &amp;&amp; <span class=\"comment\">// always check first node</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果first的key就是要查找的key，直接返回这个节点</span></span><br><span class=\"line\">            ((k = first.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> first;</span><br><span class=\"line\">        <span class=\"comment\">// 如果不是，并且还有next的节点，继续查找</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((e = first.next) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果 first 是 TreeNode 类型，则调用黑红树查找方法</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (first <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// 对链表进行查找</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> ((e = e.next) != <span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-遍历\"><a href=\"#3-遍历\" class=\"headerlink\" title=\"3. 遍历\"></a>3. 遍历</h2><p>用Iterator迭代器遍历，不多赘述。遍历顺序是先数组，数组中有链表&#x2F;红黑树时，遍历它们。<strong>所以插入顺序和遍历顺序会不一致。</strong></p>\n<h2 id=\"4-插入\"><a href=\"#4-插入\" class=\"headerlink\" title=\"4. 插入\"></a>4. 插入</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> V <span class=\"title function_\">put</span><span class=\"params\">(K key, V value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putVal(hash(key), key, value, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(<span class=\"type\">int</span> hash, K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent,</span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"type\">boolean</span> evict)</span> &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"type\">int</span> n, i;</span><br><span class=\"line\">    <span class=\"comment\">// 如果table还未被初始化，先初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tab = table) == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        n = (tab = resize()).length;</span><br><span class=\"line\">    <span class=\"comment\">// 如果table[i]没有节点，新生成一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        tab[i] = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">        <span class=\"comment\">// 如果键的值以及节点 hash 等于链表中的第一个键值对节点时，则将 e 指向该键值对</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">            ((k = p.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">            e = p;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// 如果桶中的引用类型为 TreeNode，则调用红黑树的插入方法</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)  </span><br><span class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"built_in\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对链表进行遍历，并统计链表长度</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 链表中不包含要插入的键值对节点时，则将该节点接在链表的最后</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    p.next = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 如果链表长度大于或等于树化阈值，则进行树化操作</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                        treeifyBin(tab, hash);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 条件为 true，表示当前链表包含要插入的键值对，终止遍历</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                    ((k = e.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                p = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 判断要插入的键值对是否存在 HashMap 中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">            <span class=\"type\">V</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> e.value;</span><br><span class=\"line\">            <span class=\"comment\">// onlyIfAbsent 表示是否仅在 oldValue 为 null 的情况下更新键值对的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            afterNodeAccess(e);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++modCount;</span><br><span class=\"line\">    <span class=\"comment\">// 键值对数量超过阈值时，则进行扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">        resize();</span><br><span class=\"line\">    afterNodeInsertion(evict);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-扩容\"><a href=\"#5-扩容\" class=\"headerlink\" title=\"5. 扩容\"></a>5. 扩容</h2><ol>\n<li>计算新桶数组的容量 newCap 和新阈值 newThr</li>\n<li>根据计算出的 newCap 创建新的桶数组，桶数组 table 也是在这里进行初始化的</li>\n<li>将键值对节点重新映射到新的桶数组里。如果节点是 TreeNode 类型，则需要拆分红黑树。如果是普通节点，则节点按原顺序进行分组。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class=\"line\">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldCap</span> <span class=\"operator\">=</span> (oldTab == <span class=\"literal\">null</span>) ? <span class=\"number\">0</span> : oldTab.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">oldThr</span> <span class=\"operator\">=</span> threshold;</span><br><span class=\"line\">    <span class=\"type\">int</span> newCap, newThr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 table 不为空，表明已经初始化过了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCap &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当 table 容量超过容量最大值，则不再扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">            threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldTab;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"comment\">// 按旧容量和阈值的2倍计算新容量和阈值的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((newCap = oldCap &lt;&lt; <span class=\"number\">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class=\"line\">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class=\"line\">            newThr = oldThr &lt;&lt; <span class=\"number\">1</span>; <span class=\"comment\">// double threshold</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (oldThr &gt; <span class=\"number\">0</span>) <span class=\"comment\">// initial capacity was placed in threshold</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 初始化时，将 threshold 的值赋值给 newCap，</span></span><br><span class=\"line\"><span class=\"comment\">         * HashMap 使用 threshold 变量暂时保存 initialCapacity 参数的值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span> </span><br><span class=\"line\">        newCap = oldThr;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;               <span class=\"comment\">// zero initial threshold signifies using defaults</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 调用无参构造方法时，桶数组容量为默认容量，</span></span><br><span class=\"line\"><span class=\"comment\">         * 阈值为默认容量与默认负载因子乘积</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class=\"line\">        newThr = (<span class=\"type\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// newThr 为 0 时，按阈值计算公式进行计算</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newThr == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> (<span class=\"type\">float</span>)newCap * loadFactor;</span><br><span class=\"line\">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class=\"type\">float</span>)MAXIMUM_CAPACITY ?</span><br><span class=\"line\">                  (<span class=\"type\">int</span>)ft : Integer.MAX_VALUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    threshold = newThr;</span><br><span class=\"line\">    <span class=\"comment\">// 创建新的桶数组，桶数组的初始化也是在这里完成的</span></span><br><span class=\"line\">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>[newCap];</span><br><span class=\"line\">    table = newTab;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldTab != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果旧的桶数组不为空，则遍历桶数组，并将键值对映射到新的桶数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((e = oldTab[j]) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                oldTab[j] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    newTab[e.hash &amp; (newCap - <span class=\"number\">1</span>)] = e;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                    <span class=\"comment\">// 重新映射时，需要对红黑树进行拆分</span></span><br><span class=\"line\">                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\"built_in\">this</span>, newTab, j, oldCap);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// preserve order</span></span><br><span class=\"line\">                    Node&lt;K,V&gt; loHead = <span class=\"literal\">null</span>, loTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; hiHead = <span class=\"literal\">null</span>, hiTail = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                    Node&lt;K,V&gt; next;</span><br><span class=\"line\">                    <span class=\"comment\">// 遍历链表，并将链表节点按原顺序进行分组</span></span><br><span class=\"line\">                    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                        next = e.next;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (loTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                loHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                loTail.next = e;</span><br><span class=\"line\">                            loTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (hiTail == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                                hiHead = e;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                                hiTail.next = e;</span><br><span class=\"line\">                            hiTail = e;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">while</span> ((e = next) != <span class=\"literal\">null</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// 将分组后的链表映射到新桶中</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (loTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        loTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        newTab[j] = loHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (hiTail != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        hiTail.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                        newTab[j + oldCap] = hiHead;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newTab;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-链表树化、红黑树链化与拆分\"><a href=\"#6-链表树化、红黑树链化与拆分\" class=\"headerlink\" title=\"6. 链表树化、红黑树链化与拆分\"></a>6. 链表树化、红黑树链化与拆分</h2><h3 id=\"6-1-键值比较\"><a href=\"#6-1-键值比较\" class=\"headerlink\" title=\"6.1 键值比较\"></a>6.1 键值比较</h3><p>HashMap 是做了三步处理，确保可以比较出两个键的大小，如下：</p>\n<ol>\n<li>比较键与键之间 hash 的大小，如果 hash 相同，继续往下比较</li>\n<li>检测键类是否实现了 Comparable 接口，如果实现调用 compareTo 方法进行比较</li>\n<li>如果仍未比较出大小，就需要进行仲裁了，仲裁方法为 tieBreakOrder（大家自己看源码吧）</li>\n</ol>\n<h3 id=\"6-2-红黑树拆分\"><a href=\"#6-2-红黑树拆分\" class=\"headerlink\" title=\"6.2 红黑树拆分\"></a>6.2 红黑树拆分</h3><p>扩容后，普通节点需要重新映射，红黑树节点也不例外。按照一般的思路，我们可以先把红黑树转成链表，之后再重新映射链表即可。这种处理方式是大家比较容易想到的，但这样做会损失一定的效率。不同于上面的处理方式，HashMap 实现的思路则是上好佳（上好佳请把广告费打给我）。如上节所说，在将普通链表转成红黑树时，HashMap 通过两个额外的引用 next 和 prev 保留了原链表的节点顺序。这样再对红黑树进行重新映射时，完全可以按照映射链表的方式进行。这样就避免了将红黑树转成链表后再进行映射，无形中提高了效率。</p>\n<h3 id=\"6-3-红黑树链化\"><a href=\"#6-3-红黑树链化\" class=\"headerlink\" title=\"6.3 红黑树链化\"></a>6.3 红黑树链化</h3><p>前面说过，红黑树中仍然保留了原链表节点顺序。有了这个前提，再将红黑树转成链表就简单多了，仅需将 TreeNode 链表转成 Node 类型的链表即可。</p>\n<h2 id=\"7-transient\"><a href=\"#7-transient\" class=\"headerlink\" title=\"7. transient\"></a>7. transient</h2><p>如果大家细心阅读 HashMap 的源码，会发现桶数组 table 被申明为 transient。transient 表示易变的意思，在 Java 中，被该关键字修饰的变量不会被默认的序列化机制序列化。我们再回到源码中，考虑一个问题：桶数组 table 是 HashMap 底层重要的数据结构，不序列化的话，别人还怎么还原呢？</p>\n<p>这里简单说明一下吧，HashMap 并没有使用默认的序列化机制，而是通过实现<code>readObject/writeObject</code>两个方法自定义了序列化的内容。这样做是有原因的，试问一句，HashMap 中存储的内容是什么？不用说，大家也知道是<code>键值对</code>。所以只要我们把键值对序列化了，我们就可以根据键值对数据重建 HashMap。有的朋友可能会想，序列化 table 不是可以一步到位，后面直接还原不就行了吗？这样一想，倒也是合理。但序列化 talbe 存在着两个问题：</p>\n<ol>\n<li>table 多数情况下是无法被存满的，序列化未使用的部分，浪费空间</li>\n<li>同一个键值对在不同 JVM 下，所处的桶位置可能是不同的，在不同的 JVM 下反序列化 table 可能会发生错误。</li>\n</ol>\n<p>以上两个问题中，第一个问题比较好理解，第二个问题解释一下。HashMap 的<code>get/put/remove</code>等方法第一步就是根据 hash 找到键所在的桶位置，但如果键没有覆写 hashCode 方法，计算 hash 时最终调用 Object 中的 hashCode 方法。但 Object 中的 hashCode 方法是 native 型的，不同的 JVM 下，可能会有不同的实现，产生的 hash 可能也是不一样的。也就是说同一个键在不同平台下可能会产生不同的 hash，此时再对在同一个 table 继续操作，就会出现问题。</p>\n<p>综上所述，大家应该能明白 HashMap 不序列化 table 的原因了。</p>\n"},{"title":"CopyOnWriteArrayList和CopyOnWriteArraySet的源码解析","date":"2019-06-27T14:49:24.000Z","photos":["https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true"],"description":"从源码角度彻底理解CopyOnWriteArrayList和CopyOnWriteArraySet","_content":"\nCopyOnWriteArrayList 是一个线程安全的 ArrayList，通过内部的 volatile 数组和显式锁 ReentrantLock 来实现线程安全。而 CopyOnWriteArraySet 是线程安全的 Set，它是由 CopyOnWriteArrayList 实现，内部持有一个 CopyOnWriteArrayList 引用，所有的操作都是由 CopyOnWriteArrayList 来实现的。\n\n和 ArrayList 或 Set 相比，CopyOnWriteArrayList / CopyOnWriteArraySet 拥有以下特性：\n\n- 适合元素比较少，并且**读取操作高于更新**(add/set/remove)操作的场景\n- 由于每次更新需要复制内部数组，所以更新操作开销比较大\n- 内部的迭代器 iterator 使用了“快照”技术，存储了内部数组快照， 所以它的 iterator 不支持remove、set、add操作，但是通过迭代器进行并发读取时效率很高。\n\n## 源码解析\n\n```java\n//锁\nfinal transient ReentrantLock lock = new ReentrantLock();\n\n//用于存储元素的内部数组\nprivate transient volatile Object[] array;\n```\n\nCopyOnWriteArrayList 实现非常简单。内部使用了一个 volatile 数组(array)来存储数据，保证了多线程环境下的可见性。在更新数据时，都会新建一个数组，并将更新后的数据拷贝到新建的数组中，最后再将该数组赋值给 array。正由于这个原因，涉及到数据更新的操作效率很低。\n\n### add操作\n\n```java\npublic void add(int index, E element) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        if (index > len || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \"+index+\n                    \", Size: \"+len);\n        Object[] newElements;\n        //计算偏移量\n        int numMoved = len - index;\n        if (numMoved == 0)\n            //作为add(E)处理\n            newElements = Arrays.copyOf(elements, len + 1);\n        else {\n            newElements = new Object[len + 1];\n            //调用native方法根据index拷贝原数组的前半段\n            System.arraycopy(elements, 0, newElements, 0, index);\n            //拷贝后半段\n            System.arraycopy(elements, index, newElements, index + 1,\n                    numMoved);\n        }\n        newElements[index] = element;\n        setArray(newElements);\n    } finally {\n        lock.unlock();\n    }\n}\n\n//System中arrayCopy的实现\npublic static native void arraycopy(Object src,  int  srcPos, Object dest, int destPos, int length);\n```","source":"_posts/CopyOnWriteArrayList和CopyOnWriteArraySet.md","raw":"---\ntitle: CopyOnWriteArrayList和CopyOnWriteArraySet的源码解析\ndate: 2019-06-27 22:49:24\ntags: [Java,并发编程]\ncategories: Java\nphotos:\n  - \"https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true\"\ndescription: 从源码角度彻底理解CopyOnWriteArrayList和CopyOnWriteArraySet\n---\n\nCopyOnWriteArrayList 是一个线程安全的 ArrayList，通过内部的 volatile 数组和显式锁 ReentrantLock 来实现线程安全。而 CopyOnWriteArraySet 是线程安全的 Set，它是由 CopyOnWriteArrayList 实现，内部持有一个 CopyOnWriteArrayList 引用，所有的操作都是由 CopyOnWriteArrayList 来实现的。\n\n和 ArrayList 或 Set 相比，CopyOnWriteArrayList / CopyOnWriteArraySet 拥有以下特性：\n\n- 适合元素比较少，并且**读取操作高于更新**(add/set/remove)操作的场景\n- 由于每次更新需要复制内部数组，所以更新操作开销比较大\n- 内部的迭代器 iterator 使用了“快照”技术，存储了内部数组快照， 所以它的 iterator 不支持remove、set、add操作，但是通过迭代器进行并发读取时效率很高。\n\n## 源码解析\n\n```java\n//锁\nfinal transient ReentrantLock lock = new ReentrantLock();\n\n//用于存储元素的内部数组\nprivate transient volatile Object[] array;\n```\n\nCopyOnWriteArrayList 实现非常简单。内部使用了一个 volatile 数组(array)来存储数据，保证了多线程环境下的可见性。在更新数据时，都会新建一个数组，并将更新后的数据拷贝到新建的数组中，最后再将该数组赋值给 array。正由于这个原因，涉及到数据更新的操作效率很低。\n\n### add操作\n\n```java\npublic void add(int index, E element) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        if (index > len || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \"+index+\n                    \", Size: \"+len);\n        Object[] newElements;\n        //计算偏移量\n        int numMoved = len - index;\n        if (numMoved == 0)\n            //作为add(E)处理\n            newElements = Arrays.copyOf(elements, len + 1);\n        else {\n            newElements = new Object[len + 1];\n            //调用native方法根据index拷贝原数组的前半段\n            System.arraycopy(elements, 0, newElements, 0, index);\n            //拷贝后半段\n            System.arraycopy(elements, index, newElements, index + 1,\n                    numMoved);\n        }\n        newElements[index] = element;\n        setArray(newElements);\n    } finally {\n        lock.unlock();\n    }\n}\n\n//System中arrayCopy的实现\npublic static native void arraycopy(Object src,  int  srcPos, Object dest, int destPos, int length);\n```","slug":"CopyOnWriteArrayList和CopyOnWriteArraySet","published":1,"updated":"2025-02-22T18:52:19.816Z","comments":1,"layout":"post","_id":"cm7hqj8ae0007v0010fwddoq5","content":"<p>CopyOnWriteArrayList 是一个线程安全的 ArrayList，通过内部的 volatile 数组和显式锁 ReentrantLock 来实现线程安全。而 CopyOnWriteArraySet 是线程安全的 Set，它是由 CopyOnWriteArrayList 实现，内部持有一个 CopyOnWriteArrayList 引用，所有的操作都是由 CopyOnWriteArrayList 来实现的。</p>\n<p>和 ArrayList 或 Set 相比，CopyOnWriteArrayList &#x2F; CopyOnWriteArraySet 拥有以下特性：</p>\n<ul>\n<li>适合元素比较少，并且<strong>读取操作高于更新</strong>(add&#x2F;set&#x2F;remove)操作的场景</li>\n<li>由于每次更新需要复制内部数组，所以更新操作开销比较大</li>\n<li>内部的迭代器 iterator 使用了“快照”技术，存储了内部数组快照， 所以它的 iterator 不支持remove、set、add操作，但是通过迭代器进行并发读取时效率很高。</li>\n</ul>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//锁</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">transient</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于存储元素的内部数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Object[] array;</span><br></pre></td></tr></table></figure>\n\n<p>CopyOnWriteArrayList 实现非常简单。内部使用了一个 volatile 数组(array)来存储数据，保证了多线程环境下的可见性。在更新数据时，都会新建一个数组，并将更新后的数据拷贝到新建的数组中，最后再将该数组赋值给 array。正由于这个原因，涉及到数据更新的操作效率很低。</p>\n<h3 id=\"add操作\"><a href=\"#add操作\" class=\"headerlink\" title=\"add操作\"></a>add操作</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> index, E element)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> elements.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; len || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexOutOfBoundsException</span>(<span class=\"string\">&quot;Index: &quot;</span>+index+</span><br><span class=\"line\">                    <span class=\"string\">&quot;, Size: &quot;</span>+len);</span><br><span class=\"line\">        Object[] newElements;</span><br><span class=\"line\">        <span class=\"comment\">//计算偏移量</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numMoved</span> <span class=\"operator\">=</span> len - index;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//作为add(E)处理</span></span><br><span class=\"line\">            newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            newElements = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[len + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">//调用native方法根据index拷贝原数组的前半段</span></span><br><span class=\"line\">            System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">            <span class=\"comment\">//拷贝后半段</span></span><br><span class=\"line\">            System.arraycopy(elements, index, newElements, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                    numMoved);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newElements[index] = element;</span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//System中arrayCopy的实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"type\">int</span>  srcPos, Object dest, <span class=\"type\">int</span> destPos, <span class=\"type\">int</span> length)</span>;</span><br></pre></td></tr></table></figure>","length":1506,"excerpt":"","more":"<p>CopyOnWriteArrayList 是一个线程安全的 ArrayList，通过内部的 volatile 数组和显式锁 ReentrantLock 来实现线程安全。而 CopyOnWriteArraySet 是线程安全的 Set，它是由 CopyOnWriteArrayList 实现，内部持有一个 CopyOnWriteArrayList 引用，所有的操作都是由 CopyOnWriteArrayList 来实现的。</p>\n<p>和 ArrayList 或 Set 相比，CopyOnWriteArrayList &#x2F; CopyOnWriteArraySet 拥有以下特性：</p>\n<ul>\n<li>适合元素比较少，并且<strong>读取操作高于更新</strong>(add&#x2F;set&#x2F;remove)操作的场景</li>\n<li>由于每次更新需要复制内部数组，所以更新操作开销比较大</li>\n<li>内部的迭代器 iterator 使用了“快照”技术，存储了内部数组快照， 所以它的 iterator 不支持remove、set、add操作，但是通过迭代器进行并发读取时效率很高。</li>\n</ul>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//锁</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">transient</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于存储元素的内部数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> Object[] array;</span><br></pre></td></tr></table></figure>\n\n<p>CopyOnWriteArrayList 实现非常简单。内部使用了一个 volatile 数组(array)来存储数据，保证了多线程环境下的可见性。在更新数据时，都会新建一个数组，并将更新后的数据拷贝到新建的数组中，最后再将该数组赋值给 array。正由于这个原因，涉及到数据更新的操作效率很低。</p>\n<h3 id=\"add操作\"><a href=\"#add操作\" class=\"headerlink\" title=\"add操作\"></a>add操作</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> index, E element)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Object[] elements = getArray();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> elements.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; len || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexOutOfBoundsException</span>(<span class=\"string\">&quot;Index: &quot;</span>+index+</span><br><span class=\"line\">                    <span class=\"string\">&quot;, Size: &quot;</span>+len);</span><br><span class=\"line\">        Object[] newElements;</span><br><span class=\"line\">        <span class=\"comment\">//计算偏移量</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numMoved</span> <span class=\"operator\">=</span> len - index;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//作为add(E)处理</span></span><br><span class=\"line\">            newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            newElements = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[len + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">//调用native方法根据index拷贝原数组的前半段</span></span><br><span class=\"line\">            System.arraycopy(elements, <span class=\"number\">0</span>, newElements, <span class=\"number\">0</span>, index);</span><br><span class=\"line\">            <span class=\"comment\">//拷贝后半段</span></span><br><span class=\"line\">            System.arraycopy(elements, index, newElements, index + <span class=\"number\">1</span>,</span><br><span class=\"line\">                    numMoved);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        newElements[index] = element;</span><br><span class=\"line\">        setArray(newElements);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//System中arrayCopy的实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"type\">int</span>  srcPos, Object dest, <span class=\"type\">int</span> destPos, <span class=\"type\">int</span> length)</span>;</span><br></pre></td></tr></table></figure>"},{"title":"GC相关","date":"2019-04-16T06:37:09.000Z","description":"Java面试中，关于GC的知识。","_content":"\n# GC相关\n\n## 1. 垃圾收集器\n\n程序计数器、虚拟机栈、本地方法栈随线程生死，不需要太考虑回收。而Java堆和方法区只有在运行期间才知道创建哪些对象，这部分内存分配和回收都是动态的，GC要关注的是这部分。\n\n引用技术算法：给对象添加一个引用计数器，有引用，+1，引用失效，-1，任何时刻计数器为0的对象不能被使用。但是解决不了对象相互循环引用的问题，故基本不用。\n\n### 可达性分析算法\n\n基本思想：通过一系列的GC Roots对象作为起始点，向下搜索，当一个对象到GC Roots没有任何引用链相连，则这个对象是可回收的。\n\n可以作为GC Roots的对象：\n\n- 虚拟机栈（本地变量表）中引用的对象\n- 方法区中类静态属性引用的对象\n- 方法区中常量引用的对象\n- 本地方法栈JNI（一般指Native方法）引用的对象\n\n### 4种引用\n\n- 强引用：“Object obj = new Object()”这类的引用，只要引用存在，GC就不会回收。\n- 软引用：有用但非必需的对象。在系统将要发生内存溢出之前，会把这些对象列进回收范围中进行二次回收。如果仍没有足够内存，才会抛出内存溢出异常。SoftReference类实现。\n- 弱引用：强度比软引用更弱，只能生存到下一次垃圾回收前，当GC工作，无论当前内存是否足够，都会被回收。WeakReference类实现。\n- 虚引用：唯一目的就是能在GC时收到一个系统通知。PhantomReference类实现。\n\n### finalize方法\n\n- finalize()是Object的protected方法，子类可以覆盖该方法以实现资源清理工作，GC在回收对象之前调用该方法。\n- finalize方法至多由GC执行一次(用户当然可以手动调用对象的finalize方法，但并不影响GC对finalize的行为)\n- 大致描述一下finalize流程：当对象变成(GC Roots)不可达时，GC会判断该对象是否覆盖了finalize方法，若未覆盖，则直接将其回收。否则，若对象未执行过finalize方法，将其放入F-Queue队列，由一低优先级线程执行该队列中对象的finalize方法。执行finalize方法完毕后，GC会再次判断该对象是否可达，若不可达，则进行回收，否则，对象“复活”。\n\n### 方法区的回收\n\n方法区（永久代）回收主要两方面：废弃常量和无用的类。\n\n判断方法，满足一下3个条件：\n\n- 该类所有实例都被回收\n- 加载该类的类加载器被回收\n- 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射获得该类的方法。\n\n在大量使用反射、动态代理、CGLib等ByteCode框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景需要回收方法区，保证永久代不溢出。\n\n## 2. 垃圾收集算法\n\n### 标记-清除算法\n\n先标记所有需要回收的对象，标记完成后统一回收所有被标记的对象。\n\n缺点：效率不高；会产生大量不连续的内存碎片。\n\n### 复制算法\n\n把内存划分成大小相同的两块，当一块用完了，将存活的对象复制到另一块内存，然后将使用过的内存一次清理掉。\n\n大部分虚拟机用**复制算法回收新生代**。将内存分为一块大的Eden，和两块小的Survivor，每次使用Eden和一个Survivor。回收时将Eden和Survivor中存活的对象复制到另一个Survivor上，然后清理。默认Eden和Survivor比例是8:1。当Survivor空间不够时，需要依赖老年代进行分配担保。\n\n### 标记-整理算法\n\n复制收集算法在对象存活率高时效率不高，**老年代使用标记-整理算法**，标记同标记-清除算法，整理是让所有存活的对象向一段移动，然后清理掉边界以外的内存。\n\n### 分代收集算法\n\nGC分代的基本假设：绝大部分对象的生命周期都非常短暂，存活时间短。\n\n“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。\n\n## 3. 垃圾收集器\n\n### Serial收集器\n\n![serial.png](\\image\\interview_prep\\JVM\\serial.png)\n\n串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；垃圾收集的过程中会Stop The World（服务暂停）\n\n参数控制：-XX:+UseSerialGC  串行收集器。\n\n### ParNew收集器\n\n![parnew.png](\\image\\interview_prep\\JVM\\parnew.png)\n\nParNew收集器其实就是Serial收集器的多线程版本。新生代并行，老年代串行；新生代复制算法、老年代标记-压缩\n\n参数控制：-XX:+UseParNewGC  ParNew收集器\n\n-XX:ParallelGCThreads 限制线程数量。\n\n### Parallel收集器\n\nParallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量；也可以通过参数控制GC的时间不大于多少毫秒或者比例；新生代复制算法、老年代标记-压缩\n\n参数控制：-XX:+UseParallelGC  使用Parallel收集器+ 老年代串行。\n\n### Serial Old收集器\n\nSerial Old是Serial的老年代版本，**单线程，标记-整理算法**。\n\n两个用途：与Parallel Scavenge搭配使用；作为CMS收集器的后备预案，发生Concurrent Mode Failure时使用。\n\n### Parallel old收集器\n\nParallel Old是Parallel Scavenge收集器的老年代版本，使用**多线程和“标记－整理”算法**。\n\n参数控制： -XX:+UseParallelOldGC 使用Parallel收集器+ 老年代并行。\n\n### CMS收集器\n\n![CMS.png](\\image\\interview_prep\\JVM\\CMS.png)\n\nCMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。\n\n从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤，包括： \n\n- 初始标记（CMS initial mark）\n- 并发标记（CMS concurrent mark）\n- 重新标记（CMS remark）\n- 并发清除（CMS concurrent sweep）\n\n其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。 \n\n由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。老年代收集器（新生代使用ParNew）\n\n优点：并发收集、低停顿 \n缺点：产生大量空间碎片、并发阶段会降低吞吐量\n\n参数控制：\n-XX:+UseConcMarkSweepGC  使用CMS收集器\n-XX:+ UseCMSCompactAtFullCollection Full GC后，进行一次碎片整理；整理过程是独占的，会引起停顿时间变长\n-XX:+CMSFullGCsBeforeCompaction  设置进行几次Full GC后，进行一次碎片整理\n-XX:ParallelCMSThreads  设定CMS的线程数量（一般情况约等于可用CPU数量）\n\n### G1收集器\n\n[详解 JVM Garbage First(G1) 垃圾收集器](https://blog.csdn.net/coderlius/article/details/79272773)\n\nG1收集器（Garbage-First）：是当今收集器技术发展的最前沿的成果之一，G1是一款面向服务器端应用的垃圾收集器。 使用G1收集器时，java堆的内存布局就与其他收集器有很大差别，它将整个java堆划分为多个大小相等的独立区域（Region），虽然还保留新生代与老年代的概念，但新生代与老年代不再试物理隔离的了，他们都是一部分Region（不需要连续）的集合。G1具备如下特点：\n\n- **并行与并发**：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。\n- **分代收集**：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能够独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。\n- **空间整合**：G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。\n- **可预测停顿**：这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。\n\n收集步骤：\n\n1. **初始标记 Initial Mark**，首先初始标记(Initial-Mark),这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC。对应GC log:GC pause (young) (inital-mark)\n2. **根分区扫描 Root Region Scanning**，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成。\n3. **并发标记 Concurrent Marking**，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。\n4. **存活数据计算 Live Data Accounting**，存活数据计算(Live Data Accounting)是标记操作的附加产物，只要一个对象被标记，同时会被计算字节数，并计入分区空间。只有NTAMS以下的对象会被标记和计算，在标记周期的最后，Next位图将被清空，等待下次标记周期。\n5. **重新标记 Remark**, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初始快照算法:snapshot-at-the-beginning (SATB)。\n6. **清除 Copy/Clean up**，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。\n7. 复制/清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。","source":"_posts/GC相关.md","raw":"---\ntitle: GC相关\ndate: 2019-4-16 14:37:09\ntags: [面试,JVM]\ncategories: [面试,JVM]\ndescription: Java面试中，关于GC的知识。\n---\n\n# GC相关\n\n## 1. 垃圾收集器\n\n程序计数器、虚拟机栈、本地方法栈随线程生死，不需要太考虑回收。而Java堆和方法区只有在运行期间才知道创建哪些对象，这部分内存分配和回收都是动态的，GC要关注的是这部分。\n\n引用技术算法：给对象添加一个引用计数器，有引用，+1，引用失效，-1，任何时刻计数器为0的对象不能被使用。但是解决不了对象相互循环引用的问题，故基本不用。\n\n### 可达性分析算法\n\n基本思想：通过一系列的GC Roots对象作为起始点，向下搜索，当一个对象到GC Roots没有任何引用链相连，则这个对象是可回收的。\n\n可以作为GC Roots的对象：\n\n- 虚拟机栈（本地变量表）中引用的对象\n- 方法区中类静态属性引用的对象\n- 方法区中常量引用的对象\n- 本地方法栈JNI（一般指Native方法）引用的对象\n\n### 4种引用\n\n- 强引用：“Object obj = new Object()”这类的引用，只要引用存在，GC就不会回收。\n- 软引用：有用但非必需的对象。在系统将要发生内存溢出之前，会把这些对象列进回收范围中进行二次回收。如果仍没有足够内存，才会抛出内存溢出异常。SoftReference类实现。\n- 弱引用：强度比软引用更弱，只能生存到下一次垃圾回收前，当GC工作，无论当前内存是否足够，都会被回收。WeakReference类实现。\n- 虚引用：唯一目的就是能在GC时收到一个系统通知。PhantomReference类实现。\n\n### finalize方法\n\n- finalize()是Object的protected方法，子类可以覆盖该方法以实现资源清理工作，GC在回收对象之前调用该方法。\n- finalize方法至多由GC执行一次(用户当然可以手动调用对象的finalize方法，但并不影响GC对finalize的行为)\n- 大致描述一下finalize流程：当对象变成(GC Roots)不可达时，GC会判断该对象是否覆盖了finalize方法，若未覆盖，则直接将其回收。否则，若对象未执行过finalize方法，将其放入F-Queue队列，由一低优先级线程执行该队列中对象的finalize方法。执行finalize方法完毕后，GC会再次判断该对象是否可达，若不可达，则进行回收，否则，对象“复活”。\n\n### 方法区的回收\n\n方法区（永久代）回收主要两方面：废弃常量和无用的类。\n\n判断方法，满足一下3个条件：\n\n- 该类所有实例都被回收\n- 加载该类的类加载器被回收\n- 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射获得该类的方法。\n\n在大量使用反射、动态代理、CGLib等ByteCode框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景需要回收方法区，保证永久代不溢出。\n\n## 2. 垃圾收集算法\n\n### 标记-清除算法\n\n先标记所有需要回收的对象，标记完成后统一回收所有被标记的对象。\n\n缺点：效率不高；会产生大量不连续的内存碎片。\n\n### 复制算法\n\n把内存划分成大小相同的两块，当一块用完了，将存活的对象复制到另一块内存，然后将使用过的内存一次清理掉。\n\n大部分虚拟机用**复制算法回收新生代**。将内存分为一块大的Eden，和两块小的Survivor，每次使用Eden和一个Survivor。回收时将Eden和Survivor中存活的对象复制到另一个Survivor上，然后清理。默认Eden和Survivor比例是8:1。当Survivor空间不够时，需要依赖老年代进行分配担保。\n\n### 标记-整理算法\n\n复制收集算法在对象存活率高时效率不高，**老年代使用标记-整理算法**，标记同标记-清除算法，整理是让所有存活的对象向一段移动，然后清理掉边界以外的内存。\n\n### 分代收集算法\n\nGC分代的基本假设：绝大部分对象的生命周期都非常短暂，存活时间短。\n\n“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。\n\n## 3. 垃圾收集器\n\n### Serial收集器\n\n![serial.png](\\image\\interview_prep\\JVM\\serial.png)\n\n串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；垃圾收集的过程中会Stop The World（服务暂停）\n\n参数控制：-XX:+UseSerialGC  串行收集器。\n\n### ParNew收集器\n\n![parnew.png](\\image\\interview_prep\\JVM\\parnew.png)\n\nParNew收集器其实就是Serial收集器的多线程版本。新生代并行，老年代串行；新生代复制算法、老年代标记-压缩\n\n参数控制：-XX:+UseParNewGC  ParNew收集器\n\n-XX:ParallelGCThreads 限制线程数量。\n\n### Parallel收集器\n\nParallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量；也可以通过参数控制GC的时间不大于多少毫秒或者比例；新生代复制算法、老年代标记-压缩\n\n参数控制：-XX:+UseParallelGC  使用Parallel收集器+ 老年代串行。\n\n### Serial Old收集器\n\nSerial Old是Serial的老年代版本，**单线程，标记-整理算法**。\n\n两个用途：与Parallel Scavenge搭配使用；作为CMS收集器的后备预案，发生Concurrent Mode Failure时使用。\n\n### Parallel old收集器\n\nParallel Old是Parallel Scavenge收集器的老年代版本，使用**多线程和“标记－整理”算法**。\n\n参数控制： -XX:+UseParallelOldGC 使用Parallel收集器+ 老年代并行。\n\n### CMS收集器\n\n![CMS.png](\\image\\interview_prep\\JVM\\CMS.png)\n\nCMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。\n\n从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤，包括： \n\n- 初始标记（CMS initial mark）\n- 并发标记（CMS concurrent mark）\n- 重新标记（CMS remark）\n- 并发清除（CMS concurrent sweep）\n\n其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。 \n\n由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。老年代收集器（新生代使用ParNew）\n\n优点：并发收集、低停顿 \n缺点：产生大量空间碎片、并发阶段会降低吞吐量\n\n参数控制：\n-XX:+UseConcMarkSweepGC  使用CMS收集器\n-XX:+ UseCMSCompactAtFullCollection Full GC后，进行一次碎片整理；整理过程是独占的，会引起停顿时间变长\n-XX:+CMSFullGCsBeforeCompaction  设置进行几次Full GC后，进行一次碎片整理\n-XX:ParallelCMSThreads  设定CMS的线程数量（一般情况约等于可用CPU数量）\n\n### G1收集器\n\n[详解 JVM Garbage First(G1) 垃圾收集器](https://blog.csdn.net/coderlius/article/details/79272773)\n\nG1收集器（Garbage-First）：是当今收集器技术发展的最前沿的成果之一，G1是一款面向服务器端应用的垃圾收集器。 使用G1收集器时，java堆的内存布局就与其他收集器有很大差别，它将整个java堆划分为多个大小相等的独立区域（Region），虽然还保留新生代与老年代的概念，但新生代与老年代不再试物理隔离的了，他们都是一部分Region（不需要连续）的集合。G1具备如下特点：\n\n- **并行与并发**：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。\n- **分代收集**：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能够独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。\n- **空间整合**：G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。\n- **可预测停顿**：这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。\n\n收集步骤：\n\n1. **初始标记 Initial Mark**，首先初始标记(Initial-Mark),这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC。对应GC log:GC pause (young) (inital-mark)\n2. **根分区扫描 Root Region Scanning**，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成。\n3. **并发标记 Concurrent Marking**，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。\n4. **存活数据计算 Live Data Accounting**，存活数据计算(Live Data Accounting)是标记操作的附加产物，只要一个对象被标记，同时会被计算字节数，并计入分区空间。只有NTAMS以下的对象会被标记和计算，在标记周期的最后，Next位图将被清空，等待下次标记周期。\n5. **重新标记 Remark**, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初始快照算法:snapshot-at-the-beginning (SATB)。\n6. **清除 Copy/Clean up**，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。\n7. 复制/清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。","slug":"GC相关","published":1,"updated":"2025-02-22T18:52:19.816Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8af0008v00113rt1kai","content":"<h1 id=\"GC相关\"><a href=\"#GC相关\" class=\"headerlink\" title=\"GC相关\"></a>GC相关</h1><h2 id=\"1-垃圾收集器\"><a href=\"#1-垃圾收集器\" class=\"headerlink\" title=\"1. 垃圾收集器\"></a>1. 垃圾收集器</h2><p>程序计数器、虚拟机栈、本地方法栈随线程生死，不需要太考虑回收。而Java堆和方法区只有在运行期间才知道创建哪些对象，这部分内存分配和回收都是动态的，GC要关注的是这部分。</p>\n<p>引用技术算法：给对象添加一个引用计数器，有引用，+1，引用失效，-1，任何时刻计数器为0的对象不能被使用。但是解决不了对象相互循环引用的问题，故基本不用。</p>\n<h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>基本思想：通过一系列的GC Roots对象作为起始点，向下搜索，当一个对象到GC Roots没有任何引用链相连，则这个对象是可回收的。</p>\n<p>可以作为GC Roots的对象：</p>\n<ul>\n<li>虚拟机栈（本地变量表）中引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>本地方法栈JNI（一般指Native方法）引用的对象</li>\n</ul>\n<h3 id=\"4种引用\"><a href=\"#4种引用\" class=\"headerlink\" title=\"4种引用\"></a>4种引用</h3><ul>\n<li>强引用：“Object obj &#x3D; new Object()”这类的引用，只要引用存在，GC就不会回收。</li>\n<li>软引用：有用但非必需的对象。在系统将要发生内存溢出之前，会把这些对象列进回收范围中进行二次回收。如果仍没有足够内存，才会抛出内存溢出异常。SoftReference类实现。</li>\n<li>弱引用：强度比软引用更弱，只能生存到下一次垃圾回收前，当GC工作，无论当前内存是否足够，都会被回收。WeakReference类实现。</li>\n<li>虚引用：唯一目的就是能在GC时收到一个系统通知。PhantomReference类实现。</li>\n</ul>\n<h3 id=\"finalize方法\"><a href=\"#finalize方法\" class=\"headerlink\" title=\"finalize方法\"></a>finalize方法</h3><ul>\n<li>finalize()是Object的protected方法，子类可以覆盖该方法以实现资源清理工作，GC在回收对象之前调用该方法。</li>\n<li>finalize方法至多由GC执行一次(用户当然可以手动调用对象的finalize方法，但并不影响GC对finalize的行为)</li>\n<li>大致描述一下finalize流程：当对象变成(GC Roots)不可达时，GC会判断该对象是否覆盖了finalize方法，若未覆盖，则直接将其回收。否则，若对象未执行过finalize方法，将其放入F-Queue队列，由一低优先级线程执行该队列中对象的finalize方法。执行finalize方法完毕后，GC会再次判断该对象是否可达，若不可达，则进行回收，否则，对象“复活”。</li>\n</ul>\n<h3 id=\"方法区的回收\"><a href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"></a>方法区的回收</h3><p>方法区（永久代）回收主要两方面：废弃常量和无用的类。</p>\n<p>判断方法，满足一下3个条件：</p>\n<ul>\n<li>该类所有实例都被回收</li>\n<li>加载该类的类加载器被回收</li>\n<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射获得该类的方法。</li>\n</ul>\n<p>在大量使用反射、动态代理、CGLib等ByteCode框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景需要回收方法区，保证永久代不溢出。</p>\n<h2 id=\"2-垃圾收集算法\"><a href=\"#2-垃圾收集算法\" class=\"headerlink\" title=\"2. 垃圾收集算法\"></a>2. 垃圾收集算法</h2><h3 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h3><p>先标记所有需要回收的对象，标记完成后统一回收所有被标记的对象。</p>\n<p>缺点：效率不高；会产生大量不连续的内存碎片。</p>\n<h3 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h3><p>把内存划分成大小相同的两块，当一块用完了，将存活的对象复制到另一块内存，然后将使用过的内存一次清理掉。</p>\n<p>大部分虚拟机用<strong>复制算法回收新生代</strong>。将内存分为一块大的Eden，和两块小的Survivor，每次使用Eden和一个Survivor。回收时将Eden和Survivor中存活的对象复制到另一个Survivor上，然后清理。默认Eden和Survivor比例是8:1。当Survivor空间不够时，需要依赖老年代进行分配担保。</p>\n<h3 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h3><p>复制收集算法在对象存活率高时效率不高，<strong>老年代使用标记-整理算法</strong>，标记同标记-清除算法，整理是让所有存活的对象向一段移动，然后清理掉边界以外的内存。</p>\n<h3 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h3><p>GC分代的基本假设：绝大部分对象的生命周期都非常短暂，存活时间短。</p>\n<p>“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。</p>\n<h2 id=\"3-垃圾收集器\"><a href=\"#3-垃圾收集器\" class=\"headerlink\" title=\"3. 垃圾收集器\"></a>3. 垃圾收集器</h2><h3 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h3><p><img src=\"/%5Cimage%5Cinterview_prep%5CJVM%5Cserial.png\" alt=\"serial.png\"></p>\n<p>串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；垃圾收集的过程中会Stop The World（服务暂停）</p>\n<p>参数控制：-XX:+UseSerialGC  串行收集器。</p>\n<h3 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h3><p><img src=\"/%5Cimage%5Cinterview_prep%5CJVM%5Cparnew.png\" alt=\"parnew.png\"></p>\n<p>ParNew收集器其实就是Serial收集器的多线程版本。新生代并行，老年代串行；新生代复制算法、老年代标记-压缩</p>\n<p>参数控制：-XX:+UseParNewGC  ParNew收集器</p>\n<p>-XX:ParallelGCThreads 限制线程数量。</p>\n<h3 id=\"Parallel收集器\"><a href=\"#Parallel收集器\" class=\"headerlink\" title=\"Parallel收集器\"></a>Parallel收集器</h3><p>Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量；也可以通过参数控制GC的时间不大于多少毫秒或者比例；新生代复制算法、老年代标记-压缩</p>\n<p>参数控制：-XX:+UseParallelGC  使用Parallel收集器+ 老年代串行。</p>\n<h3 id=\"Serial-Old收集器\"><a href=\"#Serial-Old收集器\" class=\"headerlink\" title=\"Serial Old收集器\"></a>Serial Old收集器</h3><p>Serial Old是Serial的老年代版本，<strong>单线程，标记-整理算法</strong>。</p>\n<p>两个用途：与Parallel Scavenge搭配使用；作为CMS收集器的后备预案，发生Concurrent Mode Failure时使用。</p>\n<h3 id=\"Parallel-old收集器\"><a href=\"#Parallel-old收集器\" class=\"headerlink\" title=\"Parallel old收集器\"></a>Parallel old收集器</h3><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用<strong>多线程和“标记－整理”算法</strong>。</p>\n<p>参数控制： -XX:+UseParallelOldGC 使用Parallel收集器+ 老年代并行。</p>\n<h3 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a>CMS收集器</h3><p><img src=\"/%5Cimage%5Cinterview_prep%5CJVM%5CCMS.png\" alt=\"CMS.png\"></p>\n<p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B&#x2F;S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。</p>\n<p>从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤，包括： </p>\n<ul>\n<li>初始标记（CMS initial mark）</li>\n<li>并发标记（CMS concurrent mark）</li>\n<li>重新标记（CMS remark）</li>\n<li>并发清除（CMS concurrent sweep）</li>\n</ul>\n<p>其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。 </p>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。老年代收集器（新生代使用ParNew）</p>\n<p>优点：并发收集、低停顿<br>缺点：产生大量空间碎片、并发阶段会降低吞吐量</p>\n<p>参数控制：<br>-XX:+UseConcMarkSweepGC  使用CMS收集器<br>-XX:+ UseCMSCompactAtFullCollection Full GC后，进行一次碎片整理；整理过程是独占的，会引起停顿时间变长<br>-XX:+CMSFullGCsBeforeCompaction  设置进行几次Full GC后，进行一次碎片整理<br>-XX:ParallelCMSThreads  设定CMS的线程数量（一般情况约等于可用CPU数量）</p>\n<h3 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a>G1收集器</h3><p><a href=\"https://blog.csdn.net/coderlius/article/details/79272773\">详解 JVM Garbage First(G1) 垃圾收集器</a></p>\n<p>G1收集器（Garbage-First）：是当今收集器技术发展的最前沿的成果之一，G1是一款面向服务器端应用的垃圾收集器。 使用G1收集器时，java堆的内存布局就与其他收集器有很大差别，它将整个java堆划分为多个大小相等的独立区域（Region），虽然还保留新生代与老年代的概念，但新生代与老年代不再试物理隔离的了，他们都是一部分Region（不需要连续）的集合。G1具备如下特点：</p>\n<ul>\n<li><strong>并行与并发</strong>：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。</li>\n<li><strong>分代收集</strong>：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能够独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。</li>\n<li><strong>空间整合</strong>：G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。</li>\n<li><strong>可预测停顿</strong>：这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。</li>\n</ul>\n<p>收集步骤：</p>\n<ol>\n<li><strong>初始标记 Initial Mark</strong>，首先初始标记(Initial-Mark),这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC。对应GC log:GC pause (young) (inital-mark)</li>\n<li><strong>根分区扫描 Root Region Scanning</strong>，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成。</li>\n<li><strong>并发标记 Concurrent Marking</strong>，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。</li>\n<li><strong>存活数据计算 Live Data Accounting</strong>，存活数据计算(Live Data Accounting)是标记操作的附加产物，只要一个对象被标记，同时会被计算字节数，并计入分区空间。只有NTAMS以下的对象会被标记和计算，在标记周期的最后，Next位图将被清空，等待下次标记周期。</li>\n<li><strong>重新标记 Remark</strong>, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初始快照算法:snapshot-at-the-beginning (SATB)。</li>\n<li><strong>清除 Copy&#x2F;Clean up</strong>，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。</li>\n<li>复制&#x2F;清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。</li>\n</ol>\n","length":4621,"excerpt":"","more":"<h1 id=\"GC相关\"><a href=\"#GC相关\" class=\"headerlink\" title=\"GC相关\"></a>GC相关</h1><h2 id=\"1-垃圾收集器\"><a href=\"#1-垃圾收集器\" class=\"headerlink\" title=\"1. 垃圾收集器\"></a>1. 垃圾收集器</h2><p>程序计数器、虚拟机栈、本地方法栈随线程生死，不需要太考虑回收。而Java堆和方法区只有在运行期间才知道创建哪些对象，这部分内存分配和回收都是动态的，GC要关注的是这部分。</p>\n<p>引用技术算法：给对象添加一个引用计数器，有引用，+1，引用失效，-1，任何时刻计数器为0的对象不能被使用。但是解决不了对象相互循环引用的问题，故基本不用。</p>\n<h3 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h3><p>基本思想：通过一系列的GC Roots对象作为起始点，向下搜索，当一个对象到GC Roots没有任何引用链相连，则这个对象是可回收的。</p>\n<p>可以作为GC Roots的对象：</p>\n<ul>\n<li>虚拟机栈（本地变量表）中引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>本地方法栈JNI（一般指Native方法）引用的对象</li>\n</ul>\n<h3 id=\"4种引用\"><a href=\"#4种引用\" class=\"headerlink\" title=\"4种引用\"></a>4种引用</h3><ul>\n<li>强引用：“Object obj &#x3D; new Object()”这类的引用，只要引用存在，GC就不会回收。</li>\n<li>软引用：有用但非必需的对象。在系统将要发生内存溢出之前，会把这些对象列进回收范围中进行二次回收。如果仍没有足够内存，才会抛出内存溢出异常。SoftReference类实现。</li>\n<li>弱引用：强度比软引用更弱，只能生存到下一次垃圾回收前，当GC工作，无论当前内存是否足够，都会被回收。WeakReference类实现。</li>\n<li>虚引用：唯一目的就是能在GC时收到一个系统通知。PhantomReference类实现。</li>\n</ul>\n<h3 id=\"finalize方法\"><a href=\"#finalize方法\" class=\"headerlink\" title=\"finalize方法\"></a>finalize方法</h3><ul>\n<li>finalize()是Object的protected方法，子类可以覆盖该方法以实现资源清理工作，GC在回收对象之前调用该方法。</li>\n<li>finalize方法至多由GC执行一次(用户当然可以手动调用对象的finalize方法，但并不影响GC对finalize的行为)</li>\n<li>大致描述一下finalize流程：当对象变成(GC Roots)不可达时，GC会判断该对象是否覆盖了finalize方法，若未覆盖，则直接将其回收。否则，若对象未执行过finalize方法，将其放入F-Queue队列，由一低优先级线程执行该队列中对象的finalize方法。执行finalize方法完毕后，GC会再次判断该对象是否可达，若不可达，则进行回收，否则，对象“复活”。</li>\n</ul>\n<h3 id=\"方法区的回收\"><a href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"></a>方法区的回收</h3><p>方法区（永久代）回收主要两方面：废弃常量和无用的类。</p>\n<p>判断方法，满足一下3个条件：</p>\n<ul>\n<li>该类所有实例都被回收</li>\n<li>加载该类的类加载器被回收</li>\n<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射获得该类的方法。</li>\n</ul>\n<p>在大量使用反射、动态代理、CGLib等ByteCode框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景需要回收方法区，保证永久代不溢出。</p>\n<h2 id=\"2-垃圾收集算法\"><a href=\"#2-垃圾收集算法\" class=\"headerlink\" title=\"2. 垃圾收集算法\"></a>2. 垃圾收集算法</h2><h3 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h3><p>先标记所有需要回收的对象，标记完成后统一回收所有被标记的对象。</p>\n<p>缺点：效率不高；会产生大量不连续的内存碎片。</p>\n<h3 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h3><p>把内存划分成大小相同的两块，当一块用完了，将存活的对象复制到另一块内存，然后将使用过的内存一次清理掉。</p>\n<p>大部分虚拟机用<strong>复制算法回收新生代</strong>。将内存分为一块大的Eden，和两块小的Survivor，每次使用Eden和一个Survivor。回收时将Eden和Survivor中存活的对象复制到另一个Survivor上，然后清理。默认Eden和Survivor比例是8:1。当Survivor空间不够时，需要依赖老年代进行分配担保。</p>\n<h3 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h3><p>复制收集算法在对象存活率高时效率不高，<strong>老年代使用标记-整理算法</strong>，标记同标记-清除算法，整理是让所有存活的对象向一段移动，然后清理掉边界以外的内存。</p>\n<h3 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h3><p>GC分代的基本假设：绝大部分对象的生命周期都非常短暂，存活时间短。</p>\n<p>“分代收集”（Generational Collection）算法，把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记-清理”或“标记-整理”算法来进行回收。</p>\n<h2 id=\"3-垃圾收集器\"><a href=\"#3-垃圾收集器\" class=\"headerlink\" title=\"3. 垃圾收集器\"></a>3. 垃圾收集器</h2><h3 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h3><p><img src=\"/%5Cimage%5Cinterview_prep%5CJVM%5Cserial.png\" alt=\"serial.png\"></p>\n<p>串行收集器是最古老，最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；垃圾收集的过程中会Stop The World（服务暂停）</p>\n<p>参数控制：-XX:+UseSerialGC  串行收集器。</p>\n<h3 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h3><p><img src=\"/%5Cimage%5Cinterview_prep%5CJVM%5Cparnew.png\" alt=\"parnew.png\"></p>\n<p>ParNew收集器其实就是Serial收集器的多线程版本。新生代并行，老年代串行；新生代复制算法、老年代标记-压缩</p>\n<p>参数控制：-XX:+UseParNewGC  ParNew收集器</p>\n<p>-XX:ParallelGCThreads 限制线程数量。</p>\n<h3 id=\"Parallel收集器\"><a href=\"#Parallel收集器\" class=\"headerlink\" title=\"Parallel收集器\"></a>Parallel收集器</h3><p>Parallel Scavenge收集器类似ParNew收集器，Parallel收集器更关注系统的吞吐量。可以通过参数来打开自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或最大的吞吐量；也可以通过参数控制GC的时间不大于多少毫秒或者比例；新生代复制算法、老年代标记-压缩</p>\n<p>参数控制：-XX:+UseParallelGC  使用Parallel收集器+ 老年代串行。</p>\n<h3 id=\"Serial-Old收集器\"><a href=\"#Serial-Old收集器\" class=\"headerlink\" title=\"Serial Old收集器\"></a>Serial Old收集器</h3><p>Serial Old是Serial的老年代版本，<strong>单线程，标记-整理算法</strong>。</p>\n<p>两个用途：与Parallel Scavenge搭配使用；作为CMS收集器的后备预案，发生Concurrent Mode Failure时使用。</p>\n<h3 id=\"Parallel-old收集器\"><a href=\"#Parallel-old收集器\" class=\"headerlink\" title=\"Parallel old收集器\"></a>Parallel old收集器</h3><p>Parallel Old是Parallel Scavenge收集器的老年代版本，使用<strong>多线程和“标记－整理”算法</strong>。</p>\n<p>参数控制： -XX:+UseParallelOldGC 使用Parallel收集器+ 老年代并行。</p>\n<h3 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a>CMS收集器</h3><p><img src=\"/%5Cimage%5Cinterview_prep%5CJVM%5CCMS.png\" alt=\"CMS.png\"></p>\n<p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B&#x2F;S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。</p>\n<p>从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤，包括： </p>\n<ul>\n<li>初始标记（CMS initial mark）</li>\n<li>并发标记（CMS concurrent mark）</li>\n<li>重新标记（CMS remark）</li>\n<li>并发清除（CMS concurrent sweep）</li>\n</ul>\n<p>其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短。 </p>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。老年代收集器（新生代使用ParNew）</p>\n<p>优点：并发收集、低停顿<br>缺点：产生大量空间碎片、并发阶段会降低吞吐量</p>\n<p>参数控制：<br>-XX:+UseConcMarkSweepGC  使用CMS收集器<br>-XX:+ UseCMSCompactAtFullCollection Full GC后，进行一次碎片整理；整理过程是独占的，会引起停顿时间变长<br>-XX:+CMSFullGCsBeforeCompaction  设置进行几次Full GC后，进行一次碎片整理<br>-XX:ParallelCMSThreads  设定CMS的线程数量（一般情况约等于可用CPU数量）</p>\n<h3 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a>G1收集器</h3><p><a href=\"https://blog.csdn.net/coderlius/article/details/79272773\">详解 JVM Garbage First(G1) 垃圾收集器</a></p>\n<p>G1收集器（Garbage-First）：是当今收集器技术发展的最前沿的成果之一，G1是一款面向服务器端应用的垃圾收集器。 使用G1收集器时，java堆的内存布局就与其他收集器有很大差别，它将整个java堆划分为多个大小相等的独立区域（Region），虽然还保留新生代与老年代的概念，但新生代与老年代不再试物理隔离的了，他们都是一部分Region（不需要连续）的集合。G1具备如下特点：</p>\n<ul>\n<li><strong>并行与并发</strong>：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。</li>\n<li><strong>分代收集</strong>：与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能够独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。</li>\n<li><strong>空间整合</strong>：G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。</li>\n<li><strong>可预测停顿</strong>：这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。</li>\n</ul>\n<p>收集步骤：</p>\n<ol>\n<li><strong>初始标记 Initial Mark</strong>，首先初始标记(Initial-Mark),这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC。对应GC log:GC pause (young) (inital-mark)</li>\n<li><strong>根分区扫描 Root Region Scanning</strong>，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成。</li>\n<li><strong>并发标记 Concurrent Marking</strong>，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。</li>\n<li><strong>存活数据计算 Live Data Accounting</strong>，存活数据计算(Live Data Accounting)是标记操作的附加产物，只要一个对象被标记，同时会被计算字节数，并计入分区空间。只有NTAMS以下的对象会被标记和计算，在标记周期的最后，Next位图将被清空，等待下次标记周期。</li>\n<li><strong>重新标记 Remark</strong>, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初始快照算法:snapshot-at-the-beginning (SATB)。</li>\n<li><strong>清除 Copy&#x2F;Clean up</strong>，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。</li>\n<li>复制&#x2F;清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。</li>\n</ol>\n"},{"title":"Hexo nexT的一些玩法（转载+总结）","date":"2017-11-22T07:50:14.000Z","photos":["https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true"],"description":"Hexo真是太棒了","_content":"\n# 基础篇\n\n## 1. 常用命令\n\n官方文档：https://hexo.io/zh-cn/docs/server.html\n\n```\nhexo new \"HelloWorld\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate #生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy #部署\nhexo d #部署 #可与hexo g合并为 hexo d -g\n```\n\n\n## 2. 文章中插入图片\n\n对于hexo，有两种方式： \n使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。 \n使用微博图床，地址 http://weibotuchuang.sinaapp.com/ ，将图片拖入区域中，会生成图片的URL，这就是链接地址。\n## 3. 添加分页、标签页面\n\n新建\n命令：\n\n`hexo new page tags # tags可替换成其他`\n\n输入命令后，在`/source`下会新生成一个新的文件夹tags，在该文件夹下会有一个index.md文件。\n在上步新生成的`myBlog/source/tags/index.md`中添加`type: \"tags\"`，`index.md`文件内容如下：\n设置具体文章的tags\n当要为某一篇文章添加标签，只需在`/source/_post`目录下的具体文章的tags中添加标签即可，如：\n\n`tags: [hexo,next]`\n\n## 4. 引入第三方服务 \n\n参考 : http://theme-next.iissnan.com/third-party-services.html#swfitype\n\n ### 1. 加入分享功能\n\n在主题配置文件中，`jiathis: true`\n\n ### 2.  加入评论功能\n\n  待续\n\n ### 3.  加入站点内容搜索功能\n\n  1) 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：\n\n`$ npm install hexo-generator-searchdb --save`\n\n 2) 编辑 站点配置文件，新增以下内容到任意位置：\n\n```\n search:\n    path: search.xml\n    field: post\n    format: html\n    limit: 10000\n```\n 3) 编辑 主题配置文件，启用本地搜索功能：\n\n```\nlocal_search:\nenable: true\n```\n\n 4. 数据统计\n\n##  5. 取消“文章目录”对标题的自动编号\n\n修改主题配置文件那里的`toc:number`为`false`\n\n\n# 个性化 ([参考](http://blog.csdn.net/qq_33699981/article/details/72716951))\n\n## 1. 修改文章内链接文本样式（待考证）\n\n修改文件 `themes\\next\\source\\css\\_common\\components\\post\\post.styl`，在末尾添加如下css样式：\n\n```css\n// 文章内链接文本样式\n.post-body p a{\n  color: #0593d3;\n  border-bottom: none;\n  border-bottom: 1px solid #0593d3;\n  &:hover {\n    color: #fc6423;\n    border-bottom: none;\n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n## 2. 修改文章底部的那个带#号的标签\n修改模板`/themes/next/layout/_macro/post.swig`，搜索 `rel=\"tag\">#`，将 # 换成\n/` <i class=\"fa fa-tag\"></i> `/\n\n## 3. 在每篇文章末尾统一添加“本文结束”标记\n在路径` \\themes\\next\\layout\\_macro` 中新建 `passage-end-tag.swig` 文件,并添加以下内容：\n\n```\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    {% endif %}\n</div>\n```\n\n接着打开`\\themes\\next\\layout\\_macro\\post.swig`文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）：\n![blog1.png](/image/blog1.png)\n\n## 4. 修改网页底部的桃心\n还是打开`themes/next/layout/_partials/footer.swig`，找到： \n\n```html\n<span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n</span>\n```\n\n然后还是在[图标库](http://fontawesome.io/icons/)中找到你自己喜欢的图标，然后修改画红线的部分就可以了。\n## 5. 添加顶部加载条\n打开`/themes/next/layout/_partials/head.swig`文件，修改为 :\n\n```html\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n<script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n<link href=\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\" rel=\"stylesheet\">\n<meta name=\"theme-color\" content=\"{{ theme.android_chrome_color }}\">\n```\n\n参考资料： \nhttp://www.jianshu.com/p/c23902f93558\nhttp://blog.csdn.net/qq_33699981/article/details/72716951\nhttp://playingfingers.com/2016/03/26/build-a-blog/\nhttps://segmentfault.com/a/1190000003946969\n\n\n\n\n## 5.添加网页音乐播放器功能\n\n### Download Aplayer \n\n点击访问Aplayer源码：[GitHub Aplayer](https://github.com/MoePlayer/APlayer)。下载到本地，解压后将`dist`文件夹复制到`themes\\next\\source`文件夹下。\n\n### 修改music.js\n\n新建`themes\\next\\source\\dist\\music.js`文件，添加内容：\n\n```\nconst ap = new APlayer({\n    container: document.getElementById('aplayer'),\n    fixed: true,\n    autoplay: false,\n    audio: [\n\t{\n        name: \"canon in d\",\n        artist: 'Brian Crain',\n        url: 'http://pd2tflnys.bkt.clouddn.com/Brian%20Crain%20-%20canon%20in%20d.mp3',\n        cover: 'http://p1.music.126.net/QGb9Vtyw7qHS00uEvPfM6g==/843325418547559.jpg?param=130y130',\n      },\n\t  {\n        name: \"Apologize\",\n        artist: 'Martin Ermen',\n        url: 'http://pd2tflnys.bkt.clouddn.com/Martin%20Ermen%20-%20Apologize.mp3',\n        cover: 'http://p1.music.126.net/-_6mcI4VV5IKaiwhUAytbg==/1791104441647901.jpg?param=130y130',\n      },\n\t  {\n        name: \"River Flows in You\",\n        artist: 'Yiruma',\n        url: 'http://pd2tflnys.bkt.clouddn.com/Yiruma%20-%20River%20Flows%20in%20You.flac',\n        cover: 'http://p1.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130',\n      },\n      {\n        name: '惊蛰',\n        artist: '音阙诗听/王梓钰',\n        url: 'http://www.ytmp3.cn/down/48755.mp3',\n        cover: 'http://p1.music.126.net/5MmXpaP9r88tNzExPGMI8Q==/109951163370350985.jpg?param=130y130',\n      }\n    ]\n});\n```\n\n源码中对应的参数解释，这边都有： [Aplayer 中文文档](https://aplayer.js.org/#/zh-Hans/)\n\n`audio`对应的便是音频文件，所以音乐播放器需要播放的音乐是需要自己进行相关信息（如歌曲链接、歌词、封面等）的配置。这里放一个mp3音乐外链网站：<http://up.mcyt.net/> ，搜索对应的音乐，然后复制`url`和右击封面图片链接粘贴到对应的位置上就行了。\n\n注：由于该外链网站没有歌词链接，我这边没有进行配置，所以播放器在播放音乐时点击歌词是没有显示的。\n\n### _layout.swig\n\n打开`themes\\next\\layout\\_layout.swig`文件，将\n\n```\ncopy<link rel=\"stylesheet\" href=\"/dist/APlayer.min.css\">\n<div id=\"aplayer\"></div>\n<script type=\"text/javascript\" src=\"/dist/APlayer.min.js\"></script>\n<script type=\"text/javascript\" src=\"/dist/music.js\"></script>\n```\n\n\n\n添加到`<body itemscope ...>`后面就行，即在`<body></body>`里面。\n\n重新生成，访问页面，就能看到左下角的音乐播放器了。\n\n\n## 6. 搞怪网页标题\n\n本章节参考 <http://yearito.cn/posts/hexo-advanced-settings.html>\n\n```\nthemes\\next\\layout\\_custom\\custom.swig\n```\n\n```\n{# 搞怪网页标题 #}\n{% if theme.title_trick.enable %}\n  <script>\n    var OriginTitile = document.title;\n    var titleTime;\n    document.addEventListener('visibilitychange', function() {\n      if (document.hidden) {\n        document.title = '{{ theme.title_trick.leave }}' + OriginTitile;\n        clearTimeout(titleTime);\n      } else {\n        document.title = '{{ theme.title_trick.enter }}' + OriginTitile;\n        titleTime = setTimeout(function() {\n          document.title = OriginTitile;\n        }, 2000);\n      }\n    });\n  </script>\n{% endif %}\n```\n\n```\nthemes\\next\\layout\\_layout.swig\n```\n\n```\n      ...\n      {% include '_third-party/exturl.swig' %}\n      {% include '_third-party/bookmark.swig' %}\n      {% include '_third-party/copy-code.swig' %}\n\n+     {% include '_custom/custom.swig' %}\n    </body>\n  </html>\n```\n\n在主题配置文件中添加以下代码：\n\n```\n# a trick on website title\ntitle_trick:\n  enable: true\n  leave: \"啊咧?真由氏的怀表停了呢~\"\n  enter: \"这一切都是命运石之门的选择！\"\n\n```\n\n## 7. 豆瓣阅读 / 电影 / 游戏\n\n```\n npm install hexo-douban --save\n```\n\n核心配置文件`_config.yml`：\n\n```\ndouban:\n  user:  # 个人豆瓣ID\n  builtin: false  #是否每次hexo d -g时都自动hexo douban\n  book:\n    title: 'This is my book title'\n    quote: 'This is my book quote'\n  movie:\n    title: 'This is my movie title'\n    quote: 'This is my movie quote'\n  game:\n    title: 'This is my game title'\n    quote: 'This is my game quote'\n  timeout: 10000\n```\n\n在主题配置文件`themes\\next\\_config.yml`中：\n\n```\nmenu:\n    home: / || home\n    tags: /tags/ || tags\n    categories: /categories/ || th\n    archives: /archives/ || tasks\n+   books: /books/ || book  \n+   movies: /movies/ || video-camera  \n+   games: /games/ || gamepad\n```\n\n在语言包中新增菜单中文`themes\\next\\language\\zh_CN.yml`：\n\n```\n  menu:\n    home: 首页\n    archives: 归档\n    categories: 分类\n    tags: 标签\n+   movies: 电影\n+   books: 读书\n+   games: 游戏\n```\n\n\n","source":"_posts/Hexo-nexT玩法.md","raw":"---\ntitle: Hexo nexT的一些玩法（转载+总结）\ndate: 2017-11-22 15:50:14\ntags: [Hexo]\ncategories: Hexo\nphotos:\n  - \"https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true\"\ndescription: Hexo真是太棒了\n\n---\n\n# 基础篇\n\n## 1. 常用命令\n\n官方文档：https://hexo.io/zh-cn/docs/server.html\n\n```\nhexo new \"HelloWorld\" #新建文章\nhexo new page \"pageName\" #新建页面\nhexo n \"我的博客\" == hexo new \"我的博客\" #新建文章\nhexo p == hexo publish\nhexo g == hexo generate #生成\nhexo s == hexo server #启动服务预览\nhexo d == hexo deploy #部署\nhexo d #部署 #可与hexo g合并为 hexo d -g\n```\n\n\n## 2. 文章中插入图片\n\n对于hexo，有两种方式： \n使用本地路径：在hexo/source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为/img/图片名称。 \n使用微博图床，地址 http://weibotuchuang.sinaapp.com/ ，将图片拖入区域中，会生成图片的URL，这就是链接地址。\n## 3. 添加分页、标签页面\n\n新建\n命令：\n\n`hexo new page tags # tags可替换成其他`\n\n输入命令后，在`/source`下会新生成一个新的文件夹tags，在该文件夹下会有一个index.md文件。\n在上步新生成的`myBlog/source/tags/index.md`中添加`type: \"tags\"`，`index.md`文件内容如下：\n设置具体文章的tags\n当要为某一篇文章添加标签，只需在`/source/_post`目录下的具体文章的tags中添加标签即可，如：\n\n`tags: [hexo,next]`\n\n## 4. 引入第三方服务 \n\n参考 : http://theme-next.iissnan.com/third-party-services.html#swfitype\n\n ### 1. 加入分享功能\n\n在主题配置文件中，`jiathis: true`\n\n ### 2.  加入评论功能\n\n  待续\n\n ### 3.  加入站点内容搜索功能\n\n  1) 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：\n\n`$ npm install hexo-generator-searchdb --save`\n\n 2) 编辑 站点配置文件，新增以下内容到任意位置：\n\n```\n search:\n    path: search.xml\n    field: post\n    format: html\n    limit: 10000\n```\n 3) 编辑 主题配置文件，启用本地搜索功能：\n\n```\nlocal_search:\nenable: true\n```\n\n 4. 数据统计\n\n##  5. 取消“文章目录”对标题的自动编号\n\n修改主题配置文件那里的`toc:number`为`false`\n\n\n# 个性化 ([参考](http://blog.csdn.net/qq_33699981/article/details/72716951))\n\n## 1. 修改文章内链接文本样式（待考证）\n\n修改文件 `themes\\next\\source\\css\\_common\\components\\post\\post.styl`，在末尾添加如下css样式：\n\n```css\n// 文章内链接文本样式\n.post-body p a{\n  color: #0593d3;\n  border-bottom: none;\n  border-bottom: 1px solid #0593d3;\n  &:hover {\n    color: #fc6423;\n    border-bottom: none;\n    border-bottom: 1px solid #fc6423;\n  }\n}\n```\n\n## 2. 修改文章底部的那个带#号的标签\n修改模板`/themes/next/layout/_macro/post.swig`，搜索 `rel=\"tag\">#`，将 # 换成\n/` <i class=\"fa fa-tag\"></i> `/\n\n## 3. 在每篇文章末尾统一添加“本文结束”标记\n在路径` \\themes\\next\\layout\\_macro` 中新建 `passage-end-tag.swig` 文件,并添加以下内容：\n\n```\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    {% endif %}\n</div>\n```\n\n接着打开`\\themes\\next\\layout\\_macro\\post.swig`文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）：\n![blog1.png](/image/blog1.png)\n\n## 4. 修改网页底部的桃心\n还是打开`themes/next/layout/_partials/footer.swig`，找到： \n\n```html\n<span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n</span>\n```\n\n然后还是在[图标库](http://fontawesome.io/icons/)中找到你自己喜欢的图标，然后修改画红线的部分就可以了。\n## 5. 添加顶部加载条\n打开`/themes/next/layout/_partials/head.swig`文件，修改为 :\n\n```html\n<meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n<script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"></script>\n<link href=\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\" rel=\"stylesheet\">\n<meta name=\"theme-color\" content=\"{{ theme.android_chrome_color }}\">\n```\n\n参考资料： \nhttp://www.jianshu.com/p/c23902f93558\nhttp://blog.csdn.net/qq_33699981/article/details/72716951\nhttp://playingfingers.com/2016/03/26/build-a-blog/\nhttps://segmentfault.com/a/1190000003946969\n\n\n\n\n## 5.添加网页音乐播放器功能\n\n### Download Aplayer \n\n点击访问Aplayer源码：[GitHub Aplayer](https://github.com/MoePlayer/APlayer)。下载到本地，解压后将`dist`文件夹复制到`themes\\next\\source`文件夹下。\n\n### 修改music.js\n\n新建`themes\\next\\source\\dist\\music.js`文件，添加内容：\n\n```\nconst ap = new APlayer({\n    container: document.getElementById('aplayer'),\n    fixed: true,\n    autoplay: false,\n    audio: [\n\t{\n        name: \"canon in d\",\n        artist: 'Brian Crain',\n        url: 'http://pd2tflnys.bkt.clouddn.com/Brian%20Crain%20-%20canon%20in%20d.mp3',\n        cover: 'http://p1.music.126.net/QGb9Vtyw7qHS00uEvPfM6g==/843325418547559.jpg?param=130y130',\n      },\n\t  {\n        name: \"Apologize\",\n        artist: 'Martin Ermen',\n        url: 'http://pd2tflnys.bkt.clouddn.com/Martin%20Ermen%20-%20Apologize.mp3',\n        cover: 'http://p1.music.126.net/-_6mcI4VV5IKaiwhUAytbg==/1791104441647901.jpg?param=130y130',\n      },\n\t  {\n        name: \"River Flows in You\",\n        artist: 'Yiruma',\n        url: 'http://pd2tflnys.bkt.clouddn.com/Yiruma%20-%20River%20Flows%20in%20You.flac',\n        cover: 'http://p1.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130',\n      },\n      {\n        name: '惊蛰',\n        artist: '音阙诗听/王梓钰',\n        url: 'http://www.ytmp3.cn/down/48755.mp3',\n        cover: 'http://p1.music.126.net/5MmXpaP9r88tNzExPGMI8Q==/109951163370350985.jpg?param=130y130',\n      }\n    ]\n});\n```\n\n源码中对应的参数解释，这边都有： [Aplayer 中文文档](https://aplayer.js.org/#/zh-Hans/)\n\n`audio`对应的便是音频文件，所以音乐播放器需要播放的音乐是需要自己进行相关信息（如歌曲链接、歌词、封面等）的配置。这里放一个mp3音乐外链网站：<http://up.mcyt.net/> ，搜索对应的音乐，然后复制`url`和右击封面图片链接粘贴到对应的位置上就行了。\n\n注：由于该外链网站没有歌词链接，我这边没有进行配置，所以播放器在播放音乐时点击歌词是没有显示的。\n\n### _layout.swig\n\n打开`themes\\next\\layout\\_layout.swig`文件，将\n\n```\ncopy<link rel=\"stylesheet\" href=\"/dist/APlayer.min.css\">\n<div id=\"aplayer\"></div>\n<script type=\"text/javascript\" src=\"/dist/APlayer.min.js\"></script>\n<script type=\"text/javascript\" src=\"/dist/music.js\"></script>\n```\n\n\n\n添加到`<body itemscope ...>`后面就行，即在`<body></body>`里面。\n\n重新生成，访问页面，就能看到左下角的音乐播放器了。\n\n\n## 6. 搞怪网页标题\n\n本章节参考 <http://yearito.cn/posts/hexo-advanced-settings.html>\n\n```\nthemes\\next\\layout\\_custom\\custom.swig\n```\n\n```\n{# 搞怪网页标题 #}\n{% if theme.title_trick.enable %}\n  <script>\n    var OriginTitile = document.title;\n    var titleTime;\n    document.addEventListener('visibilitychange', function() {\n      if (document.hidden) {\n        document.title = '{{ theme.title_trick.leave }}' + OriginTitile;\n        clearTimeout(titleTime);\n      } else {\n        document.title = '{{ theme.title_trick.enter }}' + OriginTitile;\n        titleTime = setTimeout(function() {\n          document.title = OriginTitile;\n        }, 2000);\n      }\n    });\n  </script>\n{% endif %}\n```\n\n```\nthemes\\next\\layout\\_layout.swig\n```\n\n```\n      ...\n      {% include '_third-party/exturl.swig' %}\n      {% include '_third-party/bookmark.swig' %}\n      {% include '_third-party/copy-code.swig' %}\n\n+     {% include '_custom/custom.swig' %}\n    </body>\n  </html>\n```\n\n在主题配置文件中添加以下代码：\n\n```\n# a trick on website title\ntitle_trick:\n  enable: true\n  leave: \"啊咧?真由氏的怀表停了呢~\"\n  enter: \"这一切都是命运石之门的选择！\"\n\n```\n\n## 7. 豆瓣阅读 / 电影 / 游戏\n\n```\n npm install hexo-douban --save\n```\n\n核心配置文件`_config.yml`：\n\n```\ndouban:\n  user:  # 个人豆瓣ID\n  builtin: false  #是否每次hexo d -g时都自动hexo douban\n  book:\n    title: 'This is my book title'\n    quote: 'This is my book quote'\n  movie:\n    title: 'This is my movie title'\n    quote: 'This is my movie quote'\n  game:\n    title: 'This is my game title'\n    quote: 'This is my game quote'\n  timeout: 10000\n```\n\n在主题配置文件`themes\\next\\_config.yml`中：\n\n```\nmenu:\n    home: / || home\n    tags: /tags/ || tags\n    categories: /categories/ || th\n    archives: /archives/ || tasks\n+   books: /books/ || book  \n+   movies: /movies/ || video-camera  \n+   games: /games/ || gamepad\n```\n\n在语言包中新增菜单中文`themes\\next\\language\\zh_CN.yml`：\n\n```\n  menu:\n    home: 首页\n    archives: 归档\n    categories: 分类\n    tags: 标签\n+   movies: 电影\n+   books: 读书\n+   games: 游戏\n```\n\n\n","slug":"Hexo-nexT玩法","published":1,"updated":"2025-02-22T18:52:19.817Z","comments":1,"layout":"post","_id":"cm7hqj8ag0009v00148cnc86s","content":"<h1 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h1><h2 id=\"1-常用命令\"><a href=\"#1-常用命令\" class=\"headerlink\" title=\"1. 常用命令\"></a>1. 常用命令</h2><p>官方文档：<a href=\"https://hexo.io/zh-cn/docs/server.html\">https://hexo.io/zh-cn/docs/server.html</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;HelloWorld&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate #生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy #部署</span><br><span class=\"line\">hexo d #部署 #可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-文章中插入图片\"><a href=\"#2-文章中插入图片\" class=\"headerlink\" title=\"2. 文章中插入图片\"></a>2. 文章中插入图片</h2><p>对于hexo，有两种方式：<br>使用本地路径：在hexo&#x2F;source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为&#x2F;img&#x2F;图片名称。<br>使用微博图床，地址 <a href=\"http://weibotuchuang.sinaapp.com/\">http://weibotuchuang.sinaapp.com/</a> ，将图片拖入区域中，会生成图片的URL，这就是链接地址。</p>\n<h2 id=\"3-添加分页、标签页面\"><a href=\"#3-添加分页、标签页面\" class=\"headerlink\" title=\"3. 添加分页、标签页面\"></a>3. 添加分页、标签页面</h2><p>新建<br>命令：</p>\n<p><code>hexo new page tags # tags可替换成其他</code></p>\n<p>输入命令后，在<code>/source</code>下会新生成一个新的文件夹tags，在该文件夹下会有一个index.md文件。<br>在上步新生成的<code>myBlog/source/tags/index.md</code>中添加<code>type: &quot;tags&quot;</code>，<code>index.md</code>文件内容如下：<br>设置具体文章的tags<br>当要为某一篇文章添加标签，只需在<code>/source/_post</code>目录下的具体文章的tags中添加标签即可，如：</p>\n<p><code>tags: [hexo,next]</code></p>\n<h2 id=\"4-引入第三方服务\"><a href=\"#4-引入第三方服务\" class=\"headerlink\" title=\"4. 引入第三方服务\"></a>4. 引入第三方服务</h2><p>参考 : <a href=\"http://theme-next.iissnan.com/third-party-services.html#swfitype\">http://theme-next.iissnan.com/third-party-services.html#swfitype</a></p>\n<h3 id=\"1-加入分享功能\"><a href=\"#1-加入分享功能\" class=\"headerlink\" title=\"1. 加入分享功能\"></a>1. 加入分享功能</h3><p>在主题配置文件中，<code>jiathis: true</code></p>\n<h3 id=\"2-加入评论功能\"><a href=\"#2-加入评论功能\" class=\"headerlink\" title=\"2.  加入评论功能\"></a>2.  加入评论功能</h3><p>  待续</p>\n<h3 id=\"3-加入站点内容搜索功能\"><a href=\"#3-加入站点内容搜索功能\" class=\"headerlink\" title=\"3.  加入站点内容搜索功能\"></a>3.  加入站点内容搜索功能</h3><ol>\n<li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</li>\n</ol>\n<p><code>$ npm install hexo-generator-searchdb --save</code></p>\n<ol start=\"2\">\n<li>编辑 站点配置文件，新增以下内容到任意位置：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">   path: search.xml</span><br><span class=\"line\">   field: post</span><br><span class=\"line\">   format: html</span><br><span class=\"line\">   limit: 10000</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编辑 主题配置文件，启用本地搜索功能：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local_search:</span><br><span class=\"line\">enable: true</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>数据统计</li>\n</ol>\n<h2 id=\"5-取消“文章目录”对标题的自动编号\"><a href=\"#5-取消“文章目录”对标题的自动编号\" class=\"headerlink\" title=\"5. 取消“文章目录”对标题的自动编号\"></a>5. 取消“文章目录”对标题的自动编号</h2><p>修改主题配置文件那里的<code>toc:number</code>为<code>false</code></p>\n<h1 id=\"个性化-参考\"><a href=\"#个性化-参考\" class=\"headerlink\" title=\"个性化 (参考)\"></a>个性化 (<a href=\"http://blog.csdn.net/qq_33699981/article/details/72716951\">参考</a>)</h1><h2 id=\"1-修改文章内链接文本样式（待考证）\"><a href=\"#1-修改文章内链接文本样式（待考证）\" class=\"headerlink\" title=\"1. 修改文章内链接文本样式（待考证）\"></a>1. 修改文章内链接文本样式（待考证）</h2><p>修改文件 <code>themes\\next\\source\\css\\_common\\components\\post\\post.styl</code>，在末尾添加如下css样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文章内链接文本样式</span><br><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fc6423</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fc6423</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-修改文章底部的那个带-号的标签\"><a href=\"#2-修改文章底部的那个带-号的标签\" class=\"headerlink\" title=\"2. 修改文章底部的那个带#号的标签\"></a>2. 修改文章底部的那个带#号的标签</h2><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<br>&#x2F;<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>&#x2F;</p>\n<h2 id=\"3-在每篇文章末尾统一添加“本文结束”标记\"><a href=\"#3-在每篇文章末尾统一添加“本文结束”标记\" class=\"headerlink\" title=\"3. 在每篇文章末尾统一添加“本文结束”标记\"></a>3. 在每篇文章末尾统一添加“本文结束”标记</h2><p>在路径<code> \\themes\\next\\layout\\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接着打开<code>\\themes\\next\\layout\\_macro\\post.swig</code>文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）：<br><img src=\"/image/blog1.png\" alt=\"blog1.png\"></p>\n<h2 id=\"4-修改网页底部的桃心\"><a href=\"#4-修改网页底部的桃心\" class=\"headerlink\" title=\"4. 修改网页底部的桃心\"></a>4. 修改网页底部的桃心</h2><p>还是打开<code>themes/next/layout/_partials/footer.swig</code>，找到： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;with-love&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-heart&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后还是在<a href=\"http://fontawesome.io/icons/\">图标库</a>中找到你自己喜欢的图标，然后修改画红线的部分就可以了。</p>\n<h2 id=\"5-添加顶部加载条\"><a href=\"#5-添加顶部加载条\" class=\"headerlink\" title=\"5. 添加顶部加载条\"></a>5. 添加顶部加载条</h2><p>打开<code>/themes/next/layout/_partials/head.swig</code>文件，修改为 :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;theme-color&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&#123;&#123; theme.android_chrome_color &#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>参考资料：<br><a href=\"http://www.jianshu.com/p/c23902f93558\">http://www.jianshu.com/p/c23902f93558</a><br><a href=\"http://blog.csdn.net/qq_33699981/article/details/72716951\">http://blog.csdn.net/qq_33699981/article/details/72716951</a><br><a href=\"http://playingfingers.com/2016/03/26/build-a-blog/\">http://playingfingers.com/2016/03/26/build-a-blog/</a><br><a href=\"https://segmentfault.com/a/1190000003946969\">https://segmentfault.com/a/1190000003946969</a></p>\n<h2 id=\"5-添加网页音乐播放器功能\"><a href=\"#5-添加网页音乐播放器功能\" class=\"headerlink\" title=\"5.添加网页音乐播放器功能\"></a>5.添加网页音乐播放器功能</h2><h3 id=\"Download-Aplayer\"><a href=\"#Download-Aplayer\" class=\"headerlink\" title=\"Download Aplayer\"></a>Download Aplayer</h3><p>点击访问Aplayer源码：<a href=\"https://github.com/MoePlayer/APlayer\">GitHub Aplayer</a>。下载到本地，解压后将<code>dist</code>文件夹复制到<code>themes\\next\\source</code>文件夹下。</p>\n<h3 id=\"修改music-js\"><a href=\"#修改music-js\" class=\"headerlink\" title=\"修改music.js\"></a>修改music.js</h3><p>新建<code>themes\\next\\source\\dist\\music.js</code>文件，添加内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ap = new APlayer(&#123;</span><br><span class=\"line\">    container: document.getElementById(&#x27;aplayer&#x27;),</span><br><span class=\"line\">    fixed: true,</span><br><span class=\"line\">    autoplay: false,</span><br><span class=\"line\">    audio: [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        name: &quot;canon in d&quot;,</span><br><span class=\"line\">        artist: &#x27;Brian Crain&#x27;,</span><br><span class=\"line\">        url: &#x27;http://pd2tflnys.bkt.clouddn.com/Brian%20Crain%20-%20canon%20in%20d.mp3&#x27;,</span><br><span class=\"line\">        cover: &#x27;http://p1.music.126.net/QGb9Vtyw7qHS00uEvPfM6g==/843325418547559.jpg?param=130y130&#x27;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">        name: &quot;Apologize&quot;,</span><br><span class=\"line\">        artist: &#x27;Martin Ermen&#x27;,</span><br><span class=\"line\">        url: &#x27;http://pd2tflnys.bkt.clouddn.com/Martin%20Ermen%20-%20Apologize.mp3&#x27;,</span><br><span class=\"line\">        cover: &#x27;http://p1.music.126.net/-_6mcI4VV5IKaiwhUAytbg==/1791104441647901.jpg?param=130y130&#x27;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">        name: &quot;River Flows in You&quot;,</span><br><span class=\"line\">        artist: &#x27;Yiruma&#x27;,</span><br><span class=\"line\">        url: &#x27;http://pd2tflnys.bkt.clouddn.com/Yiruma%20-%20River%20Flows%20in%20You.flac&#x27;,</span><br><span class=\"line\">        cover: &#x27;http://p1.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130&#x27;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &#x27;惊蛰&#x27;,</span><br><span class=\"line\">        artist: &#x27;音阙诗听/王梓钰&#x27;,</span><br><span class=\"line\">        url: &#x27;http://www.ytmp3.cn/down/48755.mp3&#x27;,</span><br><span class=\"line\">        cover: &#x27;http://p1.music.126.net/5MmXpaP9r88tNzExPGMI8Q==/109951163370350985.jpg?param=130y130&#x27;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>源码中对应的参数解释，这边都有： <a href=\"https://aplayer.js.org/#/zh-Hans/\">Aplayer 中文文档</a></p>\n<p><code>audio</code>对应的便是音频文件，所以音乐播放器需要播放的音乐是需要自己进行相关信息（如歌曲链接、歌词、封面等）的配置。这里放一个mp3音乐外链网站：<a href=\"http://up.mcyt.net/\">http://up.mcyt.net/</a> ，搜索对应的音乐，然后复制<code>url</code>和右击封面图片链接粘贴到对应的位置上就行了。</p>\n<p>注：由于该外链网站没有歌词链接，我这边没有进行配置，所以播放器在播放音乐时点击歌词是没有显示的。</p>\n<h3 id=\"layout-swig\"><a href=\"#layout-swig\" class=\"headerlink\" title=\"_layout.swig\"></a>_layout.swig</h3><p>打开<code>themes\\next\\layout\\_layout.swig</code>文件，将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy&lt;link rel=&quot;stylesheet&quot; href=&quot;/dist/APlayer.min.css&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/dist/music.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>添加到<code>&lt;body itemscope ...&gt;</code>后面就行，即在<code>&lt;body&gt;&lt;/body&gt;</code>里面。</p>\n<p>重新生成，访问页面，就能看到左下角的音乐播放器了。</p>\n<h2 id=\"6-搞怪网页标题\"><a href=\"#6-搞怪网页标题\" class=\"headerlink\" title=\"6. 搞怪网页标题\"></a>6. 搞怪网页标题</h2><p>本章节参考 <a href=\"http://yearito.cn/posts/hexo-advanced-settings.html\">http://yearito.cn/posts/hexo-advanced-settings.html</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\layout\\_custom\\custom.swig</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;# 搞怪网页标题 #&#125;</span><br><span class=\"line\">&#123;% if theme.title_trick.enable %&#125;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var OriginTitile = document.title;</span><br><span class=\"line\">    var titleTime;</span><br><span class=\"line\">    document.addEventListener(&#x27;visibilitychange&#x27;, function() &#123;</span><br><span class=\"line\">      if (document.hidden) &#123;</span><br><span class=\"line\">        document.title = &#x27;&#123;&#123; theme.title_trick.leave &#125;&#125;&#x27; + OriginTitile;</span><br><span class=\"line\">        clearTimeout(titleTime);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        document.title = &#x27;&#123;&#123; theme.title_trick.enter &#125;&#125;&#x27; + OriginTitile;</span><br><span class=\"line\">        titleTime = setTimeout(function() &#123;</span><br><span class=\"line\">          document.title = OriginTitile;</span><br><span class=\"line\">        &#125;, 2000);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\layout\\_layout.swig</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;% include &#x27;_third-party/exturl.swig&#x27; %&#125;</span><br><span class=\"line\">      &#123;% include &#x27;_third-party/bookmark.swig&#x27; %&#125;</span><br><span class=\"line\">      &#123;% include &#x27;_third-party/copy-code.swig&#x27; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+     &#123;% include &#x27;_custom/custom.swig&#x27; %&#125;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在主题配置文件中添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a trick on website title</span><br><span class=\"line\">title_trick:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  leave: &quot;啊咧?真由氏的怀表停了呢~&quot;</span><br><span class=\"line\">  enter: &quot;这一切都是命运石之门的选择！&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-豆瓣阅读-电影-游戏\"><a href=\"#7-豆瓣阅读-电影-游戏\" class=\"headerlink\" title=\"7. 豆瓣阅读 &#x2F; 电影 &#x2F; 游戏\"></a>7. 豆瓣阅读 &#x2F; 电影 &#x2F; 游戏</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-douban --save</span><br></pre></td></tr></table></figure>\n\n<p>核心配置文件<code>_config.yml</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">douban:</span><br><span class=\"line\">  user:  # 个人豆瓣ID</span><br><span class=\"line\">  builtin: false  #是否每次hexo d -g时都自动hexo douban</span><br><span class=\"line\">  book:</span><br><span class=\"line\">    title: &#x27;This is my book title&#x27;</span><br><span class=\"line\">    quote: &#x27;This is my book quote&#x27;</span><br><span class=\"line\">  movie:</span><br><span class=\"line\">    title: &#x27;This is my movie title&#x27;</span><br><span class=\"line\">    quote: &#x27;This is my movie quote&#x27;</span><br><span class=\"line\">  game:</span><br><span class=\"line\">    title: &#x27;This is my game title&#x27;</span><br><span class=\"line\">    quote: &#x27;This is my game quote&#x27;</span><br><span class=\"line\">  timeout: 10000</span><br></pre></td></tr></table></figure>\n\n<p>在主题配置文件<code>themes\\next\\_config.yml</code>中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">    home: / || home</span><br><span class=\"line\">    tags: /tags/ || tags</span><br><span class=\"line\">    categories: /categories/ || th</span><br><span class=\"line\">    archives: /archives/ || tasks</span><br><span class=\"line\">+   books: /books/ || book  </span><br><span class=\"line\">+   movies: /movies/ || video-camera  </span><br><span class=\"line\">+   games: /games/ || gamepad</span><br></pre></td></tr></table></figure>\n\n<p>在语言包中新增菜单中文<code>themes\\next\\language\\zh_CN.yml</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  menu:</span><br><span class=\"line\">    home: 首页</span><br><span class=\"line\">    archives: 归档</span><br><span class=\"line\">    categories: 分类</span><br><span class=\"line\">    tags: 标签</span><br><span class=\"line\">+   movies: 电影</span><br><span class=\"line\">+   books: 读书</span><br><span class=\"line\">+   games: 游戏</span><br></pre></td></tr></table></figure>\n\n\n","length":6739,"excerpt":"","more":"<h1 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h1><h2 id=\"1-常用命令\"><a href=\"#1-常用命令\" class=\"headerlink\" title=\"1. 常用命令\"></a>1. 常用命令</h2><p>官方文档：<a href=\"https://hexo.io/zh-cn/docs/server.html\">https://hexo.io/zh-cn/docs/server.html</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;HelloWorld&quot; #新建文章</span><br><span class=\"line\">hexo new page &quot;pageName&quot; #新建页面</span><br><span class=\"line\">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</span><br><span class=\"line\">hexo p == hexo publish</span><br><span class=\"line\">hexo g == hexo generate #生成</span><br><span class=\"line\">hexo s == hexo server #启动服务预览</span><br><span class=\"line\">hexo d == hexo deploy #部署</span><br><span class=\"line\">hexo d #部署 #可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-文章中插入图片\"><a href=\"#2-文章中插入图片\" class=\"headerlink\" title=\"2. 文章中插入图片\"></a>2. 文章中插入图片</h2><p>对于hexo，有两种方式：<br>使用本地路径：在hexo&#x2F;source目录下新建一个img文件夹，将图片放入该文件夹下，插入图片时链接即为&#x2F;img&#x2F;图片名称。<br>使用微博图床，地址 <a href=\"http://weibotuchuang.sinaapp.com/\">http://weibotuchuang.sinaapp.com/</a> ，将图片拖入区域中，会生成图片的URL，这就是链接地址。</p>\n<h2 id=\"3-添加分页、标签页面\"><a href=\"#3-添加分页、标签页面\" class=\"headerlink\" title=\"3. 添加分页、标签页面\"></a>3. 添加分页、标签页面</h2><p>新建<br>命令：</p>\n<p><code>hexo new page tags # tags可替换成其他</code></p>\n<p>输入命令后，在<code>/source</code>下会新生成一个新的文件夹tags，在该文件夹下会有一个index.md文件。<br>在上步新生成的<code>myBlog/source/tags/index.md</code>中添加<code>type: &quot;tags&quot;</code>，<code>index.md</code>文件内容如下：<br>设置具体文章的tags<br>当要为某一篇文章添加标签，只需在<code>/source/_post</code>目录下的具体文章的tags中添加标签即可，如：</p>\n<p><code>tags: [hexo,next]</code></p>\n<h2 id=\"4-引入第三方服务\"><a href=\"#4-引入第三方服务\" class=\"headerlink\" title=\"4. 引入第三方服务\"></a>4. 引入第三方服务</h2><p>参考 : <a href=\"http://theme-next.iissnan.com/third-party-services.html#swfitype\">http://theme-next.iissnan.com/third-party-services.html#swfitype</a></p>\n<h3 id=\"1-加入分享功能\"><a href=\"#1-加入分享功能\" class=\"headerlink\" title=\"1. 加入分享功能\"></a>1. 加入分享功能</h3><p>在主题配置文件中，<code>jiathis: true</code></p>\n<h3 id=\"2-加入评论功能\"><a href=\"#2-加入评论功能\" class=\"headerlink\" title=\"2.  加入评论功能\"></a>2.  加入评论功能</h3><p>  待续</p>\n<h3 id=\"3-加入站点内容搜索功能\"><a href=\"#3-加入站点内容搜索功能\" class=\"headerlink\" title=\"3.  加入站点内容搜索功能\"></a>3.  加入站点内容搜索功能</h3><ol>\n<li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</li>\n</ol>\n<p><code>$ npm install hexo-generator-searchdb --save</code></p>\n<ol start=\"2\">\n<li>编辑 站点配置文件，新增以下内容到任意位置：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">   path: search.xml</span><br><span class=\"line\">   field: post</span><br><span class=\"line\">   format: html</span><br><span class=\"line\">   limit: 10000</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编辑 主题配置文件，启用本地搜索功能：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local_search:</span><br><span class=\"line\">enable: true</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>数据统计</li>\n</ol>\n<h2 id=\"5-取消“文章目录”对标题的自动编号\"><a href=\"#5-取消“文章目录”对标题的自动编号\" class=\"headerlink\" title=\"5. 取消“文章目录”对标题的自动编号\"></a>5. 取消“文章目录”对标题的自动编号</h2><p>修改主题配置文件那里的<code>toc:number</code>为<code>false</code></p>\n<h1 id=\"个性化-参考\"><a href=\"#个性化-参考\" class=\"headerlink\" title=\"个性化 (参考)\"></a>个性化 (<a href=\"http://blog.csdn.net/qq_33699981/article/details/72716951\">参考</a>)</h1><h2 id=\"1-修改文章内链接文本样式（待考证）\"><a href=\"#1-修改文章内链接文本样式（待考证）\" class=\"headerlink\" title=\"1. 修改文章内链接文本样式（待考证）\"></a>1. 修改文章内链接文本样式（待考证）</h2><p>修改文件 <code>themes\\next\\source\\css\\_common\\components\\post\\post.styl</code>，在末尾添加如下css样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 文章内链接文本样式</span><br><span class=\"line\"><span class=\"selector-class\">.post-body</span> <span class=\"selector-tag\">p</span> <span class=\"selector-tag\">a</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#0593d3</span>;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fc6423</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#fc6423</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-修改文章底部的那个带-号的标签\"><a href=\"#2-修改文章底部的那个带-号的标签\" class=\"headerlink\" title=\"2. 修改文章底部的那个带#号的标签\"></a>2. 修改文章底部的那个带#号的标签</h2><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<br>&#x2F;<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>&#x2F;</p>\n<h2 id=\"3-在每篇文章末尾统一添加“本文结束”标记\"><a href=\"#3-在每篇文章末尾统一添加“本文结束”标记\" class=\"headerlink\" title=\"3. 在每篇文章末尾统一添加“本文结束”标记\"></a>3. 在每篇文章末尾统一添加“本文结束”标记</h2><p>在路径<code> \\themes\\next\\layout\\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接着打开<code>\\themes\\next\\layout\\_macro\\post.swig</code>文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）：<br><img src=\"/image/blog1.png\" alt=\"blog1.png\"></p>\n<h2 id=\"4-修改网页底部的桃心\"><a href=\"#4-修改网页底部的桃心\" class=\"headerlink\" title=\"4. 修改网页底部的桃心\"></a>4. 修改网页底部的桃心</h2><p>还是打开<code>themes/next/layout/_partials/footer.swig</code>，找到： </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;with-love&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-heart&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后还是在<a href=\"http://fontawesome.io/icons/\">图标库</a>中找到你自己喜欢的图标，然后修改画红线的部分就可以了。</p>\n<h2 id=\"5-添加顶部加载条\"><a href=\"#5-添加顶部加载条\" class=\"headerlink\" title=\"5. 添加顶部加载条\"></a>5. 添加顶部加载条</h2><p>打开<code>/themes/next/layout/_partials/head.swig</code>文件，修改为 :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;theme-color&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;&#123;&#123; theme.android_chrome_color &#125;&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>参考资料：<br><a href=\"http://www.jianshu.com/p/c23902f93558\">http://www.jianshu.com/p/c23902f93558</a><br><a href=\"http://blog.csdn.net/qq_33699981/article/details/72716951\">http://blog.csdn.net/qq_33699981/article/details/72716951</a><br><a href=\"http://playingfingers.com/2016/03/26/build-a-blog/\">http://playingfingers.com/2016/03/26/build-a-blog/</a><br><a href=\"https://segmentfault.com/a/1190000003946969\">https://segmentfault.com/a/1190000003946969</a></p>\n<h2 id=\"5-添加网页音乐播放器功能\"><a href=\"#5-添加网页音乐播放器功能\" class=\"headerlink\" title=\"5.添加网页音乐播放器功能\"></a>5.添加网页音乐播放器功能</h2><h3 id=\"Download-Aplayer\"><a href=\"#Download-Aplayer\" class=\"headerlink\" title=\"Download Aplayer\"></a>Download Aplayer</h3><p>点击访问Aplayer源码：<a href=\"https://github.com/MoePlayer/APlayer\">GitHub Aplayer</a>。下载到本地，解压后将<code>dist</code>文件夹复制到<code>themes\\next\\source</code>文件夹下。</p>\n<h3 id=\"修改music-js\"><a href=\"#修改music-js\" class=\"headerlink\" title=\"修改music.js\"></a>修改music.js</h3><p>新建<code>themes\\next\\source\\dist\\music.js</code>文件，添加内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ap = new APlayer(&#123;</span><br><span class=\"line\">    container: document.getElementById(&#x27;aplayer&#x27;),</span><br><span class=\"line\">    fixed: true,</span><br><span class=\"line\">    autoplay: false,</span><br><span class=\"line\">    audio: [</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        name: &quot;canon in d&quot;,</span><br><span class=\"line\">        artist: &#x27;Brian Crain&#x27;,</span><br><span class=\"line\">        url: &#x27;http://pd2tflnys.bkt.clouddn.com/Brian%20Crain%20-%20canon%20in%20d.mp3&#x27;,</span><br><span class=\"line\">        cover: &#x27;http://p1.music.126.net/QGb9Vtyw7qHS00uEvPfM6g==/843325418547559.jpg?param=130y130&#x27;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">        name: &quot;Apologize&quot;,</span><br><span class=\"line\">        artist: &#x27;Martin Ermen&#x27;,</span><br><span class=\"line\">        url: &#x27;http://pd2tflnys.bkt.clouddn.com/Martin%20Ermen%20-%20Apologize.mp3&#x27;,</span><br><span class=\"line\">        cover: &#x27;http://p1.music.126.net/-_6mcI4VV5IKaiwhUAytbg==/1791104441647901.jpg?param=130y130&#x27;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">\t  &#123;</span><br><span class=\"line\">        name: &quot;River Flows in You&quot;,</span><br><span class=\"line\">        artist: &#x27;Yiruma&#x27;,</span><br><span class=\"line\">        url: &#x27;http://pd2tflnys.bkt.clouddn.com/Yiruma%20-%20River%20Flows%20in%20You.flac&#x27;,</span><br><span class=\"line\">        cover: &#x27;http://p1.music.126.net/8ZRSyI0ZN_4ah8uzsNd1mA==/2324367581169008.jpg?param=130y130&#x27;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        name: &#x27;惊蛰&#x27;,</span><br><span class=\"line\">        artist: &#x27;音阙诗听/王梓钰&#x27;,</span><br><span class=\"line\">        url: &#x27;http://www.ytmp3.cn/down/48755.mp3&#x27;,</span><br><span class=\"line\">        cover: &#x27;http://p1.music.126.net/5MmXpaP9r88tNzExPGMI8Q==/109951163370350985.jpg?param=130y130&#x27;,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>源码中对应的参数解释，这边都有： <a href=\"https://aplayer.js.org/#/zh-Hans/\">Aplayer 中文文档</a></p>\n<p><code>audio</code>对应的便是音频文件，所以音乐播放器需要播放的音乐是需要自己进行相关信息（如歌曲链接、歌词、封面等）的配置。这里放一个mp3音乐外链网站：<a href=\"http://up.mcyt.net/\">http://up.mcyt.net/</a> ，搜索对应的音乐，然后复制<code>url</code>和右击封面图片链接粘贴到对应的位置上就行了。</p>\n<p>注：由于该外链网站没有歌词链接，我这边没有进行配置，所以播放器在播放音乐时点击歌词是没有显示的。</p>\n<h3 id=\"layout-swig\"><a href=\"#layout-swig\" class=\"headerlink\" title=\"_layout.swig\"></a>_layout.swig</h3><p>打开<code>themes\\next\\layout\\_layout.swig</code>文件，将</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copy&lt;link rel=&quot;stylesheet&quot; href=&quot;/dist/APlayer.min.css&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/dist/music.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>添加到<code>&lt;body itemscope ...&gt;</code>后面就行，即在<code>&lt;body&gt;&lt;/body&gt;</code>里面。</p>\n<p>重新生成，访问页面，就能看到左下角的音乐播放器了。</p>\n<h2 id=\"6-搞怪网页标题\"><a href=\"#6-搞怪网页标题\" class=\"headerlink\" title=\"6. 搞怪网页标题\"></a>6. 搞怪网页标题</h2><p>本章节参考 <a href=\"http://yearito.cn/posts/hexo-advanced-settings.html\">http://yearito.cn/posts/hexo-advanced-settings.html</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\layout\\_custom\\custom.swig</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;# 搞怪网页标题 #&#125;</span><br><span class=\"line\">&#123;% if theme.title_trick.enable %&#125;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    var OriginTitile = document.title;</span><br><span class=\"line\">    var titleTime;</span><br><span class=\"line\">    document.addEventListener(&#x27;visibilitychange&#x27;, function() &#123;</span><br><span class=\"line\">      if (document.hidden) &#123;</span><br><span class=\"line\">        document.title = &#x27;&#123;&#123; theme.title_trick.leave &#125;&#125;&#x27; + OriginTitile;</span><br><span class=\"line\">        clearTimeout(titleTime);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        document.title = &#x27;&#123;&#123; theme.title_trick.enter &#125;&#125;&#x27; + OriginTitile;</span><br><span class=\"line\">        titleTime = setTimeout(function() &#123;</span><br><span class=\"line\">          document.title = OriginTitile;</span><br><span class=\"line\">        &#125;, 2000);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\layout\\_layout.swig</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      ...</span><br><span class=\"line\">      &#123;% include &#x27;_third-party/exturl.swig&#x27; %&#125;</span><br><span class=\"line\">      &#123;% include &#x27;_third-party/bookmark.swig&#x27; %&#125;</span><br><span class=\"line\">      &#123;% include &#x27;_third-party/copy-code.swig&#x27; %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+     &#123;% include &#x27;_custom/custom.swig&#x27; %&#125;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">  &lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在主题配置文件中添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># a trick on website title</span><br><span class=\"line\">title_trick:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  leave: &quot;啊咧?真由氏的怀表停了呢~&quot;</span><br><span class=\"line\">  enter: &quot;这一切都是命运石之门的选择！&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-豆瓣阅读-电影-游戏\"><a href=\"#7-豆瓣阅读-电影-游戏\" class=\"headerlink\" title=\"7. 豆瓣阅读 &#x2F; 电影 &#x2F; 游戏\"></a>7. 豆瓣阅读 &#x2F; 电影 &#x2F; 游戏</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-douban --save</span><br></pre></td></tr></table></figure>\n\n<p>核心配置文件<code>_config.yml</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">douban:</span><br><span class=\"line\">  user:  # 个人豆瓣ID</span><br><span class=\"line\">  builtin: false  #是否每次hexo d -g时都自动hexo douban</span><br><span class=\"line\">  book:</span><br><span class=\"line\">    title: &#x27;This is my book title&#x27;</span><br><span class=\"line\">    quote: &#x27;This is my book quote&#x27;</span><br><span class=\"line\">  movie:</span><br><span class=\"line\">    title: &#x27;This is my movie title&#x27;</span><br><span class=\"line\">    quote: &#x27;This is my movie quote&#x27;</span><br><span class=\"line\">  game:</span><br><span class=\"line\">    title: &#x27;This is my game title&#x27;</span><br><span class=\"line\">    quote: &#x27;This is my game quote&#x27;</span><br><span class=\"line\">  timeout: 10000</span><br></pre></td></tr></table></figure>\n\n<p>在主题配置文件<code>themes\\next\\_config.yml</code>中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">    home: / || home</span><br><span class=\"line\">    tags: /tags/ || tags</span><br><span class=\"line\">    categories: /categories/ || th</span><br><span class=\"line\">    archives: /archives/ || tasks</span><br><span class=\"line\">+   books: /books/ || book  </span><br><span class=\"line\">+   movies: /movies/ || video-camera  </span><br><span class=\"line\">+   games: /games/ || gamepad</span><br></pre></td></tr></table></figure>\n\n<p>在语言包中新增菜单中文<code>themes\\next\\language\\zh_CN.yml</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  menu:</span><br><span class=\"line\">    home: 首页</span><br><span class=\"line\">    archives: 归档</span><br><span class=\"line\">    categories: 分类</span><br><span class=\"line\">    tags: 标签</span><br><span class=\"line\">+   movies: 电影</span><br><span class=\"line\">+   books: 读书</span><br><span class=\"line\">+   games: 游戏</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"JVM内存区域和对象","date":"2019-04-15T06:34:34.000Z","description":"JVM的内存模型和对象","_content":"\n# JVM内存区域和对象\n\n## 1. Java内存区域\n\n![jvm.jpg](\\image\\interview_prep\\jvm.jpg)\n\n### 1.1 程序计数器\n\n程序计数器（Program Counter Register）是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。\n\n如果是执行java方法，计数器记录的是正在执行的虚拟机字节码指令的地址；如果native方法，计数器值为空。\n\n不会发生任何OutOfMemoryError。\n\n### 1.2 Java虚拟机栈\n\n线程私有。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。\n\n局部变量表存放了编译器可知的各种基础数据类型（boolean、byte、char、short、int、long、float、double）、对象引用（reference类型，不是对象本身，是一个指向对象起始地址的引用指针，或者是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。\n\n如果扩展时无法申请到足够的内存，会抛出OutOfMemoryError异常。\n\n### 1.3 本地方法栈\n\n与虚拟机栈类似，为执行的Native方法服务。\n\n会抛出OutOfMemoryError异常和StackOverflowError异常。\n\n### 1.4 Java堆\n\nJava虚拟机的内存最大的。被所有线程共享。唯一目的是存放对象实例。\n\nJava堆是垃圾收集器管理的主要区域。细分为：新生代、老年代。\n\n如果在堆中没有内存完成实例分配，而且堆无法扩展，会OutOfMemoryError异常。\n\n### 1.5 方法区\n\n线程共享。存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等。可以不实现垃圾收集。\n\n当方法区无法满足内存分配需求，OutOfMemoryError异常。\n\n### 1.6 运行时常量池\n\n是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种字面量和符号引用，这些内容在类加载时进入该区域。\n\n无法满足内存分配需求，OutOfMemoryError异常。\n\n### 1.7 直接内存\n\n直接内存不是运行时数据区的一部分，但可能导致OutOfMemoryError。\n\n## 2. JVM中的对象\n\n指的是普通对象，不是数据和Class对象。\n\n### 2.1 对象的创建\n\nJVM遇到一个new时，先检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查该符号引用代表的类是否被加载、解析和初始化过。如果没有，必须先执行响应的类加载。\n\n类加载后，为新生对象分配内存，分配任务相当于把一块确定大小的内存从Java堆中划分出来。\n\n内存分配完成后，JVM将分配到的内存初始化为零值。\n\n然后，JVM对对象进行必要的设置，如属于哪个类的实例、对象的哈希码、GC分代年龄等信息，存放到对象的对象头。\n\n此时，JVM中的新对象已产生，接着可以执行init方法。我们根据需要进行初始化，生产我们想用的对象。\n\n#### 2.1.1 分配策略\n\n由Java堆是否规整决定，是否规整由GC是否带有压缩功能决定。\n\n- 指针碰撞：规整。由一个指针作为使用和空闲内存的分割指示器。\n- 空闲列表：不规整。维护一个列表记录是否可用。\n\n#### 2.1.2 线程安全解决方案\n\n- 对分配内存空间的动作做同步处理\n- 使用本地线程分配缓冲\n\n### 2.2 对象的内存布局\n\n分为：对象头、实例数据和对齐填充。\n\n#### 2.2.1 对象头\n\n分为两部分。\n\n第一部分用于**存储对象自身的运行时数据**，如HashCode、GC分代年龄、锁状态标志、线程特有的锁、偏向线程ID、偏向时间戳等。\n\n另一部分是**类型指针**，即对象指向它的类元数据的指针，虚拟机通过该指针来确定这个对象是哪个类的实例。\n\n#### 2.2.2 实例数据\n\n对象真正存储的有效信息，也是在程序中定义的各种类型的字段内容。\n\n#### 2.2.3 对齐填充\n\n不必然存在，没特别意义，只是占位符的作用。\n\n### 2.3 对象的访问定位\n\n程序通过栈上的reference数据来操作栈上的具体对象。访问方式有两种：\n\n- 句柄：堆中划分出一块内存作为句柄池，reference存储的是对象句柄的地址，句柄中存的是实例数据和类型数据各自的具体地址。\n\n- 直接指针：堆要存放基础数据相关信息。reference存储的是对象地址。","source":"_posts/JVM内存模型和对象.md","raw":"---\ntitle: JVM内存区域和对象\ndate: 2019-4-15 14:34:34\ntags: [面试,JVM]\ncategories: [面试,JVM]\ndescription: JVM的内存模型和对象\n---\n\n# JVM内存区域和对象\n\n## 1. Java内存区域\n\n![jvm.jpg](\\image\\interview_prep\\jvm.jpg)\n\n### 1.1 程序计数器\n\n程序计数器（Program Counter Register）是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。\n\n如果是执行java方法，计数器记录的是正在执行的虚拟机字节码指令的地址；如果native方法，计数器值为空。\n\n不会发生任何OutOfMemoryError。\n\n### 1.2 Java虚拟机栈\n\n线程私有。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。\n\n局部变量表存放了编译器可知的各种基础数据类型（boolean、byte、char、short、int、long、float、double）、对象引用（reference类型，不是对象本身，是一个指向对象起始地址的引用指针，或者是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。\n\n如果扩展时无法申请到足够的内存，会抛出OutOfMemoryError异常。\n\n### 1.3 本地方法栈\n\n与虚拟机栈类似，为执行的Native方法服务。\n\n会抛出OutOfMemoryError异常和StackOverflowError异常。\n\n### 1.4 Java堆\n\nJava虚拟机的内存最大的。被所有线程共享。唯一目的是存放对象实例。\n\nJava堆是垃圾收集器管理的主要区域。细分为：新生代、老年代。\n\n如果在堆中没有内存完成实例分配，而且堆无法扩展，会OutOfMemoryError异常。\n\n### 1.5 方法区\n\n线程共享。存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等。可以不实现垃圾收集。\n\n当方法区无法满足内存分配需求，OutOfMemoryError异常。\n\n### 1.6 运行时常量池\n\n是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种字面量和符号引用，这些内容在类加载时进入该区域。\n\n无法满足内存分配需求，OutOfMemoryError异常。\n\n### 1.7 直接内存\n\n直接内存不是运行时数据区的一部分，但可能导致OutOfMemoryError。\n\n## 2. JVM中的对象\n\n指的是普通对象，不是数据和Class对象。\n\n### 2.1 对象的创建\n\nJVM遇到一个new时，先检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查该符号引用代表的类是否被加载、解析和初始化过。如果没有，必须先执行响应的类加载。\n\n类加载后，为新生对象分配内存，分配任务相当于把一块确定大小的内存从Java堆中划分出来。\n\n内存分配完成后，JVM将分配到的内存初始化为零值。\n\n然后，JVM对对象进行必要的设置，如属于哪个类的实例、对象的哈希码、GC分代年龄等信息，存放到对象的对象头。\n\n此时，JVM中的新对象已产生，接着可以执行init方法。我们根据需要进行初始化，生产我们想用的对象。\n\n#### 2.1.1 分配策略\n\n由Java堆是否规整决定，是否规整由GC是否带有压缩功能决定。\n\n- 指针碰撞：规整。由一个指针作为使用和空闲内存的分割指示器。\n- 空闲列表：不规整。维护一个列表记录是否可用。\n\n#### 2.1.2 线程安全解决方案\n\n- 对分配内存空间的动作做同步处理\n- 使用本地线程分配缓冲\n\n### 2.2 对象的内存布局\n\n分为：对象头、实例数据和对齐填充。\n\n#### 2.2.1 对象头\n\n分为两部分。\n\n第一部分用于**存储对象自身的运行时数据**，如HashCode、GC分代年龄、锁状态标志、线程特有的锁、偏向线程ID、偏向时间戳等。\n\n另一部分是**类型指针**，即对象指向它的类元数据的指针，虚拟机通过该指针来确定这个对象是哪个类的实例。\n\n#### 2.2.2 实例数据\n\n对象真正存储的有效信息，也是在程序中定义的各种类型的字段内容。\n\n#### 2.2.3 对齐填充\n\n不必然存在，没特别意义，只是占位符的作用。\n\n### 2.3 对象的访问定位\n\n程序通过栈上的reference数据来操作栈上的具体对象。访问方式有两种：\n\n- 句柄：堆中划分出一块内存作为句柄池，reference存储的是对象句柄的地址，句柄中存的是实例数据和类型数据各自的具体地址。\n\n- 直接指针：堆要存放基础数据相关信息。reference存储的是对象地址。","slug":"JVM内存模型和对象","published":1,"updated":"2025-02-22T18:52:19.817Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8ai000cv001gwnr2jcq","content":"<h1 id=\"JVM内存区域和对象\"><a href=\"#JVM内存区域和对象\" class=\"headerlink\" title=\"JVM内存区域和对象\"></a>JVM内存区域和对象</h1><h2 id=\"1-Java内存区域\"><a href=\"#1-Java内存区域\" class=\"headerlink\" title=\"1. Java内存区域\"></a>1. Java内存区域</h2><p><img src=\"/%5Cimage%5Cinterview_prep%5Cjvm.jpg\" alt=\"jvm.jpg\"></p>\n<h3 id=\"1-1-程序计数器\"><a href=\"#1-1-程序计数器\" class=\"headerlink\" title=\"1.1 程序计数器\"></a>1.1 程序计数器</h3><p>程序计数器（Program Counter Register）是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。</p>\n<p>如果是执行java方法，计数器记录的是正在执行的虚拟机字节码指令的地址；如果native方法，计数器值为空。</p>\n<p>不会发生任何OutOfMemoryError。</p>\n<h3 id=\"1-2-Java虚拟机栈\"><a href=\"#1-2-Java虚拟机栈\" class=\"headerlink\" title=\"1.2 Java虚拟机栈\"></a>1.2 Java虚拟机栈</h3><p>线程私有。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p>\n<p>局部变量表存放了编译器可知的各种基础数据类型（boolean、byte、char、short、int、long、float、double）、对象引用（reference类型，不是对象本身，是一个指向对象起始地址的引用指针，或者是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</p>\n<p>如果扩展时无法申请到足够的内存，会抛出OutOfMemoryError异常。</p>\n<h3 id=\"1-3-本地方法栈\"><a href=\"#1-3-本地方法栈\" class=\"headerlink\" title=\"1.3 本地方法栈\"></a>1.3 本地方法栈</h3><p>与虚拟机栈类似，为执行的Native方法服务。</p>\n<p>会抛出OutOfMemoryError异常和StackOverflowError异常。</p>\n<h3 id=\"1-4-Java堆\"><a href=\"#1-4-Java堆\" class=\"headerlink\" title=\"1.4 Java堆\"></a>1.4 Java堆</h3><p>Java虚拟机的内存最大的。被所有线程共享。唯一目的是存放对象实例。</p>\n<p>Java堆是垃圾收集器管理的主要区域。细分为：新生代、老年代。</p>\n<p>如果在堆中没有内存完成实例分配，而且堆无法扩展，会OutOfMemoryError异常。</p>\n<h3 id=\"1-5-方法区\"><a href=\"#1-5-方法区\" class=\"headerlink\" title=\"1.5 方法区\"></a>1.5 方法区</h3><p>线程共享。存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等。可以不实现垃圾收集。</p>\n<p>当方法区无法满足内存分配需求，OutOfMemoryError异常。</p>\n<h3 id=\"1-6-运行时常量池\"><a href=\"#1-6-运行时常量池\" class=\"headerlink\" title=\"1.6 运行时常量池\"></a>1.6 运行时常量池</h3><p>是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种字面量和符号引用，这些内容在类加载时进入该区域。</p>\n<p>无法满足内存分配需求，OutOfMemoryError异常。</p>\n<h3 id=\"1-7-直接内存\"><a href=\"#1-7-直接内存\" class=\"headerlink\" title=\"1.7 直接内存\"></a>1.7 直接内存</h3><p>直接内存不是运行时数据区的一部分，但可能导致OutOfMemoryError。</p>\n<h2 id=\"2-JVM中的对象\"><a href=\"#2-JVM中的对象\" class=\"headerlink\" title=\"2. JVM中的对象\"></a>2. JVM中的对象</h2><p>指的是普通对象，不是数据和Class对象。</p>\n<h3 id=\"2-1-对象的创建\"><a href=\"#2-1-对象的创建\" class=\"headerlink\" title=\"2.1 对象的创建\"></a>2.1 对象的创建</h3><p>JVM遇到一个new时，先检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查该符号引用代表的类是否被加载、解析和初始化过。如果没有，必须先执行响应的类加载。</p>\n<p>类加载后，为新生对象分配内存，分配任务相当于把一块确定大小的内存从Java堆中划分出来。</p>\n<p>内存分配完成后，JVM将分配到的内存初始化为零值。</p>\n<p>然后，JVM对对象进行必要的设置，如属于哪个类的实例、对象的哈希码、GC分代年龄等信息，存放到对象的对象头。</p>\n<p>此时，JVM中的新对象已产生，接着可以执行init方法。我们根据需要进行初始化，生产我们想用的对象。</p>\n<h4 id=\"2-1-1-分配策略\"><a href=\"#2-1-1-分配策略\" class=\"headerlink\" title=\"2.1.1 分配策略\"></a>2.1.1 分配策略</h4><p>由Java堆是否规整决定，是否规整由GC是否带有压缩功能决定。</p>\n<ul>\n<li>指针碰撞：规整。由一个指针作为使用和空闲内存的分割指示器。</li>\n<li>空闲列表：不规整。维护一个列表记录是否可用。</li>\n</ul>\n<h4 id=\"2-1-2-线程安全解决方案\"><a href=\"#2-1-2-线程安全解决方案\" class=\"headerlink\" title=\"2.1.2 线程安全解决方案\"></a>2.1.2 线程安全解决方案</h4><ul>\n<li>对分配内存空间的动作做同步处理</li>\n<li>使用本地线程分配缓冲</li>\n</ul>\n<h3 id=\"2-2-对象的内存布局\"><a href=\"#2-2-对象的内存布局\" class=\"headerlink\" title=\"2.2 对象的内存布局\"></a>2.2 对象的内存布局</h3><p>分为：对象头、实例数据和对齐填充。</p>\n<h4 id=\"2-2-1-对象头\"><a href=\"#2-2-1-对象头\" class=\"headerlink\" title=\"2.2.1 对象头\"></a>2.2.1 对象头</h4><p>分为两部分。</p>\n<p>第一部分用于<strong>存储对象自身的运行时数据</strong>，如HashCode、GC分代年龄、锁状态标志、线程特有的锁、偏向线程ID、偏向时间戳等。</p>\n<p>另一部分是<strong>类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过该指针来确定这个对象是哪个类的实例。</p>\n<h4 id=\"2-2-2-实例数据\"><a href=\"#2-2-2-实例数据\" class=\"headerlink\" title=\"2.2.2 实例数据\"></a>2.2.2 实例数据</h4><p>对象真正存储的有效信息，也是在程序中定义的各种类型的字段内容。</p>\n<h4 id=\"2-2-3-对齐填充\"><a href=\"#2-2-3-对齐填充\" class=\"headerlink\" title=\"2.2.3 对齐填充\"></a>2.2.3 对齐填充</h4><p>不必然存在，没特别意义，只是占位符的作用。</p>\n<h3 id=\"2-3-对象的访问定位\"><a href=\"#2-3-对象的访问定位\" class=\"headerlink\" title=\"2.3 对象的访问定位\"></a>2.3 对象的访问定位</h3><p>程序通过栈上的reference数据来操作栈上的具体对象。访问方式有两种：</p>\n<ul>\n<li><p>句柄：堆中划分出一块内存作为句柄池，reference存储的是对象句柄的地址，句柄中存的是实例数据和类型数据各自的具体地址。</p>\n</li>\n<li><p>直接指针：堆要存放基础数据相关信息。reference存储的是对象地址。</p>\n</li>\n</ul>\n","length":1704,"excerpt":"","more":"<h1 id=\"JVM内存区域和对象\"><a href=\"#JVM内存区域和对象\" class=\"headerlink\" title=\"JVM内存区域和对象\"></a>JVM内存区域和对象</h1><h2 id=\"1-Java内存区域\"><a href=\"#1-Java内存区域\" class=\"headerlink\" title=\"1. Java内存区域\"></a>1. Java内存区域</h2><p><img src=\"/%5Cimage%5Cinterview_prep%5Cjvm.jpg\" alt=\"jvm.jpg\"></p>\n<h3 id=\"1-1-程序计数器\"><a href=\"#1-1-程序计数器\" class=\"headerlink\" title=\"1.1 程序计数器\"></a>1.1 程序计数器</h3><p>程序计数器（Program Counter Register）是一块较小的内存空间，可以看做是当前线程所执行的字节码的行号指示器。</p>\n<p>如果是执行java方法，计数器记录的是正在执行的虚拟机字节码指令的地址；如果native方法，计数器值为空。</p>\n<p>不会发生任何OutOfMemoryError。</p>\n<h3 id=\"1-2-Java虚拟机栈\"><a href=\"#1-2-Java虚拟机栈\" class=\"headerlink\" title=\"1.2 Java虚拟机栈\"></a>1.2 Java虚拟机栈</h3><p>线程私有。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p>\n<p>局部变量表存放了编译器可知的各种基础数据类型（boolean、byte、char、short、int、long、float、double）、对象引用（reference类型，不是对象本身，是一个指向对象起始地址的引用指针，或者是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。</p>\n<p>如果扩展时无法申请到足够的内存，会抛出OutOfMemoryError异常。</p>\n<h3 id=\"1-3-本地方法栈\"><a href=\"#1-3-本地方法栈\" class=\"headerlink\" title=\"1.3 本地方法栈\"></a>1.3 本地方法栈</h3><p>与虚拟机栈类似，为执行的Native方法服务。</p>\n<p>会抛出OutOfMemoryError异常和StackOverflowError异常。</p>\n<h3 id=\"1-4-Java堆\"><a href=\"#1-4-Java堆\" class=\"headerlink\" title=\"1.4 Java堆\"></a>1.4 Java堆</h3><p>Java虚拟机的内存最大的。被所有线程共享。唯一目的是存放对象实例。</p>\n<p>Java堆是垃圾收集器管理的主要区域。细分为：新生代、老年代。</p>\n<p>如果在堆中没有内存完成实例分配，而且堆无法扩展，会OutOfMemoryError异常。</p>\n<h3 id=\"1-5-方法区\"><a href=\"#1-5-方法区\" class=\"headerlink\" title=\"1.5 方法区\"></a>1.5 方法区</h3><p>线程共享。存储虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等。可以不实现垃圾收集。</p>\n<p>当方法区无法满足内存分配需求，OutOfMemoryError异常。</p>\n<h3 id=\"1-6-运行时常量池\"><a href=\"#1-6-运行时常量池\" class=\"headerlink\" title=\"1.6 运行时常量池\"></a>1.6 运行时常量池</h3><p>是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种字面量和符号引用，这些内容在类加载时进入该区域。</p>\n<p>无法满足内存分配需求，OutOfMemoryError异常。</p>\n<h3 id=\"1-7-直接内存\"><a href=\"#1-7-直接内存\" class=\"headerlink\" title=\"1.7 直接内存\"></a>1.7 直接内存</h3><p>直接内存不是运行时数据区的一部分，但可能导致OutOfMemoryError。</p>\n<h2 id=\"2-JVM中的对象\"><a href=\"#2-JVM中的对象\" class=\"headerlink\" title=\"2. JVM中的对象\"></a>2. JVM中的对象</h2><p>指的是普通对象，不是数据和Class对象。</p>\n<h3 id=\"2-1-对象的创建\"><a href=\"#2-1-对象的创建\" class=\"headerlink\" title=\"2.1 对象的创建\"></a>2.1 对象的创建</h3><p>JVM遇到一个new时，先检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查该符号引用代表的类是否被加载、解析和初始化过。如果没有，必须先执行响应的类加载。</p>\n<p>类加载后，为新生对象分配内存，分配任务相当于把一块确定大小的内存从Java堆中划分出来。</p>\n<p>内存分配完成后，JVM将分配到的内存初始化为零值。</p>\n<p>然后，JVM对对象进行必要的设置，如属于哪个类的实例、对象的哈希码、GC分代年龄等信息，存放到对象的对象头。</p>\n<p>此时，JVM中的新对象已产生，接着可以执行init方法。我们根据需要进行初始化，生产我们想用的对象。</p>\n<h4 id=\"2-1-1-分配策略\"><a href=\"#2-1-1-分配策略\" class=\"headerlink\" title=\"2.1.1 分配策略\"></a>2.1.1 分配策略</h4><p>由Java堆是否规整决定，是否规整由GC是否带有压缩功能决定。</p>\n<ul>\n<li>指针碰撞：规整。由一个指针作为使用和空闲内存的分割指示器。</li>\n<li>空闲列表：不规整。维护一个列表记录是否可用。</li>\n</ul>\n<h4 id=\"2-1-2-线程安全解决方案\"><a href=\"#2-1-2-线程安全解决方案\" class=\"headerlink\" title=\"2.1.2 线程安全解决方案\"></a>2.1.2 线程安全解决方案</h4><ul>\n<li>对分配内存空间的动作做同步处理</li>\n<li>使用本地线程分配缓冲</li>\n</ul>\n<h3 id=\"2-2-对象的内存布局\"><a href=\"#2-2-对象的内存布局\" class=\"headerlink\" title=\"2.2 对象的内存布局\"></a>2.2 对象的内存布局</h3><p>分为：对象头、实例数据和对齐填充。</p>\n<h4 id=\"2-2-1-对象头\"><a href=\"#2-2-1-对象头\" class=\"headerlink\" title=\"2.2.1 对象头\"></a>2.2.1 对象头</h4><p>分为两部分。</p>\n<p>第一部分用于<strong>存储对象自身的运行时数据</strong>，如HashCode、GC分代年龄、锁状态标志、线程特有的锁、偏向线程ID、偏向时间戳等。</p>\n<p>另一部分是<strong>类型指针</strong>，即对象指向它的类元数据的指针，虚拟机通过该指针来确定这个对象是哪个类的实例。</p>\n<h4 id=\"2-2-2-实例数据\"><a href=\"#2-2-2-实例数据\" class=\"headerlink\" title=\"2.2.2 实例数据\"></a>2.2.2 实例数据</h4><p>对象真正存储的有效信息，也是在程序中定义的各种类型的字段内容。</p>\n<h4 id=\"2-2-3-对齐填充\"><a href=\"#2-2-3-对齐填充\" class=\"headerlink\" title=\"2.2.3 对齐填充\"></a>2.2.3 对齐填充</h4><p>不必然存在，没特别意义，只是占位符的作用。</p>\n<h3 id=\"2-3-对象的访问定位\"><a href=\"#2-3-对象的访问定位\" class=\"headerlink\" title=\"2.3 对象的访问定位\"></a>2.3 对象的访问定位</h3><p>程序通过栈上的reference数据来操作栈上的具体对象。访问方式有两种：</p>\n<ul>\n<li><p>句柄：堆中划分出一块内存作为句柄池，reference存储的是对象句柄的地址，句柄中存的是实例数据和类型数据各自的具体地址。</p>\n</li>\n<li><p>直接指针：堆要存放基础数据相关信息。reference存储的是对象地址。</p>\n</li>\n</ul>\n"},{"title":"Java常见基础知识汇总","date":"2019-06-25T12:07:29.000Z","photos":["https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true"],"description":"Java面试和笔试中遇到的一些基础知识，总是忘，记录一下用以复习。","_content":"\n# Java常见基础知识汇总\n\n## 1. sleep()与wait()区别\n\n1. **锁**：sleep()方法正在执行的线程主动让出CPU（然后CPU就可以去执行其他任务），在sleep指定时间后CPU再回到该线程继续往下执行(<font color='red'>注意：sleep方法只让出了CPU，而并不会释放同步资源锁！！！</font>)；wait()方法则是指当前线程让自己暂时退让出同步资源锁，以便其他正在等待该资源的线程得到该资源进而运行，只有调用了notify()方法，之前调用wait()的线程才会解除wait状态，可以去参与竞争同步资源锁，进而得到执行。\n2. **使用的位置**：sleep()方法可以在任何地方使用；wait()方法则只能在同步方法或同步块中使用；\n3. **属于的类**：sleep()是线程类（Thread）的方法，调用会暂停此线程指定的时间，但监控依然保持，不会释放对象锁，到时间自动恢复；wait()是Object的方法，调用会放弃对象锁，进入等待队列，待调用**notify()/notifyAll()**唤醒指定的线程或者所有线程，才会进入锁池，不再次获得对象锁才会进入运行状态；\n\n## 2. HashSet和TreeSet的区别\n\n1. **实现方式**：HashSet是采用hash表来实现的；TreeSet是采用树结构实现(红黑树算法)。\n2. **排列顺序**：HashSet无序；TreeSet支持两种排序方式，自然排序和定制排序（实现comparable接口）。\n3. **复杂度**：HashSet方法都是复杂度为O(1)；TreeSet方法都是复杂度为O(log (n))的方法。\n4. **判断方法**：HashSet判断通过equals方法比较相等，并且两个对象的hashCode()方法返回值相等（需要重写hashCode（）和equals()方法）；TreeSet通过equals方法返回，或者通过CompareTo方法比较；\n5. **实现接口**：HashSet实现Set接口；TreeSet实现SortedSet接口，SortedSet实现Set接口。\n\n备注：**LinkedHashSet**介于HashSet和TreeSet之间。它也是一个hash表，但是同时维护了一个双链表来记录插入的顺序。基本方法的复杂度为O(1)。\n\n## 3. int和Integer的区别\n\n### 1. 区别概述\n\n1. **数据类型**：Integer是int的包装类，int则是java的一种基本数据类型；\n2. **使用方法**：Integer变量必须实例化后才能使用，而int变量不需要；\n3. **默认值**：Integer 是类，默认值为null，int是基本数据类型，默认值为0；\n4. **实质**：Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值。\n\n### 2. 自动装箱和自动拆箱、缓存\n\n自动拆箱和自动装箱是 JDK1.5 以后才有的功能，也就是java当中众多的语法糖之一，它的执行是在编译期，会根据代码的语法，在生成class文件的时候，决定是否进行拆箱和装箱动作。\n\n#### 1. 自动装箱\n\n对于\n\n```java\nInteger a = 128;\n```\n\n\n\n生成class文件时，\n\n```java\nInteger a = Integer.valueOf(128);\n```\n\n#### 2. 自动拆箱\n\n将 Integer 类表示的数据赋值给基本数据类型int，就执行了自动拆箱。\n\n```java\n  Integer a = new Integer(128);\n  int m = a;\n```\n\nclass文件：\n\n```java\nInteger a = new Integer(128);\nint m = a.intValue();\n```\n\n简单来讲：自动装箱就是`Integer.valueOf(int i)`；自动拆箱就是 `i.intValue()`；\n\n#### 3. 缓存\n\n 当`Integer b1 = 12`时，是在常量池中开辟出同一个空间来存储12，在常量池中就必须对其的大小范围做出一个规定，规定其范围为：（-128~127）之间。如果超出了范围，会从堆区new一个Integer对象来存放值。\n\n### 3. `==`的比较\n\n#### 1. Integer与Integer \n\n由于Integer变量实际上是对一个Integer对象的引用，是对象的地址，所以两个通过new生成的Integer变量永远是不相等的。\n\n```java\nInteger i = new Integer(100);\nInteger j = new Integer(100);\nSystem.out.print(i == j); //false\n```\n\n#### 2. Integer与int\n\nInteger与int比较时，会触发自动拆箱，实际为两个int的比较，因此，结果为true。\n\n```java\nInteger i = new Integer(100);\nint j = 100;\nSystem.out.print(i == j); //true\n```\n\n#### 3. 非new生成的Integer变量和new Integer()生成的变量\n\n因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同，结果为false。\n\n```java\nInteger i = new Integer(100);\nInteger j = 100;\nSystem.out.print(i == j); //false\n```\n\n#### 4. 对于两个非new生成的Integer对象\n\n如果在缓存范围之内，是指向同一个常量池中的地址，所以是true；如果在缓存范围之外，会new一个对象，内存地址不同，所以为false。\n\n```java\nInteger i = 100;\nInteger j = 100;\nSystem.out.print(i == j); //true\n```\n\n```java\nInteger i = 128;\nInteger j = 128;\nSystem.out.print(i == j); //false\n```\n\n#### 5. 算术运算\n\n由于 a+b包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法）,==比较符又将左边的自动拆箱，因此它们比较的是数值是否相等。\n\nequals()会先触发自动装箱，**equals 运算符不会进行类型转换**，Long.equals(Integer)，结果将是false。\n\n```java\nInteger a = 1;\nInteger b = 2;\nInteger c = 3;\nSystem.out.println(c == (a + b)); //true\nSystem.out.println(c.equals((a+b))); //true\n```\n\n\n\n## 4. 常量池中的String\n\nJava中的常量池，实际上分为两种形态：**静态常量池**和**运行时常量池**。\n\n### 1. 静态常量池\n\n即*.class文件中的常量池，class文件中的常量池不仅仅包含字符串(数字)字面量，还包含类、方法的信息，占用class文件绝大部分空间。这种常量池主要用于存放两大类常量：**字面量**(Literal)和**符号引用量**(Symbolic References)，字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念，包括了如下三种类型的常量：\n\n- 类和接口的全限定名\n- 字段名称和描述符\n- 方法名称和描述符\n\n### 2.  运行时常量池\n\n是jvm虚拟机在完成类装载操作后，将class文件中的常量池载入到内存中，并保存在**方法区**中，我们常说的常量池，就是指方法区中的运行时常量池。\n\n### 3. String类的intern() \n\nString的intern()方法会查找在常量池中是否存在一份equal相等的字符串,如果有则返回该字符串的引用,如果没有则添加自己的字符串进入常量池。\n\n### 4. 实例比较\n\n```java\nString s1 = \"Hello\";\nString s2 = \"Hello\";\nString s3 = \"Hel\" + \"lo\";\nString s4 = \"Hel\" + new String(\"lo\");\nString s5 = new String(\"Hello\");\nString s6 = s5.intern();\nString s7 = \"H\";\nString s8 = \"ello\";\nString s9 = s7 + s8;\n          \nSystem.out.println(s1 == s2);  // true\nSystem.out.println(s1 == s3);  // true\nSystem.out.println(s1 == s4);  // false\nSystem.out.println(s1 == s9);  // false\nSystem.out.println(s4 == s5);  // false\nSystem.out.println(s1 == s6);  // true\n```\n\n 首先说明一点，在java 中，直接使用==操作符，比较的是两个字符串的引用地址，并不是比较内容，比较内容请用String.equals()。\n\n s1 == s2这个非常好理解，s1、s2在赋值时，均使用的字符串字面量，说白话点，就是直接把字符串写死，在编译期间，这种字面量会直接放入class文件的常量池中，从而实现复用，载入运行时常量池后，s1、s2指向的是同一个内存地址，所以相等。\n\ns1 == s3这个地方有个坑，s3虽然是动态拼接出来的字符串，但是所有参与拼接的部分都是已知的字面量，在编译期间，这种拼接会被优化，编译器直接帮你拼好，因此String s3 = \"Hel\" + \"lo\";在class文件中被优化成String s3 = \"Hello\"，所以s1 == s3成立。只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。\n\ns1 == s4当然不相等，s4虽然也是拼接出来的，但new String(\"lo\")这部分不是已知字面量，是一个不可预料的部分，编译器不会优化，必须等到运行时才可以确定结果，结合**字符串不变**定理，鬼知道s4被分配到哪去了，所以地址肯定不同。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。\n\ns1 == s9也不相等，道理差不多，虽然s7、s8在赋值的时候使用的字符串字面量，但是拼接成s9的时候，s7、s8作为两个变量，都是不可预料的，编译器毕竟是编译器，不可能当解释器用，不能在编译期被确定，所以不做优化，只能等到运行时，在堆中创建s7、s8拼接成的新字符串，在堆中地址不确定，不可能与方法区常量池中的s1地址相同。\n\n![常量池中的String](/image/java/常量池中的String.png)\n\ns4 == s5已经不用解释了，绝对不相等，二者都在堆中，但地址不同。\n\ns1 == s6这两个相等完全归功于intern方法，s5在堆中，内容为Hello ，intern方法会尝试将Hello字符串添加到常量池中，并返回其在常量池中的地址，因为常量池中已经有了Hello字符串，所以intern方法直接返回地址；而s1在编译期就已经指向常量池了，因此s1和s6指向同一地址，相等。\n\n```java\npublic static final String A = \"ab\"; // 常量A\npublic static final String B = \"cd\"; // 常量B\npublic static void main(String[] args) {\n     String s = A + B;  // 将两个常量用+连接对s进行初始化 \n     String t = \"abcd\";   \n    if (s == t) {   \n         System.out.println(\"s等于t，它们是同一个对象\");   \n     } else {   \n         System.out.println(\"s不等于t，它们不是同一个对象\");   \n     }   \n } \n// s等于t，它们是同一个对象\n// A和B都是常量，值是固定的，因此s的值也是固定的，它在类被编译时就已经确定了。也就是说：String s=A+B; 等同于：String s=\"ab\"+\"cd\";\n```\n\n```java\npublic static final String A; // 常量A\npublic static final String B;    // 常量B\nstatic {   \n     A = \"ab\";   \n     B = \"cd\";   \n }   \n public static void main(String[] args) {   \n    // 将两个常量用+连接对s进行初始化   \n     String s = A + B;   \n     String t = \"abcd\";   \n    if (s == t) {   \n         System.out.println(\"s等于t，它们是同一个对象\");   \n     } else {   \n         System.out.println(\"s不等于t，它们不是同一个对象\");   \n     }   \n } \n// s不等于t，它们不是同一个对象\n// A和B虽然被定义为常量，但是它们都没有马上被赋值。在运算出s的值之前，他们何时被赋值，以及被赋予什么样的值，都是个变数。因此A和B在被赋值之前，性质类似于一个变量。那么s就不能在编译期被确定，而只能在运行时被创建了。\n```\n\n### 5. 总结\n\n- 必须要关注编译期的行为，才能更好的理解常量池。\n\n- 运行时常量池中的常量，基本来源于各个class文件中的常量池。\n\n- 程序运行时，除非手动向常量池中添加常量(比如调用intern方法)，否则jvm不会自动添加常量到常量池。\n\n### 6. String、StringBuffer 、StringBuilder\n\n- **可变性**：String 不可变；StringBuffer 和 StringBuilder 可变\n- **线程安全**：String 不可变，因此是线程安全的；StringBuilder 不是线程安全的；StringBuffer 是线程安全的，内部使用 synchronized 进行同步。\n\n\n## 5.static加载顺序、执行时机\n\n### 1. static代码块执行时机\n\n一个类的运行分为以下步骤：\n\n1. **装载**\n2. **连接**\n3. **初始化**\n\n装载阶段又三个基本动作组成：\n\n1. 通过类型的完全限定名，产生一个代表该类型的二进制数据流\n2. 解析这个二进制数据流为方法区内的内部数据结\n3. 构创建一个表示该类型的java.lang.Class类的实例\n\n连接阶段又分为三部分：\n\n1. 验证，确认类型符合Java语言的语义，检查各个类之间的二进制兼容性(比如final的类不用拥有子类等)，另外还需要进行符号引用的验证。\n2. 准备，Java虚拟机为类变量分配内存，设置默认初始值。\n3. 解析(可选的) ，在类型的常量池中寻找类，接口，字段和方法的符号引用，把这些符号引用替换成直接引用的过程。\n\n当一个类被主动使用时，Java虚拟就会对其初始化，如下六种情况为主动使用：\n\n1. 当创建某个类的新实例时（如通过new或者反射，克隆，反序列化等）\n2. 当调用某个类的静态方法时\n3. 当使用某个类或接口的静态字段时\n4. 当调用Java API中的某些反射方法时，比如类Class中的方法，或者java.lang.reflect中的类的方法时\n5. 当初始化某个子类时\n6. 当虚拟机启动某个被标明为启动类的类（即包含main方法的那个类）\n\nJava编译器会收集所有的类变量初始化语句和类型的静态初始化器，将这些放到一个特殊的方法中：clinit。 \n\n### 2. 带有static的代码执行顺序\n\n#### 1. 如果类还没有被加载\n\n1. 先执行父类的静态代码块和静态变量初始化，并且静态代码块和静态变量的执行顺序只跟代码中出现的顺序有关。 \n2. 执行子类的静态代码块和静态变量初始化。 \n3. 执行父类的实例变量初始化 \n4. 执行父类的构造函数 \n5. 执行子类的实例变量初始化 \n6. 执行子类的构造函数 \n\n#### 2. 如果类已经被加载\n\n则静态代码块和静态变量就不用重复执行，再创建类对象时，只执行与实例相关的变量初始化和构造方法。\n\n#### 3. 实例\n\n```java\npublic class Test extends Base{\n \n    static{\n        System.out.println(\"test static\");\n    }\n     \n    public Test(){\n        System.out.println(\"test constructor\");\n    }\n     \n    public static void main(String[] args) {\n        new Test();\n    }\n}\n \nclass Base{\n     \n    static{\n        System.out.println(\"base static\");\n    }\n     \n    public Base(){\n        System.out.println(\"base constructor\");\n    }\n}\n// base static\n// test static\n// base constructor\n// test constructor\n```\n\n```java\nclass Person{\n    static{\n        System.out.println(\"person static\");\n    }\n    public Person(String str) {\n        System.out.println(\"person \"+str);\n    }\n}\nclass MyClass extends main {\n    Person person = new Person(\"MyClass\");\n    static{\n        System.out.println(\"myclass static\");\n    }\n\n    public MyClass() {\n        System.out.println(\"myclass constructor\");\n    }\n}\npublic class main  {\n    Person person = new Person(\"main\");\n    static{\n        System.out.println(\"main static\");\n    }\n    public main(){\n        System.out.println(\"main constructor\");\n    }\n    public static void main(String[] args) {\n        new MyClass();\n    }\n}\n// main static\n// myclass static\n// person static\n// person main\n// main constructor\n// person MyClass\n// myclass constructor\n```\n\n\n\n\n## 6. 基本数据类型和引用类型在JVM中存储在哪\n\n### 1. 在方法中声明的变量\n\n即该变量是局部变量，每当程序调用方法时，系统都会为该方法建立一个方法栈，其所在方法中声明的变量就放在方法栈中，当方法结束系统会释放方法栈，其对应在该方法中声明的变量随着栈的销毁而结束，这就局部变量只能在方法中有效的原因。\n\n在方法中声明的变量可以是基本类型的变量，也可以是引用类型的变量。\n\n- 当声明是基本类型的变量的时，其变量名及值（变量名及值是两个概念）是放在JAVA虚拟机栈中；\n- 当声明的是引用变量时，所声明的变量（该变量实际上是在方法中存储的是内存地址值）是放在JAVA虚拟机的栈中，该变量所指向的对象是放在堆类存中的。\n\n### 2. 在类中声明的变量\n\n成员变量，也叫全局变量，放在堆中的（因为全局变量不会随着某个方法执行结束而销毁）。\n\n同样在类中声明的变量即可是基本类型的变量，也可是引用类型的变量。\n\n- 当声明的是基本类型的变量其变量名及其值放在堆内存中的；\n- 引用类型时，其声明的变量仍然会存储一个内存地址值，该内存地址值指向所引用的对象。引用变量名和对应的对象仍然存储在相应的堆中。\n\n## 7. Java 与 C++ 的区别\n\n- Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。\n- Java 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。\n- Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。\n- Java 支持自动垃圾回收，而 C++ 需要手动回收。\n- Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。\n- Java 不支持操作符重载，虽然可以对两个 String 对象执行加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。\n- Java 的 goto 是保留字，但是不可用，C++ 可以使用 goto。\n- Java 不支持条件编译，C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译。\n\n## 8. 线程池\n\nhttps://www.nowcoder.com/discuss/152050?type=0&order=0&pos=6&page=0","source":"_posts/Java常见基础知识汇总.md","raw":"---\ntitle: Java常见基础知识汇总\ndate: 2019-06-25 20:07:29\ntags: [面试,Java]\ncategories: [面试,Java]\nphotos:\n  - \"https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true\"\ndescription: Java面试和笔试中遇到的一些基础知识，总是忘，记录一下用以复习。\n---\n\n# Java常见基础知识汇总\n\n## 1. sleep()与wait()区别\n\n1. **锁**：sleep()方法正在执行的线程主动让出CPU（然后CPU就可以去执行其他任务），在sleep指定时间后CPU再回到该线程继续往下执行(<font color='red'>注意：sleep方法只让出了CPU，而并不会释放同步资源锁！！！</font>)；wait()方法则是指当前线程让自己暂时退让出同步资源锁，以便其他正在等待该资源的线程得到该资源进而运行，只有调用了notify()方法，之前调用wait()的线程才会解除wait状态，可以去参与竞争同步资源锁，进而得到执行。\n2. **使用的位置**：sleep()方法可以在任何地方使用；wait()方法则只能在同步方法或同步块中使用；\n3. **属于的类**：sleep()是线程类（Thread）的方法，调用会暂停此线程指定的时间，但监控依然保持，不会释放对象锁，到时间自动恢复；wait()是Object的方法，调用会放弃对象锁，进入等待队列，待调用**notify()/notifyAll()**唤醒指定的线程或者所有线程，才会进入锁池，不再次获得对象锁才会进入运行状态；\n\n## 2. HashSet和TreeSet的区别\n\n1. **实现方式**：HashSet是采用hash表来实现的；TreeSet是采用树结构实现(红黑树算法)。\n2. **排列顺序**：HashSet无序；TreeSet支持两种排序方式，自然排序和定制排序（实现comparable接口）。\n3. **复杂度**：HashSet方法都是复杂度为O(1)；TreeSet方法都是复杂度为O(log (n))的方法。\n4. **判断方法**：HashSet判断通过equals方法比较相等，并且两个对象的hashCode()方法返回值相等（需要重写hashCode（）和equals()方法）；TreeSet通过equals方法返回，或者通过CompareTo方法比较；\n5. **实现接口**：HashSet实现Set接口；TreeSet实现SortedSet接口，SortedSet实现Set接口。\n\n备注：**LinkedHashSet**介于HashSet和TreeSet之间。它也是一个hash表，但是同时维护了一个双链表来记录插入的顺序。基本方法的复杂度为O(1)。\n\n## 3. int和Integer的区别\n\n### 1. 区别概述\n\n1. **数据类型**：Integer是int的包装类，int则是java的一种基本数据类型；\n2. **使用方法**：Integer变量必须实例化后才能使用，而int变量不需要；\n3. **默认值**：Integer 是类，默认值为null，int是基本数据类型，默认值为0；\n4. **实质**：Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值。\n\n### 2. 自动装箱和自动拆箱、缓存\n\n自动拆箱和自动装箱是 JDK1.5 以后才有的功能，也就是java当中众多的语法糖之一，它的执行是在编译期，会根据代码的语法，在生成class文件的时候，决定是否进行拆箱和装箱动作。\n\n#### 1. 自动装箱\n\n对于\n\n```java\nInteger a = 128;\n```\n\n\n\n生成class文件时，\n\n```java\nInteger a = Integer.valueOf(128);\n```\n\n#### 2. 自动拆箱\n\n将 Integer 类表示的数据赋值给基本数据类型int，就执行了自动拆箱。\n\n```java\n  Integer a = new Integer(128);\n  int m = a;\n```\n\nclass文件：\n\n```java\nInteger a = new Integer(128);\nint m = a.intValue();\n```\n\n简单来讲：自动装箱就是`Integer.valueOf(int i)`；自动拆箱就是 `i.intValue()`；\n\n#### 3. 缓存\n\n 当`Integer b1 = 12`时，是在常量池中开辟出同一个空间来存储12，在常量池中就必须对其的大小范围做出一个规定，规定其范围为：（-128~127）之间。如果超出了范围，会从堆区new一个Integer对象来存放值。\n\n### 3. `==`的比较\n\n#### 1. Integer与Integer \n\n由于Integer变量实际上是对一个Integer对象的引用，是对象的地址，所以两个通过new生成的Integer变量永远是不相等的。\n\n```java\nInteger i = new Integer(100);\nInteger j = new Integer(100);\nSystem.out.print(i == j); //false\n```\n\n#### 2. Integer与int\n\nInteger与int比较时，会触发自动拆箱，实际为两个int的比较，因此，结果为true。\n\n```java\nInteger i = new Integer(100);\nint j = 100;\nSystem.out.print(i == j); //true\n```\n\n#### 3. 非new生成的Integer变量和new Integer()生成的变量\n\n因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同，结果为false。\n\n```java\nInteger i = new Integer(100);\nInteger j = 100;\nSystem.out.print(i == j); //false\n```\n\n#### 4. 对于两个非new生成的Integer对象\n\n如果在缓存范围之内，是指向同一个常量池中的地址，所以是true；如果在缓存范围之外，会new一个对象，内存地址不同，所以为false。\n\n```java\nInteger i = 100;\nInteger j = 100;\nSystem.out.print(i == j); //true\n```\n\n```java\nInteger i = 128;\nInteger j = 128;\nSystem.out.print(i == j); //false\n```\n\n#### 5. 算术运算\n\n由于 a+b包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法）,==比较符又将左边的自动拆箱，因此它们比较的是数值是否相等。\n\nequals()会先触发自动装箱，**equals 运算符不会进行类型转换**，Long.equals(Integer)，结果将是false。\n\n```java\nInteger a = 1;\nInteger b = 2;\nInteger c = 3;\nSystem.out.println(c == (a + b)); //true\nSystem.out.println(c.equals((a+b))); //true\n```\n\n\n\n## 4. 常量池中的String\n\nJava中的常量池，实际上分为两种形态：**静态常量池**和**运行时常量池**。\n\n### 1. 静态常量池\n\n即*.class文件中的常量池，class文件中的常量池不仅仅包含字符串(数字)字面量，还包含类、方法的信息，占用class文件绝大部分空间。这种常量池主要用于存放两大类常量：**字面量**(Literal)和**符号引用量**(Symbolic References)，字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念，包括了如下三种类型的常量：\n\n- 类和接口的全限定名\n- 字段名称和描述符\n- 方法名称和描述符\n\n### 2.  运行时常量池\n\n是jvm虚拟机在完成类装载操作后，将class文件中的常量池载入到内存中，并保存在**方法区**中，我们常说的常量池，就是指方法区中的运行时常量池。\n\n### 3. String类的intern() \n\nString的intern()方法会查找在常量池中是否存在一份equal相等的字符串,如果有则返回该字符串的引用,如果没有则添加自己的字符串进入常量池。\n\n### 4. 实例比较\n\n```java\nString s1 = \"Hello\";\nString s2 = \"Hello\";\nString s3 = \"Hel\" + \"lo\";\nString s4 = \"Hel\" + new String(\"lo\");\nString s5 = new String(\"Hello\");\nString s6 = s5.intern();\nString s7 = \"H\";\nString s8 = \"ello\";\nString s9 = s7 + s8;\n          \nSystem.out.println(s1 == s2);  // true\nSystem.out.println(s1 == s3);  // true\nSystem.out.println(s1 == s4);  // false\nSystem.out.println(s1 == s9);  // false\nSystem.out.println(s4 == s5);  // false\nSystem.out.println(s1 == s6);  // true\n```\n\n 首先说明一点，在java 中，直接使用==操作符，比较的是两个字符串的引用地址，并不是比较内容，比较内容请用String.equals()。\n\n s1 == s2这个非常好理解，s1、s2在赋值时，均使用的字符串字面量，说白话点，就是直接把字符串写死，在编译期间，这种字面量会直接放入class文件的常量池中，从而实现复用，载入运行时常量池后，s1、s2指向的是同一个内存地址，所以相等。\n\ns1 == s3这个地方有个坑，s3虽然是动态拼接出来的字符串，但是所有参与拼接的部分都是已知的字面量，在编译期间，这种拼接会被优化，编译器直接帮你拼好，因此String s3 = \"Hel\" + \"lo\";在class文件中被优化成String s3 = \"Hello\"，所以s1 == s3成立。只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。\n\ns1 == s4当然不相等，s4虽然也是拼接出来的，但new String(\"lo\")这部分不是已知字面量，是一个不可预料的部分，编译器不会优化，必须等到运行时才可以确定结果，结合**字符串不变**定理，鬼知道s4被分配到哪去了，所以地址肯定不同。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。\n\ns1 == s9也不相等，道理差不多，虽然s7、s8在赋值的时候使用的字符串字面量，但是拼接成s9的时候，s7、s8作为两个变量，都是不可预料的，编译器毕竟是编译器，不可能当解释器用，不能在编译期被确定，所以不做优化，只能等到运行时，在堆中创建s7、s8拼接成的新字符串，在堆中地址不确定，不可能与方法区常量池中的s1地址相同。\n\n![常量池中的String](/image/java/常量池中的String.png)\n\ns4 == s5已经不用解释了，绝对不相等，二者都在堆中，但地址不同。\n\ns1 == s6这两个相等完全归功于intern方法，s5在堆中，内容为Hello ，intern方法会尝试将Hello字符串添加到常量池中，并返回其在常量池中的地址，因为常量池中已经有了Hello字符串，所以intern方法直接返回地址；而s1在编译期就已经指向常量池了，因此s1和s6指向同一地址，相等。\n\n```java\npublic static final String A = \"ab\"; // 常量A\npublic static final String B = \"cd\"; // 常量B\npublic static void main(String[] args) {\n     String s = A + B;  // 将两个常量用+连接对s进行初始化 \n     String t = \"abcd\";   \n    if (s == t) {   \n         System.out.println(\"s等于t，它们是同一个对象\");   \n     } else {   \n         System.out.println(\"s不等于t，它们不是同一个对象\");   \n     }   \n } \n// s等于t，它们是同一个对象\n// A和B都是常量，值是固定的，因此s的值也是固定的，它在类被编译时就已经确定了。也就是说：String s=A+B; 等同于：String s=\"ab\"+\"cd\";\n```\n\n```java\npublic static final String A; // 常量A\npublic static final String B;    // 常量B\nstatic {   \n     A = \"ab\";   \n     B = \"cd\";   \n }   \n public static void main(String[] args) {   \n    // 将两个常量用+连接对s进行初始化   \n     String s = A + B;   \n     String t = \"abcd\";   \n    if (s == t) {   \n         System.out.println(\"s等于t，它们是同一个对象\");   \n     } else {   \n         System.out.println(\"s不等于t，它们不是同一个对象\");   \n     }   \n } \n// s不等于t，它们不是同一个对象\n// A和B虽然被定义为常量，但是它们都没有马上被赋值。在运算出s的值之前，他们何时被赋值，以及被赋予什么样的值，都是个变数。因此A和B在被赋值之前，性质类似于一个变量。那么s就不能在编译期被确定，而只能在运行时被创建了。\n```\n\n### 5. 总结\n\n- 必须要关注编译期的行为，才能更好的理解常量池。\n\n- 运行时常量池中的常量，基本来源于各个class文件中的常量池。\n\n- 程序运行时，除非手动向常量池中添加常量(比如调用intern方法)，否则jvm不会自动添加常量到常量池。\n\n### 6. String、StringBuffer 、StringBuilder\n\n- **可变性**：String 不可变；StringBuffer 和 StringBuilder 可变\n- **线程安全**：String 不可变，因此是线程安全的；StringBuilder 不是线程安全的；StringBuffer 是线程安全的，内部使用 synchronized 进行同步。\n\n\n## 5.static加载顺序、执行时机\n\n### 1. static代码块执行时机\n\n一个类的运行分为以下步骤：\n\n1. **装载**\n2. **连接**\n3. **初始化**\n\n装载阶段又三个基本动作组成：\n\n1. 通过类型的完全限定名，产生一个代表该类型的二进制数据流\n2. 解析这个二进制数据流为方法区内的内部数据结\n3. 构创建一个表示该类型的java.lang.Class类的实例\n\n连接阶段又分为三部分：\n\n1. 验证，确认类型符合Java语言的语义，检查各个类之间的二进制兼容性(比如final的类不用拥有子类等)，另外还需要进行符号引用的验证。\n2. 准备，Java虚拟机为类变量分配内存，设置默认初始值。\n3. 解析(可选的) ，在类型的常量池中寻找类，接口，字段和方法的符号引用，把这些符号引用替换成直接引用的过程。\n\n当一个类被主动使用时，Java虚拟就会对其初始化，如下六种情况为主动使用：\n\n1. 当创建某个类的新实例时（如通过new或者反射，克隆，反序列化等）\n2. 当调用某个类的静态方法时\n3. 当使用某个类或接口的静态字段时\n4. 当调用Java API中的某些反射方法时，比如类Class中的方法，或者java.lang.reflect中的类的方法时\n5. 当初始化某个子类时\n6. 当虚拟机启动某个被标明为启动类的类（即包含main方法的那个类）\n\nJava编译器会收集所有的类变量初始化语句和类型的静态初始化器，将这些放到一个特殊的方法中：clinit。 \n\n### 2. 带有static的代码执行顺序\n\n#### 1. 如果类还没有被加载\n\n1. 先执行父类的静态代码块和静态变量初始化，并且静态代码块和静态变量的执行顺序只跟代码中出现的顺序有关。 \n2. 执行子类的静态代码块和静态变量初始化。 \n3. 执行父类的实例变量初始化 \n4. 执行父类的构造函数 \n5. 执行子类的实例变量初始化 \n6. 执行子类的构造函数 \n\n#### 2. 如果类已经被加载\n\n则静态代码块和静态变量就不用重复执行，再创建类对象时，只执行与实例相关的变量初始化和构造方法。\n\n#### 3. 实例\n\n```java\npublic class Test extends Base{\n \n    static{\n        System.out.println(\"test static\");\n    }\n     \n    public Test(){\n        System.out.println(\"test constructor\");\n    }\n     \n    public static void main(String[] args) {\n        new Test();\n    }\n}\n \nclass Base{\n     \n    static{\n        System.out.println(\"base static\");\n    }\n     \n    public Base(){\n        System.out.println(\"base constructor\");\n    }\n}\n// base static\n// test static\n// base constructor\n// test constructor\n```\n\n```java\nclass Person{\n    static{\n        System.out.println(\"person static\");\n    }\n    public Person(String str) {\n        System.out.println(\"person \"+str);\n    }\n}\nclass MyClass extends main {\n    Person person = new Person(\"MyClass\");\n    static{\n        System.out.println(\"myclass static\");\n    }\n\n    public MyClass() {\n        System.out.println(\"myclass constructor\");\n    }\n}\npublic class main  {\n    Person person = new Person(\"main\");\n    static{\n        System.out.println(\"main static\");\n    }\n    public main(){\n        System.out.println(\"main constructor\");\n    }\n    public static void main(String[] args) {\n        new MyClass();\n    }\n}\n// main static\n// myclass static\n// person static\n// person main\n// main constructor\n// person MyClass\n// myclass constructor\n```\n\n\n\n\n## 6. 基本数据类型和引用类型在JVM中存储在哪\n\n### 1. 在方法中声明的变量\n\n即该变量是局部变量，每当程序调用方法时，系统都会为该方法建立一个方法栈，其所在方法中声明的变量就放在方法栈中，当方法结束系统会释放方法栈，其对应在该方法中声明的变量随着栈的销毁而结束，这就局部变量只能在方法中有效的原因。\n\n在方法中声明的变量可以是基本类型的变量，也可以是引用类型的变量。\n\n- 当声明是基本类型的变量的时，其变量名及值（变量名及值是两个概念）是放在JAVA虚拟机栈中；\n- 当声明的是引用变量时，所声明的变量（该变量实际上是在方法中存储的是内存地址值）是放在JAVA虚拟机的栈中，该变量所指向的对象是放在堆类存中的。\n\n### 2. 在类中声明的变量\n\n成员变量，也叫全局变量，放在堆中的（因为全局变量不会随着某个方法执行结束而销毁）。\n\n同样在类中声明的变量即可是基本类型的变量，也可是引用类型的变量。\n\n- 当声明的是基本类型的变量其变量名及其值放在堆内存中的；\n- 引用类型时，其声明的变量仍然会存储一个内存地址值，该内存地址值指向所引用的对象。引用变量名和对应的对象仍然存储在相应的堆中。\n\n## 7. Java 与 C++ 的区别\n\n- Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。\n- Java 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。\n- Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。\n- Java 支持自动垃圾回收，而 C++ 需要手动回收。\n- Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。\n- Java 不支持操作符重载，虽然可以对两个 String 对象执行加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。\n- Java 的 goto 是保留字，但是不可用，C++ 可以使用 goto。\n- Java 不支持条件编译，C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译。\n\n## 8. 线程池\n\nhttps://www.nowcoder.com/discuss/152050?type=0&order=0&pos=6&page=0","slug":"Java常见基础知识汇总","published":1,"updated":"2025-02-22T18:52:19.818Z","comments":1,"layout":"post","_id":"cm7hqj8aj000dv0018fg90wb9","content":"<h1 id=\"Java常见基础知识汇总\"><a href=\"#Java常见基础知识汇总\" class=\"headerlink\" title=\"Java常见基础知识汇总\"></a>Java常见基础知识汇总</h1><h2 id=\"1-sleep-与wait-区别\"><a href=\"#1-sleep-与wait-区别\" class=\"headerlink\" title=\"1. sleep()与wait()区别\"></a>1. sleep()与wait()区别</h2><ol>\n<li><strong>锁</strong>：sleep()方法正在执行的线程主动让出CPU（然后CPU就可以去执行其他任务），在sleep指定时间后CPU再回到该线程继续往下执行(<font color='red'>注意：sleep方法只让出了CPU，而并不会释放同步资源锁！！！</font>)；wait()方法则是指当前线程让自己暂时退让出同步资源锁，以便其他正在等待该资源的线程得到该资源进而运行，只有调用了notify()方法，之前调用wait()的线程才会解除wait状态，可以去参与竞争同步资源锁，进而得到执行。</li>\n<li><strong>使用的位置</strong>：sleep()方法可以在任何地方使用；wait()方法则只能在同步方法或同步块中使用；</li>\n<li><strong>属于的类</strong>：sleep()是线程类（Thread）的方法，调用会暂停此线程指定的时间，但监控依然保持，不会释放对象锁，到时间自动恢复；wait()是Object的方法，调用会放弃对象锁，进入等待队列，待调用**notify()&#x2F;notifyAll()**唤醒指定的线程或者所有线程，才会进入锁池，不再次获得对象锁才会进入运行状态；</li>\n</ol>\n<h2 id=\"2-HashSet和TreeSet的区别\"><a href=\"#2-HashSet和TreeSet的区别\" class=\"headerlink\" title=\"2. HashSet和TreeSet的区别\"></a>2. HashSet和TreeSet的区别</h2><ol>\n<li><strong>实现方式</strong>：HashSet是采用hash表来实现的；TreeSet是采用树结构实现(红黑树算法)。</li>\n<li><strong>排列顺序</strong>：HashSet无序；TreeSet支持两种排序方式，自然排序和定制排序（实现comparable接口）。</li>\n<li><strong>复杂度</strong>：HashSet方法都是复杂度为O(1)；TreeSet方法都是复杂度为O(log (n))的方法。</li>\n<li><strong>判断方法</strong>：HashSet判断通过equals方法比较相等，并且两个对象的hashCode()方法返回值相等（需要重写hashCode（）和equals()方法）；TreeSet通过equals方法返回，或者通过CompareTo方法比较；</li>\n<li><strong>实现接口</strong>：HashSet实现Set接口；TreeSet实现SortedSet接口，SortedSet实现Set接口。</li>\n</ol>\n<p>备注：<strong>LinkedHashSet</strong>介于HashSet和TreeSet之间。它也是一个hash表，但是同时维护了一个双链表来记录插入的顺序。基本方法的复杂度为O(1)。</p>\n<h2 id=\"3-int和Integer的区别\"><a href=\"#3-int和Integer的区别\" class=\"headerlink\" title=\"3. int和Integer的区别\"></a>3. int和Integer的区别</h2><h3 id=\"1-区别概述\"><a href=\"#1-区别概述\" class=\"headerlink\" title=\"1. 区别概述\"></a>1. 区别概述</h3><ol>\n<li><strong>数据类型</strong>：Integer是int的包装类，int则是java的一种基本数据类型；</li>\n<li><strong>使用方法</strong>：Integer变量必须实例化后才能使用，而int变量不需要；</li>\n<li><strong>默认值</strong>：Integer 是类，默认值为null，int是基本数据类型，默认值为0；</li>\n<li><strong>实质</strong>：Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值。</li>\n</ol>\n<h3 id=\"2-自动装箱和自动拆箱、缓存\"><a href=\"#2-自动装箱和自动拆箱、缓存\" class=\"headerlink\" title=\"2. 自动装箱和自动拆箱、缓存\"></a>2. 自动装箱和自动拆箱、缓存</h3><p>自动拆箱和自动装箱是 JDK1.5 以后才有的功能，也就是java当中众多的语法糖之一，它的执行是在编译期，会根据代码的语法，在生成class文件的时候，决定是否进行拆箱和装箱动作。</p>\n<h4 id=\"1-自动装箱\"><a href=\"#1-自动装箱\" class=\"headerlink\" title=\"1. 自动装箱\"></a>1. 自动装箱</h4><p>对于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>生成class文件时，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> Integer.valueOf(<span class=\"number\">128</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-自动拆箱\"><a href=\"#2-自动拆箱\" class=\"headerlink\" title=\"2. 自动拆箱\"></a>2. 自动拆箱</h4><p>将 Integer 类表示的数据赋值给基本数据类型int，就执行了自动拆箱。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">128</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> a;</span><br></pre></td></tr></table></figure>\n\n<p>class文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">128</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> a.intValue();</span><br></pre></td></tr></table></figure>\n\n<p>简单来讲：自动装箱就是<code>Integer.valueOf(int i)</code>；自动拆箱就是 <code>i.intValue()</code>；</p>\n<h4 id=\"3-缓存\"><a href=\"#3-缓存\" class=\"headerlink\" title=\"3. 缓存\"></a>3. 缓存</h4><p> 当<code>Integer b1 = 12</code>时，是在常量池中开辟出同一个空间来存储12，在常量池中就必须对其的大小范围做出一个规定，规定其范围为：（-128~127）之间。如果超出了范围，会从堆区new一个Integer对象来存放值。</p>\n<h3 id=\"3-的比较\"><a href=\"#3-的比较\" class=\"headerlink\" title=\"3. ==的比较\"></a>3. <code>==</code>的比较</h3><h4 id=\"1-Integer与Integer\"><a href=\"#1-Integer与Integer\" class=\"headerlink\" title=\"1. Integer与Integer\"></a>1. Integer与Integer</h4><p>由于Integer变量实际上是对一个Integer对象的引用，是对象的地址，所以两个通过new生成的Integer变量永远是不相等的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Integer与int\"><a href=\"#2-Integer与int\" class=\"headerlink\" title=\"2. Integer与int\"></a>2. Integer与int</h4><p>Integer与int比较时，会触发自动拆箱，实际为两个int的比较，因此，结果为true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-非new生成的Integer变量和new-Integer-生成的变量\"><a href=\"#3-非new生成的Integer变量和new-Integer-生成的变量\" class=\"headerlink\" title=\"3. 非new生成的Integer变量和new Integer()生成的变量\"></a>3. 非new生成的Integer变量和new Integer()生成的变量</h4><p>因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同，结果为false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-对于两个非new生成的Integer对象\"><a href=\"#4-对于两个非new生成的Integer对象\" class=\"headerlink\" title=\"4. 对于两个非new生成的Integer对象\"></a>4. 对于两个非new生成的Integer对象</h4><p>如果在缓存范围之内，是指向同一个常量池中的地址，所以是true；如果在缓存范围之外，会new一个对象，内存地址不同，所以为false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-算术运算\"><a href=\"#5-算术运算\" class=\"headerlink\" title=\"5. 算术运算\"></a>5. 算术运算</h4><p>由于 a+b包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法）,&#x3D;&#x3D;比较符又将左边的自动拆箱，因此它们比较的是数值是否相等。</p>\n<p>equals()会先触发自动装箱，<strong>equals 运算符不会进行类型转换</strong>，Long.equals(Integer)，结果将是false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">System.out.println(c == (a + b)); <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(c.equals((a+b))); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-常量池中的String\"><a href=\"#4-常量池中的String\" class=\"headerlink\" title=\"4. 常量池中的String\"></a>4. 常量池中的String</h2><p>Java中的常量池，实际上分为两种形态：<strong>静态常量池</strong>和<strong>运行时常量池</strong>。</p>\n<h3 id=\"1-静态常量池\"><a href=\"#1-静态常量池\" class=\"headerlink\" title=\"1. 静态常量池\"></a>1. 静态常量池</h3><p>即*.class文件中的常量池，class文件中的常量池不仅仅包含字符串(数字)字面量，还包含类、方法的信息，占用class文件绝大部分空间。这种常量池主要用于存放两大类常量：<strong>字面量</strong>(Literal)和<strong>符号引用量</strong>(Symbolic References)，字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念，包括了如下三种类型的常量：</p>\n<ul>\n<li>类和接口的全限定名</li>\n<li>字段名称和描述符</li>\n<li>方法名称和描述符</li>\n</ul>\n<h3 id=\"2-运行时常量池\"><a href=\"#2-运行时常量池\" class=\"headerlink\" title=\"2.  运行时常量池\"></a>2.  运行时常量池</h3><p>是jvm虚拟机在完成类装载操作后，将class文件中的常量池载入到内存中，并保存在<strong>方法区</strong>中，我们常说的常量池，就是指方法区中的运行时常量池。</p>\n<h3 id=\"3-String类的intern\"><a href=\"#3-String类的intern\" class=\"headerlink\" title=\"3. String类的intern()\"></a>3. String类的intern()</h3><p>String的intern()方法会查找在常量池中是否存在一份equal相等的字符串,如果有则返回该字符串的引用,如果没有则添加自己的字符串进入常量池。</p>\n<h3 id=\"4-实例比较\"><a href=\"#4-实例比较\" class=\"headerlink\" title=\"4. 实例比较\"></a>4. 实例比较</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hel&quot;</span> + <span class=\"string\">&quot;lo&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hel&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;lo&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s6</span> <span class=\"operator\">=</span> s5.intern();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s7</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;H&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s8</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s9</span> <span class=\"operator\">=</span> s7 + s8;</span><br><span class=\"line\">          </span><br><span class=\"line\">System.out.println(s1 == s2);  <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1 == s3);  <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1 == s4);  <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s1 == s9);  <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s4 == s5);  <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s1 == s6);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p> 首先说明一点，在java 中，直接使用&#x3D;&#x3D;操作符，比较的是两个字符串的引用地址，并不是比较内容，比较内容请用String.equals()。</p>\n<p> s1 &#x3D;&#x3D; s2这个非常好理解，s1、s2在赋值时，均使用的字符串字面量，说白话点，就是直接把字符串写死，在编译期间，这种字面量会直接放入class文件的常量池中，从而实现复用，载入运行时常量池后，s1、s2指向的是同一个内存地址，所以相等。</p>\n<p>s1 &#x3D;&#x3D; s3这个地方有个坑，s3虽然是动态拼接出来的字符串，但是所有参与拼接的部分都是已知的字面量，在编译期间，这种拼接会被优化，编译器直接帮你拼好，因此String s3 &#x3D; “Hel” + “lo”;在class文件中被优化成String s3 &#x3D; “Hello”，所以s1 &#x3D;&#x3D; s3成立。只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。</p>\n<p>s1 &#x3D;&#x3D; s4当然不相等，s4虽然也是拼接出来的，但new String(“lo”)这部分不是已知字面量，是一个不可预料的部分，编译器不会优化，必须等到运行时才可以确定结果，结合<strong>字符串不变</strong>定理，鬼知道s4被分配到哪去了，所以地址肯定不同。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。</p>\n<p>s1 &#x3D;&#x3D; s9也不相等，道理差不多，虽然s7、s8在赋值的时候使用的字符串字面量，但是拼接成s9的时候，s7、s8作为两个变量，都是不可预料的，编译器毕竟是编译器，不可能当解释器用，不能在编译期被确定，所以不做优化，只能等到运行时，在堆中创建s7、s8拼接成的新字符串，在堆中地址不确定，不可能与方法区常量池中的s1地址相同。</p>\n<p><img src=\"/image/java/%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%AD%E7%9A%84String.png\" alt=\"常量池中的String\"></p>\n<p>s4 &#x3D;&#x3D; s5已经不用解释了，绝对不相等，二者都在堆中，但地址不同。</p>\n<p>s1 &#x3D;&#x3D; s6这两个相等完全归功于intern方法，s5在堆中，内容为Hello ，intern方法会尝试将Hello字符串添加到常量池中，并返回其在常量池中的地址，因为常量池中已经有了Hello字符串，所以intern方法直接返回地址；而s1在编译期就已经指向常量池了，因此s1和s6指向同一地址，相等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">A</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ab&quot;</span>; <span class=\"comment\">// 常量A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">B</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cd&quot;</span>; <span class=\"comment\">// 常量B</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> A + B;  <span class=\"comment\">// 将两个常量用+连接对s进行初始化 </span></span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcd&quot;</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == t) &#123;   </span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;s等于t，它们是同一个对象&quot;</span>);   </span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;   </span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;s不等于t，它们不是同一个对象&quot;</span>);   </span><br><span class=\"line\">     &#125;   </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"><span class=\"comment\">// s等于t，它们是同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// A和B都是常量，值是固定的，因此s的值也是固定的，它在类被编译时就已经确定了。也就是说：String s=A+B; 等同于：String s=&quot;ab&quot;+&quot;cd&quot;;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String A; <span class=\"comment\">// 常量A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String B;    <span class=\"comment\">// 常量B</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;   </span><br><span class=\"line\">     A = <span class=\"string\">&quot;ab&quot;</span>;   </span><br><span class=\"line\">     B = <span class=\"string\">&quot;cd&quot;</span>;   </span><br><span class=\"line\"> &#125;   </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;   </span><br><span class=\"line\">    <span class=\"comment\">// 将两个常量用+连接对s进行初始化   </span></span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> A + B;   </span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcd&quot;</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == t) &#123;   </span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;s等于t，它们是同一个对象&quot;</span>);   </span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;   </span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;s不等于t，它们不是同一个对象&quot;</span>);   </span><br><span class=\"line\">     &#125;   </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"><span class=\"comment\">// s不等于t，它们不是同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// A和B虽然被定义为常量，但是它们都没有马上被赋值。在运算出s的值之前，他们何时被赋值，以及被赋予什么样的值，都是个变数。因此A和B在被赋值之前，性质类似于一个变量。那么s就不能在编译期被确定，而只能在运行时被创建了。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><p>必须要关注编译期的行为，才能更好的理解常量池。</p>\n</li>\n<li><p>运行时常量池中的常量，基本来源于各个class文件中的常量池。</p>\n</li>\n<li><p>程序运行时，除非手动向常量池中添加常量(比如调用intern方法)，否则jvm不会自动添加常量到常量池。</p>\n</li>\n</ul>\n<h3 id=\"6-String、StringBuffer-、StringBuilder\"><a href=\"#6-String、StringBuffer-、StringBuilder\" class=\"headerlink\" title=\"6. String、StringBuffer 、StringBuilder\"></a>6. String、StringBuffer 、StringBuilder</h3><ul>\n<li><strong>可变性</strong>：String 不可变；StringBuffer 和 StringBuilder 可变</li>\n<li><strong>线程安全</strong>：String 不可变，因此是线程安全的；StringBuilder 不是线程安全的；StringBuffer 是线程安全的，内部使用 synchronized 进行同步。</li>\n</ul>\n<h2 id=\"5-static加载顺序、执行时机\"><a href=\"#5-static加载顺序、执行时机\" class=\"headerlink\" title=\"5.static加载顺序、执行时机\"></a>5.static加载顺序、执行时机</h2><h3 id=\"1-static代码块执行时机\"><a href=\"#1-static代码块执行时机\" class=\"headerlink\" title=\"1. static代码块执行时机\"></a>1. static代码块执行时机</h3><p>一个类的运行分为以下步骤：</p>\n<ol>\n<li><strong>装载</strong></li>\n<li><strong>连接</strong></li>\n<li><strong>初始化</strong></li>\n</ol>\n<p>装载阶段又三个基本动作组成：</p>\n<ol>\n<li>通过类型的完全限定名，产生一个代表该类型的二进制数据流</li>\n<li>解析这个二进制数据流为方法区内的内部数据结</li>\n<li>构创建一个表示该类型的java.lang.Class类的实例</li>\n</ol>\n<p>连接阶段又分为三部分：</p>\n<ol>\n<li>验证，确认类型符合Java语言的语义，检查各个类之间的二进制兼容性(比如final的类不用拥有子类等)，另外还需要进行符号引用的验证。</li>\n<li>准备，Java虚拟机为类变量分配内存，设置默认初始值。</li>\n<li>解析(可选的) ，在类型的常量池中寻找类，接口，字段和方法的符号引用，把这些符号引用替换成直接引用的过程。</li>\n</ol>\n<p>当一个类被主动使用时，Java虚拟就会对其初始化，如下六种情况为主动使用：</p>\n<ol>\n<li>当创建某个类的新实例时（如通过new或者反射，克隆，反序列化等）</li>\n<li>当调用某个类的静态方法时</li>\n<li>当使用某个类或接口的静态字段时</li>\n<li>当调用Java API中的某些反射方法时，比如类Class中的方法，或者java.lang.reflect中的类的方法时</li>\n<li>当初始化某个子类时</li>\n<li>当虚拟机启动某个被标明为启动类的类（即包含main方法的那个类）</li>\n</ol>\n<p>Java编译器会收集所有的类变量初始化语句和类型的静态初始化器，将这些放到一个特殊的方法中：clinit。 </p>\n<h3 id=\"2-带有static的代码执行顺序\"><a href=\"#2-带有static的代码执行顺序\" class=\"headerlink\" title=\"2. 带有static的代码执行顺序\"></a>2. 带有static的代码执行顺序</h3><h4 id=\"1-如果类还没有被加载\"><a href=\"#1-如果类还没有被加载\" class=\"headerlink\" title=\"1. 如果类还没有被加载\"></a>1. 如果类还没有被加载</h4><ol>\n<li>先执行父类的静态代码块和静态变量初始化，并且静态代码块和静态变量的执行顺序只跟代码中出现的顺序有关。 </li>\n<li>执行子类的静态代码块和静态变量初始化。 </li>\n<li>执行父类的实例变量初始化 </li>\n<li>执行父类的构造函数 </li>\n<li>执行子类的实例变量初始化 </li>\n<li>执行子类的构造函数</li>\n</ol>\n<h4 id=\"2-如果类已经被加载\"><a href=\"#2-如果类已经被加载\" class=\"headerlink\" title=\"2. 如果类已经被加载\"></a>2. 如果类已经被加载</h4><p>则静态代码块和静态变量就不用重复执行，再创建类对象时，只执行与实例相关的变量初始化和构造方法。</p>\n<h4 id=\"3-实例\"><a href=\"#3-实例\" class=\"headerlink\" title=\"3. 实例\"></a>3. 实例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;base static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Base</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;base constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// base static</span></span><br><span class=\"line\"><span class=\"comment\">// test static</span></span><br><span class=\"line\"><span class=\"comment\">// base constructor</span></span><br><span class=\"line\"><span class=\"comment\">// test constructor</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;person static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;person &quot;</span>+str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;MyClass&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;myclass static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;myclass constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span>  &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;main&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// main static</span></span><br><span class=\"line\"><span class=\"comment\">// myclass static</span></span><br><span class=\"line\"><span class=\"comment\">// person static</span></span><br><span class=\"line\"><span class=\"comment\">// person main</span></span><br><span class=\"line\"><span class=\"comment\">// main constructor</span></span><br><span class=\"line\"><span class=\"comment\">// person MyClass</span></span><br><span class=\"line\"><span class=\"comment\">// myclass constructor</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"6-基本数据类型和引用类型在JVM中存储在哪\"><a href=\"#6-基本数据类型和引用类型在JVM中存储在哪\" class=\"headerlink\" title=\"6. 基本数据类型和引用类型在JVM中存储在哪\"></a>6. 基本数据类型和引用类型在JVM中存储在哪</h2><h3 id=\"1-在方法中声明的变量\"><a href=\"#1-在方法中声明的变量\" class=\"headerlink\" title=\"1. 在方法中声明的变量\"></a>1. 在方法中声明的变量</h3><p>即该变量是局部变量，每当程序调用方法时，系统都会为该方法建立一个方法栈，其所在方法中声明的变量就放在方法栈中，当方法结束系统会释放方法栈，其对应在该方法中声明的变量随着栈的销毁而结束，这就局部变量只能在方法中有效的原因。</p>\n<p>在方法中声明的变量可以是基本类型的变量，也可以是引用类型的变量。</p>\n<ul>\n<li>当声明是基本类型的变量的时，其变量名及值（变量名及值是两个概念）是放在JAVA虚拟机栈中；</li>\n<li>当声明的是引用变量时，所声明的变量（该变量实际上是在方法中存储的是内存地址值）是放在JAVA虚拟机的栈中，该变量所指向的对象是放在堆类存中的。</li>\n</ul>\n<h3 id=\"2-在类中声明的变量\"><a href=\"#2-在类中声明的变量\" class=\"headerlink\" title=\"2. 在类中声明的变量\"></a>2. 在类中声明的变量</h3><p>成员变量，也叫全局变量，放在堆中的（因为全局变量不会随着某个方法执行结束而销毁）。</p>\n<p>同样在类中声明的变量即可是基本类型的变量，也可是引用类型的变量。</p>\n<ul>\n<li>当声明的是基本类型的变量其变量名及其值放在堆内存中的；</li>\n<li>引用类型时，其声明的变量仍然会存储一个内存地址值，该内存地址值指向所引用的对象。引用变量名和对应的对象仍然存储在相应的堆中。</li>\n</ul>\n<h2 id=\"7-Java-与-C-的区别\"><a href=\"#7-Java-与-C-的区别\" class=\"headerlink\" title=\"7. Java 与 C++ 的区别\"></a>7. Java 与 C++ 的区别</h2><ul>\n<li>Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。</li>\n<li>Java 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。</li>\n<li>Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。</li>\n<li>Java 支持自动垃圾回收，而 C++ 需要手动回收。</li>\n<li>Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。</li>\n<li>Java 不支持操作符重载，虽然可以对两个 String 对象执行加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。</li>\n<li>Java 的 goto 是保留字，但是不可用，C++ 可以使用 goto。</li>\n<li>Java 不支持条件编译，C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译。</li>\n</ul>\n<h2 id=\"8-线程池\"><a href=\"#8-线程池\" class=\"headerlink\" title=\"8. 线程池\"></a>8. 线程池</h2><p><a href=\"https://www.nowcoder.com/discuss/152050?type=0&order=0&pos=6&page=0\">https://www.nowcoder.com/discuss/152050?type=0&amp;order=0&amp;pos=6&amp;page=0</a></p>\n","length":8628,"excerpt":"","more":"<h1 id=\"Java常见基础知识汇总\"><a href=\"#Java常见基础知识汇总\" class=\"headerlink\" title=\"Java常见基础知识汇总\"></a>Java常见基础知识汇总</h1><h2 id=\"1-sleep-与wait-区别\"><a href=\"#1-sleep-与wait-区别\" class=\"headerlink\" title=\"1. sleep()与wait()区别\"></a>1. sleep()与wait()区别</h2><ol>\n<li><strong>锁</strong>：sleep()方法正在执行的线程主动让出CPU（然后CPU就可以去执行其他任务），在sleep指定时间后CPU再回到该线程继续往下执行(<font color='red'>注意：sleep方法只让出了CPU，而并不会释放同步资源锁！！！</font>)；wait()方法则是指当前线程让自己暂时退让出同步资源锁，以便其他正在等待该资源的线程得到该资源进而运行，只有调用了notify()方法，之前调用wait()的线程才会解除wait状态，可以去参与竞争同步资源锁，进而得到执行。</li>\n<li><strong>使用的位置</strong>：sleep()方法可以在任何地方使用；wait()方法则只能在同步方法或同步块中使用；</li>\n<li><strong>属于的类</strong>：sleep()是线程类（Thread）的方法，调用会暂停此线程指定的时间，但监控依然保持，不会释放对象锁，到时间自动恢复；wait()是Object的方法，调用会放弃对象锁，进入等待队列，待调用**notify()&#x2F;notifyAll()**唤醒指定的线程或者所有线程，才会进入锁池，不再次获得对象锁才会进入运行状态；</li>\n</ol>\n<h2 id=\"2-HashSet和TreeSet的区别\"><a href=\"#2-HashSet和TreeSet的区别\" class=\"headerlink\" title=\"2. HashSet和TreeSet的区别\"></a>2. HashSet和TreeSet的区别</h2><ol>\n<li><strong>实现方式</strong>：HashSet是采用hash表来实现的；TreeSet是采用树结构实现(红黑树算法)。</li>\n<li><strong>排列顺序</strong>：HashSet无序；TreeSet支持两种排序方式，自然排序和定制排序（实现comparable接口）。</li>\n<li><strong>复杂度</strong>：HashSet方法都是复杂度为O(1)；TreeSet方法都是复杂度为O(log (n))的方法。</li>\n<li><strong>判断方法</strong>：HashSet判断通过equals方法比较相等，并且两个对象的hashCode()方法返回值相等（需要重写hashCode（）和equals()方法）；TreeSet通过equals方法返回，或者通过CompareTo方法比较；</li>\n<li><strong>实现接口</strong>：HashSet实现Set接口；TreeSet实现SortedSet接口，SortedSet实现Set接口。</li>\n</ol>\n<p>备注：<strong>LinkedHashSet</strong>介于HashSet和TreeSet之间。它也是一个hash表，但是同时维护了一个双链表来记录插入的顺序。基本方法的复杂度为O(1)。</p>\n<h2 id=\"3-int和Integer的区别\"><a href=\"#3-int和Integer的区别\" class=\"headerlink\" title=\"3. int和Integer的区别\"></a>3. int和Integer的区别</h2><h3 id=\"1-区别概述\"><a href=\"#1-区别概述\" class=\"headerlink\" title=\"1. 区别概述\"></a>1. 区别概述</h3><ol>\n<li><strong>数据类型</strong>：Integer是int的包装类，int则是java的一种基本数据类型；</li>\n<li><strong>使用方法</strong>：Integer变量必须实例化后才能使用，而int变量不需要；</li>\n<li><strong>默认值</strong>：Integer 是类，默认值为null，int是基本数据类型，默认值为0；</li>\n<li><strong>实质</strong>：Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值。</li>\n</ol>\n<h3 id=\"2-自动装箱和自动拆箱、缓存\"><a href=\"#2-自动装箱和自动拆箱、缓存\" class=\"headerlink\" title=\"2. 自动装箱和自动拆箱、缓存\"></a>2. 自动装箱和自动拆箱、缓存</h3><p>自动拆箱和自动装箱是 JDK1.5 以后才有的功能，也就是java当中众多的语法糖之一，它的执行是在编译期，会根据代码的语法，在生成class文件的时候，决定是否进行拆箱和装箱动作。</p>\n<h4 id=\"1-自动装箱\"><a href=\"#1-自动装箱\" class=\"headerlink\" title=\"1. 自动装箱\"></a>1. 自动装箱</h4><p>对于</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>生成class文件时，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> Integer.valueOf(<span class=\"number\">128</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-自动拆箱\"><a href=\"#2-自动拆箱\" class=\"headerlink\" title=\"2. 自动拆箱\"></a>2. 自动拆箱</h4><p>将 Integer 类表示的数据赋值给基本数据类型int，就执行了自动拆箱。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">128</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> a;</span><br></pre></td></tr></table></figure>\n\n<p>class文件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">128</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> a.intValue();</span><br></pre></td></tr></table></figure>\n\n<p>简单来讲：自动装箱就是<code>Integer.valueOf(int i)</code>；自动拆箱就是 <code>i.intValue()</code>；</p>\n<h4 id=\"3-缓存\"><a href=\"#3-缓存\" class=\"headerlink\" title=\"3. 缓存\"></a>3. 缓存</h4><p> 当<code>Integer b1 = 12</code>时，是在常量池中开辟出同一个空间来存储12，在常量池中就必须对其的大小范围做出一个规定，规定其范围为：（-128~127）之间。如果超出了范围，会从堆区new一个Integer对象来存放值。</p>\n<h3 id=\"3-的比较\"><a href=\"#3-的比较\" class=\"headerlink\" title=\"3. ==的比较\"></a>3. <code>==</code>的比较</h3><h4 id=\"1-Integer与Integer\"><a href=\"#1-Integer与Integer\" class=\"headerlink\" title=\"1. Integer与Integer\"></a>1. Integer与Integer</h4><p>由于Integer变量实际上是对一个Integer对象的引用，是对象的地址，所以两个通过new生成的Integer变量永远是不相等的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Integer与int\"><a href=\"#2-Integer与int\" class=\"headerlink\" title=\"2. Integer与int\"></a>2. Integer与int</h4><p>Integer与int比较时，会触发自动拆箱，实际为两个int的比较，因此，结果为true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-非new生成的Integer变量和new-Integer-生成的变量\"><a href=\"#3-非new生成的Integer变量和new-Integer-生成的变量\" class=\"headerlink\" title=\"3. 非new生成的Integer变量和new Integer()生成的变量\"></a>3. 非new生成的Integer变量和new Integer()生成的变量</h4><p>因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同，结果为false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-对于两个非new生成的Integer对象\"><a href=\"#4-对于两个非new生成的Integer对象\" class=\"headerlink\" title=\"4. 对于两个非new生成的Integer对象\"></a>4. 对于两个非new生成的Integer对象</h4><p>如果在缓存范围之内，是指向同一个常量池中的地址，所以是true；如果在缓存范围之外，会new一个对象，内存地址不同，所以为false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">System.out.print(i == j); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-算术运算\"><a href=\"#5-算术运算\" class=\"headerlink\" title=\"5. 算术运算\"></a>5. 算术运算</h4><p>由于 a+b包含了算术运算，因此会触发自动拆箱过程（会调用intValue方法）,&#x3D;&#x3D;比较符又将左边的自动拆箱，因此它们比较的是数值是否相等。</p>\n<p>equals()会先触发自动装箱，<strong>equals 运算符不会进行类型转换</strong>，Long.equals(Integer)，结果将是false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">System.out.println(c == (a + b)); <span class=\"comment\">//true</span></span><br><span class=\"line\">System.out.println(c.equals((a+b))); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"4-常量池中的String\"><a href=\"#4-常量池中的String\" class=\"headerlink\" title=\"4. 常量池中的String\"></a>4. 常量池中的String</h2><p>Java中的常量池，实际上分为两种形态：<strong>静态常量池</strong>和<strong>运行时常量池</strong>。</p>\n<h3 id=\"1-静态常量池\"><a href=\"#1-静态常量池\" class=\"headerlink\" title=\"1. 静态常量池\"></a>1. 静态常量池</h3><p>即*.class文件中的常量池，class文件中的常量池不仅仅包含字符串(数字)字面量，还包含类、方法的信息，占用class文件绝大部分空间。这种常量池主要用于存放两大类常量：<strong>字面量</strong>(Literal)和<strong>符号引用量</strong>(Symbolic References)，字面量相当于Java语言层面常量的概念，如文本字符串，声明为final的常量值等，符号引用则属于编译原理方面的概念，包括了如下三种类型的常量：</p>\n<ul>\n<li>类和接口的全限定名</li>\n<li>字段名称和描述符</li>\n<li>方法名称和描述符</li>\n</ul>\n<h3 id=\"2-运行时常量池\"><a href=\"#2-运行时常量池\" class=\"headerlink\" title=\"2.  运行时常量池\"></a>2.  运行时常量池</h3><p>是jvm虚拟机在完成类装载操作后，将class文件中的常量池载入到内存中，并保存在<strong>方法区</strong>中，我们常说的常量池，就是指方法区中的运行时常量池。</p>\n<h3 id=\"3-String类的intern\"><a href=\"#3-String类的intern\" class=\"headerlink\" title=\"3. String类的intern()\"></a>3. String类的intern()</h3><p>String的intern()方法会查找在常量池中是否存在一份equal相等的字符串,如果有则返回该字符串的引用,如果没有则添加自己的字符串进入常量池。</p>\n<h3 id=\"4-实例比较\"><a href=\"#4-实例比较\" class=\"headerlink\" title=\"4. 实例比较\"></a>4. 实例比较</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hel&quot;</span> + <span class=\"string\">&quot;lo&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hel&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;lo&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s6</span> <span class=\"operator\">=</span> s5.intern();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s7</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;H&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s8</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ello&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s9</span> <span class=\"operator\">=</span> s7 + s8;</span><br><span class=\"line\">          </span><br><span class=\"line\">System.out.println(s1 == s2);  <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1 == s3);  <span class=\"comment\">// true</span></span><br><span class=\"line\">System.out.println(s1 == s4);  <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s1 == s9);  <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s4 == s5);  <span class=\"comment\">// false</span></span><br><span class=\"line\">System.out.println(s1 == s6);  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p> 首先说明一点，在java 中，直接使用&#x3D;&#x3D;操作符，比较的是两个字符串的引用地址，并不是比较内容，比较内容请用String.equals()。</p>\n<p> s1 &#x3D;&#x3D; s2这个非常好理解，s1、s2在赋值时，均使用的字符串字面量，说白话点，就是直接把字符串写死，在编译期间，这种字面量会直接放入class文件的常量池中，从而实现复用，载入运行时常量池后，s1、s2指向的是同一个内存地址，所以相等。</p>\n<p>s1 &#x3D;&#x3D; s3这个地方有个坑，s3虽然是动态拼接出来的字符串，但是所有参与拼接的部分都是已知的字面量，在编译期间，这种拼接会被优化，编译器直接帮你拼好，因此String s3 &#x3D; “Hel” + “lo”;在class文件中被优化成String s3 &#x3D; “Hello”，所以s1 &#x3D;&#x3D; s3成立。只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。</p>\n<p>s1 &#x3D;&#x3D; s4当然不相等，s4虽然也是拼接出来的，但new String(“lo”)这部分不是已知字面量，是一个不可预料的部分，编译器不会优化，必须等到运行时才可以确定结果，结合<strong>字符串不变</strong>定理，鬼知道s4被分配到哪去了，所以地址肯定不同。对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中。</p>\n<p>s1 &#x3D;&#x3D; s9也不相等，道理差不多，虽然s7、s8在赋值的时候使用的字符串字面量，但是拼接成s9的时候，s7、s8作为两个变量，都是不可预料的，编译器毕竟是编译器，不可能当解释器用，不能在编译期被确定，所以不做优化，只能等到运行时，在堆中创建s7、s8拼接成的新字符串，在堆中地址不确定，不可能与方法区常量池中的s1地址相同。</p>\n<p><img src=\"/image/java/%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%AD%E7%9A%84String.png\" alt=\"常量池中的String\"></p>\n<p>s4 &#x3D;&#x3D; s5已经不用解释了，绝对不相等，二者都在堆中，但地址不同。</p>\n<p>s1 &#x3D;&#x3D; s6这两个相等完全归功于intern方法，s5在堆中，内容为Hello ，intern方法会尝试将Hello字符串添加到常量池中，并返回其在常量池中的地址，因为常量池中已经有了Hello字符串，所以intern方法直接返回地址；而s1在编译期就已经指向常量池了，因此s1和s6指向同一地址，相等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">A</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ab&quot;</span>; <span class=\"comment\">// 常量A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">B</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cd&quot;</span>; <span class=\"comment\">// 常量B</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> A + B;  <span class=\"comment\">// 将两个常量用+连接对s进行初始化 </span></span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcd&quot;</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == t) &#123;   </span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;s等于t，它们是同一个对象&quot;</span>);   </span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;   </span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;s不等于t，它们不是同一个对象&quot;</span>);   </span><br><span class=\"line\">     &#125;   </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"><span class=\"comment\">// s等于t，它们是同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// A和B都是常量，值是固定的，因此s的值也是固定的，它在类被编译时就已经确定了。也就是说：String s=A+B; 等同于：String s=&quot;ab&quot;+&quot;cd&quot;;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String A; <span class=\"comment\">// 常量A</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String B;    <span class=\"comment\">// 常量B</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> &#123;   </span><br><span class=\"line\">     A = <span class=\"string\">&quot;ab&quot;</span>;   </span><br><span class=\"line\">     B = <span class=\"string\">&quot;cd&quot;</span>;   </span><br><span class=\"line\"> &#125;   </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;   </span><br><span class=\"line\">    <span class=\"comment\">// 将两个常量用+连接对s进行初始化   </span></span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> A + B;   </span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;abcd&quot;</span>;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == t) &#123;   </span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;s等于t，它们是同一个对象&quot;</span>);   </span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;   </span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;s不等于t，它们不是同一个对象&quot;</span>);   </span><br><span class=\"line\">     &#125;   </span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"><span class=\"comment\">// s不等于t，它们不是同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// A和B虽然被定义为常量，但是它们都没有马上被赋值。在运算出s的值之前，他们何时被赋值，以及被赋予什么样的值，都是个变数。因此A和B在被赋值之前，性质类似于一个变量。那么s就不能在编译期被确定，而只能在运行时被创建了。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h3><ul>\n<li><p>必须要关注编译期的行为，才能更好的理解常量池。</p>\n</li>\n<li><p>运行时常量池中的常量，基本来源于各个class文件中的常量池。</p>\n</li>\n<li><p>程序运行时，除非手动向常量池中添加常量(比如调用intern方法)，否则jvm不会自动添加常量到常量池。</p>\n</li>\n</ul>\n<h3 id=\"6-String、StringBuffer-、StringBuilder\"><a href=\"#6-String、StringBuffer-、StringBuilder\" class=\"headerlink\" title=\"6. String、StringBuffer 、StringBuilder\"></a>6. String、StringBuffer 、StringBuilder</h3><ul>\n<li><strong>可变性</strong>：String 不可变；StringBuffer 和 StringBuilder 可变</li>\n<li><strong>线程安全</strong>：String 不可变，因此是线程安全的；StringBuilder 不是线程安全的；StringBuffer 是线程安全的，内部使用 synchronized 进行同步。</li>\n</ul>\n<h2 id=\"5-static加载顺序、执行时机\"><a href=\"#5-static加载顺序、执行时机\" class=\"headerlink\" title=\"5.static加载顺序、执行时机\"></a>5.static加载顺序、执行时机</h2><h3 id=\"1-static代码块执行时机\"><a href=\"#1-static代码块执行时机\" class=\"headerlink\" title=\"1. static代码块执行时机\"></a>1. static代码块执行时机</h3><p>一个类的运行分为以下步骤：</p>\n<ol>\n<li><strong>装载</strong></li>\n<li><strong>连接</strong></li>\n<li><strong>初始化</strong></li>\n</ol>\n<p>装载阶段又三个基本动作组成：</p>\n<ol>\n<li>通过类型的完全限定名，产生一个代表该类型的二进制数据流</li>\n<li>解析这个二进制数据流为方法区内的内部数据结</li>\n<li>构创建一个表示该类型的java.lang.Class类的实例</li>\n</ol>\n<p>连接阶段又分为三部分：</p>\n<ol>\n<li>验证，确认类型符合Java语言的语义，检查各个类之间的二进制兼容性(比如final的类不用拥有子类等)，另外还需要进行符号引用的验证。</li>\n<li>准备，Java虚拟机为类变量分配内存，设置默认初始值。</li>\n<li>解析(可选的) ，在类型的常量池中寻找类，接口，字段和方法的符号引用，把这些符号引用替换成直接引用的过程。</li>\n</ol>\n<p>当一个类被主动使用时，Java虚拟就会对其初始化，如下六种情况为主动使用：</p>\n<ol>\n<li>当创建某个类的新实例时（如通过new或者反射，克隆，反序列化等）</li>\n<li>当调用某个类的静态方法时</li>\n<li>当使用某个类或接口的静态字段时</li>\n<li>当调用Java API中的某些反射方法时，比如类Class中的方法，或者java.lang.reflect中的类的方法时</li>\n<li>当初始化某个子类时</li>\n<li>当虚拟机启动某个被标明为启动类的类（即包含main方法的那个类）</li>\n</ol>\n<p>Java编译器会收集所有的类变量初始化语句和类型的静态初始化器，将这些放到一个特殊的方法中：clinit。 </p>\n<h3 id=\"2-带有static的代码执行顺序\"><a href=\"#2-带有static的代码执行顺序\" class=\"headerlink\" title=\"2. 带有static的代码执行顺序\"></a>2. 带有static的代码执行顺序</h3><h4 id=\"1-如果类还没有被加载\"><a href=\"#1-如果类还没有被加载\" class=\"headerlink\" title=\"1. 如果类还没有被加载\"></a>1. 如果类还没有被加载</h4><ol>\n<li>先执行父类的静态代码块和静态变量初始化，并且静态代码块和静态变量的执行顺序只跟代码中出现的顺序有关。 </li>\n<li>执行子类的静态代码块和静态变量初始化。 </li>\n<li>执行父类的实例变量初始化 </li>\n<li>执行父类的构造函数 </li>\n<li>执行子类的实例变量初始化 </li>\n<li>执行子类的构造函数</li>\n</ol>\n<h4 id=\"2-如果类已经被加载\"><a href=\"#2-如果类已经被加载\" class=\"headerlink\" title=\"2. 如果类已经被加载\"></a>2. 如果类已经被加载</h4><p>则静态代码块和静态变量就不用重复执行，再创建类对象时，只执行与实例相关的变量初始化和构造方法。</p>\n<h4 id=\"3-实例\"><a href=\"#3-实例\" class=\"headerlink\" title=\"3. 实例\"></a>3. 实例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Base</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Base</span>&#123;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;base static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Base</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;base constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// base static</span></span><br><span class=\"line\"><span class=\"comment\">// test static</span></span><br><span class=\"line\"><span class=\"comment\">// base constructor</span></span><br><span class=\"line\"><span class=\"comment\">// test constructor</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;person static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;person &quot;</span>+str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">main</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;MyClass&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;myclass static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyClass</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;myclass constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">main</span>  &#123;</span><br><span class=\"line\">    <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;main&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main static&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main constructor&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// main static</span></span><br><span class=\"line\"><span class=\"comment\">// myclass static</span></span><br><span class=\"line\"><span class=\"comment\">// person static</span></span><br><span class=\"line\"><span class=\"comment\">// person main</span></span><br><span class=\"line\"><span class=\"comment\">// main constructor</span></span><br><span class=\"line\"><span class=\"comment\">// person MyClass</span></span><br><span class=\"line\"><span class=\"comment\">// myclass constructor</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"6-基本数据类型和引用类型在JVM中存储在哪\"><a href=\"#6-基本数据类型和引用类型在JVM中存储在哪\" class=\"headerlink\" title=\"6. 基本数据类型和引用类型在JVM中存储在哪\"></a>6. 基本数据类型和引用类型在JVM中存储在哪</h2><h3 id=\"1-在方法中声明的变量\"><a href=\"#1-在方法中声明的变量\" class=\"headerlink\" title=\"1. 在方法中声明的变量\"></a>1. 在方法中声明的变量</h3><p>即该变量是局部变量，每当程序调用方法时，系统都会为该方法建立一个方法栈，其所在方法中声明的变量就放在方法栈中，当方法结束系统会释放方法栈，其对应在该方法中声明的变量随着栈的销毁而结束，这就局部变量只能在方法中有效的原因。</p>\n<p>在方法中声明的变量可以是基本类型的变量，也可以是引用类型的变量。</p>\n<ul>\n<li>当声明是基本类型的变量的时，其变量名及值（变量名及值是两个概念）是放在JAVA虚拟机栈中；</li>\n<li>当声明的是引用变量时，所声明的变量（该变量实际上是在方法中存储的是内存地址值）是放在JAVA虚拟机的栈中，该变量所指向的对象是放在堆类存中的。</li>\n</ul>\n<h3 id=\"2-在类中声明的变量\"><a href=\"#2-在类中声明的变量\" class=\"headerlink\" title=\"2. 在类中声明的变量\"></a>2. 在类中声明的变量</h3><p>成员变量，也叫全局变量，放在堆中的（因为全局变量不会随着某个方法执行结束而销毁）。</p>\n<p>同样在类中声明的变量即可是基本类型的变量，也可是引用类型的变量。</p>\n<ul>\n<li>当声明的是基本类型的变量其变量名及其值放在堆内存中的；</li>\n<li>引用类型时，其声明的变量仍然会存储一个内存地址值，该内存地址值指向所引用的对象。引用变量名和对应的对象仍然存储在相应的堆中。</li>\n</ul>\n<h2 id=\"7-Java-与-C-的区别\"><a href=\"#7-Java-与-C-的区别\" class=\"headerlink\" title=\"7. Java 与 C++ 的区别\"></a>7. Java 与 C++ 的区别</h2><ul>\n<li>Java 是纯粹的面向对象语言，所有的对象都继承自 java.lang.Object，C++ 为了兼容 C 即支持面向对象也支持面向过程。</li>\n<li>Java 通过虚拟机从而实现跨平台特性，但是 C++ 依赖于特定的平台。</li>\n<li>Java 没有指针，它的引用可以理解为安全指针，而 C++ 具有和 C 一样的指针。</li>\n<li>Java 支持自动垃圾回收，而 C++ 需要手动回收。</li>\n<li>Java 不支持多重继承，只能通过实现多个接口来达到相同目的，而 C++ 支持多重继承。</li>\n<li>Java 不支持操作符重载，虽然可以对两个 String 对象执行加法运算，但是这是语言内置支持的操作，不属于操作符重载，而 C++ 可以。</li>\n<li>Java 的 goto 是保留字，但是不可用，C++ 可以使用 goto。</li>\n<li>Java 不支持条件编译，C++ 通过 #ifdef #ifndef 等预处理命令从而实现条件编译。</li>\n</ul>\n<h2 id=\"8-线程池\"><a href=\"#8-线程池\" class=\"headerlink\" title=\"8. 线程池\"></a>8. 线程池</h2><p><a href=\"https://www.nowcoder.com/discuss/152050?type=0&order=0&pos=6&page=0\">https://www.nowcoder.com/discuss/152050?type=0&amp;order=0&amp;pos=6&amp;page=0</a></p>\n"},{"title":"Lambda序列化问题","date":"2017-12-12T08:05:58.000Z","description":"这几天用spark遇到一个问题，到现在仍没有解决，不过查到了一些思路，可能与序列化有关。","_content":"\n# Lambda序列化问题\n\n\n这几天用spark遇到一个问题，到现在仍没有解决，不过查到了一些思路，可能与序列化有关。\n\n### 先上代码\n\n\n```\n//不用Lambda，没有问题\nlines.mapToPair(new PairFunction<String, Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1323L;\n\n\t\t\t@Override\n\t\t\tpublic Tuple2<Integer, Integer> call(String word) throws Exception {\n\t\t\t\treturn new Tuple2<Integer, Integer>(1, 1);\n\t\t\t}\n\t\t}).take(200).forEach(v -> System.out.println(v));\n//用lambda，报错\nlines.mapToPair(v -> new Tuple2<Integer, Integer>(1, 1)).take(200).forEach(v -> System.out.println(v));\n```\n\n### 错误信息：\n\n> \n```\n17/12/12 16:00:53 WARN TaskSetManager: Lost task 0.0 in stage 1.0 (TID 1, 10.103.244.216): java.io.IOException: unexpected exception type\n\tat java.io.ObjectStreamClass.throwMiscException(ObjectStreamClass.java:1582)\n\tat java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1154)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2022)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:422)\n\tat org.apache.spark.serializer.JavaDeserializationStream.readObject(JavaSerializer.scala:76)\n\tat org.apache.spark.serializer.JavaSerializerInstance.deserialize(JavaSerializer.scala:115)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:61)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:89)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:213)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.NoSuchMethodException: TestSUANZI.test.$deserializeLambda$(java.lang.invoke.SerializedLambda)\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat java.lang.invoke.SerializedLambda$1.run(SerializedLambda.java:224)\n\tat java.lang.invoke.SerializedLambda$1.run(SerializedLambda.java:221)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:221)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1148)\n\t... 27 more\n\n17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.1 in stage 1.0 (TID 2, 10.103.244.216, partition 0,ANY, 2193 bytes)\n17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.1 in stage 1.0 (TID 2) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 1]\n17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.2 in stage 1.0 (TID 3, 10.103.244.216, partition 0,ANY, 2193 bytes)\n17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.2 in stage 1.0 (TID 3) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 2]\n17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.3 in stage 1.0 (TID 4, 10.103.244.216, partition 0,ANY, 2193 bytes)\n17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.3 in stage 1.0 (TID 4) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 3]\n17/12/12 16:00:53 ERROR TaskSetManager: Task 0 in stage 1.0 failed 4 times; aborting job\n```\n\n目前的解决方法是实现Serializable这个接口。\n\n\n有时间读一下 \nhttps://www.zhihu.com/question/51491241/answer/126232275\n\n\n","source":"_posts/Lambda序列化问题.md","raw":"---\ntitle: Lambda序列化问题\ndate: 2017-12-12 16:05:58\ntags: Java\ncategories: Lambda表达式\ndescription: 这几天用spark遇到一个问题，到现在仍没有解决，不过查到了一些思路，可能与序列化有关。\n---\n\n# Lambda序列化问题\n\n\n这几天用spark遇到一个问题，到现在仍没有解决，不过查到了一些思路，可能与序列化有关。\n\n### 先上代码\n\n\n```\n//不用Lambda，没有问题\nlines.mapToPair(new PairFunction<String, Integer, Integer>() {\n\t\t\tprivate static final long serialVersionUID = 1323L;\n\n\t\t\t@Override\n\t\t\tpublic Tuple2<Integer, Integer> call(String word) throws Exception {\n\t\t\t\treturn new Tuple2<Integer, Integer>(1, 1);\n\t\t\t}\n\t\t}).take(200).forEach(v -> System.out.println(v));\n//用lambda，报错\nlines.mapToPair(v -> new Tuple2<Integer, Integer>(1, 1)).take(200).forEach(v -> System.out.println(v));\n```\n\n### 错误信息：\n\n> \n```\n17/12/12 16:00:53 WARN TaskSetManager: Lost task 0.0 in stage 1.0 (TID 1, 10.103.244.216): java.io.IOException: unexpected exception type\n\tat java.io.ObjectStreamClass.throwMiscException(ObjectStreamClass.java:1582)\n\tat java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1154)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2022)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:422)\n\tat org.apache.spark.serializer.JavaDeserializationStream.readObject(JavaSerializer.scala:76)\n\tat org.apache.spark.serializer.JavaSerializerInstance.deserialize(JavaSerializer.scala:115)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:61)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:89)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:213)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.NoSuchMethodException: TestSUANZI.test.$deserializeLambda$(java.lang.invoke.SerializedLambda)\n\tat java.lang.Class.getDeclaredMethod(Class.java:2130)\n\tat java.lang.invoke.SerializedLambda$1.run(SerializedLambda.java:224)\n\tat java.lang.invoke.SerializedLambda$1.run(SerializedLambda.java:221)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:221)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1148)\n\t... 27 more\n\n17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.1 in stage 1.0 (TID 2, 10.103.244.216, partition 0,ANY, 2193 bytes)\n17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.1 in stage 1.0 (TID 2) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 1]\n17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.2 in stage 1.0 (TID 3, 10.103.244.216, partition 0,ANY, 2193 bytes)\n17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.2 in stage 1.0 (TID 3) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 2]\n17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.3 in stage 1.0 (TID 4, 10.103.244.216, partition 0,ANY, 2193 bytes)\n17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.3 in stage 1.0 (TID 4) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 3]\n17/12/12 16:00:53 ERROR TaskSetManager: Task 0 in stage 1.0 failed 4 times; aborting job\n```\n\n目前的解决方法是实现Serializable这个接口。\n\n\n有时间读一下 \nhttps://www.zhihu.com/question/51491241/answer/126232275\n\n\n","slug":"Lambda序列化问题","published":1,"updated":"2025-02-22T18:52:19.818Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8ak000gv0019qskdxyh","content":"<h1 id=\"Lambda序列化问题\"><a href=\"#Lambda序列化问题\" class=\"headerlink\" title=\"Lambda序列化问题\"></a>Lambda序列化问题</h1><p>这几天用spark遇到一个问题，到现在仍没有解决，不过查到了一些思路，可能与序列化有关。</p>\n<h3 id=\"先上代码\"><a href=\"#先上代码\" class=\"headerlink\" title=\"先上代码\"></a>先上代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不用Lambda，没有问题</span><br><span class=\"line\">lines.mapToPair(new PairFunction&lt;String, Integer, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionUID = 1323L;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Tuple2&lt;Integer, Integer&gt; call(String word) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn new Tuple2&lt;Integer, Integer&gt;(1, 1);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;).take(200).forEach(v -&gt; System.out.println(v));</span><br><span class=\"line\">//用lambda，报错</span><br><span class=\"line\">lines.mapToPair(v -&gt; new Tuple2&lt;Integer, Integer&gt;(1, 1)).take(200).forEach(v -&gt; System.out.println(v));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误信息：\"><a href=\"#错误信息：\" class=\"headerlink\" title=\"错误信息：\"></a>错误信息：</h3><blockquote>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17/12/12 16:00:53 WARN TaskSetManager: Lost task 0.0 in stage 1.0 (TID 1, 10.103.244.216): java.io.IOException: unexpected exception type</span><br><span class=\"line\">\tat java.io.ObjectStreamClass.throwMiscException(ObjectStreamClass.java:1582)</span><br><span class=\"line\">\tat java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1154)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2022)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:422)</span><br><span class=\"line\">\tat org.apache.spark.serializer.JavaDeserializationStream.readObject(JavaSerializer.scala:76)</span><br><span class=\"line\">\tat org.apache.spark.serializer.JavaSerializerInstance.deserialize(JavaSerializer.scala:115)</span><br><span class=\"line\">\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:61)</span><br><span class=\"line\">\tat org.apache.spark.scheduler.Task.run(Task.scala:89)</span><br><span class=\"line\">\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:213)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745)</span><br><span class=\"line\">Caused by: java.lang.NoSuchMethodException: TestSUANZI.test.$deserializeLambda$(java.lang.invoke.SerializedLambda)</span><br><span class=\"line\">\tat java.lang.Class.getDeclaredMethod(Class.java:2130)</span><br><span class=\"line\">\tat java.lang.invoke.SerializedLambda$1.run(SerializedLambda.java:224)</span><br><span class=\"line\">\tat java.lang.invoke.SerializedLambda$1.run(SerializedLambda.java:221)</span><br><span class=\"line\">\tat java.security.AccessController.doPrivileged(Native Method)</span><br><span class=\"line\">\tat java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:221)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1148)</span><br><span class=\"line\">\t... 27 more</span><br><span class=\"line\"></span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.1 in stage 1.0 (TID 2, 10.103.244.216, partition 0,ANY, 2193 bytes)</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.1 in stage 1.0 (TID 2) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 1]</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.2 in stage 1.0 (TID 3, 10.103.244.216, partition 0,ANY, 2193 bytes)</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.2 in stage 1.0 (TID 3) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 2]</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.3 in stage 1.0 (TID 4, 10.103.244.216, partition 0,ANY, 2193 bytes)</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.3 in stage 1.0 (TID 4) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 3]</span><br><span class=\"line\">17/12/12 16:00:53 ERROR TaskSetManager: Task 0 in stage 1.0 failed 4 times; aborting job</span><br></pre></td></tr></table></figure>\n\n<p>目前的解决方法是实现Serializable这个接口。</p>\n<p>有时间读一下<br><a href=\"https://www.zhihu.com/question/51491241/answer/126232275\">https://www.zhihu.com/question/51491241/answer/126232275</a></p>\n","length":4509,"excerpt":"","more":"<h1 id=\"Lambda序列化问题\"><a href=\"#Lambda序列化问题\" class=\"headerlink\" title=\"Lambda序列化问题\"></a>Lambda序列化问题</h1><p>这几天用spark遇到一个问题，到现在仍没有解决，不过查到了一些思路，可能与序列化有关。</p>\n<h3 id=\"先上代码\"><a href=\"#先上代码\" class=\"headerlink\" title=\"先上代码\"></a>先上代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不用Lambda，没有问题</span><br><span class=\"line\">lines.mapToPair(new PairFunction&lt;String, Integer, Integer&gt;() &#123;</span><br><span class=\"line\">\t\t\tprivate static final long serialVersionUID = 1323L;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Tuple2&lt;Integer, Integer&gt; call(String word) throws Exception &#123;</span><br><span class=\"line\">\t\t\t\treturn new Tuple2&lt;Integer, Integer&gt;(1, 1);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;).take(200).forEach(v -&gt; System.out.println(v));</span><br><span class=\"line\">//用lambda，报错</span><br><span class=\"line\">lines.mapToPair(v -&gt; new Tuple2&lt;Integer, Integer&gt;(1, 1)).take(200).forEach(v -&gt; System.out.println(v));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误信息：\"><a href=\"#错误信息：\" class=\"headerlink\" title=\"错误信息：\"></a>错误信息：</h3><blockquote>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">17/12/12 16:00:53 WARN TaskSetManager: Lost task 0.0 in stage 1.0 (TID 1, 10.103.244.216): java.io.IOException: unexpected exception type</span><br><span class=\"line\">\tat java.io.ObjectStreamClass.throwMiscException(ObjectStreamClass.java:1582)</span><br><span class=\"line\">\tat java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1154)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2022)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2231)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2155)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2013)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)</span><br><span class=\"line\">\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:422)</span><br><span class=\"line\">\tat org.apache.spark.serializer.JavaDeserializationStream.readObject(JavaSerializer.scala:76)</span><br><span class=\"line\">\tat org.apache.spark.serializer.JavaSerializerInstance.deserialize(JavaSerializer.scala:115)</span><br><span class=\"line\">\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:61)</span><br><span class=\"line\">\tat org.apache.spark.scheduler.Task.run(Task.scala:89)</span><br><span class=\"line\">\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:213)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:745)</span><br><span class=\"line\">Caused by: java.lang.NoSuchMethodException: TestSUANZI.test.$deserializeLambda$(java.lang.invoke.SerializedLambda)</span><br><span class=\"line\">\tat java.lang.Class.getDeclaredMethod(Class.java:2130)</span><br><span class=\"line\">\tat java.lang.invoke.SerializedLambda$1.run(SerializedLambda.java:224)</span><br><span class=\"line\">\tat java.lang.invoke.SerializedLambda$1.run(SerializedLambda.java:221)</span><br><span class=\"line\">\tat java.security.AccessController.doPrivileged(Native Method)</span><br><span class=\"line\">\tat java.lang.invoke.SerializedLambda.readResolve(SerializedLambda.java:221)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat java.io.ObjectStreamClass.invokeReadResolve(ObjectStreamClass.java:1148)</span><br><span class=\"line\">\t... 27 more</span><br><span class=\"line\"></span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.1 in stage 1.0 (TID 2, 10.103.244.216, partition 0,ANY, 2193 bytes)</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.1 in stage 1.0 (TID 2) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 1]</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.2 in stage 1.0 (TID 3, 10.103.244.216, partition 0,ANY, 2193 bytes)</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.2 in stage 1.0 (TID 3) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 2]</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Starting task 0.3 in stage 1.0 (TID 4, 10.103.244.216, partition 0,ANY, 2193 bytes)</span><br><span class=\"line\">17/12/12 16:00:53 INFO TaskSetManager: Lost task 0.3 in stage 1.0 (TID 4) on executor 10.103.244.216: java.io.IOException (unexpected exception type) [duplicate 3]</span><br><span class=\"line\">17/12/12 16:00:53 ERROR TaskSetManager: Task 0 in stage 1.0 failed 4 times; aborting job</span><br></pre></td></tr></table></figure>\n\n<p>目前的解决方法是实现Serializable这个接口。</p>\n<p>有时间读一下<br><a href=\"https://www.zhihu.com/question/51491241/answer/126232275\">https://www.zhihu.com/question/51491241/answer/126232275</a></p>\n"},{"title":"ReentrantLock(重入锁)的源码解析","date":"2019-06-13T14:41:08.000Z","photos":["https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true"],"description":"从源码角度彻底理解ReentrantLock(重入锁)","_content":"\n转自：[从源码角度彻底理解ReentrantLock(重入锁)]([从源码角度彻底理解ReentrantLock(重入锁)](https://www.cnblogs.com/takumicx/p/9402021.html))\n\n# 1. 类继承关系\n\n公平锁内部是FairSync,非公平锁内部是NonfairSync。而不管是FairSync还是NonfariSync,都间接继承自AbstractQueuedSynchronizer这个抽象类，如下图所示\n\n![NonfairSync的类继承关系，FairSync同](/image/ReentrantLock/继承关系.png)\n\n# 2. 非公平锁加锁流程\n\n加锁流程从`lock.lock()`开始\n\n```java\npublic void lock() {\n    sync.lock();\n}\n```\n\n## 1. 加锁流程真正意义上的入口\n\n```java\n/**\n * Performs lock.  Try immediate barge, backing up to normal\n * acquire on failure.\n */\n//加锁流程真正意义上的入口\nfinal void lock() {\n    //以cas方式尝试将AQS中的state从0更新为1\n    if (compareAndSetState(0, 1))\n        setExclusiveOwnerThread(Thread.currentThread());//获取锁成功则将当前线程标记为持有锁的线程,然后直接返回\n    else\n        acquire(1);//获取锁失败则执行该方法\n}\n```\n\n首先尝试快速获取锁,以cas的方式将state的值更新为1,只有当state的原值为0时更新才能成功,因为state在ReentrantLock的语境下等同于锁被线程重入的次数,这意味着只有当前锁未被任何线程持有时该动作才会返回成功。若获取锁成功,则将当前线程标记为持有锁的线程,然后整个加锁流程就结束了。若获取锁失败,则执行acquire方法\n\n```java\n/**\n * Acquires in exclusive mode, ignoring interrupts.  Implemented\n * by invoking at least once {@link #tryAcquire},\n * returning on success.  Otherwise the thread is queued, possibly\n * repeatedly blocking and unblocking, invoking {@link\n * #tryAcquire} until success.  This method can be used\n * to implement method {@link Lock#lock}.\n *\n * @param arg the acquire argument.  This value is conveyed to\n *        {@link #tryAcquire} but is otherwise uninterpreted and\n *        can represent anything you like.\n */\npublic final void acquire(int arg) {\n    if (!tryAcquire(arg) &&\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n        selfInterrupt();\n}\n```\n\n该方法主要的逻辑都在if判断条件中,这里面有3个重要的方法tryAcquire()，addWaiter()和acquireQueued()，这三个方法中分别封装了加锁流程中的主要处理逻辑，理解了这三个方法到底做了哪些事情，整个加锁流程就清晰了。\n\n## 2. 尝试获取锁的通用方法:tryAcquire()\n\ntryAcquire是AQS中定义的钩子方法,如下所示\n\n```java\nprotected boolean tryAcquire(int arg) {\n    throw new UnsupportedOperationException();\n}\n```\n\n该方法默认会抛出异常,强制同步组件通过扩展AQS来实现同步功能的时候必须重写该方法,ReentrantLock在公平和非公平模式下对此有不同实现,非公平模式的实现如下：\n\n```java\nprotected final boolean tryAcquire(int acquires) {\n    return nonfairTryAcquire(acquires);\n}\n```\n\n底层调用了nonfairTryAcquire()\n从方法名上我们就可以知道这是非公平模式下尝试获取锁的方法,具体方法实现如下\n\n```java\n/**\n * Performs non-fair tryLock.  tryAcquire is implemented in\n * subclasses, but both need nonfair try for trylock method.\n */\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();//获取当前线程实例\n    int c = getState();//获取state变量的值,即当前锁被重入的次数\n    if (c == 0) {   //state为0,说明当前锁未被任何线程持有\n        if (compareAndSetState(0, acquires)) { //以cas方式获取锁\n            setExclusiveOwnerThread(current);  //将当前线程标记为持有锁的线程\n            return true;//获取锁成功,非重入\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) { //当前线程就是持有锁的线程,说明该锁被重入了\n        int nextc = c + acquires;//计算state变量要更新的值\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);//非同步方式更新state值\n        return true;  //获取锁成功,重入\n    }\n    return false;     //走到这里说明尝试获取锁失败\n}\n```\n\n这是非公平模式下获取锁的通用方法。它囊括了当前线程在尝试获取锁时的所有可能情况：\n\n- 1.当前锁未被任何线程持有(state=0),则以cas方式获取锁,若获取成功则设置exclusiveOwnerThread为当前线程,然后返回成功的结果；若cas失败,说明在得到state=0和cas获取锁之间有其他线程已经获取了锁,返回失败结果。\n- 2.若锁已经被当前线程获取(state>0,exclusiveOwnerThread为当前线程),则将锁的重入次数加1(state+1),然后返回成功结果。因为该线程之前已经获得了锁,所以这个累加操作不用同步。\n- 3.若当前锁已经被其他线程持有(state>0,exclusiveOwnerThread不为当前线程),则直接返回失败结果\n\n因为我们用state来统计锁被线程重入的次数,所以当前线程尝试获取锁的操作是否成功可以简化为:state值是否成功累加1,是则尝试获取锁成功,否则尝试获取锁失败。\n\n其实这里还可以思考一个问题:nonfairTryAcquire已经实现了一个囊括所有可能情况的尝试获取锁的方式,为何在刚进入lock方法时还要通过compareAndSetState(0, 1)去获取锁,毕竟后者只有在锁未被任何线程持有时才能执行成功,我们完全可以把compareAndSetState(0, 1)去掉,对最后的结果不会有任何影响。这种在进行通用逻辑处理之前针对某些特殊情况提前进行处理的方式在后面还会看到,一个直观的想法就是它能提升性能，而代价是牺牲一定的代码简洁性。\n\n退回到上层的acquire方法,\n\n```java\npublic final void acquire(int arg) {\n    if (!tryAcquire(arg) &&  //当前线程尝试获取锁,若获取成功返回true,否则false\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))  //只有当前线程获取锁失败才会执行者这部分代码\n        selfInterrupt();\n}\n```\n\ntryAcquire(arg)返回成功,则说明当前线程成功获取了锁(第一次获取或者重入),由取反和&&可知,整个流程到这结束，只有当前线程获取锁失败才会执行后面的判断。先来看addWaiter(Node.EXCLUSIVE)\n部分,这部分代码描述了当线程获取锁失败时如何安全的加入同步等待队列。这部分代码可以说是整个加锁流程源码的精华,充分体现了并发编程的艺术性。\n\n## 3. 获取锁失败的线程如何安全的加入同步队列:addWaiter()\n\n这部分逻辑在addWaiter()方法中\n\n```java\n/**\n * Creates and enqueues node for current thread and given mode.\n *\n * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared\n * @return the new node\n */\nprivate Node addWaiter(Node mode) {\n    Node node = new Node(Thread.currentThread(), mode);//首先创建一个新节点,并将当前线程实例封装在内部,mode这里为null\n    // Try the fast path of enq; backup to full enq on failure\n    Node pred = tail;\n    if (pred != null) {\n        node.prev = pred;\n        if (compareAndSetTail(pred, node)) {\n            pred.next = node;\n            return node;\n        }\n    }\n    enq(node);//入队的逻辑这里都有\n    return node;\n}\n```\n\n首先创建了一个新节点,并将当前线程实例封装在其内部,之后我们直接看enq(node)方法就可以了,中间这部分逻辑在enq(node)中都有,之所以加上这部分“重复代码”和尝试获取锁时的“重复代码”一样,对某些特殊情况\n进行提前处理,牺牲一定的代码可读性换取性能提升。\n\n```java\n/**\n * Inserts node into queue, initializing if necessary. See picture above.\n * @param node the node to insert\n * @return node's predecessor\n */\nprivate Node enq(final Node node) {\n    for (;;) {\n        Node t = tail;//t指向当前队列的最后一个节点,队列为空则为null\n        if (t == null) { // Must initialize  //队列为空\n            if (compareAndSetHead(new Node())) //构造新结点,CAS方式设置为队列首元素,当head==null时更新成功\n                tail = head;//尾指针指向首结点\n        } else {  //队列不为空\n            node.prev = t;\n            if (compareAndSetTail(t, node)) { //CAS将尾指针指向当前结点,当t(原来的尾指针)==tail(当前真实的尾指针)时执行成功\n                t.next = node;    //原尾结点的next指针指向当前结点\n                return t;\n            }\n        }\n    }\n}\n```\n\n这里有两个CAS操作:\n\n- compareAndSetHead(new Node()),CAS方式更新head指针,仅当原值为null时更新成功\n\n```java\n/**\n * CAS head field. Used only by enq.\n */\nprivate final boolean compareAndSetHead(Node update) {\n    return unsafe.compareAndSwapObject(this, headOffset, null, update);\n}\n```\n\n- compareAndSetTail(t, node),CAS方式更新tial指针,仅当原值为t时更新成功\n\n```java\n/**\n * CAS tail field. Used only by enq.\n */\nprivate final boolean compareAndSetTail(Node expect, Node update) {\n    return unsafe.compareAndSwapObject(this, tailOffset, expect, update);\n}\n```\n\n外层的for循环保证了所有获取锁失败的线程经过失败重试后最后都能加入同步队列。因为AQS的同步队列是不带哨兵结点的,故当队列为空时要进行特殊处理,这部分在if分句中。注意当前线程所在的结点不能直接插入\n空队列,因为阻塞的线程是由前驱结点进行唤醒的。故先要插入一个结点作为队列首元素,当锁释放时由它来唤醒后面被阻塞的线程,从逻辑上这个队列首元素也可以表示当前正获取锁的线程,虽然并不一定真实持有其线程实例。\n\n首先通过new Node()创建一个空结点，然后以CAS方式让头指针指向该结点(该结点并非当前线程所在的结点),若该操作成功,则将尾指针也指向该结点。这部分的操作流程可以用下图表示\n\n![操作流程](/image/ReentrantLock/enq.png)\n\n当队列不为空,则执行通用的入队逻辑,这部分在else分句中\n\n```java\nelse {\n            node.prev = t;//step1:待插入结点pre指针指向原尾结点\n            if (compareAndSetTail(t, node)) { step2:CAS方式更改尾指针\n                t.next = node; //原尾结点next指针指向新的结点\n                return t;\n            }\n        }\n```\n\n首先当前线程所在的结点的前向指针pre指向当前线程认为的尾结点,源码中用t表示。然后以CAS的方式将尾指针指向当前结点,该操作仅当tail=t,即尾指针在进行CAS前未改变时成功。若CAS执行成功,则将原尾结点的后向指针next指向新的尾结点。\n\n到这为止,获取锁失败的线程加入同步队列的逻辑就结束了。但是线程加入同步队列后会做什么我们并不清楚,这部分在acquireQueued方法中。\n\n## 4. 线程加入同步队列后会做什么:acquireQueued()\n\n先看acquireQueued方法的源码\n\n```java\n/**\n * Acquires in exclusive uninterruptible mode for thread already in\n * queue. Used by condition wait methods as well as acquire.\n *\n * @param node the node\n * @param arg the acquire argument\n * @return {@code true} if interrupted while waiting\n */\nfinal boolean acquireQueued(final Node node, int arg) {\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        //死循环,正常情况下线程只有获得锁才能跳出循环\n        for (;;) {\n            final Node p = node.predecessor();//获得当前线程所在结点的前驱结点\n            //第一个if分句\n            if (p == head && tryAcquire(arg)) { \n                setHead(node); //将当前结点设置为队列头结点\n                p.next = null; // help GC\n                failed = false;\n                return interrupted;//正常情况下死循环唯一的出口\n            }\n            //第二个if分句\n            if (shouldParkAfterFailedAcquire(p, node) &&  //判断是否要阻塞当前线程\n                parkAndCheckInterrupt())      //阻塞当前线程\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n\n这段代码主要的内容都在for循环中,这是一个死循环,主要有两个if分句构成。第一个if分句中,当前线程首先会判断前驱结点是否是头结点,如果是则尝试获取锁,获取锁成功则会设置当前结点为头结点(更新头指针)。为什么必须前驱结点为头结点才尝试去获取锁？因为头结点表示当前正占有锁的线程,正常情况下该线程释放锁后会通知后面结点中阻塞的线程,阻塞线程被唤醒后去获取锁,这是我们希望看到的。然而还有一种情况,就是前驱结点取消了等待,此时当前线程也会被唤醒,这时候就不应该去获取锁,而是往前回溯一直找到一个没有取消等待的结点,然后将自身连接在它后面。一旦我们成功获取了锁并成功将自身设置为头结点,就会跳出for循环。否则就会执行第二个if分句:确保前驱结点的状态为SIGNAL,然后阻塞当前线程。\n\n先来看shouldParkAfterFailedAcquire(p, node)，从方法名上我们可以大概猜出这是判断是否要阻塞当前线程的,方法内容如下\n\n```java\n/**\n * Checks and updates status for a node that failed to acquire.\n * Returns true if thread should block. This is the main signal\n * control in all acquire loops.  Requires that pred == node.prev.\n *\n * @param pred node's predecessor holding status\n * @param node the node\n * @return {@code true} if thread should block\n */\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL) //状态为SIGNAL\n\n        /*\n         * This node has already set status asking a release\n         * to signal it, so it can safely park.\n         */\n        return true;\n    if (ws > 0) { //状态为CANCELLED,\n        /*\n         * Predecessor was cancelled. Skip over predecessors and\n         * indicate retry.\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else { //状态为初始化状态(ReentrentLock语境下)\n        /*\n         * waitStatus must be 0 or PROPAGATE.  Indicate that we\n         * need a signal, but don't park yet.  Caller will need to\n         * retry to make sure it cannot acquire before parking.\n         */\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}\n```\n\n可以看到针对前驱结点pred的状态会进行不同的处理\n\n- 1.pred状态为SIGNAL,则返回true,表示要阻塞当前线程。\n- 2.pred状态为CANCELLED,则一直往队列头部回溯直到找到一个状态不为CANCELLED的结点,将当前节点node挂在这个结点的后面。\n- 3.pred的状态为初始化状态,此时通过compareAndSetWaitStatus(pred, ws, Node.SIGNAL)方法将pred的状态改为SIGNAL。\n\n其实这个方法的含义很简单,就是确保当前结点的前驱结点的状态为SIGNAL,SIGNAL意味着线程释放锁后会唤醒后面阻塞的线程。毕竟,只有确保能够被唤醒，当前线程才能放心的阻塞。\n\n但是要注意只有在前驱结点已经是SIGNAL状态后才会执行后面的方法立即阻塞,对应上面的第一种情况。其他两种情况则因为返回false而重新执行一遍\nfor循环。这种延迟阻塞其实也是一种高并发场景下的优化,试想我如果在重新执行循环的时候成功获取了锁,是不是线程阻塞唤醒的开销就省了呢？\n\n最后我们来看看阻塞线程的方法parkAndCheckInterrupt\n\nshouldParkAfterFailedAcquire返回true表示应该阻塞当前线程,则会执行parkAndCheckInterrupt方法,这个方法比较简单,底层调用了LockSupport来阻塞当前线程,源码如下:\n\n```java\n/**\n * Convenience method to park and then check if interrupted\n *\n * @return {@code true} if interrupted\n */\nprivate final boolean parkAndCheckInterrupt() {\n    LockSupport.park(this);\n    return Thread.interrupted();\n}\n```\n\n该方法内部通过调用LockSupport的park方法来阻塞当前线程,不清楚LockSupport的可以看看这里。[LockSupport功能简介及原理浅析](https://www.cnblogs.com/takumicx/p/9328459.html)\n\n下面通过一张流程图来说明线程从加入同步队列到成功获取锁的过程\n\n![加入同步队列到成功获取锁的过程](/image/ReentrantLock/加入同步队列到成功获取锁的过程.png)\n\n概括的说,线程在同步队列中会尝试获取锁,失败则被阻塞,被唤醒后会不停的重复这个过程,直到线程真正持有了锁,并将自身结点置于队列头部。\n\n## 5. ReentrantLock非公平模式下的加锁流程\n\n![非公平模式下的加锁流程](/image/ReentrantLock/非公平模式下的加锁流程.png)\n\n# 3. 非公平模式解锁流程\n\n解锁的源码相对简单,源码如下：\n\n```java\npublic void unlock() {\n    sync.release(1);  \n}\npublic final boolean release(int arg) {\n    if (tryRelease(arg)) { //释放锁(state-1),若释放后锁可被其他线程获取(state=0),返回true\n        Node h = head;\n        //当前队列不为空且头结点状态不为初始化状态(0)   \n        if (h != null && h.waitStatus != 0)\n            unparkSuccessor(h);  //唤醒同步队列中被阻塞的线程\n        return true;\n    }\n    return false;\n}\n```\n\n正确找到sync的实现类,找到真正的入口方法,主要内容都在一个if语句中,先看下判断条件tryRelease方法\n\n```java\nprotected final boolean tryRelease(int releases) {\n    int c = getState() - releases; //计算待更新的state值\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        throw new IllegalMonitorStateException();\n    boolean free = false;\n    if (c == 0) { //待更新的state值为0,说明持有锁的线程未重入,一旦释放锁其他线程将能获取\n        free = true; \n        setExclusiveOwnerThread(null);//清除锁的持有线程标记\n    }\n    setState(c);//更新state值\n    return free;\n}\n```\n\ntryRelease其实只是将线程持有锁的次数减1,即将state值减1,若减少后线程将完全释放锁(state值为0),则该方法将返回true,否则返回false。由于执行该方法的线程必然持有锁,故该方法不需要任何同步操作。\n若当前线程已经完全释放锁,即锁可被其他线程使用,则还应该唤醒后续等待线程。不过在此之前需要进行两个条件的判断：\n\n- h!=null是为了防止队列为空,即没有任何线程处于等待队列中,那么也就不需要进行唤醒的操作\n- h.waitStatus != 0是为了防止队列中虽有线程,但该线程还未阻塞,由前面的分析知,线程在阻塞自己前必须设置前驱结点的状态为SIGNAL,否则它不会阻塞自己。\n\n接下来就是唤醒线程的操作,unparkSuccessor(h)源码如下\n\n```java\nprivate void unparkSuccessor(Node node) {\n    /*\n     * If status is negative (i.e., possibly needing signal) try\n     * to clear in anticipation of signalling.  It is OK if this\n     * fails or if status is changed by waiting thread.\n     */\n    int ws = node.waitStatus;\n    if (ws < 0)\n        compareAndSetWaitStatus(node, ws, 0);\n\n    /*\n     * Thread to unpark is held in successor, which is normally\n     * just the next node.  But if cancelled or apparently null,\n     * traverse backwards from tail to find the actual\n     * non-cancelled successor.\n     */\n    Node s = node.next;\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    if (s != null)\n        LockSupport.unpark(s.thread);\n}\n```\n\n一般情况下只要唤醒后继结点的线程就行了,但是后继结点可能已经取消等待,所以从队列尾部往前回溯,找到离头结点最近的正常结点,并唤醒其线程。\n\n 流程图\n\n![非公平模式下的解锁流程](/image/ReentrantLock/解锁流程.png)\n\n# 4. 公平锁模式\n\n公平锁模式下,对锁的获取有严格的条件限制。在同步队列有线程等待的情况下,所有线程在获取锁前必须先加入同步队列。队列中的线程按加入队列的先后次序获得锁。\n从公平锁加锁的入口开始\n\n```java\nfinal void lock(){\n    acquire(1);\n}\n```\n\n对比非公平锁,少了非重入式获取锁的方法,这是第一个不同点\n\n接着看获取锁的通用方法tryAcquire(),该方法在线程未进入队列,加入队列阻塞前和阻塞后被唤醒时都会执行。\n\n![公平锁tryAcquire](/image/ReentrantLock/公平锁tryAcquire.png)\n\n在真正CAS获取锁之前加了判断,内容如下\n\n```java\npublic final boolean hasQueuedPredecessors() {\n    // The correctness of this depends on head being initialized\n    // before tail and on head.next being accurate if the current\n    // thread is first in queue.\n    Node t = tail; // Read fields in reverse initialization order\n    Node h = head;\n    Node s;\n    return h != t &&\n        ((s = h.next) == null || s.thread != Thread.currentThread());\n}\n```\n\n从方法名我们就可知道这是判断队列中是否有优先级更高的等待线程,队列中哪个线程优先级最高？由于头结点是当前获取锁的线程,队列中的第二个结点代表的线程优先级最高。\n那么我们只要判断队列中第二个结点是否存在以及这个结点是否代表当前线程就行了。这里分了两种情况进行探讨:\n\n1. 第二个结点已经完全插入,但是这个结点是否就是当前线程所在结点还未知,所以通过s.thread != Thread.currentThread()进行判断,如果为true,说明第二个结点代表其他线程。\n2. 第二个结点并未完全插入,我们知道结点入队一共分三步：\n\n- 1.待插入结点的pre指针指向原尾结点\n- 2.CAS更新尾指针\n- 3.原尾结点的next指针指向新插入结点\n\n所以(s = h.next) == null 就是用来判断2刚执行成功但还未执行3这种情况的。这种情况第二个结点必然属于其他线程。\n以上两种情况都会使该方法返回true,即当前有优先级更高的线程在队列中等待,那么当前线程将不会执行CAS操作去获取锁,保证了线程获取锁的顺序与加入同步队列的顺序一致，很好的保证了公平性,但也增加了获取锁的成本。\n\n# 5. 为什么基于FIFO的同步队列可以实现非公平锁？\n\n由FIFO队列的特性知,先加入同步队列等待的线程会比后加入的线程更靠近队列的头部,那么它将比后者更早的被唤醒,它也就能更早的得到锁。从这个意义上,对于在同步队列中等待的线程而言,它们获得锁的顺序和加入同步队列的顺序一致，这显然是一种公平模式。然而,线程并非只有在加入队列后才有机会获得锁,哪怕同步队列中已有线程在等待,非公平锁的不公平之处就在于此。回看下非公平锁的加锁流程,线程在进入同步队列等待之前有两次抢占锁的机会:\n\n- 第一次是非重入式的获取锁,只有在当前锁未被任何线程占有(包括自身)时才能成功;\n- 第二次是在进入同步队列前,包含所有情况的获取锁的方式。\n\n只有这两次获取锁都失败后,线程才会构造结点并加入同步队列等待。而线程释放锁时是先释放锁(修改state值),然后才唤醒后继结点的线程的。试想下这种情况,线程A已经释放锁,但还没来得及唤醒后继线程C,而这时另一个线程B刚好尝试获取锁,此时锁恰好不被任何线程持有,它将成功获取锁而不用加入队列等待。线程C被唤醒尝试获取锁,而此时锁已经被线程B抢占,故而其获取失败并继续在队列中等待。整个过程如下图所示\n\n![抢占](/image/ReentrantLock/抢占.png)\n\n如果以线程第一次尝试获取锁到最后成功获取锁的次序来看,非公平锁确实很不公平。因为在队列中等待很久的线程相比还未进入队列等待的线程并没有优先权,甚至竞争也处于劣势:在队列中的线程要等待其他线程唤醒,在获取锁之前还要检查前驱结点是否为头结点。在锁竞争激烈的情况下,在队列中等待的线程可能迟迟竞争不到锁。这也就非公平在高并发情况下会出现的饥饿问题。那我们再开发中为什么大多使用会导致饥饿的非公平锁？很简单,因为它性能好啊。\n\n# 6. 为什么非公平锁性能好\n\n非公平锁对锁的竞争是抢占式的(队列中线程除外),线程在进入等待队列前可以进行两次尝试,这大大增加了获取锁的机会。这种好处体现在两个方面:\n\n- 1.线程不必加入等待队列就可以获得锁,不仅免去了构造结点并加入队列的繁琐操作,同时也节省了线程阻塞唤醒的开销,线程阻塞和唤醒涉及到线程上下文的切换和操作系统的系统调用,是非常耗时的。在高并发情况下,如果线程持有锁的时间非常短,短到线程入队阻塞的过程超过线程持有并释放锁的时间开销,那么这种抢占式特性对并发性能的提升会更加明显。\n- 2.减少CAS竞争。如果线程必须要加入阻塞队列才能获取锁,那入队时CAS竞争将变得异常激烈,CAS操作虽然不会导致失败线程挂起,但不断失败重试导致的对CPU的浪费也不能忽视。除此之外,加锁流程中至少有两处通过将某些特殊情况提前来减少CAS操作的竞争,增加并发情况下的性能。一处就是获取锁时将非重入的情况提前\n\n","source":"_posts/ReentrantLock-重入锁-的源码解析.md","raw":"---\ntitle: ReentrantLock(重入锁)的源码解析\ndate: 2019-06-13 22:41:08\ntags: [Java,并发编程]\ncategories: Java\nphotos:\n  - \"https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true\"\ndescription: 从源码角度彻底理解ReentrantLock(重入锁)\n---\n\n转自：[从源码角度彻底理解ReentrantLock(重入锁)]([从源码角度彻底理解ReentrantLock(重入锁)](https://www.cnblogs.com/takumicx/p/9402021.html))\n\n# 1. 类继承关系\n\n公平锁内部是FairSync,非公平锁内部是NonfairSync。而不管是FairSync还是NonfariSync,都间接继承自AbstractQueuedSynchronizer这个抽象类，如下图所示\n\n![NonfairSync的类继承关系，FairSync同](/image/ReentrantLock/继承关系.png)\n\n# 2. 非公平锁加锁流程\n\n加锁流程从`lock.lock()`开始\n\n```java\npublic void lock() {\n    sync.lock();\n}\n```\n\n## 1. 加锁流程真正意义上的入口\n\n```java\n/**\n * Performs lock.  Try immediate barge, backing up to normal\n * acquire on failure.\n */\n//加锁流程真正意义上的入口\nfinal void lock() {\n    //以cas方式尝试将AQS中的state从0更新为1\n    if (compareAndSetState(0, 1))\n        setExclusiveOwnerThread(Thread.currentThread());//获取锁成功则将当前线程标记为持有锁的线程,然后直接返回\n    else\n        acquire(1);//获取锁失败则执行该方法\n}\n```\n\n首先尝试快速获取锁,以cas的方式将state的值更新为1,只有当state的原值为0时更新才能成功,因为state在ReentrantLock的语境下等同于锁被线程重入的次数,这意味着只有当前锁未被任何线程持有时该动作才会返回成功。若获取锁成功,则将当前线程标记为持有锁的线程,然后整个加锁流程就结束了。若获取锁失败,则执行acquire方法\n\n```java\n/**\n * Acquires in exclusive mode, ignoring interrupts.  Implemented\n * by invoking at least once {@link #tryAcquire},\n * returning on success.  Otherwise the thread is queued, possibly\n * repeatedly blocking and unblocking, invoking {@link\n * #tryAcquire} until success.  This method can be used\n * to implement method {@link Lock#lock}.\n *\n * @param arg the acquire argument.  This value is conveyed to\n *        {@link #tryAcquire} but is otherwise uninterpreted and\n *        can represent anything you like.\n */\npublic final void acquire(int arg) {\n    if (!tryAcquire(arg) &&\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n        selfInterrupt();\n}\n```\n\n该方法主要的逻辑都在if判断条件中,这里面有3个重要的方法tryAcquire()，addWaiter()和acquireQueued()，这三个方法中分别封装了加锁流程中的主要处理逻辑，理解了这三个方法到底做了哪些事情，整个加锁流程就清晰了。\n\n## 2. 尝试获取锁的通用方法:tryAcquire()\n\ntryAcquire是AQS中定义的钩子方法,如下所示\n\n```java\nprotected boolean tryAcquire(int arg) {\n    throw new UnsupportedOperationException();\n}\n```\n\n该方法默认会抛出异常,强制同步组件通过扩展AQS来实现同步功能的时候必须重写该方法,ReentrantLock在公平和非公平模式下对此有不同实现,非公平模式的实现如下：\n\n```java\nprotected final boolean tryAcquire(int acquires) {\n    return nonfairTryAcquire(acquires);\n}\n```\n\n底层调用了nonfairTryAcquire()\n从方法名上我们就可以知道这是非公平模式下尝试获取锁的方法,具体方法实现如下\n\n```java\n/**\n * Performs non-fair tryLock.  tryAcquire is implemented in\n * subclasses, but both need nonfair try for trylock method.\n */\nfinal boolean nonfairTryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();//获取当前线程实例\n    int c = getState();//获取state变量的值,即当前锁被重入的次数\n    if (c == 0) {   //state为0,说明当前锁未被任何线程持有\n        if (compareAndSetState(0, acquires)) { //以cas方式获取锁\n            setExclusiveOwnerThread(current);  //将当前线程标记为持有锁的线程\n            return true;//获取锁成功,非重入\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) { //当前线程就是持有锁的线程,说明该锁被重入了\n        int nextc = c + acquires;//计算state变量要更新的值\n        if (nextc < 0) // overflow\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);//非同步方式更新state值\n        return true;  //获取锁成功,重入\n    }\n    return false;     //走到这里说明尝试获取锁失败\n}\n```\n\n这是非公平模式下获取锁的通用方法。它囊括了当前线程在尝试获取锁时的所有可能情况：\n\n- 1.当前锁未被任何线程持有(state=0),则以cas方式获取锁,若获取成功则设置exclusiveOwnerThread为当前线程,然后返回成功的结果；若cas失败,说明在得到state=0和cas获取锁之间有其他线程已经获取了锁,返回失败结果。\n- 2.若锁已经被当前线程获取(state>0,exclusiveOwnerThread为当前线程),则将锁的重入次数加1(state+1),然后返回成功结果。因为该线程之前已经获得了锁,所以这个累加操作不用同步。\n- 3.若当前锁已经被其他线程持有(state>0,exclusiveOwnerThread不为当前线程),则直接返回失败结果\n\n因为我们用state来统计锁被线程重入的次数,所以当前线程尝试获取锁的操作是否成功可以简化为:state值是否成功累加1,是则尝试获取锁成功,否则尝试获取锁失败。\n\n其实这里还可以思考一个问题:nonfairTryAcquire已经实现了一个囊括所有可能情况的尝试获取锁的方式,为何在刚进入lock方法时还要通过compareAndSetState(0, 1)去获取锁,毕竟后者只有在锁未被任何线程持有时才能执行成功,我们完全可以把compareAndSetState(0, 1)去掉,对最后的结果不会有任何影响。这种在进行通用逻辑处理之前针对某些特殊情况提前进行处理的方式在后面还会看到,一个直观的想法就是它能提升性能，而代价是牺牲一定的代码简洁性。\n\n退回到上层的acquire方法,\n\n```java\npublic final void acquire(int arg) {\n    if (!tryAcquire(arg) &&  //当前线程尝试获取锁,若获取成功返回true,否则false\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))  //只有当前线程获取锁失败才会执行者这部分代码\n        selfInterrupt();\n}\n```\n\ntryAcquire(arg)返回成功,则说明当前线程成功获取了锁(第一次获取或者重入),由取反和&&可知,整个流程到这结束，只有当前线程获取锁失败才会执行后面的判断。先来看addWaiter(Node.EXCLUSIVE)\n部分,这部分代码描述了当线程获取锁失败时如何安全的加入同步等待队列。这部分代码可以说是整个加锁流程源码的精华,充分体现了并发编程的艺术性。\n\n## 3. 获取锁失败的线程如何安全的加入同步队列:addWaiter()\n\n这部分逻辑在addWaiter()方法中\n\n```java\n/**\n * Creates and enqueues node for current thread and given mode.\n *\n * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared\n * @return the new node\n */\nprivate Node addWaiter(Node mode) {\n    Node node = new Node(Thread.currentThread(), mode);//首先创建一个新节点,并将当前线程实例封装在内部,mode这里为null\n    // Try the fast path of enq; backup to full enq on failure\n    Node pred = tail;\n    if (pred != null) {\n        node.prev = pred;\n        if (compareAndSetTail(pred, node)) {\n            pred.next = node;\n            return node;\n        }\n    }\n    enq(node);//入队的逻辑这里都有\n    return node;\n}\n```\n\n首先创建了一个新节点,并将当前线程实例封装在其内部,之后我们直接看enq(node)方法就可以了,中间这部分逻辑在enq(node)中都有,之所以加上这部分“重复代码”和尝试获取锁时的“重复代码”一样,对某些特殊情况\n进行提前处理,牺牲一定的代码可读性换取性能提升。\n\n```java\n/**\n * Inserts node into queue, initializing if necessary. See picture above.\n * @param node the node to insert\n * @return node's predecessor\n */\nprivate Node enq(final Node node) {\n    for (;;) {\n        Node t = tail;//t指向当前队列的最后一个节点,队列为空则为null\n        if (t == null) { // Must initialize  //队列为空\n            if (compareAndSetHead(new Node())) //构造新结点,CAS方式设置为队列首元素,当head==null时更新成功\n                tail = head;//尾指针指向首结点\n        } else {  //队列不为空\n            node.prev = t;\n            if (compareAndSetTail(t, node)) { //CAS将尾指针指向当前结点,当t(原来的尾指针)==tail(当前真实的尾指针)时执行成功\n                t.next = node;    //原尾结点的next指针指向当前结点\n                return t;\n            }\n        }\n    }\n}\n```\n\n这里有两个CAS操作:\n\n- compareAndSetHead(new Node()),CAS方式更新head指针,仅当原值为null时更新成功\n\n```java\n/**\n * CAS head field. Used only by enq.\n */\nprivate final boolean compareAndSetHead(Node update) {\n    return unsafe.compareAndSwapObject(this, headOffset, null, update);\n}\n```\n\n- compareAndSetTail(t, node),CAS方式更新tial指针,仅当原值为t时更新成功\n\n```java\n/**\n * CAS tail field. Used only by enq.\n */\nprivate final boolean compareAndSetTail(Node expect, Node update) {\n    return unsafe.compareAndSwapObject(this, tailOffset, expect, update);\n}\n```\n\n外层的for循环保证了所有获取锁失败的线程经过失败重试后最后都能加入同步队列。因为AQS的同步队列是不带哨兵结点的,故当队列为空时要进行特殊处理,这部分在if分句中。注意当前线程所在的结点不能直接插入\n空队列,因为阻塞的线程是由前驱结点进行唤醒的。故先要插入一个结点作为队列首元素,当锁释放时由它来唤醒后面被阻塞的线程,从逻辑上这个队列首元素也可以表示当前正获取锁的线程,虽然并不一定真实持有其线程实例。\n\n首先通过new Node()创建一个空结点，然后以CAS方式让头指针指向该结点(该结点并非当前线程所在的结点),若该操作成功,则将尾指针也指向该结点。这部分的操作流程可以用下图表示\n\n![操作流程](/image/ReentrantLock/enq.png)\n\n当队列不为空,则执行通用的入队逻辑,这部分在else分句中\n\n```java\nelse {\n            node.prev = t;//step1:待插入结点pre指针指向原尾结点\n            if (compareAndSetTail(t, node)) { step2:CAS方式更改尾指针\n                t.next = node; //原尾结点next指针指向新的结点\n                return t;\n            }\n        }\n```\n\n首先当前线程所在的结点的前向指针pre指向当前线程认为的尾结点,源码中用t表示。然后以CAS的方式将尾指针指向当前结点,该操作仅当tail=t,即尾指针在进行CAS前未改变时成功。若CAS执行成功,则将原尾结点的后向指针next指向新的尾结点。\n\n到这为止,获取锁失败的线程加入同步队列的逻辑就结束了。但是线程加入同步队列后会做什么我们并不清楚,这部分在acquireQueued方法中。\n\n## 4. 线程加入同步队列后会做什么:acquireQueued()\n\n先看acquireQueued方法的源码\n\n```java\n/**\n * Acquires in exclusive uninterruptible mode for thread already in\n * queue. Used by condition wait methods as well as acquire.\n *\n * @param node the node\n * @param arg the acquire argument\n * @return {@code true} if interrupted while waiting\n */\nfinal boolean acquireQueued(final Node node, int arg) {\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        //死循环,正常情况下线程只有获得锁才能跳出循环\n        for (;;) {\n            final Node p = node.predecessor();//获得当前线程所在结点的前驱结点\n            //第一个if分句\n            if (p == head && tryAcquire(arg)) { \n                setHead(node); //将当前结点设置为队列头结点\n                p.next = null; // help GC\n                failed = false;\n                return interrupted;//正常情况下死循环唯一的出口\n            }\n            //第二个if分句\n            if (shouldParkAfterFailedAcquire(p, node) &&  //判断是否要阻塞当前线程\n                parkAndCheckInterrupt())      //阻塞当前线程\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n\n这段代码主要的内容都在for循环中,这是一个死循环,主要有两个if分句构成。第一个if分句中,当前线程首先会判断前驱结点是否是头结点,如果是则尝试获取锁,获取锁成功则会设置当前结点为头结点(更新头指针)。为什么必须前驱结点为头结点才尝试去获取锁？因为头结点表示当前正占有锁的线程,正常情况下该线程释放锁后会通知后面结点中阻塞的线程,阻塞线程被唤醒后去获取锁,这是我们希望看到的。然而还有一种情况,就是前驱结点取消了等待,此时当前线程也会被唤醒,这时候就不应该去获取锁,而是往前回溯一直找到一个没有取消等待的结点,然后将自身连接在它后面。一旦我们成功获取了锁并成功将自身设置为头结点,就会跳出for循环。否则就会执行第二个if分句:确保前驱结点的状态为SIGNAL,然后阻塞当前线程。\n\n先来看shouldParkAfterFailedAcquire(p, node)，从方法名上我们可以大概猜出这是判断是否要阻塞当前线程的,方法内容如下\n\n```java\n/**\n * Checks and updates status for a node that failed to acquire.\n * Returns true if thread should block. This is the main signal\n * control in all acquire loops.  Requires that pred == node.prev.\n *\n * @param pred node's predecessor holding status\n * @param node the node\n * @return {@code true} if thread should block\n */\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL) //状态为SIGNAL\n\n        /*\n         * This node has already set status asking a release\n         * to signal it, so it can safely park.\n         */\n        return true;\n    if (ws > 0) { //状态为CANCELLED,\n        /*\n         * Predecessor was cancelled. Skip over predecessors and\n         * indicate retry.\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else { //状态为初始化状态(ReentrentLock语境下)\n        /*\n         * waitStatus must be 0 or PROPAGATE.  Indicate that we\n         * need a signal, but don't park yet.  Caller will need to\n         * retry to make sure it cannot acquire before parking.\n         */\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}\n```\n\n可以看到针对前驱结点pred的状态会进行不同的处理\n\n- 1.pred状态为SIGNAL,则返回true,表示要阻塞当前线程。\n- 2.pred状态为CANCELLED,则一直往队列头部回溯直到找到一个状态不为CANCELLED的结点,将当前节点node挂在这个结点的后面。\n- 3.pred的状态为初始化状态,此时通过compareAndSetWaitStatus(pred, ws, Node.SIGNAL)方法将pred的状态改为SIGNAL。\n\n其实这个方法的含义很简单,就是确保当前结点的前驱结点的状态为SIGNAL,SIGNAL意味着线程释放锁后会唤醒后面阻塞的线程。毕竟,只有确保能够被唤醒，当前线程才能放心的阻塞。\n\n但是要注意只有在前驱结点已经是SIGNAL状态后才会执行后面的方法立即阻塞,对应上面的第一种情况。其他两种情况则因为返回false而重新执行一遍\nfor循环。这种延迟阻塞其实也是一种高并发场景下的优化,试想我如果在重新执行循环的时候成功获取了锁,是不是线程阻塞唤醒的开销就省了呢？\n\n最后我们来看看阻塞线程的方法parkAndCheckInterrupt\n\nshouldParkAfterFailedAcquire返回true表示应该阻塞当前线程,则会执行parkAndCheckInterrupt方法,这个方法比较简单,底层调用了LockSupport来阻塞当前线程,源码如下:\n\n```java\n/**\n * Convenience method to park and then check if interrupted\n *\n * @return {@code true} if interrupted\n */\nprivate final boolean parkAndCheckInterrupt() {\n    LockSupport.park(this);\n    return Thread.interrupted();\n}\n```\n\n该方法内部通过调用LockSupport的park方法来阻塞当前线程,不清楚LockSupport的可以看看这里。[LockSupport功能简介及原理浅析](https://www.cnblogs.com/takumicx/p/9328459.html)\n\n下面通过一张流程图来说明线程从加入同步队列到成功获取锁的过程\n\n![加入同步队列到成功获取锁的过程](/image/ReentrantLock/加入同步队列到成功获取锁的过程.png)\n\n概括的说,线程在同步队列中会尝试获取锁,失败则被阻塞,被唤醒后会不停的重复这个过程,直到线程真正持有了锁,并将自身结点置于队列头部。\n\n## 5. ReentrantLock非公平模式下的加锁流程\n\n![非公平模式下的加锁流程](/image/ReentrantLock/非公平模式下的加锁流程.png)\n\n# 3. 非公平模式解锁流程\n\n解锁的源码相对简单,源码如下：\n\n```java\npublic void unlock() {\n    sync.release(1);  \n}\npublic final boolean release(int arg) {\n    if (tryRelease(arg)) { //释放锁(state-1),若释放后锁可被其他线程获取(state=0),返回true\n        Node h = head;\n        //当前队列不为空且头结点状态不为初始化状态(0)   \n        if (h != null && h.waitStatus != 0)\n            unparkSuccessor(h);  //唤醒同步队列中被阻塞的线程\n        return true;\n    }\n    return false;\n}\n```\n\n正确找到sync的实现类,找到真正的入口方法,主要内容都在一个if语句中,先看下判断条件tryRelease方法\n\n```java\nprotected final boolean tryRelease(int releases) {\n    int c = getState() - releases; //计算待更新的state值\n    if (Thread.currentThread() != getExclusiveOwnerThread())\n        throw new IllegalMonitorStateException();\n    boolean free = false;\n    if (c == 0) { //待更新的state值为0,说明持有锁的线程未重入,一旦释放锁其他线程将能获取\n        free = true; \n        setExclusiveOwnerThread(null);//清除锁的持有线程标记\n    }\n    setState(c);//更新state值\n    return free;\n}\n```\n\ntryRelease其实只是将线程持有锁的次数减1,即将state值减1,若减少后线程将完全释放锁(state值为0),则该方法将返回true,否则返回false。由于执行该方法的线程必然持有锁,故该方法不需要任何同步操作。\n若当前线程已经完全释放锁,即锁可被其他线程使用,则还应该唤醒后续等待线程。不过在此之前需要进行两个条件的判断：\n\n- h!=null是为了防止队列为空,即没有任何线程处于等待队列中,那么也就不需要进行唤醒的操作\n- h.waitStatus != 0是为了防止队列中虽有线程,但该线程还未阻塞,由前面的分析知,线程在阻塞自己前必须设置前驱结点的状态为SIGNAL,否则它不会阻塞自己。\n\n接下来就是唤醒线程的操作,unparkSuccessor(h)源码如下\n\n```java\nprivate void unparkSuccessor(Node node) {\n    /*\n     * If status is negative (i.e., possibly needing signal) try\n     * to clear in anticipation of signalling.  It is OK if this\n     * fails or if status is changed by waiting thread.\n     */\n    int ws = node.waitStatus;\n    if (ws < 0)\n        compareAndSetWaitStatus(node, ws, 0);\n\n    /*\n     * Thread to unpark is held in successor, which is normally\n     * just the next node.  But if cancelled or apparently null,\n     * traverse backwards from tail to find the actual\n     * non-cancelled successor.\n     */\n    Node s = node.next;\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    if (s != null)\n        LockSupport.unpark(s.thread);\n}\n```\n\n一般情况下只要唤醒后继结点的线程就行了,但是后继结点可能已经取消等待,所以从队列尾部往前回溯,找到离头结点最近的正常结点,并唤醒其线程。\n\n 流程图\n\n![非公平模式下的解锁流程](/image/ReentrantLock/解锁流程.png)\n\n# 4. 公平锁模式\n\n公平锁模式下,对锁的获取有严格的条件限制。在同步队列有线程等待的情况下,所有线程在获取锁前必须先加入同步队列。队列中的线程按加入队列的先后次序获得锁。\n从公平锁加锁的入口开始\n\n```java\nfinal void lock(){\n    acquire(1);\n}\n```\n\n对比非公平锁,少了非重入式获取锁的方法,这是第一个不同点\n\n接着看获取锁的通用方法tryAcquire(),该方法在线程未进入队列,加入队列阻塞前和阻塞后被唤醒时都会执行。\n\n![公平锁tryAcquire](/image/ReentrantLock/公平锁tryAcquire.png)\n\n在真正CAS获取锁之前加了判断,内容如下\n\n```java\npublic final boolean hasQueuedPredecessors() {\n    // The correctness of this depends on head being initialized\n    // before tail and on head.next being accurate if the current\n    // thread is first in queue.\n    Node t = tail; // Read fields in reverse initialization order\n    Node h = head;\n    Node s;\n    return h != t &&\n        ((s = h.next) == null || s.thread != Thread.currentThread());\n}\n```\n\n从方法名我们就可知道这是判断队列中是否有优先级更高的等待线程,队列中哪个线程优先级最高？由于头结点是当前获取锁的线程,队列中的第二个结点代表的线程优先级最高。\n那么我们只要判断队列中第二个结点是否存在以及这个结点是否代表当前线程就行了。这里分了两种情况进行探讨:\n\n1. 第二个结点已经完全插入,但是这个结点是否就是当前线程所在结点还未知,所以通过s.thread != Thread.currentThread()进行判断,如果为true,说明第二个结点代表其他线程。\n2. 第二个结点并未完全插入,我们知道结点入队一共分三步：\n\n- 1.待插入结点的pre指针指向原尾结点\n- 2.CAS更新尾指针\n- 3.原尾结点的next指针指向新插入结点\n\n所以(s = h.next) == null 就是用来判断2刚执行成功但还未执行3这种情况的。这种情况第二个结点必然属于其他线程。\n以上两种情况都会使该方法返回true,即当前有优先级更高的线程在队列中等待,那么当前线程将不会执行CAS操作去获取锁,保证了线程获取锁的顺序与加入同步队列的顺序一致，很好的保证了公平性,但也增加了获取锁的成本。\n\n# 5. 为什么基于FIFO的同步队列可以实现非公平锁？\n\n由FIFO队列的特性知,先加入同步队列等待的线程会比后加入的线程更靠近队列的头部,那么它将比后者更早的被唤醒,它也就能更早的得到锁。从这个意义上,对于在同步队列中等待的线程而言,它们获得锁的顺序和加入同步队列的顺序一致，这显然是一种公平模式。然而,线程并非只有在加入队列后才有机会获得锁,哪怕同步队列中已有线程在等待,非公平锁的不公平之处就在于此。回看下非公平锁的加锁流程,线程在进入同步队列等待之前有两次抢占锁的机会:\n\n- 第一次是非重入式的获取锁,只有在当前锁未被任何线程占有(包括自身)时才能成功;\n- 第二次是在进入同步队列前,包含所有情况的获取锁的方式。\n\n只有这两次获取锁都失败后,线程才会构造结点并加入同步队列等待。而线程释放锁时是先释放锁(修改state值),然后才唤醒后继结点的线程的。试想下这种情况,线程A已经释放锁,但还没来得及唤醒后继线程C,而这时另一个线程B刚好尝试获取锁,此时锁恰好不被任何线程持有,它将成功获取锁而不用加入队列等待。线程C被唤醒尝试获取锁,而此时锁已经被线程B抢占,故而其获取失败并继续在队列中等待。整个过程如下图所示\n\n![抢占](/image/ReentrantLock/抢占.png)\n\n如果以线程第一次尝试获取锁到最后成功获取锁的次序来看,非公平锁确实很不公平。因为在队列中等待很久的线程相比还未进入队列等待的线程并没有优先权,甚至竞争也处于劣势:在队列中的线程要等待其他线程唤醒,在获取锁之前还要检查前驱结点是否为头结点。在锁竞争激烈的情况下,在队列中等待的线程可能迟迟竞争不到锁。这也就非公平在高并发情况下会出现的饥饿问题。那我们再开发中为什么大多使用会导致饥饿的非公平锁？很简单,因为它性能好啊。\n\n# 6. 为什么非公平锁性能好\n\n非公平锁对锁的竞争是抢占式的(队列中线程除外),线程在进入等待队列前可以进行两次尝试,这大大增加了获取锁的机会。这种好处体现在两个方面:\n\n- 1.线程不必加入等待队列就可以获得锁,不仅免去了构造结点并加入队列的繁琐操作,同时也节省了线程阻塞唤醒的开销,线程阻塞和唤醒涉及到线程上下文的切换和操作系统的系统调用,是非常耗时的。在高并发情况下,如果线程持有锁的时间非常短,短到线程入队阻塞的过程超过线程持有并释放锁的时间开销,那么这种抢占式特性对并发性能的提升会更加明显。\n- 2.减少CAS竞争。如果线程必须要加入阻塞队列才能获取锁,那入队时CAS竞争将变得异常激烈,CAS操作虽然不会导致失败线程挂起,但不断失败重试导致的对CPU的浪费也不能忽视。除此之外,加锁流程中至少有两处通过将某些特殊情况提前来减少CAS操作的竞争,增加并发情况下的性能。一处就是获取锁时将非重入的情况提前\n\n","slug":"ReentrantLock-重入锁-的源码解析","published":1,"updated":"2025-02-22T18:52:19.819Z","comments":1,"layout":"post","_id":"cm7hqj8al000iv001e585dlar","content":"<p>转自：<a href=\"%5B%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3ReentrantLock(%E9%87%8D%E5%85%A5%E9%94%81)%5D(https://www.cnblogs.com/takumicx/p/9402021.html)\">从源码角度彻底理解ReentrantLock(重入锁)</a></p>\n<h1 id=\"1-类继承关系\"><a href=\"#1-类继承关系\" class=\"headerlink\" title=\"1. 类继承关系\"></a>1. 类继承关系</h1><p>公平锁内部是FairSync,非公平锁内部是NonfairSync。而不管是FairSync还是NonfariSync,都间接继承自AbstractQueuedSynchronizer这个抽象类，如下图所示</p>\n<p><img src=\"/image/ReentrantLock/%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png\" alt=\"NonfairSync的类继承关系，FairSync同\"></p>\n<h1 id=\"2-非公平锁加锁流程\"><a href=\"#2-非公平锁加锁流程\" class=\"headerlink\" title=\"2. 非公平锁加锁流程\"></a>2. 非公平锁加锁流程</h1><p>加锁流程从<code>lock.lock()</code>开始</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    sync.lock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-加锁流程真正意义上的入口\"><a href=\"#1-加锁流程真正意义上的入口\" class=\"headerlink\" title=\"1. 加锁流程真正意义上的入口\"></a>1. 加锁流程真正意义上的入口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class=\"line\"><span class=\"comment\"> * acquire on failure.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//加锁流程真正意义上的入口</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//以cas方式尝试将AQS中的state从0更新为1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">        setExclusiveOwnerThread(Thread.currentThread());<span class=\"comment\">//获取锁成功则将当前线程标记为持有锁的线程,然后直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        acquire(<span class=\"number\">1</span>);<span class=\"comment\">//获取锁失败则执行该方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先尝试快速获取锁,以cas的方式将state的值更新为1,只有当state的原值为0时更新才能成功,因为state在ReentrantLock的语境下等同于锁被线程重入的次数,这意味着只有当前锁未被任何线程持有时该动作才会返回成功。若获取锁成功,则将当前线程标记为持有锁的线程,然后整个加锁流程就结束了。若获取锁失败,则执行acquire方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Acquires in exclusive mode, ignoring interrupts.  Implemented</span></span><br><span class=\"line\"><span class=\"comment\"> * by invoking at least once &#123;<span class=\"doctag\">@link</span> #tryAcquire&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> * returning on success.  Otherwise the thread is queued, possibly</span></span><br><span class=\"line\"><span class=\"comment\"> * repeatedly blocking and unblocking, invoking &#123;<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\"> * #tryAcquire&#125; until success.  This method can be used</span></span><br><span class=\"line\"><span class=\"comment\"> * to implement method &#123;<span class=\"doctag\">@link</span> Lock#lock&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arg the acquire argument.  This value is conveyed to</span></span><br><span class=\"line\"><span class=\"comment\"> *        &#123;<span class=\"doctag\">@link</span> #tryAcquire&#125; but is otherwise uninterpreted and</span></span><br><span class=\"line\"><span class=\"comment\"> *        can represent anything you like.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要的逻辑都在if判断条件中,这里面有3个重要的方法tryAcquire()，addWaiter()和acquireQueued()，这三个方法中分别封装了加锁流程中的主要处理逻辑，理解了这三个方法到底做了哪些事情，整个加锁流程就清晰了。</p>\n<h2 id=\"2-尝试获取锁的通用方法-tryAcquire\"><a href=\"#2-尝试获取锁的通用方法-tryAcquire\" class=\"headerlink\" title=\"2. 尝试获取锁的通用方法:tryAcquire()\"></a>2. 尝试获取锁的通用方法:tryAcquire()</h2><p>tryAcquire是AQS中定义的钩子方法,如下所示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法默认会抛出异常,强制同步组件通过扩展AQS来实现同步功能的时候必须重写该方法,ReentrantLock在公平和非公平模式下对此有不同实现,非公平模式的实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nonfairTryAcquire(acquires);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>底层调用了nonfairTryAcquire()<br>从方法名上我们就可以知道这是非公平模式下尝试获取锁的方法,具体方法实现如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Performs non-fair tryLock.  tryAcquire is implemented in</span></span><br><span class=\"line\"><span class=\"comment\"> * subclasses, but both need nonfair try for trylock method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();<span class=\"comment\">//获取当前线程实例</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();<span class=\"comment\">//获取state变量的值,即当前锁被重入的次数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;   <span class=\"comment\">//state为0,说明当前锁未被任何线程持有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123; <span class=\"comment\">//以cas方式获取锁</span></span><br><span class=\"line\">            setExclusiveOwnerThread(current);  <span class=\"comment\">//将当前线程标记为持有锁的线程</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//获取锁成功,非重入</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123; <span class=\"comment\">//当前线程就是持有锁的线程,说明该锁被重入了</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c + acquires;<span class=\"comment\">//计算state变量要更新的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">        setState(nextc);<span class=\"comment\">//非同步方式更新state值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//获取锁成功,重入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;     <span class=\"comment\">//走到这里说明尝试获取锁失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是非公平模式下获取锁的通用方法。它囊括了当前线程在尝试获取锁时的所有可能情况：</p>\n<ul>\n<li>1.当前锁未被任何线程持有(state&#x3D;0),则以cas方式获取锁,若获取成功则设置exclusiveOwnerThread为当前线程,然后返回成功的结果；若cas失败,说明在得到state&#x3D;0和cas获取锁之间有其他线程已经获取了锁,返回失败结果。</li>\n<li>2.若锁已经被当前线程获取(state&gt;0,exclusiveOwnerThread为当前线程),则将锁的重入次数加1(state+1),然后返回成功结果。因为该线程之前已经获得了锁,所以这个累加操作不用同步。</li>\n<li>3.若当前锁已经被其他线程持有(state&gt;0,exclusiveOwnerThread不为当前线程),则直接返回失败结果</li>\n</ul>\n<p>因为我们用state来统计锁被线程重入的次数,所以当前线程尝试获取锁的操作是否成功可以简化为:state值是否成功累加1,是则尝试获取锁成功,否则尝试获取锁失败。</p>\n<p>其实这里还可以思考一个问题:nonfairTryAcquire已经实现了一个囊括所有可能情况的尝试获取锁的方式,为何在刚进入lock方法时还要通过compareAndSetState(0, 1)去获取锁,毕竟后者只有在锁未被任何线程持有时才能执行成功,我们完全可以把compareAndSetState(0, 1)去掉,对最后的结果不会有任何影响。这种在进行通用逻辑处理之前针对某些特殊情况提前进行处理的方式在后面还会看到,一个直观的想法就是它能提升性能，而代价是牺牲一定的代码简洁性。</p>\n<p>退回到上层的acquire方法,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;  <span class=\"comment\">//当前线程尝试获取锁,若获取成功返回true,否则false</span></span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))  <span class=\"comment\">//只有当前线程获取锁失败才会执行者这部分代码</span></span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tryAcquire(arg)返回成功,则说明当前线程成功获取了锁(第一次获取或者重入),由取反和&amp;&amp;可知,整个流程到这结束，只有当前线程获取锁失败才会执行后面的判断。先来看addWaiter(Node.EXCLUSIVE)<br>部分,这部分代码描述了当线程获取锁失败时如何安全的加入同步等待队列。这部分代码可以说是整个加锁流程源码的精华,充分体现了并发编程的艺术性。</p>\n<h2 id=\"3-获取锁失败的线程如何安全的加入同步队列-addWaiter\"><a href=\"#3-获取锁失败的线程如何安全的加入同步队列-addWaiter\" class=\"headerlink\" title=\"3. 获取锁失败的线程如何安全的加入同步队列:addWaiter()\"></a>3. 获取锁失败的线程如何安全的加入同步队列:addWaiter()</h2><p>这部分逻辑在addWaiter()方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates and enqueues node for current thread and given mode.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the new node</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">addWaiter</span><span class=\"params\">(Node mode)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(Thread.currentThread(), mode);<span class=\"comment\">//首先创建一个新节点,并将当前线程实例封装在内部,mode这里为null</span></span><br><span class=\"line\">    <span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.prev = pred;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enq(node);<span class=\"comment\">//入队的逻辑这里都有</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先创建了一个新节点,并将当前线程实例封装在其内部,之后我们直接看enq(node)方法就可以了,中间这部分逻辑在enq(node)中都有,之所以加上这部分“重复代码”和尝试获取锁时的“重复代码”一样,对某些特殊情况<br>进行提前处理,牺牲一定的代码可读性换取性能提升。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Inserts node into queue, initializing if necessary. See picture above.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> node the node to insert</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> node&#x27;s predecessor</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail;<span class=\"comment\">//t指向当前队列的最后一个节点,队列为空则为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// Must initialize  //队列为空</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>())) <span class=\"comment\">//构造新结点,CAS方式设置为队列首元素,当head==null时更新成功</span></span><br><span class=\"line\">                tail = head;<span class=\"comment\">//尾指针指向首结点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//队列不为空</span></span><br><span class=\"line\">            node.prev = t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123; <span class=\"comment\">//CAS将尾指针指向当前结点,当t(原来的尾指针)==tail(当前真实的尾指针)时执行成功</span></span><br><span class=\"line\">                t.next = node;    <span class=\"comment\">//原尾结点的next指针指向当前结点</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有两个CAS操作:</p>\n<ul>\n<li>compareAndSetHead(new Node()),CAS方式更新head指针,仅当原值为null时更新成功</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CAS head field. Used only by enq.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSetHead</span><span class=\"params\">(Node update)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.compareAndSwapObject(<span class=\"built_in\">this</span>, headOffset, <span class=\"literal\">null</span>, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>compareAndSetTail(t, node),CAS方式更新tial指针,仅当原值为t时更新成功</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CAS tail field. Used only by enq.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSetTail</span><span class=\"params\">(Node expect, Node update)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.compareAndSwapObject(<span class=\"built_in\">this</span>, tailOffset, expect, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外层的for循环保证了所有获取锁失败的线程经过失败重试后最后都能加入同步队列。因为AQS的同步队列是不带哨兵结点的,故当队列为空时要进行特殊处理,这部分在if分句中。注意当前线程所在的结点不能直接插入<br>空队列,因为阻塞的线程是由前驱结点进行唤醒的。故先要插入一个结点作为队列首元素,当锁释放时由它来唤醒后面被阻塞的线程,从逻辑上这个队列首元素也可以表示当前正获取锁的线程,虽然并不一定真实持有其线程实例。</p>\n<p>首先通过new Node()创建一个空结点，然后以CAS方式让头指针指向该结点(该结点并非当前线程所在的结点),若该操作成功,则将尾指针也指向该结点。这部分的操作流程可以用下图表示</p>\n<p><img src=\"/image/ReentrantLock/enq.png\" alt=\"操作流程\"></p>\n<p>当队列不为空,则执行通用的入队逻辑,这部分在else分句中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node.prev = t;<span class=\"comment\">//step1:待插入结点pre指针指向原尾结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123; step2:CAS方式更改尾指针</span><br><span class=\"line\">                t.next = node; <span class=\"comment\">//原尾结点next指针指向新的结点</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先当前线程所在的结点的前向指针pre指向当前线程认为的尾结点,源码中用t表示。然后以CAS的方式将尾指针指向当前结点,该操作仅当tail&#x3D;t,即尾指针在进行CAS前未改变时成功。若CAS执行成功,则将原尾结点的后向指针next指向新的尾结点。</p>\n<p>到这为止,获取锁失败的线程加入同步队列的逻辑就结束了。但是线程加入同步队列后会做什么我们并不清楚,这部分在acquireQueued方法中。</p>\n<h2 id=\"4-线程加入同步队列后会做什么-acquireQueued\"><a href=\"#4-线程加入同步队列后会做什么-acquireQueued\" class=\"headerlink\" title=\"4. 线程加入同步队列后会做什么:acquireQueued()\"></a>4. 线程加入同步队列后会做什么:acquireQueued()</h2><p>先看acquireQueued方法的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Acquires in exclusive uninterruptible mode for thread already in</span></span><br><span class=\"line\"><span class=\"comment\"> * queue. Used by condition wait methods as well as acquire.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> node the node</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arg the acquire argument</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if interrupted while waiting</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//死循环,正常情况下线程只有获得锁才能跳出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();<span class=\"comment\">//获得当前线程所在结点的前驱结点</span></span><br><span class=\"line\">            <span class=\"comment\">//第一个if分句</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123; </span><br><span class=\"line\">                setHead(node); <span class=\"comment\">//将当前结点设置为队列头结点</span></span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;<span class=\"comment\">//正常情况下死循环唯一的出口</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//第二个if分句</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;  <span class=\"comment\">//判断是否要阻塞当前线程</span></span><br><span class=\"line\">                parkAndCheckInterrupt())      <span class=\"comment\">//阻塞当前线程</span></span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码主要的内容都在for循环中,这是一个死循环,主要有两个if分句构成。第一个if分句中,当前线程首先会判断前驱结点是否是头结点,如果是则尝试获取锁,获取锁成功则会设置当前结点为头结点(更新头指针)。为什么必须前驱结点为头结点才尝试去获取锁？因为头结点表示当前正占有锁的线程,正常情况下该线程释放锁后会通知后面结点中阻塞的线程,阻塞线程被唤醒后去获取锁,这是我们希望看到的。然而还有一种情况,就是前驱结点取消了等待,此时当前线程也会被唤醒,这时候就不应该去获取锁,而是往前回溯一直找到一个没有取消等待的结点,然后将自身连接在它后面。一旦我们成功获取了锁并成功将自身设置为头结点,就会跳出for循环。否则就会执行第二个if分句:确保前驱结点的状态为SIGNAL,然后阻塞当前线程。</p>\n<p>先来看shouldParkAfterFailedAcquire(p, node)，从方法名上我们可以大概猜出这是判断是否要阻塞当前线程的,方法内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Checks and updates status for a node that failed to acquire.</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns true if thread should block. This is the main signal</span></span><br><span class=\"line\"><span class=\"comment\"> * control in all acquire loops.  Requires that pred == node.prev.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pred node&#x27;s predecessor holding status</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> node the node</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if thread should block</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> pred.waitStatus;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL) <span class=\"comment\">//状态为SIGNAL</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//状态为CANCELLED,</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class=\"line\"><span class=\"comment\">         * indicate retry.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//状态为初始化状态(ReentrentLock语境下)</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class=\"line\"><span class=\"comment\">         * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class=\"line\"><span class=\"comment\">         * retry to make sure it cannot acquire before parking.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到针对前驱结点pred的状态会进行不同的处理</p>\n<ul>\n<li>1.pred状态为SIGNAL,则返回true,表示要阻塞当前线程。</li>\n<li>2.pred状态为CANCELLED,则一直往队列头部回溯直到找到一个状态不为CANCELLED的结点,将当前节点node挂在这个结点的后面。</li>\n<li>3.pred的状态为初始化状态,此时通过compareAndSetWaitStatus(pred, ws, Node.SIGNAL)方法将pred的状态改为SIGNAL。</li>\n</ul>\n<p>其实这个方法的含义很简单,就是确保当前结点的前驱结点的状态为SIGNAL,SIGNAL意味着线程释放锁后会唤醒后面阻塞的线程。毕竟,只有确保能够被唤醒，当前线程才能放心的阻塞。</p>\n<p>但是要注意只有在前驱结点已经是SIGNAL状态后才会执行后面的方法立即阻塞,对应上面的第一种情况。其他两种情况则因为返回false而重新执行一遍<br>for循环。这种延迟阻塞其实也是一种高并发场景下的优化,试想我如果在重新执行循环的时候成功获取了锁,是不是线程阻塞唤醒的开销就省了呢？</p>\n<p>最后我们来看看阻塞线程的方法parkAndCheckInterrupt</p>\n<p>shouldParkAfterFailedAcquire返回true表示应该阻塞当前线程,则会执行parkAndCheckInterrupt方法,这个方法比较简单,底层调用了LockSupport来阻塞当前线程,源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convenience method to park and then check if interrupted</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if interrupted</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">parkAndCheckInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法内部通过调用LockSupport的park方法来阻塞当前线程,不清楚LockSupport的可以看看这里。<a href=\"https://www.cnblogs.com/takumicx/p/9328459.html\">LockSupport功能简介及原理浅析</a></p>\n<p>下面通过一张流程图来说明线程从加入同步队列到成功获取锁的过程</p>\n<p><img src=\"/image/ReentrantLock/%E5%8A%A0%E5%85%A5%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97%E5%88%B0%E6%88%90%E5%8A%9F%E8%8E%B7%E5%8F%96%E9%94%81%E7%9A%84%E8%BF%87%E7%A8%8B.png\" alt=\"加入同步队列到成功获取锁的过程\"></p>\n<p>概括的说,线程在同步队列中会尝试获取锁,失败则被阻塞,被唤醒后会不停的重复这个过程,直到线程真正持有了锁,并将自身结点置于队列头部。</p>\n<h2 id=\"5-ReentrantLock非公平模式下的加锁流程\"><a href=\"#5-ReentrantLock非公平模式下的加锁流程\" class=\"headerlink\" title=\"5. ReentrantLock非公平模式下的加锁流程\"></a>5. ReentrantLock非公平模式下的加锁流程</h2><p><img src=\"/image/ReentrantLock/%E9%9D%9E%E5%85%AC%E5%B9%B3%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%8A%A0%E9%94%81%E6%B5%81%E7%A8%8B.png\" alt=\"非公平模式下的加锁流程\"></p>\n<h1 id=\"3-非公平模式解锁流程\"><a href=\"#3-非公平模式解锁流程\" class=\"headerlink\" title=\"3. 非公平模式解锁流程\"></a>3. 非公平模式解锁流程</h1><p>解锁的源码相对简单,源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">release</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123; <span class=\"comment\">//释放锁(state-1),若释放后锁可被其他线程获取(state=0),返回true</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"comment\">//当前队列不为空且头结点状态不为初始化状态(0)   </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            unparkSuccessor(h);  <span class=\"comment\">//唤醒同步队列中被阻塞的线程</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确找到sync的实现类,找到真正的入口方法,主要内容都在一个if语句中,先看下判断条件tryRelease方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryRelease</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState() - releases; <span class=\"comment\">//计算待更新的state值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalMonitorStateException</span>();</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">free</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//待更新的state值为0,说明持有锁的线程未重入,一旦释放锁其他线程将能获取</span></span><br><span class=\"line\">        free = <span class=\"literal\">true</span>; </span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"literal\">null</span>);<span class=\"comment\">//清除锁的持有线程标记</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setState(c);<span class=\"comment\">//更新state值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tryRelease其实只是将线程持有锁的次数减1,即将state值减1,若减少后线程将完全释放锁(state值为0),则该方法将返回true,否则返回false。由于执行该方法的线程必然持有锁,故该方法不需要任何同步操作。<br>若当前线程已经完全释放锁,即锁可被其他线程使用,则还应该唤醒后续等待线程。不过在此之前需要进行两个条件的判断：</p>\n<ul>\n<li>h!&#x3D;null是为了防止队列为空,即没有任何线程处于等待队列中,那么也就不需要进行唤醒的操作</li>\n<li>h.waitStatus !&#x3D; 0是为了防止队列中虽有线程,但该线程还未阻塞,由前面的分析知,线程在阻塞自己前必须设置前驱结点的状态为SIGNAL,否则它不会阻塞自己。</li>\n</ul>\n<p>接下来就是唤醒线程的操作,unparkSuccessor(h)源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unparkSuccessor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class=\"line\"><span class=\"comment\">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class=\"line\"><span class=\"comment\">     * fails or if status is changed by waiting thread.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> node.waitStatus;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread to unpark is held in successor, which is normally</span></span><br><span class=\"line\"><span class=\"comment\">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class=\"line\"><span class=\"comment\">     * traverse backwards from tail to find the actual</span></span><br><span class=\"line\"><span class=\"comment\">     * non-cancelled successor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; t != <span class=\"literal\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                s = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下只要唤醒后继结点的线程就行了,但是后继结点可能已经取消等待,所以从队列尾部往前回溯,找到离头结点最近的正常结点,并唤醒其线程。</p>\n<p> 流程图</p>\n<p><img src=\"/image/ReentrantLock/%E8%A7%A3%E9%94%81%E6%B5%81%E7%A8%8B.png\" alt=\"非公平模式下的解锁流程\"></p>\n<h1 id=\"4-公平锁模式\"><a href=\"#4-公平锁模式\" class=\"headerlink\" title=\"4. 公平锁模式\"></a>4. 公平锁模式</h1><p>公平锁模式下,对锁的获取有严格的条件限制。在同步队列有线程等待的情况下,所有线程在获取锁前必须先加入同步队列。队列中的线程按加入队列的先后次序获得锁。<br>从公平锁加锁的入口开始</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对比非公平锁,少了非重入式获取锁的方法,这是第一个不同点</p>\n<p>接着看获取锁的通用方法tryAcquire(),该方法在线程未进入队列,加入队列阻塞前和阻塞后被唤醒时都会执行。</p>\n<p><img src=\"/image/ReentrantLock/%E5%85%AC%E5%B9%B3%E9%94%81tryAcquire.png\" alt=\"公平锁tryAcquire\"></p>\n<p>在真正CAS获取锁之前加了判断,内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasQueuedPredecessors</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// The correctness of this depends on head being initialized</span></span><br><span class=\"line\">    <span class=\"comment\">// before tail and on head.next being accurate if the current</span></span><br><span class=\"line\">    <span class=\"comment\">// thread is first in queue.</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; <span class=\"comment\">// Read fields in reverse initialization order</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    Node s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h != t &amp;&amp;</span><br><span class=\"line\">        ((s = h.next) == <span class=\"literal\">null</span> || s.thread != Thread.currentThread());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从方法名我们就可知道这是判断队列中是否有优先级更高的等待线程,队列中哪个线程优先级最高？由于头结点是当前获取锁的线程,队列中的第二个结点代表的线程优先级最高。<br>那么我们只要判断队列中第二个结点是否存在以及这个结点是否代表当前线程就行了。这里分了两种情况进行探讨:</p>\n<ol>\n<li>第二个结点已经完全插入,但是这个结点是否就是当前线程所在结点还未知,所以通过s.thread !&#x3D; Thread.currentThread()进行判断,如果为true,说明第二个结点代表其他线程。</li>\n<li>第二个结点并未完全插入,我们知道结点入队一共分三步：</li>\n</ol>\n<ul>\n<li>1.待插入结点的pre指针指向原尾结点</li>\n<li>2.CAS更新尾指针</li>\n<li>3.原尾结点的next指针指向新插入结点</li>\n</ul>\n<p>所以(s &#x3D; h.next) &#x3D;&#x3D; null 就是用来判断2刚执行成功但还未执行3这种情况的。这种情况第二个结点必然属于其他线程。<br>以上两种情况都会使该方法返回true,即当前有优先级更高的线程在队列中等待,那么当前线程将不会执行CAS操作去获取锁,保证了线程获取锁的顺序与加入同步队列的顺序一致，很好的保证了公平性,但也增加了获取锁的成本。</p>\n<h1 id=\"5-为什么基于FIFO的同步队列可以实现非公平锁？\"><a href=\"#5-为什么基于FIFO的同步队列可以实现非公平锁？\" class=\"headerlink\" title=\"5. 为什么基于FIFO的同步队列可以实现非公平锁？\"></a>5. 为什么基于FIFO的同步队列可以实现非公平锁？</h1><p>由FIFO队列的特性知,先加入同步队列等待的线程会比后加入的线程更靠近队列的头部,那么它将比后者更早的被唤醒,它也就能更早的得到锁。从这个意义上,对于在同步队列中等待的线程而言,它们获得锁的顺序和加入同步队列的顺序一致，这显然是一种公平模式。然而,线程并非只有在加入队列后才有机会获得锁,哪怕同步队列中已有线程在等待,非公平锁的不公平之处就在于此。回看下非公平锁的加锁流程,线程在进入同步队列等待之前有两次抢占锁的机会:</p>\n<ul>\n<li>第一次是非重入式的获取锁,只有在当前锁未被任何线程占有(包括自身)时才能成功;</li>\n<li>第二次是在进入同步队列前,包含所有情况的获取锁的方式。</li>\n</ul>\n<p>只有这两次获取锁都失败后,线程才会构造结点并加入同步队列等待。而线程释放锁时是先释放锁(修改state值),然后才唤醒后继结点的线程的。试想下这种情况,线程A已经释放锁,但还没来得及唤醒后继线程C,而这时另一个线程B刚好尝试获取锁,此时锁恰好不被任何线程持有,它将成功获取锁而不用加入队列等待。线程C被唤醒尝试获取锁,而此时锁已经被线程B抢占,故而其获取失败并继续在队列中等待。整个过程如下图所示</p>\n<p><img src=\"/image/ReentrantLock/%E6%8A%A2%E5%8D%A0.png\" alt=\"抢占\"></p>\n<p>如果以线程第一次尝试获取锁到最后成功获取锁的次序来看,非公平锁确实很不公平。因为在队列中等待很久的线程相比还未进入队列等待的线程并没有优先权,甚至竞争也处于劣势:在队列中的线程要等待其他线程唤醒,在获取锁之前还要检查前驱结点是否为头结点。在锁竞争激烈的情况下,在队列中等待的线程可能迟迟竞争不到锁。这也就非公平在高并发情况下会出现的饥饿问题。那我们再开发中为什么大多使用会导致饥饿的非公平锁？很简单,因为它性能好啊。</p>\n<h1 id=\"6-为什么非公平锁性能好\"><a href=\"#6-为什么非公平锁性能好\" class=\"headerlink\" title=\"6. 为什么非公平锁性能好\"></a>6. 为什么非公平锁性能好</h1><p>非公平锁对锁的竞争是抢占式的(队列中线程除外),线程在进入等待队列前可以进行两次尝试,这大大增加了获取锁的机会。这种好处体现在两个方面:</p>\n<ul>\n<li>1.线程不必加入等待队列就可以获得锁,不仅免去了构造结点并加入队列的繁琐操作,同时也节省了线程阻塞唤醒的开销,线程阻塞和唤醒涉及到线程上下文的切换和操作系统的系统调用,是非常耗时的。在高并发情况下,如果线程持有锁的时间非常短,短到线程入队阻塞的过程超过线程持有并释放锁的时间开销,那么这种抢占式特性对并发性能的提升会更加明显。</li>\n<li>2.减少CAS竞争。如果线程必须要加入阻塞队列才能获取锁,那入队时CAS竞争将变得异常激烈,CAS操作虽然不会导致失败线程挂起,但不断失败重试导致的对CPU的浪费也不能忽视。除此之外,加锁流程中至少有两处通过将某些特殊情况提前来减少CAS操作的竞争,增加并发情况下的性能。一处就是获取锁时将非重入的情况提前</li>\n</ul>\n","length":13156,"excerpt":"","more":"<p>转自：<a href=\"%5B%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3ReentrantLock(%E9%87%8D%E5%85%A5%E9%94%81)%5D(https://www.cnblogs.com/takumicx/p/9402021.html)\">从源码角度彻底理解ReentrantLock(重入锁)</a></p>\n<h1 id=\"1-类继承关系\"><a href=\"#1-类继承关系\" class=\"headerlink\" title=\"1. 类继承关系\"></a>1. 类继承关系</h1><p>公平锁内部是FairSync,非公平锁内部是NonfairSync。而不管是FairSync还是NonfariSync,都间接继承自AbstractQueuedSynchronizer这个抽象类，如下图所示</p>\n<p><img src=\"/image/ReentrantLock/%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png\" alt=\"NonfairSync的类继承关系，FairSync同\"></p>\n<h1 id=\"2-非公平锁加锁流程\"><a href=\"#2-非公平锁加锁流程\" class=\"headerlink\" title=\"2. 非公平锁加锁流程\"></a>2. 非公平锁加锁流程</h1><p>加锁流程从<code>lock.lock()</code>开始</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    sync.lock();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-加锁流程真正意义上的入口\"><a href=\"#1-加锁流程真正意义上的入口\" class=\"headerlink\" title=\"1. 加锁流程真正意义上的入口\"></a>1. 加锁流程真正意义上的入口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class=\"line\"><span class=\"comment\"> * acquire on failure.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//加锁流程真正意义上的入口</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//以cas方式尝试将AQS中的state从0更新为1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">        setExclusiveOwnerThread(Thread.currentThread());<span class=\"comment\">//获取锁成功则将当前线程标记为持有锁的线程,然后直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        acquire(<span class=\"number\">1</span>);<span class=\"comment\">//获取锁失败则执行该方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先尝试快速获取锁,以cas的方式将state的值更新为1,只有当state的原值为0时更新才能成功,因为state在ReentrantLock的语境下等同于锁被线程重入的次数,这意味着只有当前锁未被任何线程持有时该动作才会返回成功。若获取锁成功,则将当前线程标记为持有锁的线程,然后整个加锁流程就结束了。若获取锁失败,则执行acquire方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Acquires in exclusive mode, ignoring interrupts.  Implemented</span></span><br><span class=\"line\"><span class=\"comment\"> * by invoking at least once &#123;<span class=\"doctag\">@link</span> #tryAcquire&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> * returning on success.  Otherwise the thread is queued, possibly</span></span><br><span class=\"line\"><span class=\"comment\"> * repeatedly blocking and unblocking, invoking &#123;<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\"> * #tryAcquire&#125; until success.  This method can be used</span></span><br><span class=\"line\"><span class=\"comment\"> * to implement method &#123;<span class=\"doctag\">@link</span> Lock#lock&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arg the acquire argument.  This value is conveyed to</span></span><br><span class=\"line\"><span class=\"comment\"> *        &#123;<span class=\"doctag\">@link</span> #tryAcquire&#125; but is otherwise uninterpreted and</span></span><br><span class=\"line\"><span class=\"comment\"> *        can represent anything you like.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法主要的逻辑都在if判断条件中,这里面有3个重要的方法tryAcquire()，addWaiter()和acquireQueued()，这三个方法中分别封装了加锁流程中的主要处理逻辑，理解了这三个方法到底做了哪些事情，整个加锁流程就清晰了。</p>\n<h2 id=\"2-尝试获取锁的通用方法-tryAcquire\"><a href=\"#2-尝试获取锁的通用方法-tryAcquire\" class=\"headerlink\" title=\"2. 尝试获取锁的通用方法:tryAcquire()\"></a>2. 尝试获取锁的通用方法:tryAcquire()</h2><p>tryAcquire是AQS中定义的钩子方法,如下所示</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UnsupportedOperationException</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法默认会抛出异常,强制同步组件通过扩展AQS来实现同步功能的时候必须重写该方法,ReentrantLock在公平和非公平模式下对此有不同实现,非公平模式的实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nonfairTryAcquire(acquires);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>底层调用了nonfairTryAcquire()<br>从方法名上我们就可以知道这是非公平模式下尝试获取锁的方法,具体方法实现如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Performs non-fair tryLock.  tryAcquire is implemented in</span></span><br><span class=\"line\"><span class=\"comment\"> * subclasses, but both need nonfair try for trylock method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"type\">int</span> acquires)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> Thread.currentThread();<span class=\"comment\">//获取当前线程实例</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState();<span class=\"comment\">//获取state变量的值,即当前锁被重入的次数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;   <span class=\"comment\">//state为0,说明当前锁未被任何线程持有</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123; <span class=\"comment\">//以cas方式获取锁</span></span><br><span class=\"line\">            setExclusiveOwnerThread(current);  <span class=\"comment\">//将当前线程标记为持有锁的线程</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;<span class=\"comment\">//获取锁成功,非重入</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123; <span class=\"comment\">//当前线程就是持有锁的线程,说明该锁被重入了</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">nextc</span> <span class=\"operator\">=</span> c + acquires;<span class=\"comment\">//计算state变量要更新的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">        setState(nextc);<span class=\"comment\">//非同步方式更新state值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  <span class=\"comment\">//获取锁成功,重入</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;     <span class=\"comment\">//走到这里说明尝试获取锁失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是非公平模式下获取锁的通用方法。它囊括了当前线程在尝试获取锁时的所有可能情况：</p>\n<ul>\n<li>1.当前锁未被任何线程持有(state&#x3D;0),则以cas方式获取锁,若获取成功则设置exclusiveOwnerThread为当前线程,然后返回成功的结果；若cas失败,说明在得到state&#x3D;0和cas获取锁之间有其他线程已经获取了锁,返回失败结果。</li>\n<li>2.若锁已经被当前线程获取(state&gt;0,exclusiveOwnerThread为当前线程),则将锁的重入次数加1(state+1),然后返回成功结果。因为该线程之前已经获得了锁,所以这个累加操作不用同步。</li>\n<li>3.若当前锁已经被其他线程持有(state&gt;0,exclusiveOwnerThread不为当前线程),则直接返回失败结果</li>\n</ul>\n<p>因为我们用state来统计锁被线程重入的次数,所以当前线程尝试获取锁的操作是否成功可以简化为:state值是否成功累加1,是则尝试获取锁成功,否则尝试获取锁失败。</p>\n<p>其实这里还可以思考一个问题:nonfairTryAcquire已经实现了一个囊括所有可能情况的尝试获取锁的方式,为何在刚进入lock方法时还要通过compareAndSetState(0, 1)去获取锁,毕竟后者只有在锁未被任何线程持有时才能执行成功,我们完全可以把compareAndSetState(0, 1)去掉,对最后的结果不会有任何影响。这种在进行通用逻辑处理之前针对某些特殊情况提前进行处理的方式在后面还会看到,一个直观的想法就是它能提升性能，而代价是牺牲一定的代码简洁性。</p>\n<p>退回到上层的acquire方法,</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">acquire</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;  <span class=\"comment\">//当前线程尝试获取锁,若获取成功返回true,否则false</span></span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))  <span class=\"comment\">//只有当前线程获取锁失败才会执行者这部分代码</span></span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tryAcquire(arg)返回成功,则说明当前线程成功获取了锁(第一次获取或者重入),由取反和&amp;&amp;可知,整个流程到这结束，只有当前线程获取锁失败才会执行后面的判断。先来看addWaiter(Node.EXCLUSIVE)<br>部分,这部分代码描述了当线程获取锁失败时如何安全的加入同步等待队列。这部分代码可以说是整个加锁流程源码的精华,充分体现了并发编程的艺术性。</p>\n<h2 id=\"3-获取锁失败的线程如何安全的加入同步队列-addWaiter\"><a href=\"#3-获取锁失败的线程如何安全的加入同步队列-addWaiter\" class=\"headerlink\" title=\"3. 获取锁失败的线程如何安全的加入同步队列:addWaiter()\"></a>3. 获取锁失败的线程如何安全的加入同步队列:addWaiter()</h2><p>这部分逻辑在addWaiter()方法中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates and enqueues node for current thread and given mode.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the new node</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">addWaiter</span><span class=\"params\">(Node mode)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(Thread.currentThread(), mode);<span class=\"comment\">//首先创建一个新节点,并将当前线程实例封装在内部,mode这里为null</span></span><br><span class=\"line\">    <span class=\"comment\">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pred</span> <span class=\"operator\">=</span> tail;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        node.prev = pred;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enq(node);<span class=\"comment\">//入队的逻辑这里都有</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先创建了一个新节点,并将当前线程实例封装在其内部,之后我们直接看enq(node)方法就可以了,中间这部分逻辑在enq(node)中都有,之所以加上这部分“重复代码”和尝试获取锁时的“重复代码”一样,对某些特殊情况<br>进行提前处理,牺牲一定的代码可读性换取性能提升。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Inserts node into queue, initializing if necessary. See picture above.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> node the node to insert</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> node&#x27;s predecessor</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail;<span class=\"comment\">//t指向当前队列的最后一个节点,队列为空则为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// Must initialize  //队列为空</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>())) <span class=\"comment\">//构造新结点,CAS方式设置为队列首元素,当head==null时更新成功</span></span><br><span class=\"line\">                tail = head;<span class=\"comment\">//尾指针指向首结点</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//队列不为空</span></span><br><span class=\"line\">            node.prev = t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123; <span class=\"comment\">//CAS将尾指针指向当前结点,当t(原来的尾指针)==tail(当前真实的尾指针)时执行成功</span></span><br><span class=\"line\">                t.next = node;    <span class=\"comment\">//原尾结点的next指针指向当前结点</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有两个CAS操作:</p>\n<ul>\n<li>compareAndSetHead(new Node()),CAS方式更新head指针,仅当原值为null时更新成功</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CAS head field. Used only by enq.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSetHead</span><span class=\"params\">(Node update)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.compareAndSwapObject(<span class=\"built_in\">this</span>, headOffset, <span class=\"literal\">null</span>, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>compareAndSetTail(t, node),CAS方式更新tial指针,仅当原值为t时更新成功</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * CAS tail field. Used only by enq.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSetTail</span><span class=\"params\">(Node expect, Node update)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.compareAndSwapObject(<span class=\"built_in\">this</span>, tailOffset, expect, update);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外层的for循环保证了所有获取锁失败的线程经过失败重试后最后都能加入同步队列。因为AQS的同步队列是不带哨兵结点的,故当队列为空时要进行特殊处理,这部分在if分句中。注意当前线程所在的结点不能直接插入<br>空队列,因为阻塞的线程是由前驱结点进行唤醒的。故先要插入一个结点作为队列首元素,当锁释放时由它来唤醒后面被阻塞的线程,从逻辑上这个队列首元素也可以表示当前正获取锁的线程,虽然并不一定真实持有其线程实例。</p>\n<p>首先通过new Node()创建一个空结点，然后以CAS方式让头指针指向该结点(该结点并非当前线程所在的结点),若该操作成功,则将尾指针也指向该结点。这部分的操作流程可以用下图表示</p>\n<p><img src=\"/image/ReentrantLock/enq.png\" alt=\"操作流程\"></p>\n<p>当队列不为空,则执行通用的入队逻辑,这部分在else分句中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            node.prev = t;<span class=\"comment\">//step1:待插入结点pre指针指向原尾结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123; step2:CAS方式更改尾指针</span><br><span class=\"line\">                t.next = node; <span class=\"comment\">//原尾结点next指针指向新的结点</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先当前线程所在的结点的前向指针pre指向当前线程认为的尾结点,源码中用t表示。然后以CAS的方式将尾指针指向当前结点,该操作仅当tail&#x3D;t,即尾指针在进行CAS前未改变时成功。若CAS执行成功,则将原尾结点的后向指针next指向新的尾结点。</p>\n<p>到这为止,获取锁失败的线程加入同步队列的逻辑就结束了。但是线程加入同步队列后会做什么我们并不清楚,这部分在acquireQueued方法中。</p>\n<h2 id=\"4-线程加入同步队列后会做什么-acquireQueued\"><a href=\"#4-线程加入同步队列后会做什么-acquireQueued\" class=\"headerlink\" title=\"4. 线程加入同步队列后会做什么:acquireQueued()\"></a>4. 线程加入同步队列后会做什么:acquireQueued()</h2><p>先看acquireQueued方法的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Acquires in exclusive uninterruptible mode for thread already in</span></span><br><span class=\"line\"><span class=\"comment\"> * queue. Used by condition wait methods as well as acquire.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> node the node</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> arg the acquire argument</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if interrupted while waiting</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">failed</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">interrupted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//死循环,正常情况下线程只有获得锁才能跳出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">Node</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> node.predecessor();<span class=\"comment\">//获得当前线程所在结点的前驱结点</span></span><br><span class=\"line\">            <span class=\"comment\">//第一个if分句</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123; </span><br><span class=\"line\">                setHead(node); <span class=\"comment\">//将当前结点设置为队列头结点</span></span><br><span class=\"line\">                p.next = <span class=\"literal\">null</span>; <span class=\"comment\">// help GC</span></span><br><span class=\"line\">                failed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;<span class=\"comment\">//正常情况下死循环唯一的出口</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//第二个if分句</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;  <span class=\"comment\">//判断是否要阻塞当前线程</span></span><br><span class=\"line\">                parkAndCheckInterrupt())      <span class=\"comment\">//阻塞当前线程</span></span><br><span class=\"line\">                interrupted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码主要的内容都在for循环中,这是一个死循环,主要有两个if分句构成。第一个if分句中,当前线程首先会判断前驱结点是否是头结点,如果是则尝试获取锁,获取锁成功则会设置当前结点为头结点(更新头指针)。为什么必须前驱结点为头结点才尝试去获取锁？因为头结点表示当前正占有锁的线程,正常情况下该线程释放锁后会通知后面结点中阻塞的线程,阻塞线程被唤醒后去获取锁,这是我们希望看到的。然而还有一种情况,就是前驱结点取消了等待,此时当前线程也会被唤醒,这时候就不应该去获取锁,而是往前回溯一直找到一个没有取消等待的结点,然后将自身连接在它后面。一旦我们成功获取了锁并成功将自身设置为头结点,就会跳出for循环。否则就会执行第二个if分句:确保前驱结点的状态为SIGNAL,然后阻塞当前线程。</p>\n<p>先来看shouldParkAfterFailedAcquire(p, node)，从方法名上我们可以大概猜出这是判断是否要阻塞当前线程的,方法内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Checks and updates status for a node that failed to acquire.</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns true if thread should block. This is the main signal</span></span><br><span class=\"line\"><span class=\"comment\"> * control in all acquire loops.  Requires that pred == node.prev.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pred node&#x27;s predecessor holding status</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> node the node</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if thread should block</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldParkAfterFailedAcquire</span><span class=\"params\">(Node pred, Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> pred.waitStatus;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws == Node.SIGNAL) <span class=\"comment\">//状态为SIGNAL</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * This node has already set status asking a release</span></span><br><span class=\"line\"><span class=\"comment\">         * to signal it, so it can safely park.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//状态为CANCELLED,</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * Predecessor was cancelled. Skip over predecessors and</span></span><br><span class=\"line\"><span class=\"comment\">         * indicate retry.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            node.prev = pred = pred.prev;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (pred.waitStatus &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        pred.next = node;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//状态为初始化状态(ReentrentLock语境下)</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span></span><br><span class=\"line\"><span class=\"comment\">         * need a signal, but don&#x27;t park yet.  Caller will need to</span></span><br><span class=\"line\"><span class=\"comment\">         * retry to make sure it cannot acquire before parking.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到针对前驱结点pred的状态会进行不同的处理</p>\n<ul>\n<li>1.pred状态为SIGNAL,则返回true,表示要阻塞当前线程。</li>\n<li>2.pred状态为CANCELLED,则一直往队列头部回溯直到找到一个状态不为CANCELLED的结点,将当前节点node挂在这个结点的后面。</li>\n<li>3.pred的状态为初始化状态,此时通过compareAndSetWaitStatus(pred, ws, Node.SIGNAL)方法将pred的状态改为SIGNAL。</li>\n</ul>\n<p>其实这个方法的含义很简单,就是确保当前结点的前驱结点的状态为SIGNAL,SIGNAL意味着线程释放锁后会唤醒后面阻塞的线程。毕竟,只有确保能够被唤醒，当前线程才能放心的阻塞。</p>\n<p>但是要注意只有在前驱结点已经是SIGNAL状态后才会执行后面的方法立即阻塞,对应上面的第一种情况。其他两种情况则因为返回false而重新执行一遍<br>for循环。这种延迟阻塞其实也是一种高并发场景下的优化,试想我如果在重新执行循环的时候成功获取了锁,是不是线程阻塞唤醒的开销就省了呢？</p>\n<p>最后我们来看看阻塞线程的方法parkAndCheckInterrupt</p>\n<p>shouldParkAfterFailedAcquire返回true表示应该阻塞当前线程,则会执行parkAndCheckInterrupt方法,这个方法比较简单,底层调用了LockSupport来阻塞当前线程,源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Convenience method to park and then check if interrupted</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"doctag\">@code</span> true&#125; if interrupted</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">parkAndCheckInterrupt</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    LockSupport.park(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Thread.interrupted();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法内部通过调用LockSupport的park方法来阻塞当前线程,不清楚LockSupport的可以看看这里。<a href=\"https://www.cnblogs.com/takumicx/p/9328459.html\">LockSupport功能简介及原理浅析</a></p>\n<p>下面通过一张流程图来说明线程从加入同步队列到成功获取锁的过程</p>\n<p><img src=\"/image/ReentrantLock/%E5%8A%A0%E5%85%A5%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97%E5%88%B0%E6%88%90%E5%8A%9F%E8%8E%B7%E5%8F%96%E9%94%81%E7%9A%84%E8%BF%87%E7%A8%8B.png\" alt=\"加入同步队列到成功获取锁的过程\"></p>\n<p>概括的说,线程在同步队列中会尝试获取锁,失败则被阻塞,被唤醒后会不停的重复这个过程,直到线程真正持有了锁,并将自身结点置于队列头部。</p>\n<h2 id=\"5-ReentrantLock非公平模式下的加锁流程\"><a href=\"#5-ReentrantLock非公平模式下的加锁流程\" class=\"headerlink\" title=\"5. ReentrantLock非公平模式下的加锁流程\"></a>5. ReentrantLock非公平模式下的加锁流程</h2><p><img src=\"/image/ReentrantLock/%E9%9D%9E%E5%85%AC%E5%B9%B3%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E5%8A%A0%E9%94%81%E6%B5%81%E7%A8%8B.png\" alt=\"非公平模式下的加锁流程\"></p>\n<h1 id=\"3-非公平模式解锁流程\"><a href=\"#3-非公平模式解锁流程\" class=\"headerlink\" title=\"3. 非公平模式解锁流程\"></a>3. 非公平模式解锁流程</h1><p>解锁的源码相对简单,源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">release</span><span class=\"params\">(<span class=\"type\">int</span> arg)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123; <span class=\"comment\">//释放锁(state-1),若释放后锁可被其他线程获取(state=0),返回true</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"comment\">//当前队列不为空且头结点状态不为初始化状态(0)   </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"literal\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            unparkSuccessor(h);  <span class=\"comment\">//唤醒同步队列中被阻塞的线程</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确找到sync的实现类,找到真正的入口方法,主要内容都在一个if语句中,先看下判断条件tryRelease方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">tryRelease</span><span class=\"params\">(<span class=\"type\">int</span> releases)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> getState() - releases; <span class=\"comment\">//计算待更新的state值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalMonitorStateException</span>();</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">free</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123; <span class=\"comment\">//待更新的state值为0,说明持有锁的线程未重入,一旦释放锁其他线程将能获取</span></span><br><span class=\"line\">        free = <span class=\"literal\">true</span>; </span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"literal\">null</span>);<span class=\"comment\">//清除锁的持有线程标记</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setState(c);<span class=\"comment\">//更新state值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>tryRelease其实只是将线程持有锁的次数减1,即将state值减1,若减少后线程将完全释放锁(state值为0),则该方法将返回true,否则返回false。由于执行该方法的线程必然持有锁,故该方法不需要任何同步操作。<br>若当前线程已经完全释放锁,即锁可被其他线程使用,则还应该唤醒后续等待线程。不过在此之前需要进行两个条件的判断：</p>\n<ul>\n<li>h!&#x3D;null是为了防止队列为空,即没有任何线程处于等待队列中,那么也就不需要进行唤醒的操作</li>\n<li>h.waitStatus !&#x3D; 0是为了防止队列中虽有线程,但该线程还未阻塞,由前面的分析知,线程在阻塞自己前必须设置前驱结点的状态为SIGNAL,否则它不会阻塞自己。</li>\n</ul>\n<p>接下来就是唤醒线程的操作,unparkSuccessor(h)源码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unparkSuccessor</span><span class=\"params\">(Node node)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * If status is negative (i.e., possibly needing signal) try</span></span><br><span class=\"line\"><span class=\"comment\">     * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class=\"line\"><span class=\"comment\">     * fails or if status is changed by waiting thread.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ws</span> <span class=\"operator\">=</span> node.waitStatus;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread to unpark is held in successor, which is normally</span></span><br><span class=\"line\"><span class=\"comment\">     * just the next node.  But if cancelled or apparently null,</span></span><br><span class=\"line\"><span class=\"comment\">     * traverse backwards from tail to find the actual</span></span><br><span class=\"line\"><span class=\"comment\">     * non-cancelled successor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; t != <span class=\"literal\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                s = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下只要唤醒后继结点的线程就行了,但是后继结点可能已经取消等待,所以从队列尾部往前回溯,找到离头结点最近的正常结点,并唤醒其线程。</p>\n<p> 流程图</p>\n<p><img src=\"/image/ReentrantLock/%E8%A7%A3%E9%94%81%E6%B5%81%E7%A8%8B.png\" alt=\"非公平模式下的解锁流程\"></p>\n<h1 id=\"4-公平锁模式\"><a href=\"#4-公平锁模式\" class=\"headerlink\" title=\"4. 公平锁模式\"></a>4. 公平锁模式</h1><p>公平锁模式下,对锁的获取有严格的条件限制。在同步队列有线程等待的情况下,所有线程在获取锁前必须先加入同步队列。队列中的线程按加入队列的先后次序获得锁。<br>从公平锁加锁的入口开始</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对比非公平锁,少了非重入式获取锁的方法,这是第一个不同点</p>\n<p>接着看获取锁的通用方法tryAcquire(),该方法在线程未进入队列,加入队列阻塞前和阻塞后被唤醒时都会执行。</p>\n<p><img src=\"/image/ReentrantLock/%E5%85%AC%E5%B9%B3%E9%94%81tryAcquire.png\" alt=\"公平锁tryAcquire\"></p>\n<p>在真正CAS获取锁之前加了判断,内容如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasQueuedPredecessors</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// The correctness of this depends on head being initialized</span></span><br><span class=\"line\">    <span class=\"comment\">// before tail and on head.next being accurate if the current</span></span><br><span class=\"line\">    <span class=\"comment\">// thread is first in queue.</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> tail; <span class=\"comment\">// Read fields in reverse initialization order</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    Node s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h != t &amp;&amp;</span><br><span class=\"line\">        ((s = h.next) == <span class=\"literal\">null</span> || s.thread != Thread.currentThread());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从方法名我们就可知道这是判断队列中是否有优先级更高的等待线程,队列中哪个线程优先级最高？由于头结点是当前获取锁的线程,队列中的第二个结点代表的线程优先级最高。<br>那么我们只要判断队列中第二个结点是否存在以及这个结点是否代表当前线程就行了。这里分了两种情况进行探讨:</p>\n<ol>\n<li>第二个结点已经完全插入,但是这个结点是否就是当前线程所在结点还未知,所以通过s.thread !&#x3D; Thread.currentThread()进行判断,如果为true,说明第二个结点代表其他线程。</li>\n<li>第二个结点并未完全插入,我们知道结点入队一共分三步：</li>\n</ol>\n<ul>\n<li>1.待插入结点的pre指针指向原尾结点</li>\n<li>2.CAS更新尾指针</li>\n<li>3.原尾结点的next指针指向新插入结点</li>\n</ul>\n<p>所以(s &#x3D; h.next) &#x3D;&#x3D; null 就是用来判断2刚执行成功但还未执行3这种情况的。这种情况第二个结点必然属于其他线程。<br>以上两种情况都会使该方法返回true,即当前有优先级更高的线程在队列中等待,那么当前线程将不会执行CAS操作去获取锁,保证了线程获取锁的顺序与加入同步队列的顺序一致，很好的保证了公平性,但也增加了获取锁的成本。</p>\n<h1 id=\"5-为什么基于FIFO的同步队列可以实现非公平锁？\"><a href=\"#5-为什么基于FIFO的同步队列可以实现非公平锁？\" class=\"headerlink\" title=\"5. 为什么基于FIFO的同步队列可以实现非公平锁？\"></a>5. 为什么基于FIFO的同步队列可以实现非公平锁？</h1><p>由FIFO队列的特性知,先加入同步队列等待的线程会比后加入的线程更靠近队列的头部,那么它将比后者更早的被唤醒,它也就能更早的得到锁。从这个意义上,对于在同步队列中等待的线程而言,它们获得锁的顺序和加入同步队列的顺序一致，这显然是一种公平模式。然而,线程并非只有在加入队列后才有机会获得锁,哪怕同步队列中已有线程在等待,非公平锁的不公平之处就在于此。回看下非公平锁的加锁流程,线程在进入同步队列等待之前有两次抢占锁的机会:</p>\n<ul>\n<li>第一次是非重入式的获取锁,只有在当前锁未被任何线程占有(包括自身)时才能成功;</li>\n<li>第二次是在进入同步队列前,包含所有情况的获取锁的方式。</li>\n</ul>\n<p>只有这两次获取锁都失败后,线程才会构造结点并加入同步队列等待。而线程释放锁时是先释放锁(修改state值),然后才唤醒后继结点的线程的。试想下这种情况,线程A已经释放锁,但还没来得及唤醒后继线程C,而这时另一个线程B刚好尝试获取锁,此时锁恰好不被任何线程持有,它将成功获取锁而不用加入队列等待。线程C被唤醒尝试获取锁,而此时锁已经被线程B抢占,故而其获取失败并继续在队列中等待。整个过程如下图所示</p>\n<p><img src=\"/image/ReentrantLock/%E6%8A%A2%E5%8D%A0.png\" alt=\"抢占\"></p>\n<p>如果以线程第一次尝试获取锁到最后成功获取锁的次序来看,非公平锁确实很不公平。因为在队列中等待很久的线程相比还未进入队列等待的线程并没有优先权,甚至竞争也处于劣势:在队列中的线程要等待其他线程唤醒,在获取锁之前还要检查前驱结点是否为头结点。在锁竞争激烈的情况下,在队列中等待的线程可能迟迟竞争不到锁。这也就非公平在高并发情况下会出现的饥饿问题。那我们再开发中为什么大多使用会导致饥饿的非公平锁？很简单,因为它性能好啊。</p>\n<h1 id=\"6-为什么非公平锁性能好\"><a href=\"#6-为什么非公平锁性能好\" class=\"headerlink\" title=\"6. 为什么非公平锁性能好\"></a>6. 为什么非公平锁性能好</h1><p>非公平锁对锁的竞争是抢占式的(队列中线程除外),线程在进入等待队列前可以进行两次尝试,这大大增加了获取锁的机会。这种好处体现在两个方面:</p>\n<ul>\n<li>1.线程不必加入等待队列就可以获得锁,不仅免去了构造结点并加入队列的繁琐操作,同时也节省了线程阻塞唤醒的开销,线程阻塞和唤醒涉及到线程上下文的切换和操作系统的系统调用,是非常耗时的。在高并发情况下,如果线程持有锁的时间非常短,短到线程入队阻塞的过程超过线程持有并释放锁的时间开销,那么这种抢占式特性对并发性能的提升会更加明显。</li>\n<li>2.减少CAS竞争。如果线程必须要加入阻塞队列才能获取锁,那入队时CAS竞争将变得异常激烈,CAS操作虽然不会导致失败线程挂起,但不断失败重试导致的对CPU的浪费也不能忽视。除此之外,加锁流程中至少有两处通过将某些特殊情况提前来减少CAS操作的竞争,增加并发情况下的性能。一处就是获取锁时将非重入的情况提前</li>\n</ul>\n"},{"title":"ScrapyDemo","date":"2017-11-30T04:20:49.000Z","description":"自用ScrapyDemo","_content":"\n\n### 建立工程\n\n>scrapy startproject scrapydemo\n\n### 目录分析\n\n- scrapy.cfg: 项目的配置文件\n- scrapytest/: 该项目的python模块。之后您将在此加入代码。\n- scrapytest/items.py: 项目中的item文件.\n- scrapytest/pipelines.py: 项目中的pipelines文件.\n- scrapytest/settings.py: 项目的设置文件.\n- scrapytest/spiders/: 放置spider代码的目录.\n\n### Tips\n\n#### 1. spider name\n\n/spiders/目录下创建一个文件\n-name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。\n\n#### 2.多级抓取 \nscrapy 在不同的抓取级别的Request之间传递参数的办法，下面的范例中，parse()通过meat传递给了parse_more()参数item，这样就可以再parse_more()抓取完成所有的数据后一次返\n```python\ndef parse(self, response):\n\t……\n\titem['url'] = url.extract()[0]\n\tfor item in items:\n\t\tyield Request(url = item['url'],meta = {'item':item}, callback = self.parse_more,dont_filter = True)\ndef parse_more(self,response):\n\titem = response.meta['item']\n\t……\n\tyield item\n```\n### 总结需要修改demo的地方\n\ndemo地址:https://github.com/CherryKeinz/ScrapyDemo\n\n#### 1. items.py\n\n修改类demoItem()里需要的字段\n\n\n#### 2. /spiders/MySpider.py\n\nimport 要改为items.py中定义的类名\nfrom SpiderDemo.items import demoItem\n\n- allowed_domains = [\"http://10.3.210.84:4237/home/\"]\n这个是 spider要求设置的一个变量,表示允许爬虫爬的网站\n- start_urls.append(url) url改为要爬的网址\n- 如需保存为JSON，修改custom_settings\n\n#### 3.pipelines.py\n\n如需要，修改类JsonWithEncodingPipeline\n\n### 常见错误\n\n1. scrapy 报错 no module named win32api 的解决方案\n原因是缺少win32,到 http://sourceforge.net/projects/pywin32/files/\n找到对应的版本进行下载，直接安装即可\n","source":"_posts/ScrapyDemo.md","raw":"---\ntitle: ScrapyDemo\ndate: 2017-11-30 12:20:49\ntags: [Python, scrapy]\ncategories: 爬虫\ndescription: 自用ScrapyDemo\n---\n\n\n### 建立工程\n\n>scrapy startproject scrapydemo\n\n### 目录分析\n\n- scrapy.cfg: 项目的配置文件\n- scrapytest/: 该项目的python模块。之后您将在此加入代码。\n- scrapytest/items.py: 项目中的item文件.\n- scrapytest/pipelines.py: 项目中的pipelines文件.\n- scrapytest/settings.py: 项目的设置文件.\n- scrapytest/spiders/: 放置spider代码的目录.\n\n### Tips\n\n#### 1. spider name\n\n/spiders/目录下创建一个文件\n-name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。\n\n#### 2.多级抓取 \nscrapy 在不同的抓取级别的Request之间传递参数的办法，下面的范例中，parse()通过meat传递给了parse_more()参数item，这样就可以再parse_more()抓取完成所有的数据后一次返\n```python\ndef parse(self, response):\n\t……\n\titem['url'] = url.extract()[0]\n\tfor item in items:\n\t\tyield Request(url = item['url'],meta = {'item':item}, callback = self.parse_more,dont_filter = True)\ndef parse_more(self,response):\n\titem = response.meta['item']\n\t……\n\tyield item\n```\n### 总结需要修改demo的地方\n\ndemo地址:https://github.com/CherryKeinz/ScrapyDemo\n\n#### 1. items.py\n\n修改类demoItem()里需要的字段\n\n\n#### 2. /spiders/MySpider.py\n\nimport 要改为items.py中定义的类名\nfrom SpiderDemo.items import demoItem\n\n- allowed_domains = [\"http://10.3.210.84:4237/home/\"]\n这个是 spider要求设置的一个变量,表示允许爬虫爬的网站\n- start_urls.append(url) url改为要爬的网址\n- 如需保存为JSON，修改custom_settings\n\n#### 3.pipelines.py\n\n如需要，修改类JsonWithEncodingPipeline\n\n### 常见错误\n\n1. scrapy 报错 no module named win32api 的解决方案\n原因是缺少win32,到 http://sourceforge.net/projects/pywin32/files/\n找到对应的版本进行下载，直接安装即可\n","slug":"ScrapyDemo","published":1,"updated":"2025-02-22T18:52:19.819Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8am000mv00197930ezt","content":"<h3 id=\"建立工程\"><a href=\"#建立工程\" class=\"headerlink\" title=\"建立工程\"></a>建立工程</h3><blockquote>\n<p>scrapy startproject scrapydemo</p>\n</blockquote>\n<h3 id=\"目录分析\"><a href=\"#目录分析\" class=\"headerlink\" title=\"目录分析\"></a>目录分析</h3><ul>\n<li>scrapy.cfg: 项目的配置文件</li>\n<li>scrapytest&#x2F;: 该项目的python模块。之后您将在此加入代码。</li>\n<li>scrapytest&#x2F;items.py: 项目中的item文件.</li>\n<li>scrapytest&#x2F;pipelines.py: 项目中的pipelines文件.</li>\n<li>scrapytest&#x2F;settings.py: 项目的设置文件.</li>\n<li>scrapytest&#x2F;spiders&#x2F;: 放置spider代码的目录.</li>\n</ul>\n<h3 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h3><h4 id=\"1-spider-name\"><a href=\"#1-spider-name\" class=\"headerlink\" title=\"1. spider name\"></a>1. spider name</h4><p>&#x2F;spiders&#x2F;目录下创建一个文件<br>-name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。</p>\n<h4 id=\"2-多级抓取\"><a href=\"#2-多级抓取\" class=\"headerlink\" title=\"2.多级抓取\"></a>2.多级抓取</h4><p>scrapy 在不同的抓取级别的Request之间传递参数的办法，下面的范例中，parse()通过meat传递给了parse_more()参数item，这样就可以再parse_more()抓取完成所有的数据后一次返</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse</span>(<span class=\"params\">self, response</span>):</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\titem[<span class=\"string\">&#x27;url&#x27;</span>] = url.extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> Request(url = item[<span class=\"string\">&#x27;url&#x27;</span>],meta = &#123;<span class=\"string\">&#x27;item&#x27;</span>:item&#125;, callback = <span class=\"variable language_\">self</span>.parse_more,dont_filter = <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_more</span>(<span class=\"params\">self,response</span>):</span><br><span class=\"line\">\titem = response.meta[<span class=\"string\">&#x27;item&#x27;</span>]</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> item</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结需要修改demo的地方\"><a href=\"#总结需要修改demo的地方\" class=\"headerlink\" title=\"总结需要修改demo的地方\"></a>总结需要修改demo的地方</h3><p>demo地址:<a href=\"https://github.com/CherryKeinz/ScrapyDemo\">https://github.com/CherryKeinz/ScrapyDemo</a></p>\n<h4 id=\"1-items-py\"><a href=\"#1-items-py\" class=\"headerlink\" title=\"1. items.py\"></a>1. items.py</h4><p>修改类demoItem()里需要的字段</p>\n<h4 id=\"2-spiders-MySpider-py\"><a href=\"#2-spiders-MySpider-py\" class=\"headerlink\" title=\"2. &#x2F;spiders&#x2F;MySpider.py\"></a>2. &#x2F;spiders&#x2F;MySpider.py</h4><p>import 要改为items.py中定义的类名<br>from SpiderDemo.items import demoItem</p>\n<ul>\n<li>allowed_domains &#x3D; [“<a href=\"http://10.3.210.84:4237/home/%22]\">http://10.3.210.84:4237/home/&quot;]</a><br>这个是 spider要求设置的一个变量,表示允许爬虫爬的网站</li>\n<li>start_urls.append(url) url改为要爬的网址</li>\n<li>如需保存为JSON，修改custom_settings</li>\n</ul>\n<h4 id=\"3-pipelines-py\"><a href=\"#3-pipelines-py\" class=\"headerlink\" title=\"3.pipelines.py\"></a>3.pipelines.py</h4><p>如需要，修改类JsonWithEncodingPipeline</p>\n<h3 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h3><ol>\n<li>scrapy 报错 no module named win32api 的解决方案<br>原因是缺少win32,到 <a href=\"http://sourceforge.net/projects/pywin32/files/\">http://sourceforge.net/projects/pywin32/files/</a><br>找到对应的版本进行下载，直接安装即可</li>\n</ol>\n","length":1230,"excerpt":"","more":"<h3 id=\"建立工程\"><a href=\"#建立工程\" class=\"headerlink\" title=\"建立工程\"></a>建立工程</h3><blockquote>\n<p>scrapy startproject scrapydemo</p>\n</blockquote>\n<h3 id=\"目录分析\"><a href=\"#目录分析\" class=\"headerlink\" title=\"目录分析\"></a>目录分析</h3><ul>\n<li>scrapy.cfg: 项目的配置文件</li>\n<li>scrapytest&#x2F;: 该项目的python模块。之后您将在此加入代码。</li>\n<li>scrapytest&#x2F;items.py: 项目中的item文件.</li>\n<li>scrapytest&#x2F;pipelines.py: 项目中的pipelines文件.</li>\n<li>scrapytest&#x2F;settings.py: 项目的设置文件.</li>\n<li>scrapytest&#x2F;spiders&#x2F;: 放置spider代码的目录.</li>\n</ul>\n<h3 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h3><h4 id=\"1-spider-name\"><a href=\"#1-spider-name\" class=\"headerlink\" title=\"1. spider name\"></a>1. spider name</h4><p>&#x2F;spiders&#x2F;目录下创建一个文件<br>-name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。</p>\n<h4 id=\"2-多级抓取\"><a href=\"#2-多级抓取\" class=\"headerlink\" title=\"2.多级抓取\"></a>2.多级抓取</h4><p>scrapy 在不同的抓取级别的Request之间传递参数的办法，下面的范例中，parse()通过meat传递给了parse_more()参数item，这样就可以再parse_more()抓取完成所有的数据后一次返</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse</span>(<span class=\"params\">self, response</span>):</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\titem[<span class=\"string\">&#x27;url&#x27;</span>] = url.extract()[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> items:</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> Request(url = item[<span class=\"string\">&#x27;url&#x27;</span>],meta = &#123;<span class=\"string\">&#x27;item&#x27;</span>:item&#125;, callback = <span class=\"variable language_\">self</span>.parse_more,dont_filter = <span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">parse_more</span>(<span class=\"params\">self,response</span>):</span><br><span class=\"line\">\titem = response.meta[<span class=\"string\">&#x27;item&#x27;</span>]</span><br><span class=\"line\">\t……</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> item</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结需要修改demo的地方\"><a href=\"#总结需要修改demo的地方\" class=\"headerlink\" title=\"总结需要修改demo的地方\"></a>总结需要修改demo的地方</h3><p>demo地址:<a href=\"https://github.com/CherryKeinz/ScrapyDemo\">https://github.com/CherryKeinz/ScrapyDemo</a></p>\n<h4 id=\"1-items-py\"><a href=\"#1-items-py\" class=\"headerlink\" title=\"1. items.py\"></a>1. items.py</h4><p>修改类demoItem()里需要的字段</p>\n<h4 id=\"2-spiders-MySpider-py\"><a href=\"#2-spiders-MySpider-py\" class=\"headerlink\" title=\"2. &#x2F;spiders&#x2F;MySpider.py\"></a>2. &#x2F;spiders&#x2F;MySpider.py</h4><p>import 要改为items.py中定义的类名<br>from SpiderDemo.items import demoItem</p>\n<ul>\n<li>allowed_domains &#x3D; [“<a href=\"http://10.3.210.84:4237/home/%22]\">http://10.3.210.84:4237/home/&quot;]</a><br>这个是 spider要求设置的一个变量,表示允许爬虫爬的网站</li>\n<li>start_urls.append(url) url改为要爬的网址</li>\n<li>如需保存为JSON，修改custom_settings</li>\n</ul>\n<h4 id=\"3-pipelines-py\"><a href=\"#3-pipelines-py\" class=\"headerlink\" title=\"3.pipelines.py\"></a>3.pipelines.py</h4><p>如需要，修改类JsonWithEncodingPipeline</p>\n<h3 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h3><ol>\n<li>scrapy 报错 no module named win32api 的解决方案<br>原因是缺少win32,到 <a href=\"http://sourceforge.net/projects/pywin32/files/\">http://sourceforge.net/projects/pywin32/files/</a><br>找到对应的版本进行下载，直接安装即可</li>\n</ol>\n"},{"title":"Spring知识总结整理","date":"2019-03-29T11:40:51.000Z","description":"Spring知识总结整理","_content":"\n# Spring面试问题总结整理\n参考：\n[ssm常见面试题](https://blog.csdn.net/qq_38262968/article/details/79474455)、\n[ssm面试题总结](https://blog.csdn.net/weixin_39801925/article/details/80585758)、\n[java ssm框架基础面试题](https://www.jianshu.com/p/231a582d2a02)、\n[JavaSSM框架精选50道面试题](https://blog.csdn.net/qq_41735004/article/details/87199651)、\n[69道Spring面试题和答案](http://ifeve.com/spring-interview-questions-and-answers/)\n\n---\n\n### spring mvc\n![springmvc](/image/interview_prep/springmvc.png)\n\n#### 简单介绍对springMVC的理解\nSpring MVC是基于java的实现MVC设计模式的请求驱动类型的轻量级web框架，通过把model、view、controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错。\n- model负责对应用数据封装，并对外提供应用功能的接口；\n- view负责通过向控制器发送请求，得到响应，并向用户展示处理好的数据；\n- controller负责定义应用的功能，接收用户的动作，并选择响应的view\n特点：\n- 它是基于组件技术的。全部的应用对象，无论控制器和视图还是业务对象之类的，都是基于java组件，并且和spring基础组件集成。\n- 不依赖于servletAPI（虽然具体具体实现还是依赖servlet）\n- 可以使用任何视图技术，不仅仅jsp\n- 支持各种请求资源的映射策略\n- 它是易于扩展的\n\n#### spring mvc的流程\n1. 用户发送请求到DispatcherServlet；\n2. servlet接收到请求后，调用HandlerMapping，请求获取Handler；\n3. HandlerMapping根据url得到具体的Handler，生成Handler对象和Handler拦截器，一起返回给DispatcherServlet；\n4. DispatcherServlet调用HandlerAdapter；\n5. HandlerAdapter执行Handler\n6. Handler执行完返回ModerAndView；\n7. HandlerAdapter将ModerAndView返回给DispatcherServlet；\n8. DispatcherServlet将ModerAndView传给ViewResolver解析；\n9. ViewResolver解析后将view返回；\n10. DispatcherServlet渲染view（将模型数据填充）\n11. 响应用户。\n\n#### spring mvc优点\n- 可以支持各种视图技术，不仅jsp\n- 与spring框架集成（ioc、aop）\n- 清晰的角色分配：DispatcherServlet、HandlerMapping、HandlerAdapter、ViewResolver.\n- 支持各种请求资源的映射策略。\n\n#### spring mvc主要组件\n- **DispatcherServlet**（不需要程序员开发）：接收请求，响应结果，相当于转发器，有了它可以减少其他组件之间的耦合度。\n- **HandlerMapping**（不需要程序员开发）：根据url查找Handler。\n- **HandlerAdapter**：根据 Handler 来找到支持它的 HandlerAdapter，通过 HandlerAdapter 执行这个 Handler 得到 ModelAndView 对象。\n- **Handler**（需要程序员开发）\n- **ViewResolver**：进行视图解析，根据视图逻辑名解释成真正的视图。\n- **View**（需要开发）：View是一个接口， 它的实现类支持不同的视图类型（jsp，freemarker，pdf等等）\n\n#### spring mvc和struts2区别\n- spring mvc的入口是一个servlet——DispatcherServlet，struts2的入口是一个filter过滤器——StrutsPrepareAndExecuteFilter。\n- spring mvc是基于方法开发（一个url对应一个方法），请求参数传递到方法的形参，可以是单例也可以是多例；Struts2是基于类开发，传递参数是通过类属性，只能设计为多例。\n- Struts采用值栈存储请求和响应的数据，通过OGNL存取数据；springmvc通过参数解析器将request请求内容解析，并给方法的形参赋值，将数据和视图封装成ModelAndView对象，最后将ModelAndView的模型数据通过request域传输到页面。jsp视图解析器默认jstl。\n\n\n#### springmvc如何设定重定向和转发\n- 转发：返回值前加<font color='red'>forward:</font>，如：forward:user.do?name=method4\n- 重定向：返回值前加<font color='red'>redirect:</font>，如：redirect:http://www.baidu.com\n\n\n#### springmvc如何AJAX交互\n通过jackson框架，可以把java对象转为json。\n1. 加入jackson.jar\n2. 配置文件中配置json映射\n3. 方法前加@ResponseBody\n\n#### 解决POST、GET的中文乱码\nPOST：web.xml中配置CharacterEncodingFilter过滤器，设置成utf-8\n\nGET: \n- 修改tomcat配置文件添加编码与工程编码一致\n- 对参数进行重新编码，String userName = new String(request.getParamter(\"userName\").getBytes(\"ISO8859-1\"),\"utf-8\")\n\n\n#### SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决\n是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段。\n\n#### springmvc常用注解\n\n- @RequestMapping：用于处理url映射的注解，用于类或方法上。\n- @RequestBody：用于实现接收http请求的json数据。\n- @ResponseBody：用于实现将java对象转化为json对象，返回响应。\n\n#### SpringMvc中函数的返回值是什么\n返回值可以有很多类型,有String, ModelAndView。ModelAndView类把视图和数据都合并的一起的\n\n#### SpringMvc用什么对象从后台向前台传递数据的\n通过ModelMap对象，调用put方法，把对象加入，前台用el表达式\n\n#### ModelMap的数据放入session里面\n类上加@SessionAttributes注解，里面包含的字符串就是要放入session里的key。\n\n#### springmvc拦截器\n两种写法，一种是实现HandlerInterceptor接口，一种是继承适配器类，在接口方法中实现。然后再springmvc的配置文件中配置。\n\n```xml\n<mvc:interceptors>\n    <!--默认拦截所有-->\n    <bean id='myInterceptor' class='cn.keinz.myHandlerInterceptor'>\n    <!--只针对某个url-->\n    <mvc: interceptor>\n        <mvc: mapping path='/user'/>\n        <bean class='cn.keinz.myHandlerInterceptorAdapter'>\n    </mvc: interceptor>\n</mvc:interceptors>\n```\n\n#### 注解原理\n[JAVA 注解的基本原理](https://www.cnblogs.com/yangming1996/p/9295168.html)\n\n注解本质是继承了Annotation接口的接口，具体的实现类是通过运行时生成的动态 代理类。我们通过反射获取注解时，返回的是java运行时生成的动态代理对象。通过动态代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会通过memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。\n\n#### Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler\n\n符合面向对象的单一职责原则，代码结构清晰，便于维护，最重要的是可复用性高，如HandlerAdapter可能被用于处理多种Handler。\n\n---\n\n### mybatis\n#### mybatis的理解\n- 连接数据库通过核心配置文件：SqlMapConfig.xml，配置数据库连接池的获得和连接数据库\n- 操作数据库通过映射配置文件，这个配置文件设计为dao的实现映射，可以视作dao的实现\n- 通过SqlMapConfig.xml构造SqlSessionFactory，由SqlSessionFactory.openSession()获得SqlSession，操作数据库由SqlSession完成。\n- mybatis底层定义了Executor接口操作数据库，Executor接口有两个实现：一个基本执行器，一个缓存执行器。\n- Mapped Statement也是mybatis的一个底层封装对象，它包装了mybatis的配置信息和sql映射信息等，mapper.xml的一个sql对应一个Mapped Statement对象，sql的id就是Mapped Statement的id。\n- Mapped Statement对sql执行的输入参数进行定义，包括HashMap、基本类型和pojo，Executor通过Mapped Statement在执行前将java对象映射到sql中，输入参数映射就是jdbc编程中对prepared statement设置参数。\n- Mapped Statement对sql执行的输出参数进行定义，包括HashMap、基本类型和pojo，Executor通过Mapped Statement在执行后将输出映射到java对象，输出结果映射相当于jdbc编程中对结果的解析。\n\nmybatis是一个暴露出sql语句的jdbc封装，是一个暴露sql语句的持久层框架，暴露的方式是映射配置文件。\n\n#### 使用MyBatis(IBatis)的好处是什么\n- mybatis把sql语句从java源程序中独立出来，放在xml里，系统维护更便利。\n- mybatis封装了底层jdbc api调用细节，并能自动将结果转为java bean对象。\n- mybatis需要自己编写sql，可以灵活控制sql语句，比hibernate等全自动orm框架有更高的效率，能完成复杂的查询。\n\n\n#### 对MyBatis的缓存的理解\nmybatis缓存分为一级缓存和二级缓存，一级缓存在sqlsession中，默认就有，二级缓存基于mapper文件的namespace，开始需要在mybatis-configuration.xml配置文件中添加：\n\n```\n<settings>\n    <setting name=\"cacheEnabled\" value=\"true\"/>\n</settings>\n```\n然后在mapper.xml中：\n\n```\n<cache type=\"org.apache.ibatis.cache.impl.PerpetualCache\"/>\n```\n最后，po类实现serializable接口。\n\nMybatis首先去缓存中查询结果集，如果没有则查询数据库，如果有则从缓存取出返回结果集就不走数据库。Mybatis内部存储缓存使用一个HashMap，key为hashCode+sqlId+Sql语句。value为从查询出来映射生成的java对象\nMybatis的二级缓存即查询缓存，它的作用域是一个mapper的namespace，即在同一个namespace中查询sql可以从缓存中获取数据。二级缓存是可以跨SqlSession的。\n\n\n#### ${} 和 #{}的区别\n- ${} ：预编译处理，直接把${} 替换成变量的值；$一般用入传入数据库对象，比如数据库表名\n- #{} ：sql解析时会加上\"\"，当成字符串解析，有效的防止Sql语句注入\n- order by 动态参数时需要注意，使用${}而不用#{}\n\n#### mybatis一对一的实现方式\n- 联表查询：几个表联合查询，只查询一次，通过resultMap节点配置association节点。\n- 嵌套查询：先查一个表，得到外键id，再到另外的表查询，也是配置association节点，但另外的表查询通过select属性配置。\n```\n<association property=\"topicType\" select=\"selectType\" column=\"topics_type_id\" javaType=\"com.tmf.bbs.pojo.Type\"/>\n```\n- property：属性名\n- select：要连接的查询\n- column：共同列\n- javaType：集合中元素类型\n\n#### mybatis一对多的实现方式\n- 联表查询：几个表联合查询，只查询一次，通过resultMap节点配置collection节点。\n- 嵌套查询：先查一个表，得到外键id，再到另外的表查询，也是配置collectionn节点，但另外的表查询通过select属性配置。\n\n```\n<collection property=\"topicComment\" column=\"id\" ofType=\"com.tmf.bbs.pojo.Comment\" select=\"selectComment\" />\n```\n- property：属性名\n- select：要连接的查询\n- column：共同列\n- ofType：集合中元素类型\n\n#### mybatis的接口绑定，好处\nmybatis实现了dao接口和xml映射文件的绑定，自动生成了接口的实现，更方便。\n\n#### 接口绑定的实现方式，什么情况下使用\n注解绑定和xml绑定。\nsql简单时使用注解绑定。复杂时使用xml绑定。\n\n#### JDBC与数据库交互的流程是什么\n1. 加载数据库驱动\n2. 获取数据库连接\n3. 生成statement对象\n4. 设置sql语句\n5. 设置sql参数\n6. 使用statement执行sql\n7. 获取结果集，解析结果集\n8. 关闭连接，释放资源\n\n\n#### 谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。\n- sqlSession：封装了对数据库操作的方法，是通过sqlSessionFactory创建的\n- sqlSessionFactory：通过sqlSessionFactoryBuild创建的\n- sqlSessionFactoryBuild：是创建sqlSessionFactory时使用的，因为sqlSession是由sqlSessionFactory创建，所以可以当做工具类使用\n- sqlSessionFactory是一个接口，重载了opensession的方法。使用范围是在整个运行范围内，一旦创建可以重复使用，所以可以当做单实例来管理。\n- sqlSession是面向用户的一个操作数据库的接口，每个线程都有自己的sqlSession，sqlSession不能线程共享，sqlSession不使用就要关闭。\n\n#### 简述Mybatis的插件运行原理\nMybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，还需要在配置文件中配置你编写的插件。\n\n---\n\n### spring\n#### 如何理解Spring\n具体来说Spring是一个轻量级的容器，用于管理业务相关对象的。核心功能主要为：IOC,AOP,MVC。\n\n- IOC：控制反转，将对象的创建过程交给容器，让容器管理对象的生命周期如创建，初始化，销毁等。\n- AOP：面向切面编程，对关注点进行模块化，通过对某一功能点进行编程，比如记录日志，有很多个类都需要记录日志的方法，则创建记录日志的代理方法，需要调用该功能是只需要调用代理方法，这就是AOP。\n- MVC：SpringMvc,Spring提供的基于MVC模式设计的Web框架，如今比较流行的框架之一。\n\n#### 使用Spring框架能带来哪些好处\n- 轻量：Spring 是轻量的，基本的版本大约2MB。\n- 控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。\n- 面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。\n- 容器：Spring 包含并管理应用中对象的生命周期和配置。\n- MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。\n- 事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。\n- 异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。\n\n#### 什么是控制反转(IOC)？什么是依赖注入\n- 控制反转是应用于软件工程领域中的，在运行时被装配器对象来绑定耦合对象的一种编程技巧，对象之间耦合关系在编译时通常是未知的。在传统的编程方式中，业务逻辑的流程是由应用程序中的早已被设定好关联关系的对象来决定的。在使用控制反转的情况下，业务逻辑的流程是由对象关系图来决定的，该对象关系图由装配器负责实例化，这种实现方式还可以将对象之间的关联关系的定义抽象化。而绑定的过程是通过“依赖注入”实现的。\n- 控制反转是一种以给予应用程序中目标组件更多控制为目的设计范式，并在我们的实际工作中起到了有效的作用。\n- 依赖注入是在编译阶段尚未知所需的功能是来自哪个的类的情况下，将其他对象所依赖的功能对象实例化的模式。这就需要一种机制用来激活相应的组件以提供特定的功能，所以依赖注入是控制反转的基础。否则如果在组件不受框架控制的情况下，框架又怎么知道要创建哪个组件？\n\n#### 注入有以下三种实现方式\n- 构造器注入\n- setter方法注入\n- 接口注入\n\n#### 解释下Spring框架中的IoC\nIOC:把对象的创建、初始化、销毁交给spring来管理，而不是由开发者控制，实现控制反转。\n- Spring中的 org.springframework.beans 包和 org.springframework.context包构成了Spring框架IoC容器的基础。\n- BeanFactory 接口提供了一个先进的配置机制，使得任何类型的对象的配置成为可能。ApplicationContex接口对BeanFactory（是一个子接口）进行了扩展，在BeanFactory的基础上添加了其他功能，比如与Spring的AOP更容易集成，也提供了处理message resource的机制（用于国际化）、事件传播以及应用层的特别配置，比如针对Web应用的WebApplicationContext。\n- org.springframework.beans.factory.BeanFactory 是Spring IoC容器的具体实现，用来包装和管理前面提到的各种bean。BeanFactory接口是Spring IoC 容器的核心接口。\n\n#### BeanFactory和ApplicationContext有什么区别\n##### 描述：\nBeanFactory：是Spring里面最低层的接口，提供了最简单的容器的功能，只提供了实例化对象和拿对象的功能；\nApplicationContext：应用上下文，继承BeanFactory接口，它是Spring的一各更高级的容器，提供了更多的有用的功能：\n1. 国际化（MessageSource）\n2. 访问资源，如URL和文件（ResourceLoader）\n3. 载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层  \n4. 消息发送、响应机制（ApplicationEventPublisher）\n5. AOP（拦截器）\n\n##### 两者装载bean的区别：\nBeanFactory：BeanFactory在启动的时候不会去实例化Bean，只有从容器中拿Bean的时候才会去实例化；\nApplicationContext：ApplicationContext在启动的时候就把所有的Bean全部实例化了。它还可以为Bean配置lazy-init=true来让Bean延迟实例化； \n##### 用BeanFactory还是ApplicationContent\n延迟实例化的优点：（BeanFactory）\n应用启动的时候占用资源很少；对资源要求较高的应用，比较有优势； \n不延迟实例化的优点： （ApplicationContext）\n1. 所有的Bean在启动的时候都加载，系统运行的速度快； \n2. 在启动的时候所有的Bean都加载了，我们就能在系统启动的时候，尽早的发现系统中的配置问题 \n3. 建议web应用，在启动的时候就把所有的Bean都加载了。（把费时的操作放到系统启动中完成）\n\n#### Spring有几种配置方式\n- 基于xml配置\n- 基于注解配置\n- 基于java配置\n\n#### 如何用基于XML配置的方式配置Spring\n\n在Spring框架中，依赖和服务需要在专门的配置文件来实现，常用的XML格式的配置文件。这些配置文件的格式通常用&lt;beans&gt;开头，然后一系列的bean定义和专门的应用配置选项组成。\n\nSpringXML配置的主要目的时候是使所有的Spring组件都可以用xml文件的形式来进行配置。这意味着不会出现其他的Spring配置类型（比如声明的方式或基于Java Class的配置方式）\n\nSpring的XML配置方式是使用被Spring命名空间的所支持的一系列的XML标签来实现的。Spring有以下主要的命名空间：context、beans、jdbc、tx、aop、mvc和aso。\n\n#### 如何用基于Java配置的方式配置Spring\nSpring对Java配置的支持是由@Configuration注解和@Bean注解来实现的。由@Bean注解的方法将会实例化、配置和初始化一个新对象，这个对象将由Spring的IoC容器来管理。@Bean声明所起到的作用与<bean/> 元素类似。被@Configuration所注解的类则表示这个类的主要目的是作为bean定义的资源。被@Configuration声明的类可以通过在同一个类的内部调用@bean方法来设置嵌入bean的依赖关系。\n\n#### 怎样用注解的方式配置Spring\n\nSpring在2.5版本以后开始支持用注解的方式来配置依赖注入。可以用注解的方式来替代XML方式的bean描述，可以将bean描述转移到组件类的内部，只需要在相关类上、方法上或者字段声明上使用注解即可。注解注入将会被容器在XML注入之前被处理，所以后者会覆盖掉前者对于同一个属性的处理结果。\n\n注解装配在Spring中是默认关闭的。所以需要在Spring文件中配置一下才能使用基于注解的装配模式。如果你想要在你的应用程序中使用关于注解的方法的话，请参考如下的配置。\n\n```\n<beans>    \n   <context:annotation-config/>    \n   <!-- bean definitions go here -->    \n</beans>    \n```\n在 <context:annotation-config/>标签配置完成以后，就可以用注解的方式在Spring中向属性、方法和构造方法中自动装配变量。\n- @Required：该注解应用于设值方法。\n- @Autowired：该注解应用于有值设值方法、非设值方法、构造方法和变量。\n- @Qualifier：该注解和@Autowired注解搭配使用，用于消除特定bean自动装配的歧义。\n- JSR-250 Annotations：Spring支持基于JSR-250 注解的以下注解，@Resource、@PostConstruct 和 @PreDestroy。\n\n#### 什么是Spring Beans\nSpring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中&lt;bean/&gt; 的形式定义。\n\nSpring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。\n\n#### 请解释Spring Bean的生命周期\n\n- 实例化bean对象(通过构造方法或者工厂方法)\n- 设置对象属性(setter等)（依赖注入）\n- 如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。（和下面的一条均属于检查Aware接口）\n- 如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身\n- 将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization(Object bean, String beanname)方法\n- InitializingBean的afterPropertiesSet()，如果实现了该接口，则执行其afterPropertiesSet()方法\n- 调用Bean的初始化方法init-method\n- 将Bean实例传递给Bean的后置处理器的postProcessAfterInitialization(Object bean, String beanname)方法\n- DisposableBean的destroy()，在容器关闭时，如果Bean类实现了该接口，则执行它的destroy()方法\n- 容器关闭之前，调用Bean的销毁方法destroy-method，可以在Bean定义文件中使用destory-method定义的方法\n\n如果使用ApplicationContext来维护一个Bean的生命周期，则基本上与上边的流程相同，只不过在执行BeanNameAware的setBeanName()后，若有Bean类实现了org.springframework.context.ApplicationContextAware接口，则执行其setApplicationContext()方法，然后再进行BeanPostProcessors的processBeforeInitialization()\n实际上，ApplicationContext除了向BeanFactory那样维护容器外，还提供了更加丰富的框架功能，如Bean的消息，事件处理机制等\n\n\n#### Spring支持的几种bean的作用域\n当定义一个<bean> 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。\n- **singleton** : bean在每个Spring ioc 容器中只有一个实例。\n- **prototype**：一个bean的定义可以有多个实例。\n- **request**：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。\n- **session**：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n- **global-session**：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n\n#### 哪些是重要的bean生命周期方法？ 你能重载它们吗？\n有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown  它是在容器卸载类的时候被调用。\n\nThe bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。\n\n#### 什么是Spring的内部bean\n当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义inner bean，在Spring 的 基于XML的 配置元数据中，可以在&lt;property/&gt;或 &lt;constructor-arg/&gt; 元素内使用&lt;bean/&gt;元素，内部bean通常是匿名的，它们的Scope一般是prototype。\n\n#### 在 Spring中如何注入一个java集合\n\n- &lt;list&gt;类型用于注入一列值，允许有相同的值。\n- &lt;set&gt;类型用于注入一组值，不允许有相同的值。\n- &lt;map&gt;类型用于注入一组键值对，键和值都可以为任意类型。\n- &lt;props&gt;类型用于注入一组键值对，键和值都只能为String类型。\n\n#### bean装配、bean的自动装配\n装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。\n\nSpring 容器能够自动装配相互合作的bean，这意味着容器不需要&lt;constructor-arg&gt;和&lt;property&gt;配置，能通过Bean工厂自动处理bean之间的协作。\n\n#### 解释不同方式的自动装配\n- **no**：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。\n- **byName**：通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。\n- **byType**:：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。\n- **constructor**：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。\n- **autodetect**：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。\n\n#### 自动装配有哪些局限性\n\n- 重写： 你仍需用 &lt;constructor-arg&gt;和 &lt;property&gt; 配置来定义依赖，意味着总要重写自动装配。\n- 基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。\n- 模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。\n\n#### @Required  @Autowired @Qualifier 注解\n- **@Required**：这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。\n- **@Autowired** 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。\n- **@Qualifier** 注解\n当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。\n\n#### 介绍一下Spring的事物管理\n事务就是对一系列的数据库操作（比如插入多条数据）进行统一的提交或回滚操作，如果插入成功，那么一起成功，如果中间有一条出现异常，那么回滚之前的所有操作。这样可以防止出现脏数据，防止数据库数据出现问题。\n\n开发中为了避免这种情况一般都会进行事务管理。Spring中也有自己的事务管理机制，一般是使用TransactionMananger进行管理，可以通过Spring的注入来完成此功能。\n\n#### Spring支持的事务管理类型\n\n- **编程式事务管理**：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。\n- **声明式事务管理**：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。\n\n#### Spring框架的事务管理有哪些优点\n- 它为不同的事务API  如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。\n- 它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如\n- 它支持声明式事务管理。\n- 它和Spring各种数据访问抽象层很好得集成。\n\n#### 解释AOP\nAOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。\n\n#### 在Spring AOP 中，关注点和横切关注的区别是什么\n- 关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。\n- 横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。\n\n\n#### 连接点、通知、切入点\n- 连接点：代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。\n- 通知：是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。\n- 切入点：是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点\n\n#### Spring切面可以应用五种类型的通知\n\n- before：前置通知，在一个方法执行前被调用。\n- after: 在方法执行之后调用的通知，无论方法执行是否成功。\n- after-returning: 仅当方法成功完成后执行的通知。\n- after-throwing: 在方法抛出异常退出时执行的通知。\n- around: 在方法执行之前和之后调用的通知。\n\n#### 引入、目标对象、代理\n- 引入：允许我们在已存在的类中增加新的方法和属性。\n- 目标对象：被一个或者多个切面所通知的对象。它通常是一个代理对象。也指被通知（advised）对象。\n- 代理：是通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。\n\n#### 有几种不同类型的自动代理\n- BeanNameAutoProxyCreator\n- DefaultAdvisorAutoProxyCreator\n- Metadata autoproxying\n\n#### 什么是织入。什么是织入应用的不同点\n织入：把切面（aspect）连接到其它的应用程序类型或者对象上，并创建一个被通知（advised）的对象。\n\n织入可以在编译时，加载时，或运行时完成。\n\n#### 切面实现\n- **基于XML Schema方式**的切面实现：在这种情况下，切面由常规类以及基于XML的配置实现。\n- **基于注解**的切面实现：在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。\n\n\n### Spring中用到哪些设计模式\n- 工厂模式（BeanFactory中）\n- 单例模式：Spring中默认bean为单例\n- 适配器模式（HandlerAdater）\n- 装饰者模式\n- 代理模式：在AOP和remoting中被用的比较多，AOP中用到JDK动态代理\n- 观察者模式（listener的实现，例如ApplicationListener）\n- 策略模式（定义一系列的算法，把它们一个个的封装起来，并且使它们可以相互替换。在实例化对象时用到）\n- 模板模式：用来解决代码重复的问题，jdbcTemplate\n\n\n\n\n","source":"_posts/Spring知识总结整理.md","raw":"---\ntitle: Spring知识总结整理\ndate: 2019-03-29 19:40:51\ntags:  [面试,Spring]\ncategories: [面试,Spring]\ndescription: Spring知识总结整理\n---\n\n# Spring面试问题总结整理\n参考：\n[ssm常见面试题](https://blog.csdn.net/qq_38262968/article/details/79474455)、\n[ssm面试题总结](https://blog.csdn.net/weixin_39801925/article/details/80585758)、\n[java ssm框架基础面试题](https://www.jianshu.com/p/231a582d2a02)、\n[JavaSSM框架精选50道面试题](https://blog.csdn.net/qq_41735004/article/details/87199651)、\n[69道Spring面试题和答案](http://ifeve.com/spring-interview-questions-and-answers/)\n\n---\n\n### spring mvc\n![springmvc](/image/interview_prep/springmvc.png)\n\n#### 简单介绍对springMVC的理解\nSpring MVC是基于java的实现MVC设计模式的请求驱动类型的轻量级web框架，通过把model、view、controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错。\n- model负责对应用数据封装，并对外提供应用功能的接口；\n- view负责通过向控制器发送请求，得到响应，并向用户展示处理好的数据；\n- controller负责定义应用的功能，接收用户的动作，并选择响应的view\n特点：\n- 它是基于组件技术的。全部的应用对象，无论控制器和视图还是业务对象之类的，都是基于java组件，并且和spring基础组件集成。\n- 不依赖于servletAPI（虽然具体具体实现还是依赖servlet）\n- 可以使用任何视图技术，不仅仅jsp\n- 支持各种请求资源的映射策略\n- 它是易于扩展的\n\n#### spring mvc的流程\n1. 用户发送请求到DispatcherServlet；\n2. servlet接收到请求后，调用HandlerMapping，请求获取Handler；\n3. HandlerMapping根据url得到具体的Handler，生成Handler对象和Handler拦截器，一起返回给DispatcherServlet；\n4. DispatcherServlet调用HandlerAdapter；\n5. HandlerAdapter执行Handler\n6. Handler执行完返回ModerAndView；\n7. HandlerAdapter将ModerAndView返回给DispatcherServlet；\n8. DispatcherServlet将ModerAndView传给ViewResolver解析；\n9. ViewResolver解析后将view返回；\n10. DispatcherServlet渲染view（将模型数据填充）\n11. 响应用户。\n\n#### spring mvc优点\n- 可以支持各种视图技术，不仅jsp\n- 与spring框架集成（ioc、aop）\n- 清晰的角色分配：DispatcherServlet、HandlerMapping、HandlerAdapter、ViewResolver.\n- 支持各种请求资源的映射策略。\n\n#### spring mvc主要组件\n- **DispatcherServlet**（不需要程序员开发）：接收请求，响应结果，相当于转发器，有了它可以减少其他组件之间的耦合度。\n- **HandlerMapping**（不需要程序员开发）：根据url查找Handler。\n- **HandlerAdapter**：根据 Handler 来找到支持它的 HandlerAdapter，通过 HandlerAdapter 执行这个 Handler 得到 ModelAndView 对象。\n- **Handler**（需要程序员开发）\n- **ViewResolver**：进行视图解析，根据视图逻辑名解释成真正的视图。\n- **View**（需要开发）：View是一个接口， 它的实现类支持不同的视图类型（jsp，freemarker，pdf等等）\n\n#### spring mvc和struts2区别\n- spring mvc的入口是一个servlet——DispatcherServlet，struts2的入口是一个filter过滤器——StrutsPrepareAndExecuteFilter。\n- spring mvc是基于方法开发（一个url对应一个方法），请求参数传递到方法的形参，可以是单例也可以是多例；Struts2是基于类开发，传递参数是通过类属性，只能设计为多例。\n- Struts采用值栈存储请求和响应的数据，通过OGNL存取数据；springmvc通过参数解析器将request请求内容解析，并给方法的形参赋值，将数据和视图封装成ModelAndView对象，最后将ModelAndView的模型数据通过request域传输到页面。jsp视图解析器默认jstl。\n\n\n#### springmvc如何设定重定向和转发\n- 转发：返回值前加<font color='red'>forward:</font>，如：forward:user.do?name=method4\n- 重定向：返回值前加<font color='red'>redirect:</font>，如：redirect:http://www.baidu.com\n\n\n#### springmvc如何AJAX交互\n通过jackson框架，可以把java对象转为json。\n1. 加入jackson.jar\n2. 配置文件中配置json映射\n3. 方法前加@ResponseBody\n\n#### 解决POST、GET的中文乱码\nPOST：web.xml中配置CharacterEncodingFilter过滤器，设置成utf-8\n\nGET: \n- 修改tomcat配置文件添加编码与工程编码一致\n- 对参数进行重新编码，String userName = new String(request.getParamter(\"userName\").getBytes(\"ISO8859-1\"),\"utf-8\")\n\n\n#### SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决\n是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段。\n\n#### springmvc常用注解\n\n- @RequestMapping：用于处理url映射的注解，用于类或方法上。\n- @RequestBody：用于实现接收http请求的json数据。\n- @ResponseBody：用于实现将java对象转化为json对象，返回响应。\n\n#### SpringMvc中函数的返回值是什么\n返回值可以有很多类型,有String, ModelAndView。ModelAndView类把视图和数据都合并的一起的\n\n#### SpringMvc用什么对象从后台向前台传递数据的\n通过ModelMap对象，调用put方法，把对象加入，前台用el表达式\n\n#### ModelMap的数据放入session里面\n类上加@SessionAttributes注解，里面包含的字符串就是要放入session里的key。\n\n#### springmvc拦截器\n两种写法，一种是实现HandlerInterceptor接口，一种是继承适配器类，在接口方法中实现。然后再springmvc的配置文件中配置。\n\n```xml\n<mvc:interceptors>\n    <!--默认拦截所有-->\n    <bean id='myInterceptor' class='cn.keinz.myHandlerInterceptor'>\n    <!--只针对某个url-->\n    <mvc: interceptor>\n        <mvc: mapping path='/user'/>\n        <bean class='cn.keinz.myHandlerInterceptorAdapter'>\n    </mvc: interceptor>\n</mvc:interceptors>\n```\n\n#### 注解原理\n[JAVA 注解的基本原理](https://www.cnblogs.com/yangming1996/p/9295168.html)\n\n注解本质是继承了Annotation接口的接口，具体的实现类是通过运行时生成的动态 代理类。我们通过反射获取注解时，返回的是java运行时生成的动态代理对象。通过动态代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会通过memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。\n\n#### Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler\n\n符合面向对象的单一职责原则，代码结构清晰，便于维护，最重要的是可复用性高，如HandlerAdapter可能被用于处理多种Handler。\n\n---\n\n### mybatis\n#### mybatis的理解\n- 连接数据库通过核心配置文件：SqlMapConfig.xml，配置数据库连接池的获得和连接数据库\n- 操作数据库通过映射配置文件，这个配置文件设计为dao的实现映射，可以视作dao的实现\n- 通过SqlMapConfig.xml构造SqlSessionFactory，由SqlSessionFactory.openSession()获得SqlSession，操作数据库由SqlSession完成。\n- mybatis底层定义了Executor接口操作数据库，Executor接口有两个实现：一个基本执行器，一个缓存执行器。\n- Mapped Statement也是mybatis的一个底层封装对象，它包装了mybatis的配置信息和sql映射信息等，mapper.xml的一个sql对应一个Mapped Statement对象，sql的id就是Mapped Statement的id。\n- Mapped Statement对sql执行的输入参数进行定义，包括HashMap、基本类型和pojo，Executor通过Mapped Statement在执行前将java对象映射到sql中，输入参数映射就是jdbc编程中对prepared statement设置参数。\n- Mapped Statement对sql执行的输出参数进行定义，包括HashMap、基本类型和pojo，Executor通过Mapped Statement在执行后将输出映射到java对象，输出结果映射相当于jdbc编程中对结果的解析。\n\nmybatis是一个暴露出sql语句的jdbc封装，是一个暴露sql语句的持久层框架，暴露的方式是映射配置文件。\n\n#### 使用MyBatis(IBatis)的好处是什么\n- mybatis把sql语句从java源程序中独立出来，放在xml里，系统维护更便利。\n- mybatis封装了底层jdbc api调用细节，并能自动将结果转为java bean对象。\n- mybatis需要自己编写sql，可以灵活控制sql语句，比hibernate等全自动orm框架有更高的效率，能完成复杂的查询。\n\n\n#### 对MyBatis的缓存的理解\nmybatis缓存分为一级缓存和二级缓存，一级缓存在sqlsession中，默认就有，二级缓存基于mapper文件的namespace，开始需要在mybatis-configuration.xml配置文件中添加：\n\n```\n<settings>\n    <setting name=\"cacheEnabled\" value=\"true\"/>\n</settings>\n```\n然后在mapper.xml中：\n\n```\n<cache type=\"org.apache.ibatis.cache.impl.PerpetualCache\"/>\n```\n最后，po类实现serializable接口。\n\nMybatis首先去缓存中查询结果集，如果没有则查询数据库，如果有则从缓存取出返回结果集就不走数据库。Mybatis内部存储缓存使用一个HashMap，key为hashCode+sqlId+Sql语句。value为从查询出来映射生成的java对象\nMybatis的二级缓存即查询缓存，它的作用域是一个mapper的namespace，即在同一个namespace中查询sql可以从缓存中获取数据。二级缓存是可以跨SqlSession的。\n\n\n#### ${} 和 #{}的区别\n- ${} ：预编译处理，直接把${} 替换成变量的值；$一般用入传入数据库对象，比如数据库表名\n- #{} ：sql解析时会加上\"\"，当成字符串解析，有效的防止Sql语句注入\n- order by 动态参数时需要注意，使用${}而不用#{}\n\n#### mybatis一对一的实现方式\n- 联表查询：几个表联合查询，只查询一次，通过resultMap节点配置association节点。\n- 嵌套查询：先查一个表，得到外键id，再到另外的表查询，也是配置association节点，但另外的表查询通过select属性配置。\n```\n<association property=\"topicType\" select=\"selectType\" column=\"topics_type_id\" javaType=\"com.tmf.bbs.pojo.Type\"/>\n```\n- property：属性名\n- select：要连接的查询\n- column：共同列\n- javaType：集合中元素类型\n\n#### mybatis一对多的实现方式\n- 联表查询：几个表联合查询，只查询一次，通过resultMap节点配置collection节点。\n- 嵌套查询：先查一个表，得到外键id，再到另外的表查询，也是配置collectionn节点，但另外的表查询通过select属性配置。\n\n```\n<collection property=\"topicComment\" column=\"id\" ofType=\"com.tmf.bbs.pojo.Comment\" select=\"selectComment\" />\n```\n- property：属性名\n- select：要连接的查询\n- column：共同列\n- ofType：集合中元素类型\n\n#### mybatis的接口绑定，好处\nmybatis实现了dao接口和xml映射文件的绑定，自动生成了接口的实现，更方便。\n\n#### 接口绑定的实现方式，什么情况下使用\n注解绑定和xml绑定。\nsql简单时使用注解绑定。复杂时使用xml绑定。\n\n#### JDBC与数据库交互的流程是什么\n1. 加载数据库驱动\n2. 获取数据库连接\n3. 生成statement对象\n4. 设置sql语句\n5. 设置sql参数\n6. 使用statement执行sql\n7. 获取结果集，解析结果集\n8. 关闭连接，释放资源\n\n\n#### 谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。\n- sqlSession：封装了对数据库操作的方法，是通过sqlSessionFactory创建的\n- sqlSessionFactory：通过sqlSessionFactoryBuild创建的\n- sqlSessionFactoryBuild：是创建sqlSessionFactory时使用的，因为sqlSession是由sqlSessionFactory创建，所以可以当做工具类使用\n- sqlSessionFactory是一个接口，重载了opensession的方法。使用范围是在整个运行范围内，一旦创建可以重复使用，所以可以当做单实例来管理。\n- sqlSession是面向用户的一个操作数据库的接口，每个线程都有自己的sqlSession，sqlSession不能线程共享，sqlSession不使用就要关闭。\n\n#### 简述Mybatis的插件运行原理\nMybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，还需要在配置文件中配置你编写的插件。\n\n---\n\n### spring\n#### 如何理解Spring\n具体来说Spring是一个轻量级的容器，用于管理业务相关对象的。核心功能主要为：IOC,AOP,MVC。\n\n- IOC：控制反转，将对象的创建过程交给容器，让容器管理对象的生命周期如创建，初始化，销毁等。\n- AOP：面向切面编程，对关注点进行模块化，通过对某一功能点进行编程，比如记录日志，有很多个类都需要记录日志的方法，则创建记录日志的代理方法，需要调用该功能是只需要调用代理方法，这就是AOP。\n- MVC：SpringMvc,Spring提供的基于MVC模式设计的Web框架，如今比较流行的框架之一。\n\n#### 使用Spring框架能带来哪些好处\n- 轻量：Spring 是轻量的，基本的版本大约2MB。\n- 控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。\n- 面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。\n- 容器：Spring 包含并管理应用中对象的生命周期和配置。\n- MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。\n- 事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。\n- 异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。\n\n#### 什么是控制反转(IOC)？什么是依赖注入\n- 控制反转是应用于软件工程领域中的，在运行时被装配器对象来绑定耦合对象的一种编程技巧，对象之间耦合关系在编译时通常是未知的。在传统的编程方式中，业务逻辑的流程是由应用程序中的早已被设定好关联关系的对象来决定的。在使用控制反转的情况下，业务逻辑的流程是由对象关系图来决定的，该对象关系图由装配器负责实例化，这种实现方式还可以将对象之间的关联关系的定义抽象化。而绑定的过程是通过“依赖注入”实现的。\n- 控制反转是一种以给予应用程序中目标组件更多控制为目的设计范式，并在我们的实际工作中起到了有效的作用。\n- 依赖注入是在编译阶段尚未知所需的功能是来自哪个的类的情况下，将其他对象所依赖的功能对象实例化的模式。这就需要一种机制用来激活相应的组件以提供特定的功能，所以依赖注入是控制反转的基础。否则如果在组件不受框架控制的情况下，框架又怎么知道要创建哪个组件？\n\n#### 注入有以下三种实现方式\n- 构造器注入\n- setter方法注入\n- 接口注入\n\n#### 解释下Spring框架中的IoC\nIOC:把对象的创建、初始化、销毁交给spring来管理，而不是由开发者控制，实现控制反转。\n- Spring中的 org.springframework.beans 包和 org.springframework.context包构成了Spring框架IoC容器的基础。\n- BeanFactory 接口提供了一个先进的配置机制，使得任何类型的对象的配置成为可能。ApplicationContex接口对BeanFactory（是一个子接口）进行了扩展，在BeanFactory的基础上添加了其他功能，比如与Spring的AOP更容易集成，也提供了处理message resource的机制（用于国际化）、事件传播以及应用层的特别配置，比如针对Web应用的WebApplicationContext。\n- org.springframework.beans.factory.BeanFactory 是Spring IoC容器的具体实现，用来包装和管理前面提到的各种bean。BeanFactory接口是Spring IoC 容器的核心接口。\n\n#### BeanFactory和ApplicationContext有什么区别\n##### 描述：\nBeanFactory：是Spring里面最低层的接口，提供了最简单的容器的功能，只提供了实例化对象和拿对象的功能；\nApplicationContext：应用上下文，继承BeanFactory接口，它是Spring的一各更高级的容器，提供了更多的有用的功能：\n1. 国际化（MessageSource）\n2. 访问资源，如URL和文件（ResourceLoader）\n3. 载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层  \n4. 消息发送、响应机制（ApplicationEventPublisher）\n5. AOP（拦截器）\n\n##### 两者装载bean的区别：\nBeanFactory：BeanFactory在启动的时候不会去实例化Bean，只有从容器中拿Bean的时候才会去实例化；\nApplicationContext：ApplicationContext在启动的时候就把所有的Bean全部实例化了。它还可以为Bean配置lazy-init=true来让Bean延迟实例化； \n##### 用BeanFactory还是ApplicationContent\n延迟实例化的优点：（BeanFactory）\n应用启动的时候占用资源很少；对资源要求较高的应用，比较有优势； \n不延迟实例化的优点： （ApplicationContext）\n1. 所有的Bean在启动的时候都加载，系统运行的速度快； \n2. 在启动的时候所有的Bean都加载了，我们就能在系统启动的时候，尽早的发现系统中的配置问题 \n3. 建议web应用，在启动的时候就把所有的Bean都加载了。（把费时的操作放到系统启动中完成）\n\n#### Spring有几种配置方式\n- 基于xml配置\n- 基于注解配置\n- 基于java配置\n\n#### 如何用基于XML配置的方式配置Spring\n\n在Spring框架中，依赖和服务需要在专门的配置文件来实现，常用的XML格式的配置文件。这些配置文件的格式通常用&lt;beans&gt;开头，然后一系列的bean定义和专门的应用配置选项组成。\n\nSpringXML配置的主要目的时候是使所有的Spring组件都可以用xml文件的形式来进行配置。这意味着不会出现其他的Spring配置类型（比如声明的方式或基于Java Class的配置方式）\n\nSpring的XML配置方式是使用被Spring命名空间的所支持的一系列的XML标签来实现的。Spring有以下主要的命名空间：context、beans、jdbc、tx、aop、mvc和aso。\n\n#### 如何用基于Java配置的方式配置Spring\nSpring对Java配置的支持是由@Configuration注解和@Bean注解来实现的。由@Bean注解的方法将会实例化、配置和初始化一个新对象，这个对象将由Spring的IoC容器来管理。@Bean声明所起到的作用与<bean/> 元素类似。被@Configuration所注解的类则表示这个类的主要目的是作为bean定义的资源。被@Configuration声明的类可以通过在同一个类的内部调用@bean方法来设置嵌入bean的依赖关系。\n\n#### 怎样用注解的方式配置Spring\n\nSpring在2.5版本以后开始支持用注解的方式来配置依赖注入。可以用注解的方式来替代XML方式的bean描述，可以将bean描述转移到组件类的内部，只需要在相关类上、方法上或者字段声明上使用注解即可。注解注入将会被容器在XML注入之前被处理，所以后者会覆盖掉前者对于同一个属性的处理结果。\n\n注解装配在Spring中是默认关闭的。所以需要在Spring文件中配置一下才能使用基于注解的装配模式。如果你想要在你的应用程序中使用关于注解的方法的话，请参考如下的配置。\n\n```\n<beans>    \n   <context:annotation-config/>    \n   <!-- bean definitions go here -->    \n</beans>    \n```\n在 <context:annotation-config/>标签配置完成以后，就可以用注解的方式在Spring中向属性、方法和构造方法中自动装配变量。\n- @Required：该注解应用于设值方法。\n- @Autowired：该注解应用于有值设值方法、非设值方法、构造方法和变量。\n- @Qualifier：该注解和@Autowired注解搭配使用，用于消除特定bean自动装配的歧义。\n- JSR-250 Annotations：Spring支持基于JSR-250 注解的以下注解，@Resource、@PostConstruct 和 @PreDestroy。\n\n#### 什么是Spring Beans\nSpring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中&lt;bean/&gt; 的形式定义。\n\nSpring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。\n\n#### 请解释Spring Bean的生命周期\n\n- 实例化bean对象(通过构造方法或者工厂方法)\n- 设置对象属性(setter等)（依赖注入）\n- 如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。（和下面的一条均属于检查Aware接口）\n- 如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身\n- 将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization(Object bean, String beanname)方法\n- InitializingBean的afterPropertiesSet()，如果实现了该接口，则执行其afterPropertiesSet()方法\n- 调用Bean的初始化方法init-method\n- 将Bean实例传递给Bean的后置处理器的postProcessAfterInitialization(Object bean, String beanname)方法\n- DisposableBean的destroy()，在容器关闭时，如果Bean类实现了该接口，则执行它的destroy()方法\n- 容器关闭之前，调用Bean的销毁方法destroy-method，可以在Bean定义文件中使用destory-method定义的方法\n\n如果使用ApplicationContext来维护一个Bean的生命周期，则基本上与上边的流程相同，只不过在执行BeanNameAware的setBeanName()后，若有Bean类实现了org.springframework.context.ApplicationContextAware接口，则执行其setApplicationContext()方法，然后再进行BeanPostProcessors的processBeforeInitialization()\n实际上，ApplicationContext除了向BeanFactory那样维护容器外，还提供了更加丰富的框架功能，如Bean的消息，事件处理机制等\n\n\n#### Spring支持的几种bean的作用域\n当定义一个<bean> 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。\n- **singleton** : bean在每个Spring ioc 容器中只有一个实例。\n- **prototype**：一个bean的定义可以有多个实例。\n- **request**：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。\n- **session**：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n- **global-session**：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n\n#### 哪些是重要的bean生命周期方法？ 你能重载它们吗？\n有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown  它是在容器卸载类的时候被调用。\n\nThe bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。\n\n#### 什么是Spring的内部bean\n当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义inner bean，在Spring 的 基于XML的 配置元数据中，可以在&lt;property/&gt;或 &lt;constructor-arg/&gt; 元素内使用&lt;bean/&gt;元素，内部bean通常是匿名的，它们的Scope一般是prototype。\n\n#### 在 Spring中如何注入一个java集合\n\n- &lt;list&gt;类型用于注入一列值，允许有相同的值。\n- &lt;set&gt;类型用于注入一组值，不允许有相同的值。\n- &lt;map&gt;类型用于注入一组键值对，键和值都可以为任意类型。\n- &lt;props&gt;类型用于注入一组键值对，键和值都只能为String类型。\n\n#### bean装配、bean的自动装配\n装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。\n\nSpring 容器能够自动装配相互合作的bean，这意味着容器不需要&lt;constructor-arg&gt;和&lt;property&gt;配置，能通过Bean工厂自动处理bean之间的协作。\n\n#### 解释不同方式的自动装配\n- **no**：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。\n- **byName**：通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。\n- **byType**:：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。\n- **constructor**：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。\n- **autodetect**：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。\n\n#### 自动装配有哪些局限性\n\n- 重写： 你仍需用 &lt;constructor-arg&gt;和 &lt;property&gt; 配置来定义依赖，意味着总要重写自动装配。\n- 基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。\n- 模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。\n\n#### @Required  @Autowired @Qualifier 注解\n- **@Required**：这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。\n- **@Autowired** 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。\n- **@Qualifier** 注解\n当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。\n\n#### 介绍一下Spring的事物管理\n事务就是对一系列的数据库操作（比如插入多条数据）进行统一的提交或回滚操作，如果插入成功，那么一起成功，如果中间有一条出现异常，那么回滚之前的所有操作。这样可以防止出现脏数据，防止数据库数据出现问题。\n\n开发中为了避免这种情况一般都会进行事务管理。Spring中也有自己的事务管理机制，一般是使用TransactionMananger进行管理，可以通过Spring的注入来完成此功能。\n\n#### Spring支持的事务管理类型\n\n- **编程式事务管理**：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。\n- **声明式事务管理**：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。\n\n#### Spring框架的事务管理有哪些优点\n- 它为不同的事务API  如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。\n- 它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如\n- 它支持声明式事务管理。\n- 它和Spring各种数据访问抽象层很好得集成。\n\n#### 解释AOP\nAOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。\n\n#### 在Spring AOP 中，关注点和横切关注的区别是什么\n- 关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。\n- 横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。\n\n\n#### 连接点、通知、切入点\n- 连接点：代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。\n- 通知：是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。\n- 切入点：是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点\n\n#### Spring切面可以应用五种类型的通知\n\n- before：前置通知，在一个方法执行前被调用。\n- after: 在方法执行之后调用的通知，无论方法执行是否成功。\n- after-returning: 仅当方法成功完成后执行的通知。\n- after-throwing: 在方法抛出异常退出时执行的通知。\n- around: 在方法执行之前和之后调用的通知。\n\n#### 引入、目标对象、代理\n- 引入：允许我们在已存在的类中增加新的方法和属性。\n- 目标对象：被一个或者多个切面所通知的对象。它通常是一个代理对象。也指被通知（advised）对象。\n- 代理：是通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。\n\n#### 有几种不同类型的自动代理\n- BeanNameAutoProxyCreator\n- DefaultAdvisorAutoProxyCreator\n- Metadata autoproxying\n\n#### 什么是织入。什么是织入应用的不同点\n织入：把切面（aspect）连接到其它的应用程序类型或者对象上，并创建一个被通知（advised）的对象。\n\n织入可以在编译时，加载时，或运行时完成。\n\n#### 切面实现\n- **基于XML Schema方式**的切面实现：在这种情况下，切面由常规类以及基于XML的配置实现。\n- **基于注解**的切面实现：在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。\n\n\n### Spring中用到哪些设计模式\n- 工厂模式（BeanFactory中）\n- 单例模式：Spring中默认bean为单例\n- 适配器模式（HandlerAdater）\n- 装饰者模式\n- 代理模式：在AOP和remoting中被用的比较多，AOP中用到JDK动态代理\n- 观察者模式（listener的实现，例如ApplicationListener）\n- 策略模式（定义一系列的算法，把它们一个个的封装起来，并且使它们可以相互替换。在实例化对象时用到）\n- 模板模式：用来解决代码重复的问题，jdbcTemplate\n\n\n\n\n","slug":"Spring知识总结整理","published":1,"updated":"2025-02-22T18:52:19.820Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8an000ov001cyovcj3a","content":"<h1 id=\"Spring面试问题总结整理\"><a href=\"#Spring面试问题总结整理\" class=\"headerlink\" title=\"Spring面试问题总结整理\"></a>Spring面试问题总结整理</h1><p>参考：<br><a href=\"https://blog.csdn.net/qq_38262968/article/details/79474455\">ssm常见面试题</a>、<br><a href=\"https://blog.csdn.net/weixin_39801925/article/details/80585758\">ssm面试题总结</a>、<br><a href=\"https://www.jianshu.com/p/231a582d2a02\">java ssm框架基础面试题</a>、<br><a href=\"https://blog.csdn.net/qq_41735004/article/details/87199651\">JavaSSM框架精选50道面试题</a>、<br><a href=\"http://ifeve.com/spring-interview-questions-and-answers/\">69道Spring面试题和答案</a></p>\n<hr>\n<h3 id=\"spring-mvc\"><a href=\"#spring-mvc\" class=\"headerlink\" title=\"spring mvc\"></a>spring mvc</h3><p><img src=\"/image/interview_prep/springmvc.png\" alt=\"springmvc\"></p>\n<h4 id=\"简单介绍对springMVC的理解\"><a href=\"#简单介绍对springMVC的理解\" class=\"headerlink\" title=\"简单介绍对springMVC的理解\"></a>简单介绍对springMVC的理解</h4><p>Spring MVC是基于java的实现MVC设计模式的请求驱动类型的轻量级web框架，通过把model、view、controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错。</p>\n<ul>\n<li>model负责对应用数据封装，并对外提供应用功能的接口；</li>\n<li>view负责通过向控制器发送请求，得到响应，并向用户展示处理好的数据；</li>\n<li>controller负责定义应用的功能，接收用户的动作，并选择响应的view<br>特点：</li>\n<li>它是基于组件技术的。全部的应用对象，无论控制器和视图还是业务对象之类的，都是基于java组件，并且和spring基础组件集成。</li>\n<li>不依赖于servletAPI（虽然具体具体实现还是依赖servlet）</li>\n<li>可以使用任何视图技术，不仅仅jsp</li>\n<li>支持各种请求资源的映射策略</li>\n<li>它是易于扩展的</li>\n</ul>\n<h4 id=\"spring-mvc的流程\"><a href=\"#spring-mvc的流程\" class=\"headerlink\" title=\"spring mvc的流程\"></a>spring mvc的流程</h4><ol>\n<li>用户发送请求到DispatcherServlet；</li>\n<li>servlet接收到请求后，调用HandlerMapping，请求获取Handler；</li>\n<li>HandlerMapping根据url得到具体的Handler，生成Handler对象和Handler拦截器，一起返回给DispatcherServlet；</li>\n<li>DispatcherServlet调用HandlerAdapter；</li>\n<li>HandlerAdapter执行Handler</li>\n<li>Handler执行完返回ModerAndView；</li>\n<li>HandlerAdapter将ModerAndView返回给DispatcherServlet；</li>\n<li>DispatcherServlet将ModerAndView传给ViewResolver解析；</li>\n<li>ViewResolver解析后将view返回；</li>\n<li>DispatcherServlet渲染view（将模型数据填充）</li>\n<li>响应用户。</li>\n</ol>\n<h4 id=\"spring-mvc优点\"><a href=\"#spring-mvc优点\" class=\"headerlink\" title=\"spring mvc优点\"></a>spring mvc优点</h4><ul>\n<li>可以支持各种视图技术，不仅jsp</li>\n<li>与spring框架集成（ioc、aop）</li>\n<li>清晰的角色分配：DispatcherServlet、HandlerMapping、HandlerAdapter、ViewResolver.</li>\n<li>支持各种请求资源的映射策略。</li>\n</ul>\n<h4 id=\"spring-mvc主要组件\"><a href=\"#spring-mvc主要组件\" class=\"headerlink\" title=\"spring mvc主要组件\"></a>spring mvc主要组件</h4><ul>\n<li><strong>DispatcherServlet</strong>（不需要程序员开发）：接收请求，响应结果，相当于转发器，有了它可以减少其他组件之间的耦合度。</li>\n<li><strong>HandlerMapping</strong>（不需要程序员开发）：根据url查找Handler。</li>\n<li><strong>HandlerAdapter</strong>：根据 Handler 来找到支持它的 HandlerAdapter，通过 HandlerAdapter 执行这个 Handler 得到 ModelAndView 对象。</li>\n<li><strong>Handler</strong>（需要程序员开发）</li>\n<li><strong>ViewResolver</strong>：进行视图解析，根据视图逻辑名解释成真正的视图。</li>\n<li><strong>View</strong>（需要开发）：View是一个接口， 它的实现类支持不同的视图类型（jsp，freemarker，pdf等等）</li>\n</ul>\n<h4 id=\"spring-mvc和struts2区别\"><a href=\"#spring-mvc和struts2区别\" class=\"headerlink\" title=\"spring mvc和struts2区别\"></a>spring mvc和struts2区别</h4><ul>\n<li>spring mvc的入口是一个servlet——DispatcherServlet，struts2的入口是一个filter过滤器——StrutsPrepareAndExecuteFilter。</li>\n<li>spring mvc是基于方法开发（一个url对应一个方法），请求参数传递到方法的形参，可以是单例也可以是多例；Struts2是基于类开发，传递参数是通过类属性，只能设计为多例。</li>\n<li>Struts采用值栈存储请求和响应的数据，通过OGNL存取数据；springmvc通过参数解析器将request请求内容解析，并给方法的形参赋值，将数据和视图封装成ModelAndView对象，最后将ModelAndView的模型数据通过request域传输到页面。jsp视图解析器默认jstl。</li>\n</ul>\n<h4 id=\"springmvc如何设定重定向和转发\"><a href=\"#springmvc如何设定重定向和转发\" class=\"headerlink\" title=\"springmvc如何设定重定向和转发\"></a>springmvc如何设定重定向和转发</h4><ul>\n<li>转发：返回值前加<font color='red'>forward:</font>，如：forward:user.do?name&#x3D;method4</li>\n<li>重定向：返回值前加<font color='red'>redirect:</font>，如：redirect:<a href=\"http://www.baidu.com/\">http://www.baidu.com</a></li>\n</ul>\n<h4 id=\"springmvc如何AJAX交互\"><a href=\"#springmvc如何AJAX交互\" class=\"headerlink\" title=\"springmvc如何AJAX交互\"></a>springmvc如何AJAX交互</h4><p>通过jackson框架，可以把java对象转为json。</p>\n<ol>\n<li>加入jackson.jar</li>\n<li>配置文件中配置json映射</li>\n<li>方法前加@ResponseBody</li>\n</ol>\n<h4 id=\"解决POST、GET的中文乱码\"><a href=\"#解决POST、GET的中文乱码\" class=\"headerlink\" title=\"解决POST、GET的中文乱码\"></a>解决POST、GET的中文乱码</h4><p>POST：web.xml中配置CharacterEncodingFilter过滤器，设置成utf-8</p>\n<p>GET: </p>\n<ul>\n<li>修改tomcat配置文件添加编码与工程编码一致</li>\n<li>对参数进行重新编码，String userName &#x3D; new String(request.getParamter(“userName”).getBytes(“ISO8859-1”),”utf-8”)</li>\n</ul>\n<h4 id=\"SpringMvc的控制器是不是单例模式-如果是-有什么问题-怎么解决\"><a href=\"#SpringMvc的控制器是不是单例模式-如果是-有什么问题-怎么解决\" class=\"headerlink\" title=\"SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决\"></a>SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决</h4><p>是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段。</p>\n<h4 id=\"springmvc常用注解\"><a href=\"#springmvc常用注解\" class=\"headerlink\" title=\"springmvc常用注解\"></a>springmvc常用注解</h4><ul>\n<li>@RequestMapping：用于处理url映射的注解，用于类或方法上。</li>\n<li>@RequestBody：用于实现接收http请求的json数据。</li>\n<li>@ResponseBody：用于实现将java对象转化为json对象，返回响应。</li>\n</ul>\n<h4 id=\"SpringMvc中函数的返回值是什么\"><a href=\"#SpringMvc中函数的返回值是什么\" class=\"headerlink\" title=\"SpringMvc中函数的返回值是什么\"></a>SpringMvc中函数的返回值是什么</h4><p>返回值可以有很多类型,有String, ModelAndView。ModelAndView类把视图和数据都合并的一起的</p>\n<h4 id=\"SpringMvc用什么对象从后台向前台传递数据的\"><a href=\"#SpringMvc用什么对象从后台向前台传递数据的\" class=\"headerlink\" title=\"SpringMvc用什么对象从后台向前台传递数据的\"></a>SpringMvc用什么对象从后台向前台传递数据的</h4><p>通过ModelMap对象，调用put方法，把对象加入，前台用el表达式</p>\n<h4 id=\"ModelMap的数据放入session里面\"><a href=\"#ModelMap的数据放入session里面\" class=\"headerlink\" title=\"ModelMap的数据放入session里面\"></a>ModelMap的数据放入session里面</h4><p>类上加@SessionAttributes注解，里面包含的字符串就是要放入session里的key。</p>\n<h4 id=\"springmvc拦截器\"><a href=\"#springmvc拦截器\" class=\"headerlink\" title=\"springmvc拦截器\"></a>springmvc拦截器</h4><p>两种写法，一种是实现HandlerInterceptor接口，一种是继承适配器类，在接口方法中实现。然后再springmvc的配置文件中配置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--默认拦截所有--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;myInterceptor&#x27;</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;cn.keinz.myHandlerInterceptor&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--只针对某个url--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:</span> <span class=\"attr\">interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:</span> <span class=\"attr\">mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/user&#x27;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;cn.keinz.myHandlerInterceptorAdapter&#x27;</span>&gt;</span></span><br><span class=\"line\">    &lt;/mvc: interceptor&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注解原理\"><a href=\"#注解原理\" class=\"headerlink\" title=\"注解原理\"></a>注解原理</h4><p><a href=\"https://www.cnblogs.com/yangming1996/p/9295168.html\">JAVA 注解的基本原理</a></p>\n<p>注解本质是继承了Annotation接口的接口，具体的实现类是通过运行时生成的动态 代理类。我们通过反射获取注解时，返回的是java运行时生成的动态代理对象。通过动态代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会通过memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。</p>\n<h4 id=\"Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler\"><a href=\"#Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler\" class=\"headerlink\" title=\"Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler\"></a>Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler</h4><p>符合面向对象的单一职责原则，代码结构清晰，便于维护，最重要的是可复用性高，如HandlerAdapter可能被用于处理多种Handler。</p>\n<hr>\n<h3 id=\"mybatis\"><a href=\"#mybatis\" class=\"headerlink\" title=\"mybatis\"></a>mybatis</h3><h4 id=\"mybatis的理解\"><a href=\"#mybatis的理解\" class=\"headerlink\" title=\"mybatis的理解\"></a>mybatis的理解</h4><ul>\n<li>连接数据库通过核心配置文件：SqlMapConfig.xml，配置数据库连接池的获得和连接数据库</li>\n<li>操作数据库通过映射配置文件，这个配置文件设计为dao的实现映射，可以视作dao的实现</li>\n<li>通过SqlMapConfig.xml构造SqlSessionFactory，由SqlSessionFactory.openSession()获得SqlSession，操作数据库由SqlSession完成。</li>\n<li>mybatis底层定义了Executor接口操作数据库，Executor接口有两个实现：一个基本执行器，一个缓存执行器。</li>\n<li>Mapped Statement也是mybatis的一个底层封装对象，它包装了mybatis的配置信息和sql映射信息等，mapper.xml的一个sql对应一个Mapped Statement对象，sql的id就是Mapped Statement的id。</li>\n<li>Mapped Statement对sql执行的输入参数进行定义，包括HashMap、基本类型和pojo，Executor通过Mapped Statement在执行前将java对象映射到sql中，输入参数映射就是jdbc编程中对prepared statement设置参数。</li>\n<li>Mapped Statement对sql执行的输出参数进行定义，包括HashMap、基本类型和pojo，Executor通过Mapped Statement在执行后将输出映射到java对象，输出结果映射相当于jdbc编程中对结果的解析。</li>\n</ul>\n<p>mybatis是一个暴露出sql语句的jdbc封装，是一个暴露sql语句的持久层框架，暴露的方式是映射配置文件。</p>\n<h4 id=\"使用MyBatis-IBatis-的好处是什么\"><a href=\"#使用MyBatis-IBatis-的好处是什么\" class=\"headerlink\" title=\"使用MyBatis(IBatis)的好处是什么\"></a>使用MyBatis(IBatis)的好处是什么</h4><ul>\n<li>mybatis把sql语句从java源程序中独立出来，放在xml里，系统维护更便利。</li>\n<li>mybatis封装了底层jdbc api调用细节，并能自动将结果转为java bean对象。</li>\n<li>mybatis需要自己编写sql，可以灵活控制sql语句，比hibernate等全自动orm框架有更高的效率，能完成复杂的查询。</li>\n</ul>\n<h4 id=\"对MyBatis的缓存的理解\"><a href=\"#对MyBatis的缓存的理解\" class=\"headerlink\" title=\"对MyBatis的缓存的理解\"></a>对MyBatis的缓存的理解</h4><p>mybatis缓存分为一级缓存和二级缓存，一级缓存在sqlsession中，默认就有，二级缓存基于mapper文件的namespace，开始需要在mybatis-configuration.xml配置文件中添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">    &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在mapper.xml中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cache type=&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>最后，po类实现serializable接口。</p>\n<p>Mybatis首先去缓存中查询结果集，如果没有则查询数据库，如果有则从缓存取出返回结果集就不走数据库。Mybatis内部存储缓存使用一个HashMap，key为hashCode+sqlId+Sql语句。value为从查询出来映射生成的java对象<br>Mybatis的二级缓存即查询缓存，它的作用域是一个mapper的namespace，即在同一个namespace中查询sql可以从缓存中获取数据。二级缓存是可以跨SqlSession的。</p>\n<h4 id=\"和-的区别\"><a href=\"#和-的区别\" class=\"headerlink\" title=\"${} 和 #{}的区别\"></a>${} 和 #{}的区别</h4><ul>\n<li>${} ：预编译处理，直接把${} 替换成变量的值；$一般用入传入数据库对象，比如数据库表名</li>\n<li>#{} ：sql解析时会加上””，当成字符串解析，有效的防止Sql语句注入</li>\n<li>order by 动态参数时需要注意，使用${}而不用#{}</li>\n</ul>\n<h4 id=\"mybatis一对一的实现方式\"><a href=\"#mybatis一对一的实现方式\" class=\"headerlink\" title=\"mybatis一对一的实现方式\"></a>mybatis一对一的实现方式</h4><ul>\n<li>联表查询：几个表联合查询，只查询一次，通过resultMap节点配置association节点。</li>\n<li>嵌套查询：先查一个表，得到外键id，再到另外的表查询，也是配置association节点，但另外的表查询通过select属性配置。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;association property=&quot;topicType&quot; select=&quot;selectType&quot; column=&quot;topics_type_id&quot; javaType=&quot;com.tmf.bbs.pojo.Type&quot;/&gt;</span><br></pre></td></tr></table></figure></li>\n<li>property：属性名</li>\n<li>select：要连接的查询</li>\n<li>column：共同列</li>\n<li>javaType：集合中元素类型</li>\n</ul>\n<h4 id=\"mybatis一对多的实现方式\"><a href=\"#mybatis一对多的实现方式\" class=\"headerlink\" title=\"mybatis一对多的实现方式\"></a>mybatis一对多的实现方式</h4><ul>\n<li>联表查询：几个表联合查询，只查询一次，通过resultMap节点配置collection节点。</li>\n<li>嵌套查询：先查一个表，得到外键id，再到另外的表查询，也是配置collectionn节点，但另外的表查询通过select属性配置。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;collection property=&quot;topicComment&quot; column=&quot;id&quot; ofType=&quot;com.tmf.bbs.pojo.Comment&quot; select=&quot;selectComment&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>property：属性名</li>\n<li>select：要连接的查询</li>\n<li>column：共同列</li>\n<li>ofType：集合中元素类型</li>\n</ul>\n<h4 id=\"mybatis的接口绑定，好处\"><a href=\"#mybatis的接口绑定，好处\" class=\"headerlink\" title=\"mybatis的接口绑定，好处\"></a>mybatis的接口绑定，好处</h4><p>mybatis实现了dao接口和xml映射文件的绑定，自动生成了接口的实现，更方便。</p>\n<h4 id=\"接口绑定的实现方式，什么情况下使用\"><a href=\"#接口绑定的实现方式，什么情况下使用\" class=\"headerlink\" title=\"接口绑定的实现方式，什么情况下使用\"></a>接口绑定的实现方式，什么情况下使用</h4><p>注解绑定和xml绑定。<br>sql简单时使用注解绑定。复杂时使用xml绑定。</p>\n<h4 id=\"JDBC与数据库交互的流程是什么\"><a href=\"#JDBC与数据库交互的流程是什么\" class=\"headerlink\" title=\"JDBC与数据库交互的流程是什么\"></a>JDBC与数据库交互的流程是什么</h4><ol>\n<li>加载数据库驱动</li>\n<li>获取数据库连接</li>\n<li>生成statement对象</li>\n<li>设置sql语句</li>\n<li>设置sql参数</li>\n<li>使用statement执行sql</li>\n<li>获取结果集，解析结果集</li>\n<li>关闭连接，释放资源</li>\n</ol>\n<h4 id=\"谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。\"><a href=\"#谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。\" class=\"headerlink\" title=\"谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。\"></a>谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。</h4><ul>\n<li>sqlSession：封装了对数据库操作的方法，是通过sqlSessionFactory创建的</li>\n<li>sqlSessionFactory：通过sqlSessionFactoryBuild创建的</li>\n<li>sqlSessionFactoryBuild：是创建sqlSessionFactory时使用的，因为sqlSession是由sqlSessionFactory创建，所以可以当做工具类使用</li>\n<li>sqlSessionFactory是一个接口，重载了opensession的方法。使用范围是在整个运行范围内，一旦创建可以重复使用，所以可以当做单实例来管理。</li>\n<li>sqlSession是面向用户的一个操作数据库的接口，每个线程都有自己的sqlSession，sqlSession不能线程共享，sqlSession不使用就要关闭。</li>\n</ul>\n<h4 id=\"简述Mybatis的插件运行原理\"><a href=\"#简述Mybatis的插件运行原理\" class=\"headerlink\" title=\"简述Mybatis的插件运行原理\"></a>简述Mybatis的插件运行原理</h4><p>Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，还需要在配置文件中配置你编写的插件。</p>\n<hr>\n<h3 id=\"spring\"><a href=\"#spring\" class=\"headerlink\" title=\"spring\"></a>spring</h3><h4 id=\"如何理解Spring\"><a href=\"#如何理解Spring\" class=\"headerlink\" title=\"如何理解Spring\"></a>如何理解Spring</h4><p>具体来说Spring是一个轻量级的容器，用于管理业务相关对象的。核心功能主要为：IOC,AOP,MVC。</p>\n<ul>\n<li>IOC：控制反转，将对象的创建过程交给容器，让容器管理对象的生命周期如创建，初始化，销毁等。</li>\n<li>AOP：面向切面编程，对关注点进行模块化，通过对某一功能点进行编程，比如记录日志，有很多个类都需要记录日志的方法，则创建记录日志的代理方法，需要调用该功能是只需要调用代理方法，这就是AOP。</li>\n<li>MVC：SpringMvc,Spring提供的基于MVC模式设计的Web框架，如今比较流行的框架之一。</li>\n</ul>\n<h4 id=\"使用Spring框架能带来哪些好处\"><a href=\"#使用Spring框架能带来哪些好处\" class=\"headerlink\" title=\"使用Spring框架能带来哪些好处\"></a>使用Spring框架能带来哪些好处</h4><ul>\n<li>轻量：Spring 是轻量的，基本的版本大约2MB。</li>\n<li>控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。</li>\n<li>面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。</li>\n<li>容器：Spring 包含并管理应用中对象的生命周期和配置。</li>\n<li>MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。</li>\n<li>事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。</li>\n<li>异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。</li>\n</ul>\n<h4 id=\"什么是控制反转-IOC-？什么是依赖注入\"><a href=\"#什么是控制反转-IOC-？什么是依赖注入\" class=\"headerlink\" title=\"什么是控制反转(IOC)？什么是依赖注入\"></a>什么是控制反转(IOC)？什么是依赖注入</h4><ul>\n<li>控制反转是应用于软件工程领域中的，在运行时被装配器对象来绑定耦合对象的一种编程技巧，对象之间耦合关系在编译时通常是未知的。在传统的编程方式中，业务逻辑的流程是由应用程序中的早已被设定好关联关系的对象来决定的。在使用控制反转的情况下，业务逻辑的流程是由对象关系图来决定的，该对象关系图由装配器负责实例化，这种实现方式还可以将对象之间的关联关系的定义抽象化。而绑定的过程是通过“依赖注入”实现的。</li>\n<li>控制反转是一种以给予应用程序中目标组件更多控制为目的设计范式，并在我们的实际工作中起到了有效的作用。</li>\n<li>依赖注入是在编译阶段尚未知所需的功能是来自哪个的类的情况下，将其他对象所依赖的功能对象实例化的模式。这就需要一种机制用来激活相应的组件以提供特定的功能，所以依赖注入是控制反转的基础。否则如果在组件不受框架控制的情况下，框架又怎么知道要创建哪个组件？</li>\n</ul>\n<h4 id=\"注入有以下三种实现方式\"><a href=\"#注入有以下三种实现方式\" class=\"headerlink\" title=\"注入有以下三种实现方式\"></a>注入有以下三种实现方式</h4><ul>\n<li>构造器注入</li>\n<li>setter方法注入</li>\n<li>接口注入</li>\n</ul>\n<h4 id=\"解释下Spring框架中的IoC\"><a href=\"#解释下Spring框架中的IoC\" class=\"headerlink\" title=\"解释下Spring框架中的IoC\"></a>解释下Spring框架中的IoC</h4><p>IOC:把对象的创建、初始化、销毁交给spring来管理，而不是由开发者控制，实现控制反转。</p>\n<ul>\n<li>Spring中的 org.springframework.beans 包和 org.springframework.context包构成了Spring框架IoC容器的基础。</li>\n<li>BeanFactory 接口提供了一个先进的配置机制，使得任何类型的对象的配置成为可能。ApplicationContex接口对BeanFactory（是一个子接口）进行了扩展，在BeanFactory的基础上添加了其他功能，比如与Spring的AOP更容易集成，也提供了处理message resource的机制（用于国际化）、事件传播以及应用层的特别配置，比如针对Web应用的WebApplicationContext。</li>\n<li>org.springframework.beans.factory.BeanFactory 是Spring IoC容器的具体实现，用来包装和管理前面提到的各种bean。BeanFactory接口是Spring IoC 容器的核心接口。</li>\n</ul>\n<h4 id=\"BeanFactory和ApplicationContext有什么区别\"><a href=\"#BeanFactory和ApplicationContext有什么区别\" class=\"headerlink\" title=\"BeanFactory和ApplicationContext有什么区别\"></a>BeanFactory和ApplicationContext有什么区别</h4><h5 id=\"描述：\"><a href=\"#描述：\" class=\"headerlink\" title=\"描述：\"></a>描述：</h5><p>BeanFactory：是Spring里面最低层的接口，提供了最简单的容器的功能，只提供了实例化对象和拿对象的功能；<br>ApplicationContext：应用上下文，继承BeanFactory接口，它是Spring的一各更高级的容器，提供了更多的有用的功能：</p>\n<ol>\n<li>国际化（MessageSource）</li>\n<li>访问资源，如URL和文件（ResourceLoader）</li>\n<li>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层  </li>\n<li>消息发送、响应机制（ApplicationEventPublisher）</li>\n<li>AOP（拦截器）</li>\n</ol>\n<h5 id=\"两者装载bean的区别：\"><a href=\"#两者装载bean的区别：\" class=\"headerlink\" title=\"两者装载bean的区别：\"></a>两者装载bean的区别：</h5><p>BeanFactory：BeanFactory在启动的时候不会去实例化Bean，只有从容器中拿Bean的时候才会去实例化；<br>ApplicationContext：ApplicationContext在启动的时候就把所有的Bean全部实例化了。它还可以为Bean配置lazy-init&#x3D;true来让Bean延迟实例化； </p>\n<h5 id=\"用BeanFactory还是ApplicationContent\"><a href=\"#用BeanFactory还是ApplicationContent\" class=\"headerlink\" title=\"用BeanFactory还是ApplicationContent\"></a>用BeanFactory还是ApplicationContent</h5><p>延迟实例化的优点：（BeanFactory）<br>应用启动的时候占用资源很少；对资源要求较高的应用，比较有优势；<br>不延迟实例化的优点： （ApplicationContext）</p>\n<ol>\n<li>所有的Bean在启动的时候都加载，系统运行的速度快； </li>\n<li>在启动的时候所有的Bean都加载了，我们就能在系统启动的时候，尽早的发现系统中的配置问题 </li>\n<li>建议web应用，在启动的时候就把所有的Bean都加载了。（把费时的操作放到系统启动中完成）</li>\n</ol>\n<h4 id=\"Spring有几种配置方式\"><a href=\"#Spring有几种配置方式\" class=\"headerlink\" title=\"Spring有几种配置方式\"></a>Spring有几种配置方式</h4><ul>\n<li>基于xml配置</li>\n<li>基于注解配置</li>\n<li>基于java配置</li>\n</ul>\n<h4 id=\"如何用基于XML配置的方式配置Spring\"><a href=\"#如何用基于XML配置的方式配置Spring\" class=\"headerlink\" title=\"如何用基于XML配置的方式配置Spring\"></a>如何用基于XML配置的方式配置Spring</h4><p>在Spring框架中，依赖和服务需要在专门的配置文件来实现，常用的XML格式的配置文件。这些配置文件的格式通常用&lt;beans&gt;开头，然后一系列的bean定义和专门的应用配置选项组成。</p>\n<p>SpringXML配置的主要目的时候是使所有的Spring组件都可以用xml文件的形式来进行配置。这意味着不会出现其他的Spring配置类型（比如声明的方式或基于Java Class的配置方式）</p>\n<p>Spring的XML配置方式是使用被Spring命名空间的所支持的一系列的XML标签来实现的。Spring有以下主要的命名空间：context、beans、jdbc、tx、aop、mvc和aso。</p>\n<h4 id=\"如何用基于Java配置的方式配置Spring\"><a href=\"#如何用基于Java配置的方式配置Spring\" class=\"headerlink\" title=\"如何用基于Java配置的方式配置Spring\"></a>如何用基于Java配置的方式配置Spring</h4><p>Spring对Java配置的支持是由@Configuration注解和@Bean注解来实现的。由@Bean注解的方法将会实例化、配置和初始化一个新对象，这个对象将由Spring的IoC容器来管理。@Bean声明所起到的作用与<bean/> 元素类似。被@Configuration所注解的类则表示这个类的主要目的是作为bean定义的资源。被@Configuration声明的类可以通过在同一个类的内部调用@bean方法来设置嵌入bean的依赖关系。</p>\n<h4 id=\"怎样用注解的方式配置Spring\"><a href=\"#怎样用注解的方式配置Spring\" class=\"headerlink\" title=\"怎样用注解的方式配置Spring\"></a>怎样用注解的方式配置Spring</h4><p>Spring在2.5版本以后开始支持用注解的方式来配置依赖注入。可以用注解的方式来替代XML方式的bean描述，可以将bean描述转移到组件类的内部，只需要在相关类上、方法上或者字段声明上使用注解即可。注解注入将会被容器在XML注入之前被处理，所以后者会覆盖掉前者对于同一个属性的处理结果。</p>\n<p>注解装配在Spring中是默认关闭的。所以需要在Spring文件中配置一下才能使用基于注解的装配模式。如果你想要在你的应用程序中使用关于注解的方法的话，请参考如下的配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans&gt;    </span><br><span class=\"line\">   &lt;context:annotation-config/&gt;    </span><br><span class=\"line\">   &lt;!-- bean definitions go here --&gt;    </span><br><span class=\"line\">&lt;/beans&gt;    </span><br></pre></td></tr></table></figure>\n<p>在 <a href=\"context:annotation-config/\">context:annotation-config/</a>标签配置完成以后，就可以用注解的方式在Spring中向属性、方法和构造方法中自动装配变量。</p>\n<ul>\n<li>@Required：该注解应用于设值方法。</li>\n<li>@Autowired：该注解应用于有值设值方法、非设值方法、构造方法和变量。</li>\n<li>@Qualifier：该注解和@Autowired注解搭配使用，用于消除特定bean自动装配的歧义。</li>\n<li>JSR-250 Annotations：Spring支持基于JSR-250 注解的以下注解，@Resource、@PostConstruct 和 @PreDestroy。</li>\n</ul>\n<h4 id=\"什么是Spring-Beans\"><a href=\"#什么是Spring-Beans\" class=\"headerlink\" title=\"什么是Spring Beans\"></a>什么是Spring Beans</h4><p>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中&lt;bean&#x2F;&gt; 的形式定义。</p>\n<p>Spring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。</p>\n<h4 id=\"请解释Spring-Bean的生命周期\"><a href=\"#请解释Spring-Bean的生命周期\" class=\"headerlink\" title=\"请解释Spring Bean的生命周期\"></a>请解释Spring Bean的生命周期</h4><ul>\n<li>实例化bean对象(通过构造方法或者工厂方法)</li>\n<li>设置对象属性(setter等)（依赖注入）</li>\n<li>如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。（和下面的一条均属于检查Aware接口）</li>\n<li>如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身</li>\n<li>将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization(Object bean, String beanname)方法</li>\n<li>InitializingBean的afterPropertiesSet()，如果实现了该接口，则执行其afterPropertiesSet()方法</li>\n<li>调用Bean的初始化方法init-method</li>\n<li>将Bean实例传递给Bean的后置处理器的postProcessAfterInitialization(Object bean, String beanname)方法</li>\n<li>DisposableBean的destroy()，在容器关闭时，如果Bean类实现了该接口，则执行它的destroy()方法</li>\n<li>容器关闭之前，调用Bean的销毁方法destroy-method，可以在Bean定义文件中使用destory-method定义的方法</li>\n</ul>\n<p>如果使用ApplicationContext来维护一个Bean的生命周期，则基本上与上边的流程相同，只不过在执行BeanNameAware的setBeanName()后，若有Bean类实现了org.springframework.context.ApplicationContextAware接口，则执行其setApplicationContext()方法，然后再进行BeanPostProcessors的processBeforeInitialization()<br>实际上，ApplicationContext除了向BeanFactory那样维护容器外，还提供了更加丰富的框架功能，如Bean的消息，事件处理机制等</p>\n<h4 id=\"Spring支持的几种bean的作用域\"><a href=\"#Spring支持的几种bean的作用域\" class=\"headerlink\" title=\"Spring支持的几种bean的作用域\"></a>Spring支持的几种bean的作用域</h4><p>当定义一个<bean> 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。</p>\n<ul>\n<li><strong>singleton</strong> : bean在每个Spring ioc 容器中只有一个实例。</li>\n<li><strong>prototype</strong>：一个bean的定义可以有多个实例。</li>\n<li><strong>request</strong>：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</li>\n<li><strong>session</strong>：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li>\n<li><strong>global-session</strong>：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li>\n</ul>\n<h4 id=\"哪些是重要的bean生命周期方法？-你能重载它们吗？\"><a href=\"#哪些是重要的bean生命周期方法？-你能重载它们吗？\" class=\"headerlink\" title=\"哪些是重要的bean生命周期方法？ 你能重载它们吗？\"></a>哪些是重要的bean生命周期方法？ 你能重载它们吗？</h4><p>有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown  它是在容器卸载类的时候被调用。</p>\n<p>The bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</p>\n<h4 id=\"什么是Spring的内部bean\"><a href=\"#什么是Spring的内部bean\" class=\"headerlink\" title=\"什么是Spring的内部bean\"></a>什么是Spring的内部bean</h4><p>当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义inner bean，在Spring 的 基于XML的 配置元数据中，可以在&lt;property&#x2F;&gt;或 &lt;constructor-arg&#x2F;&gt; 元素内使用&lt;bean&#x2F;&gt;元素，内部bean通常是匿名的，它们的Scope一般是prototype。</p>\n<h4 id=\"在-Spring中如何注入一个java集合\"><a href=\"#在-Spring中如何注入一个java集合\" class=\"headerlink\" title=\"在 Spring中如何注入一个java集合\"></a>在 Spring中如何注入一个java集合</h4><ul>\n<li>&lt;list&gt;类型用于注入一列值，允许有相同的值。</li>\n<li>&lt;set&gt;类型用于注入一组值，不允许有相同的值。</li>\n<li>&lt;map&gt;类型用于注入一组键值对，键和值都可以为任意类型。</li>\n<li>&lt;props&gt;类型用于注入一组键值对，键和值都只能为String类型。</li>\n</ul>\n<h4 id=\"bean装配、bean的自动装配\"><a href=\"#bean装配、bean的自动装配\" class=\"headerlink\" title=\"bean装配、bean的自动装配\"></a>bean装配、bean的自动装配</h4><p>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p>\n<p>Spring 容器能够自动装配相互合作的bean，这意味着容器不需要&lt;constructor-arg&gt;和&lt;property&gt;配置，能通过Bean工厂自动处理bean之间的协作。</p>\n<h4 id=\"解释不同方式的自动装配\"><a href=\"#解释不同方式的自动装配\" class=\"headerlink\" title=\"解释不同方式的自动装配\"></a>解释不同方式的自动装配</h4><ul>\n<li><strong>no</strong>：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。</li>\n<li><strong>byName</strong>：通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。</li>\n<li><strong>byType</strong>:：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。</li>\n<li><strong>constructor</strong>：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</li>\n<li><strong>autodetect</strong>：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</li>\n</ul>\n<h4 id=\"自动装配有哪些局限性\"><a href=\"#自动装配有哪些局限性\" class=\"headerlink\" title=\"自动装配有哪些局限性\"></a>自动装配有哪些局限性</h4><ul>\n<li>重写： 你仍需用 &lt;constructor-arg&gt;和 &lt;property&gt; 配置来定义依赖，意味着总要重写自动装配。</li>\n<li>基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。</li>\n<li>模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。</li>\n</ul>\n<h4 id=\"Required-Autowired-Qualifier-注解\"><a href=\"#Required-Autowired-Qualifier-注解\" class=\"headerlink\" title=\"@Required  @Autowired @Qualifier 注解\"></a>@Required  @Autowired @Qualifier 注解</h4><ul>\n<li><strong>@Required</strong>：这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。</li>\n<li><strong>@Autowired</strong> 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和&#x2F;或多个参数的PN方法。</li>\n<li><strong>@Qualifier</strong> 注解<br>当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。</li>\n</ul>\n<h4 id=\"介绍一下Spring的事物管理\"><a href=\"#介绍一下Spring的事物管理\" class=\"headerlink\" title=\"介绍一下Spring的事物管理\"></a>介绍一下Spring的事物管理</h4><p>事务就是对一系列的数据库操作（比如插入多条数据）进行统一的提交或回滚操作，如果插入成功，那么一起成功，如果中间有一条出现异常，那么回滚之前的所有操作。这样可以防止出现脏数据，防止数据库数据出现问题。</p>\n<p>开发中为了避免这种情况一般都会进行事务管理。Spring中也有自己的事务管理机制，一般是使用TransactionMananger进行管理，可以通过Spring的注入来完成此功能。</p>\n<h4 id=\"Spring支持的事务管理类型\"><a href=\"#Spring支持的事务管理类型\" class=\"headerlink\" title=\"Spring支持的事务管理类型\"></a>Spring支持的事务管理类型</h4><ul>\n<li><strong>编程式事务管理</strong>：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</li>\n<li><strong>声明式事务管理</strong>：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</li>\n</ul>\n<h4 id=\"Spring框架的事务管理有哪些优点\"><a href=\"#Spring框架的事务管理有哪些优点\" class=\"headerlink\" title=\"Spring框架的事务管理有哪些优点\"></a>Spring框架的事务管理有哪些优点</h4><ul>\n<li>它为不同的事务API  如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。</li>\n<li>它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如</li>\n<li>它支持声明式事务管理。</li>\n<li>它和Spring各种数据访问抽象层很好得集成。</li>\n</ul>\n<h4 id=\"解释AOP\"><a href=\"#解释AOP\" class=\"headerlink\" title=\"解释AOP\"></a>解释AOP</h4><p>AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。</p>\n<h4 id=\"在Spring-AOP-中，关注点和横切关注的区别是什么\"><a href=\"#在Spring-AOP-中，关注点和横切关注的区别是什么\" class=\"headerlink\" title=\"在Spring AOP 中，关注点和横切关注的区别是什么\"></a>在Spring AOP 中，关注点和横切关注的区别是什么</h4><ul>\n<li>关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。</li>\n<li>横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</li>\n</ul>\n<h4 id=\"连接点、通知、切入点\"><a href=\"#连接点、通知、切入点\" class=\"headerlink\" title=\"连接点、通知、切入点\"></a>连接点、通知、切入点</h4><ul>\n<li>连接点：代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。</li>\n<li>通知：是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。</li>\n<li>切入点：是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点</li>\n</ul>\n<h4 id=\"Spring切面可以应用五种类型的通知\"><a href=\"#Spring切面可以应用五种类型的通知\" class=\"headerlink\" title=\"Spring切面可以应用五种类型的通知\"></a>Spring切面可以应用五种类型的通知</h4><ul>\n<li>before：前置通知，在一个方法执行前被调用。</li>\n<li>after: 在方法执行之后调用的通知，无论方法执行是否成功。</li>\n<li>after-returning: 仅当方法成功完成后执行的通知。</li>\n<li>after-throwing: 在方法抛出异常退出时执行的通知。</li>\n<li>around: 在方法执行之前和之后调用的通知。</li>\n</ul>\n<h4 id=\"引入、目标对象、代理\"><a href=\"#引入、目标对象、代理\" class=\"headerlink\" title=\"引入、目标对象、代理\"></a>引入、目标对象、代理</h4><ul>\n<li>引入：允许我们在已存在的类中增加新的方法和属性。</li>\n<li>目标对象：被一个或者多个切面所通知的对象。它通常是一个代理对象。也指被通知（advised）对象。</li>\n<li>代理：是通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。</li>\n</ul>\n<h4 id=\"有几种不同类型的自动代理\"><a href=\"#有几种不同类型的自动代理\" class=\"headerlink\" title=\"有几种不同类型的自动代理\"></a>有几种不同类型的自动代理</h4><ul>\n<li>BeanNameAutoProxyCreator</li>\n<li>DefaultAdvisorAutoProxyCreator</li>\n<li>Metadata autoproxying</li>\n</ul>\n<h4 id=\"什么是织入。什么是织入应用的不同点\"><a href=\"#什么是织入。什么是织入应用的不同点\" class=\"headerlink\" title=\"什么是织入。什么是织入应用的不同点\"></a>什么是织入。什么是织入应用的不同点</h4><p>织入：把切面（aspect）连接到其它的应用程序类型或者对象上，并创建一个被通知（advised）的对象。</p>\n<p>织入可以在编译时，加载时，或运行时完成。</p>\n<h4 id=\"切面实现\"><a href=\"#切面实现\" class=\"headerlink\" title=\"切面实现\"></a>切面实现</h4><ul>\n<li><strong>基于XML Schema方式</strong>的切面实现：在这种情况下，切面由常规类以及基于XML的配置实现。</li>\n<li><strong>基于注解</strong>的切面实现：在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。</li>\n</ul>\n<h3 id=\"Spring中用到哪些设计模式\"><a href=\"#Spring中用到哪些设计模式\" class=\"headerlink\" title=\"Spring中用到哪些设计模式\"></a>Spring中用到哪些设计模式</h3><ul>\n<li>工厂模式（BeanFactory中）</li>\n<li>单例模式：Spring中默认bean为单例</li>\n<li>适配器模式（HandlerAdater）</li>\n<li>装饰者模式</li>\n<li>代理模式：在AOP和remoting中被用的比较多，AOP中用到JDK动态代理</li>\n<li>观察者模式（listener的实现，例如ApplicationListener）</li>\n<li>策略模式（定义一系列的算法，把它们一个个的封装起来，并且使它们可以相互替换。在实例化对象时用到）</li>\n<li>模板模式：用来解决代码重复的问题，jdbcTemplate</li>\n</ul>\n","length":14660,"excerpt":"","more":"<h1 id=\"Spring面试问题总结整理\"><a href=\"#Spring面试问题总结整理\" class=\"headerlink\" title=\"Spring面试问题总结整理\"></a>Spring面试问题总结整理</h1><p>参考：<br><a href=\"https://blog.csdn.net/qq_38262968/article/details/79474455\">ssm常见面试题</a>、<br><a href=\"https://blog.csdn.net/weixin_39801925/article/details/80585758\">ssm面试题总结</a>、<br><a href=\"https://www.jianshu.com/p/231a582d2a02\">java ssm框架基础面试题</a>、<br><a href=\"https://blog.csdn.net/qq_41735004/article/details/87199651\">JavaSSM框架精选50道面试题</a>、<br><a href=\"http://ifeve.com/spring-interview-questions-and-answers/\">69道Spring面试题和答案</a></p>\n<hr>\n<h3 id=\"spring-mvc\"><a href=\"#spring-mvc\" class=\"headerlink\" title=\"spring mvc\"></a>spring mvc</h3><p><img src=\"/image/interview_prep/springmvc.png\" alt=\"springmvc\"></p>\n<h4 id=\"简单介绍对springMVC的理解\"><a href=\"#简单介绍对springMVC的理解\" class=\"headerlink\" title=\"简单介绍对springMVC的理解\"></a>简单介绍对springMVC的理解</h4><p>Spring MVC是基于java的实现MVC设计模式的请求驱动类型的轻量级web框架，通过把model、view、controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错。</p>\n<ul>\n<li>model负责对应用数据封装，并对外提供应用功能的接口；</li>\n<li>view负责通过向控制器发送请求，得到响应，并向用户展示处理好的数据；</li>\n<li>controller负责定义应用的功能，接收用户的动作，并选择响应的view<br>特点：</li>\n<li>它是基于组件技术的。全部的应用对象，无论控制器和视图还是业务对象之类的，都是基于java组件，并且和spring基础组件集成。</li>\n<li>不依赖于servletAPI（虽然具体具体实现还是依赖servlet）</li>\n<li>可以使用任何视图技术，不仅仅jsp</li>\n<li>支持各种请求资源的映射策略</li>\n<li>它是易于扩展的</li>\n</ul>\n<h4 id=\"spring-mvc的流程\"><a href=\"#spring-mvc的流程\" class=\"headerlink\" title=\"spring mvc的流程\"></a>spring mvc的流程</h4><ol>\n<li>用户发送请求到DispatcherServlet；</li>\n<li>servlet接收到请求后，调用HandlerMapping，请求获取Handler；</li>\n<li>HandlerMapping根据url得到具体的Handler，生成Handler对象和Handler拦截器，一起返回给DispatcherServlet；</li>\n<li>DispatcherServlet调用HandlerAdapter；</li>\n<li>HandlerAdapter执行Handler</li>\n<li>Handler执行完返回ModerAndView；</li>\n<li>HandlerAdapter将ModerAndView返回给DispatcherServlet；</li>\n<li>DispatcherServlet将ModerAndView传给ViewResolver解析；</li>\n<li>ViewResolver解析后将view返回；</li>\n<li>DispatcherServlet渲染view（将模型数据填充）</li>\n<li>响应用户。</li>\n</ol>\n<h4 id=\"spring-mvc优点\"><a href=\"#spring-mvc优点\" class=\"headerlink\" title=\"spring mvc优点\"></a>spring mvc优点</h4><ul>\n<li>可以支持各种视图技术，不仅jsp</li>\n<li>与spring框架集成（ioc、aop）</li>\n<li>清晰的角色分配：DispatcherServlet、HandlerMapping、HandlerAdapter、ViewResolver.</li>\n<li>支持各种请求资源的映射策略。</li>\n</ul>\n<h4 id=\"spring-mvc主要组件\"><a href=\"#spring-mvc主要组件\" class=\"headerlink\" title=\"spring mvc主要组件\"></a>spring mvc主要组件</h4><ul>\n<li><strong>DispatcherServlet</strong>（不需要程序员开发）：接收请求，响应结果，相当于转发器，有了它可以减少其他组件之间的耦合度。</li>\n<li><strong>HandlerMapping</strong>（不需要程序员开发）：根据url查找Handler。</li>\n<li><strong>HandlerAdapter</strong>：根据 Handler 来找到支持它的 HandlerAdapter，通过 HandlerAdapter 执行这个 Handler 得到 ModelAndView 对象。</li>\n<li><strong>Handler</strong>（需要程序员开发）</li>\n<li><strong>ViewResolver</strong>：进行视图解析，根据视图逻辑名解释成真正的视图。</li>\n<li><strong>View</strong>（需要开发）：View是一个接口， 它的实现类支持不同的视图类型（jsp，freemarker，pdf等等）</li>\n</ul>\n<h4 id=\"spring-mvc和struts2区别\"><a href=\"#spring-mvc和struts2区别\" class=\"headerlink\" title=\"spring mvc和struts2区别\"></a>spring mvc和struts2区别</h4><ul>\n<li>spring mvc的入口是一个servlet——DispatcherServlet，struts2的入口是一个filter过滤器——StrutsPrepareAndExecuteFilter。</li>\n<li>spring mvc是基于方法开发（一个url对应一个方法），请求参数传递到方法的形参，可以是单例也可以是多例；Struts2是基于类开发，传递参数是通过类属性，只能设计为多例。</li>\n<li>Struts采用值栈存储请求和响应的数据，通过OGNL存取数据；springmvc通过参数解析器将request请求内容解析，并给方法的形参赋值，将数据和视图封装成ModelAndView对象，最后将ModelAndView的模型数据通过request域传输到页面。jsp视图解析器默认jstl。</li>\n</ul>\n<h4 id=\"springmvc如何设定重定向和转发\"><a href=\"#springmvc如何设定重定向和转发\" class=\"headerlink\" title=\"springmvc如何设定重定向和转发\"></a>springmvc如何设定重定向和转发</h4><ul>\n<li>转发：返回值前加<font color='red'>forward:</font>，如：forward:user.do?name&#x3D;method4</li>\n<li>重定向：返回值前加<font color='red'>redirect:</font>，如：redirect:<a href=\"http://www.baidu.com/\">http://www.baidu.com</a></li>\n</ul>\n<h4 id=\"springmvc如何AJAX交互\"><a href=\"#springmvc如何AJAX交互\" class=\"headerlink\" title=\"springmvc如何AJAX交互\"></a>springmvc如何AJAX交互</h4><p>通过jackson框架，可以把java对象转为json。</p>\n<ol>\n<li>加入jackson.jar</li>\n<li>配置文件中配置json映射</li>\n<li>方法前加@ResponseBody</li>\n</ol>\n<h4 id=\"解决POST、GET的中文乱码\"><a href=\"#解决POST、GET的中文乱码\" class=\"headerlink\" title=\"解决POST、GET的中文乱码\"></a>解决POST、GET的中文乱码</h4><p>POST：web.xml中配置CharacterEncodingFilter过滤器，设置成utf-8</p>\n<p>GET: </p>\n<ul>\n<li>修改tomcat配置文件添加编码与工程编码一致</li>\n<li>对参数进行重新编码，String userName &#x3D; new String(request.getParamter(“userName”).getBytes(“ISO8859-1”),”utf-8”)</li>\n</ul>\n<h4 id=\"SpringMvc的控制器是不是单例模式-如果是-有什么问题-怎么解决\"><a href=\"#SpringMvc的控制器是不是单例模式-如果是-有什么问题-怎么解决\" class=\"headerlink\" title=\"SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决\"></a>SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决</h4><p>是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段。</p>\n<h4 id=\"springmvc常用注解\"><a href=\"#springmvc常用注解\" class=\"headerlink\" title=\"springmvc常用注解\"></a>springmvc常用注解</h4><ul>\n<li>@RequestMapping：用于处理url映射的注解，用于类或方法上。</li>\n<li>@RequestBody：用于实现接收http请求的json数据。</li>\n<li>@ResponseBody：用于实现将java对象转化为json对象，返回响应。</li>\n</ul>\n<h4 id=\"SpringMvc中函数的返回值是什么\"><a href=\"#SpringMvc中函数的返回值是什么\" class=\"headerlink\" title=\"SpringMvc中函数的返回值是什么\"></a>SpringMvc中函数的返回值是什么</h4><p>返回值可以有很多类型,有String, ModelAndView。ModelAndView类把视图和数据都合并的一起的</p>\n<h4 id=\"SpringMvc用什么对象从后台向前台传递数据的\"><a href=\"#SpringMvc用什么对象从后台向前台传递数据的\" class=\"headerlink\" title=\"SpringMvc用什么对象从后台向前台传递数据的\"></a>SpringMvc用什么对象从后台向前台传递数据的</h4><p>通过ModelMap对象，调用put方法，把对象加入，前台用el表达式</p>\n<h4 id=\"ModelMap的数据放入session里面\"><a href=\"#ModelMap的数据放入session里面\" class=\"headerlink\" title=\"ModelMap的数据放入session里面\"></a>ModelMap的数据放入session里面</h4><p>类上加@SessionAttributes注解，里面包含的字符串就是要放入session里的key。</p>\n<h4 id=\"springmvc拦截器\"><a href=\"#springmvc拦截器\" class=\"headerlink\" title=\"springmvc拦截器\"></a>springmvc拦截器</h4><p>两种写法，一种是实现HandlerInterceptor接口，一种是继承适配器类，在接口方法中实现。然后再springmvc的配置文件中配置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--默认拦截所有--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&#x27;myInterceptor&#x27;</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;cn.keinz.myHandlerInterceptor&#x27;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--只针对某个url--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mvc:</span> <span class=\"attr\">interceptor</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mvc:</span> <span class=\"attr\">mapping</span> <span class=\"attr\">path</span>=<span class=\"string\">&#x27;/user&#x27;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&#x27;cn.keinz.myHandlerInterceptorAdapter&#x27;</span>&gt;</span></span><br><span class=\"line\">    &lt;/mvc: interceptor&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注解原理\"><a href=\"#注解原理\" class=\"headerlink\" title=\"注解原理\"></a>注解原理</h4><p><a href=\"https://www.cnblogs.com/yangming1996/p/9295168.html\">JAVA 注解的基本原理</a></p>\n<p>注解本质是继承了Annotation接口的接口，具体的实现类是通过运行时生成的动态 代理类。我们通过反射获取注解时，返回的是java运行时生成的动态代理对象。通过动态代理对象调用自定义注解的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会通过memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。</p>\n<h4 id=\"Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler\"><a href=\"#Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler\" class=\"headerlink\" title=\"Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler\"></a>Spring为什么要结合使用HandlerMapping以及HandlerAdapter来处理Handler</h4><p>符合面向对象的单一职责原则，代码结构清晰，便于维护，最重要的是可复用性高，如HandlerAdapter可能被用于处理多种Handler。</p>\n<hr>\n<h3 id=\"mybatis\"><a href=\"#mybatis\" class=\"headerlink\" title=\"mybatis\"></a>mybatis</h3><h4 id=\"mybatis的理解\"><a href=\"#mybatis的理解\" class=\"headerlink\" title=\"mybatis的理解\"></a>mybatis的理解</h4><ul>\n<li>连接数据库通过核心配置文件：SqlMapConfig.xml，配置数据库连接池的获得和连接数据库</li>\n<li>操作数据库通过映射配置文件，这个配置文件设计为dao的实现映射，可以视作dao的实现</li>\n<li>通过SqlMapConfig.xml构造SqlSessionFactory，由SqlSessionFactory.openSession()获得SqlSession，操作数据库由SqlSession完成。</li>\n<li>mybatis底层定义了Executor接口操作数据库，Executor接口有两个实现：一个基本执行器，一个缓存执行器。</li>\n<li>Mapped Statement也是mybatis的一个底层封装对象，它包装了mybatis的配置信息和sql映射信息等，mapper.xml的一个sql对应一个Mapped Statement对象，sql的id就是Mapped Statement的id。</li>\n<li>Mapped Statement对sql执行的输入参数进行定义，包括HashMap、基本类型和pojo，Executor通过Mapped Statement在执行前将java对象映射到sql中，输入参数映射就是jdbc编程中对prepared statement设置参数。</li>\n<li>Mapped Statement对sql执行的输出参数进行定义，包括HashMap、基本类型和pojo，Executor通过Mapped Statement在执行后将输出映射到java对象，输出结果映射相当于jdbc编程中对结果的解析。</li>\n</ul>\n<p>mybatis是一个暴露出sql语句的jdbc封装，是一个暴露sql语句的持久层框架，暴露的方式是映射配置文件。</p>\n<h4 id=\"使用MyBatis-IBatis-的好处是什么\"><a href=\"#使用MyBatis-IBatis-的好处是什么\" class=\"headerlink\" title=\"使用MyBatis(IBatis)的好处是什么\"></a>使用MyBatis(IBatis)的好处是什么</h4><ul>\n<li>mybatis把sql语句从java源程序中独立出来，放在xml里，系统维护更便利。</li>\n<li>mybatis封装了底层jdbc api调用细节，并能自动将结果转为java bean对象。</li>\n<li>mybatis需要自己编写sql，可以灵活控制sql语句，比hibernate等全自动orm框架有更高的效率，能完成复杂的查询。</li>\n</ul>\n<h4 id=\"对MyBatis的缓存的理解\"><a href=\"#对MyBatis的缓存的理解\" class=\"headerlink\" title=\"对MyBatis的缓存的理解\"></a>对MyBatis的缓存的理解</h4><p>mybatis缓存分为一级缓存和二级缓存，一级缓存在sqlsession中，默认就有，二级缓存基于mapper文件的namespace，开始需要在mybatis-configuration.xml配置文件中添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;settings&gt;</span><br><span class=\"line\">    &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class=\"line\">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在mapper.xml中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;cache type=&quot;org.apache.ibatis.cache.impl.PerpetualCache&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<p>最后，po类实现serializable接口。</p>\n<p>Mybatis首先去缓存中查询结果集，如果没有则查询数据库，如果有则从缓存取出返回结果集就不走数据库。Mybatis内部存储缓存使用一个HashMap，key为hashCode+sqlId+Sql语句。value为从查询出来映射生成的java对象<br>Mybatis的二级缓存即查询缓存，它的作用域是一个mapper的namespace，即在同一个namespace中查询sql可以从缓存中获取数据。二级缓存是可以跨SqlSession的。</p>\n<h4 id=\"和-的区别\"><a href=\"#和-的区别\" class=\"headerlink\" title=\"${} 和 #{}的区别\"></a>${} 和 #{}的区别</h4><ul>\n<li>${} ：预编译处理，直接把${} 替换成变量的值；$一般用入传入数据库对象，比如数据库表名</li>\n<li>#{} ：sql解析时会加上””，当成字符串解析，有效的防止Sql语句注入</li>\n<li>order by 动态参数时需要注意，使用${}而不用#{}</li>\n</ul>\n<h4 id=\"mybatis一对一的实现方式\"><a href=\"#mybatis一对一的实现方式\" class=\"headerlink\" title=\"mybatis一对一的实现方式\"></a>mybatis一对一的实现方式</h4><ul>\n<li>联表查询：几个表联合查询，只查询一次，通过resultMap节点配置association节点。</li>\n<li>嵌套查询：先查一个表，得到外键id，再到另外的表查询，也是配置association节点，但另外的表查询通过select属性配置。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;association property=&quot;topicType&quot; select=&quot;selectType&quot; column=&quot;topics_type_id&quot; javaType=&quot;com.tmf.bbs.pojo.Type&quot;/&gt;</span><br></pre></td></tr></table></figure></li>\n<li>property：属性名</li>\n<li>select：要连接的查询</li>\n<li>column：共同列</li>\n<li>javaType：集合中元素类型</li>\n</ul>\n<h4 id=\"mybatis一对多的实现方式\"><a href=\"#mybatis一对多的实现方式\" class=\"headerlink\" title=\"mybatis一对多的实现方式\"></a>mybatis一对多的实现方式</h4><ul>\n<li>联表查询：几个表联合查询，只查询一次，通过resultMap节点配置collection节点。</li>\n<li>嵌套查询：先查一个表，得到外键id，再到另外的表查询，也是配置collectionn节点，但另外的表查询通过select属性配置。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;collection property=&quot;topicComment&quot; column=&quot;id&quot; ofType=&quot;com.tmf.bbs.pojo.Comment&quot; select=&quot;selectComment&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>property：属性名</li>\n<li>select：要连接的查询</li>\n<li>column：共同列</li>\n<li>ofType：集合中元素类型</li>\n</ul>\n<h4 id=\"mybatis的接口绑定，好处\"><a href=\"#mybatis的接口绑定，好处\" class=\"headerlink\" title=\"mybatis的接口绑定，好处\"></a>mybatis的接口绑定，好处</h4><p>mybatis实现了dao接口和xml映射文件的绑定，自动生成了接口的实现，更方便。</p>\n<h4 id=\"接口绑定的实现方式，什么情况下使用\"><a href=\"#接口绑定的实现方式，什么情况下使用\" class=\"headerlink\" title=\"接口绑定的实现方式，什么情况下使用\"></a>接口绑定的实现方式，什么情况下使用</h4><p>注解绑定和xml绑定。<br>sql简单时使用注解绑定。复杂时使用xml绑定。</p>\n<h4 id=\"JDBC与数据库交互的流程是什么\"><a href=\"#JDBC与数据库交互的流程是什么\" class=\"headerlink\" title=\"JDBC与数据库交互的流程是什么\"></a>JDBC与数据库交互的流程是什么</h4><ol>\n<li>加载数据库驱动</li>\n<li>获取数据库连接</li>\n<li>生成statement对象</li>\n<li>设置sql语句</li>\n<li>设置sql参数</li>\n<li>使用statement执行sql</li>\n<li>获取结果集，解析结果集</li>\n<li>关闭连接，释放资源</li>\n</ol>\n<h4 id=\"谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。\"><a href=\"#谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。\" class=\"headerlink\" title=\"谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。\"></a>谈谈对mybatis中的sqlSession、sqlSessionFactoryBuild和sqlSessionFactory的理解。</h4><ul>\n<li>sqlSession：封装了对数据库操作的方法，是通过sqlSessionFactory创建的</li>\n<li>sqlSessionFactory：通过sqlSessionFactoryBuild创建的</li>\n<li>sqlSessionFactoryBuild：是创建sqlSessionFactory时使用的，因为sqlSession是由sqlSessionFactory创建，所以可以当做工具类使用</li>\n<li>sqlSessionFactory是一个接口，重载了opensession的方法。使用范围是在整个运行范围内，一旦创建可以重复使用，所以可以当做单实例来管理。</li>\n<li>sqlSession是面向用户的一个操作数据库的接口，每个线程都有自己的sqlSession，sqlSession不能线程共享，sqlSession不使用就要关闭。</li>\n</ul>\n<h4 id=\"简述Mybatis的插件运行原理\"><a href=\"#简述Mybatis的插件运行原理\" class=\"headerlink\" title=\"简述Mybatis的插件运行原理\"></a>简述Mybatis的插件运行原理</h4><p>Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，还需要在配置文件中配置你编写的插件。</p>\n<hr>\n<h3 id=\"spring\"><a href=\"#spring\" class=\"headerlink\" title=\"spring\"></a>spring</h3><h4 id=\"如何理解Spring\"><a href=\"#如何理解Spring\" class=\"headerlink\" title=\"如何理解Spring\"></a>如何理解Spring</h4><p>具体来说Spring是一个轻量级的容器，用于管理业务相关对象的。核心功能主要为：IOC,AOP,MVC。</p>\n<ul>\n<li>IOC：控制反转，将对象的创建过程交给容器，让容器管理对象的生命周期如创建，初始化，销毁等。</li>\n<li>AOP：面向切面编程，对关注点进行模块化，通过对某一功能点进行编程，比如记录日志，有很多个类都需要记录日志的方法，则创建记录日志的代理方法，需要调用该功能是只需要调用代理方法，这就是AOP。</li>\n<li>MVC：SpringMvc,Spring提供的基于MVC模式设计的Web框架，如今比较流行的框架之一。</li>\n</ul>\n<h4 id=\"使用Spring框架能带来哪些好处\"><a href=\"#使用Spring框架能带来哪些好处\" class=\"headerlink\" title=\"使用Spring框架能带来哪些好处\"></a>使用Spring框架能带来哪些好处</h4><ul>\n<li>轻量：Spring 是轻量的，基本的版本大约2MB。</li>\n<li>控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。</li>\n<li>面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。</li>\n<li>容器：Spring 包含并管理应用中对象的生命周期和配置。</li>\n<li>MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品。</li>\n<li>事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。</li>\n<li>异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常。</li>\n</ul>\n<h4 id=\"什么是控制反转-IOC-？什么是依赖注入\"><a href=\"#什么是控制反转-IOC-？什么是依赖注入\" class=\"headerlink\" title=\"什么是控制反转(IOC)？什么是依赖注入\"></a>什么是控制反转(IOC)？什么是依赖注入</h4><ul>\n<li>控制反转是应用于软件工程领域中的，在运行时被装配器对象来绑定耦合对象的一种编程技巧，对象之间耦合关系在编译时通常是未知的。在传统的编程方式中，业务逻辑的流程是由应用程序中的早已被设定好关联关系的对象来决定的。在使用控制反转的情况下，业务逻辑的流程是由对象关系图来决定的，该对象关系图由装配器负责实例化，这种实现方式还可以将对象之间的关联关系的定义抽象化。而绑定的过程是通过“依赖注入”实现的。</li>\n<li>控制反转是一种以给予应用程序中目标组件更多控制为目的设计范式，并在我们的实际工作中起到了有效的作用。</li>\n<li>依赖注入是在编译阶段尚未知所需的功能是来自哪个的类的情况下，将其他对象所依赖的功能对象实例化的模式。这就需要一种机制用来激活相应的组件以提供特定的功能，所以依赖注入是控制反转的基础。否则如果在组件不受框架控制的情况下，框架又怎么知道要创建哪个组件？</li>\n</ul>\n<h4 id=\"注入有以下三种实现方式\"><a href=\"#注入有以下三种实现方式\" class=\"headerlink\" title=\"注入有以下三种实现方式\"></a>注入有以下三种实现方式</h4><ul>\n<li>构造器注入</li>\n<li>setter方法注入</li>\n<li>接口注入</li>\n</ul>\n<h4 id=\"解释下Spring框架中的IoC\"><a href=\"#解释下Spring框架中的IoC\" class=\"headerlink\" title=\"解释下Spring框架中的IoC\"></a>解释下Spring框架中的IoC</h4><p>IOC:把对象的创建、初始化、销毁交给spring来管理，而不是由开发者控制，实现控制反转。</p>\n<ul>\n<li>Spring中的 org.springframework.beans 包和 org.springframework.context包构成了Spring框架IoC容器的基础。</li>\n<li>BeanFactory 接口提供了一个先进的配置机制，使得任何类型的对象的配置成为可能。ApplicationContex接口对BeanFactory（是一个子接口）进行了扩展，在BeanFactory的基础上添加了其他功能，比如与Spring的AOP更容易集成，也提供了处理message resource的机制（用于国际化）、事件传播以及应用层的特别配置，比如针对Web应用的WebApplicationContext。</li>\n<li>org.springframework.beans.factory.BeanFactory 是Spring IoC容器的具体实现，用来包装和管理前面提到的各种bean。BeanFactory接口是Spring IoC 容器的核心接口。</li>\n</ul>\n<h4 id=\"BeanFactory和ApplicationContext有什么区别\"><a href=\"#BeanFactory和ApplicationContext有什么区别\" class=\"headerlink\" title=\"BeanFactory和ApplicationContext有什么区别\"></a>BeanFactory和ApplicationContext有什么区别</h4><h5 id=\"描述：\"><a href=\"#描述：\" class=\"headerlink\" title=\"描述：\"></a>描述：</h5><p>BeanFactory：是Spring里面最低层的接口，提供了最简单的容器的功能，只提供了实例化对象和拿对象的功能；<br>ApplicationContext：应用上下文，继承BeanFactory接口，它是Spring的一各更高级的容器，提供了更多的有用的功能：</p>\n<ol>\n<li>国际化（MessageSource）</li>\n<li>访问资源，如URL和文件（ResourceLoader）</li>\n<li>载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层  </li>\n<li>消息发送、响应机制（ApplicationEventPublisher）</li>\n<li>AOP（拦截器）</li>\n</ol>\n<h5 id=\"两者装载bean的区别：\"><a href=\"#两者装载bean的区别：\" class=\"headerlink\" title=\"两者装载bean的区别：\"></a>两者装载bean的区别：</h5><p>BeanFactory：BeanFactory在启动的时候不会去实例化Bean，只有从容器中拿Bean的时候才会去实例化；<br>ApplicationContext：ApplicationContext在启动的时候就把所有的Bean全部实例化了。它还可以为Bean配置lazy-init&#x3D;true来让Bean延迟实例化； </p>\n<h5 id=\"用BeanFactory还是ApplicationContent\"><a href=\"#用BeanFactory还是ApplicationContent\" class=\"headerlink\" title=\"用BeanFactory还是ApplicationContent\"></a>用BeanFactory还是ApplicationContent</h5><p>延迟实例化的优点：（BeanFactory）<br>应用启动的时候占用资源很少；对资源要求较高的应用，比较有优势；<br>不延迟实例化的优点： （ApplicationContext）</p>\n<ol>\n<li>所有的Bean在启动的时候都加载，系统运行的速度快； </li>\n<li>在启动的时候所有的Bean都加载了，我们就能在系统启动的时候，尽早的发现系统中的配置问题 </li>\n<li>建议web应用，在启动的时候就把所有的Bean都加载了。（把费时的操作放到系统启动中完成）</li>\n</ol>\n<h4 id=\"Spring有几种配置方式\"><a href=\"#Spring有几种配置方式\" class=\"headerlink\" title=\"Spring有几种配置方式\"></a>Spring有几种配置方式</h4><ul>\n<li>基于xml配置</li>\n<li>基于注解配置</li>\n<li>基于java配置</li>\n</ul>\n<h4 id=\"如何用基于XML配置的方式配置Spring\"><a href=\"#如何用基于XML配置的方式配置Spring\" class=\"headerlink\" title=\"如何用基于XML配置的方式配置Spring\"></a>如何用基于XML配置的方式配置Spring</h4><p>在Spring框架中，依赖和服务需要在专门的配置文件来实现，常用的XML格式的配置文件。这些配置文件的格式通常用&lt;beans&gt;开头，然后一系列的bean定义和专门的应用配置选项组成。</p>\n<p>SpringXML配置的主要目的时候是使所有的Spring组件都可以用xml文件的形式来进行配置。这意味着不会出现其他的Spring配置类型（比如声明的方式或基于Java Class的配置方式）</p>\n<p>Spring的XML配置方式是使用被Spring命名空间的所支持的一系列的XML标签来实现的。Spring有以下主要的命名空间：context、beans、jdbc、tx、aop、mvc和aso。</p>\n<h4 id=\"如何用基于Java配置的方式配置Spring\"><a href=\"#如何用基于Java配置的方式配置Spring\" class=\"headerlink\" title=\"如何用基于Java配置的方式配置Spring\"></a>如何用基于Java配置的方式配置Spring</h4><p>Spring对Java配置的支持是由@Configuration注解和@Bean注解来实现的。由@Bean注解的方法将会实例化、配置和初始化一个新对象，这个对象将由Spring的IoC容器来管理。@Bean声明所起到的作用与<bean/> 元素类似。被@Configuration所注解的类则表示这个类的主要目的是作为bean定义的资源。被@Configuration声明的类可以通过在同一个类的内部调用@bean方法来设置嵌入bean的依赖关系。</p>\n<h4 id=\"怎样用注解的方式配置Spring\"><a href=\"#怎样用注解的方式配置Spring\" class=\"headerlink\" title=\"怎样用注解的方式配置Spring\"></a>怎样用注解的方式配置Spring</h4><p>Spring在2.5版本以后开始支持用注解的方式来配置依赖注入。可以用注解的方式来替代XML方式的bean描述，可以将bean描述转移到组件类的内部，只需要在相关类上、方法上或者字段声明上使用注解即可。注解注入将会被容器在XML注入之前被处理，所以后者会覆盖掉前者对于同一个属性的处理结果。</p>\n<p>注解装配在Spring中是默认关闭的。所以需要在Spring文件中配置一下才能使用基于注解的装配模式。如果你想要在你的应用程序中使用关于注解的方法的话，请参考如下的配置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;beans&gt;    </span><br><span class=\"line\">   &lt;context:annotation-config/&gt;    </span><br><span class=\"line\">   &lt;!-- bean definitions go here --&gt;    </span><br><span class=\"line\">&lt;/beans&gt;    </span><br></pre></td></tr></table></figure>\n<p>在 <a href=\"context:annotation-config/\">context:annotation-config/</a>标签配置完成以后，就可以用注解的方式在Spring中向属性、方法和构造方法中自动装配变量。</p>\n<ul>\n<li>@Required：该注解应用于设值方法。</li>\n<li>@Autowired：该注解应用于有值设值方法、非设值方法、构造方法和变量。</li>\n<li>@Qualifier：该注解和@Autowired注解搭配使用，用于消除特定bean自动装配的歧义。</li>\n<li>JSR-250 Annotations：Spring支持基于JSR-250 注解的以下注解，@Resource、@PostConstruct 和 @PreDestroy。</li>\n</ul>\n<h4 id=\"什么是Spring-Beans\"><a href=\"#什么是Spring-Beans\" class=\"headerlink\" title=\"什么是Spring Beans\"></a>什么是Spring Beans</h4><p>Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中&lt;bean&#x2F;&gt; 的形式定义。</p>\n<p>Spring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。</p>\n<h4 id=\"请解释Spring-Bean的生命周期\"><a href=\"#请解释Spring-Bean的生命周期\" class=\"headerlink\" title=\"请解释Spring Bean的生命周期\"></a>请解释Spring Bean的生命周期</h4><ul>\n<li>实例化bean对象(通过构造方法或者工厂方法)</li>\n<li>设置对象属性(setter等)（依赖注入）</li>\n<li>如果Bean实现了BeanNameAware接口，工厂调用Bean的setBeanName()方法传递Bean的ID。（和下面的一条均属于检查Aware接口）</li>\n<li>如果Bean实现了BeanFactoryAware接口，工厂调用setBeanFactory()方法传入工厂自身</li>\n<li>将Bean实例传递给Bean的前置处理器的postProcessBeforeInitialization(Object bean, String beanname)方法</li>\n<li>InitializingBean的afterPropertiesSet()，如果实现了该接口，则执行其afterPropertiesSet()方法</li>\n<li>调用Bean的初始化方法init-method</li>\n<li>将Bean实例传递给Bean的后置处理器的postProcessAfterInitialization(Object bean, String beanname)方法</li>\n<li>DisposableBean的destroy()，在容器关闭时，如果Bean类实现了该接口，则执行它的destroy()方法</li>\n<li>容器关闭之前，调用Bean的销毁方法destroy-method，可以在Bean定义文件中使用destory-method定义的方法</li>\n</ul>\n<p>如果使用ApplicationContext来维护一个Bean的生命周期，则基本上与上边的流程相同，只不过在执行BeanNameAware的setBeanName()后，若有Bean类实现了org.springframework.context.ApplicationContextAware接口，则执行其setApplicationContext()方法，然后再进行BeanPostProcessors的processBeforeInitialization()<br>实际上，ApplicationContext除了向BeanFactory那样维护容器外，还提供了更加丰富的框架功能，如Bean的消息，事件处理机制等</p>\n<h4 id=\"Spring支持的几种bean的作用域\"><a href=\"#Spring支持的几种bean的作用域\" class=\"headerlink\" title=\"Spring支持的几种bean的作用域\"></a>Spring支持的几种bean的作用域</h4><p>当定义一个<bean> 在Spring里，我们还能给这个bean声明一个作用域。它可以通过bean 定义中的scope属性来定义。如，当Spring要在需要的时候每次生产一个新的bean实例，bean的scope属性被指定为prototype。另一方面，一个bean每次使用的时候必须返回同一个实例，这个bean的scope 属性 必须设为 singleton。</p>\n<ul>\n<li><strong>singleton</strong> : bean在每个Spring ioc 容器中只有一个实例。</li>\n<li><strong>prototype</strong>：一个bean的定义可以有多个实例。</li>\n<li><strong>request</strong>：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。</li>\n<li><strong>session</strong>：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li>\n<li><strong>global-session</strong>：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</li>\n</ul>\n<h4 id=\"哪些是重要的bean生命周期方法？-你能重载它们吗？\"><a href=\"#哪些是重要的bean生命周期方法？-你能重载它们吗？\" class=\"headerlink\" title=\"哪些是重要的bean生命周期方法？ 你能重载它们吗？\"></a>哪些是重要的bean生命周期方法？ 你能重载它们吗？</h4><p>有两个重要的bean 生命周期方法，第一个是setup ， 它是在容器加载bean的时候被调用。第二个方法是 teardown  它是在容器卸载类的时候被调用。</p>\n<p>The bean 标签有两个重要的属性（init-method和destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct和@PreDestroy）。</p>\n<h4 id=\"什么是Spring的内部bean\"><a href=\"#什么是Spring的内部bean\" class=\"headerlink\" title=\"什么是Spring的内部bean\"></a>什么是Spring的内部bean</h4><p>当一个bean仅被用作另一个bean的属性时，它能被声明为一个内部bean，为了定义inner bean，在Spring 的 基于XML的 配置元数据中，可以在&lt;property&#x2F;&gt;或 &lt;constructor-arg&#x2F;&gt; 元素内使用&lt;bean&#x2F;&gt;元素，内部bean通常是匿名的，它们的Scope一般是prototype。</p>\n<h4 id=\"在-Spring中如何注入一个java集合\"><a href=\"#在-Spring中如何注入一个java集合\" class=\"headerlink\" title=\"在 Spring中如何注入一个java集合\"></a>在 Spring中如何注入一个java集合</h4><ul>\n<li>&lt;list&gt;类型用于注入一列值，允许有相同的值。</li>\n<li>&lt;set&gt;类型用于注入一组值，不允许有相同的值。</li>\n<li>&lt;map&gt;类型用于注入一组键值对，键和值都可以为任意类型。</li>\n<li>&lt;props&gt;类型用于注入一组键值对，键和值都只能为String类型。</li>\n</ul>\n<h4 id=\"bean装配、bean的自动装配\"><a href=\"#bean装配、bean的自动装配\" class=\"headerlink\" title=\"bean装配、bean的自动装配\"></a>bean装配、bean的自动装配</h4><p>装配，或bean 装配是指在Spring 容器中把bean组装到一起，前提是容器需要知道bean的依赖关系，如何通过依赖注入来把它们装配到一起。</p>\n<p>Spring 容器能够自动装配相互合作的bean，这意味着容器不需要&lt;constructor-arg&gt;和&lt;property&gt;配置，能通过Bean工厂自动处理bean之间的协作。</p>\n<h4 id=\"解释不同方式的自动装配\"><a href=\"#解释不同方式的自动装配\" class=\"headerlink\" title=\"解释不同方式的自动装配\"></a>解释不同方式的自动装配</h4><ul>\n<li><strong>no</strong>：默认的方式是不进行自动装配，通过显式设置ref 属性来进行装配。</li>\n<li><strong>byName</strong>：通过参数名 自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，之后容器试图匹配、装配和该bean的属性具有相同名字的bean。</li>\n<li><strong>byType</strong>:：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。如果有多个bean符合条件，则抛出错误。</li>\n<li><strong>constructor</strong>：这个方式类似于byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</li>\n<li><strong>autodetect</strong>：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。</li>\n</ul>\n<h4 id=\"自动装配有哪些局限性\"><a href=\"#自动装配有哪些局限性\" class=\"headerlink\" title=\"自动装配有哪些局限性\"></a>自动装配有哪些局限性</h4><ul>\n<li>重写： 你仍需用 &lt;constructor-arg&gt;和 &lt;property&gt; 配置来定义依赖，意味着总要重写自动装配。</li>\n<li>基本数据类型：你不能自动装配简单的属性，如基本数据类型，String字符串，和类。</li>\n<li>模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。</li>\n</ul>\n<h4 id=\"Required-Autowired-Qualifier-注解\"><a href=\"#Required-Autowired-Qualifier-注解\" class=\"headerlink\" title=\"@Required  @Autowired @Qualifier 注解\"></a>@Required  @Autowired @Qualifier 注解</h4><ul>\n<li><strong>@Required</strong>：这个注解表明bean的属性必须在配置的时候设置，通过一个bean定义的显式的属性值或通过自动装配，若@Required注解的bean属性未被设置，容器将抛出BeanInitializationException。</li>\n<li><strong>@Autowired</strong> 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和&#x2F;或多个参数的PN方法。</li>\n<li><strong>@Qualifier</strong> 注解<br>当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。</li>\n</ul>\n<h4 id=\"介绍一下Spring的事物管理\"><a href=\"#介绍一下Spring的事物管理\" class=\"headerlink\" title=\"介绍一下Spring的事物管理\"></a>介绍一下Spring的事物管理</h4><p>事务就是对一系列的数据库操作（比如插入多条数据）进行统一的提交或回滚操作，如果插入成功，那么一起成功，如果中间有一条出现异常，那么回滚之前的所有操作。这样可以防止出现脏数据，防止数据库数据出现问题。</p>\n<p>开发中为了避免这种情况一般都会进行事务管理。Spring中也有自己的事务管理机制，一般是使用TransactionMananger进行管理，可以通过Spring的注入来完成此功能。</p>\n<h4 id=\"Spring支持的事务管理类型\"><a href=\"#Spring支持的事务管理类型\" class=\"headerlink\" title=\"Spring支持的事务管理类型\"></a>Spring支持的事务管理类型</h4><ul>\n<li><strong>编程式事务管理</strong>：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。</li>\n<li><strong>声明式事务管理</strong>：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。</li>\n</ul>\n<h4 id=\"Spring框架的事务管理有哪些优点\"><a href=\"#Spring框架的事务管理有哪些优点\" class=\"headerlink\" title=\"Spring框架的事务管理有哪些优点\"></a>Spring框架的事务管理有哪些优点</h4><ul>\n<li>它为不同的事务API  如 JTA，JDBC，Hibernate，JPA 和JDO，提供一个不变的编程模式。</li>\n<li>它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如</li>\n<li>它支持声明式事务管理。</li>\n<li>它和Spring各种数据访问抽象层很好得集成。</li>\n</ul>\n<h4 id=\"解释AOP\"><a href=\"#解释AOP\" class=\"headerlink\" title=\"解释AOP\"></a>解释AOP</h4><p>AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在Spring AOP中，切面通过带有@Aspect注解的类实现。</p>\n<h4 id=\"在Spring-AOP-中，关注点和横切关注的区别是什么\"><a href=\"#在Spring-AOP-中，关注点和横切关注的区别是什么\" class=\"headerlink\" title=\"在Spring AOP 中，关注点和横切关注的区别是什么\"></a>在Spring AOP 中，关注点和横切关注的区别是什么</h4><ul>\n<li>关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。</li>\n<li>横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</li>\n</ul>\n<h4 id=\"连接点、通知、切入点\"><a href=\"#连接点、通知、切入点\" class=\"headerlink\" title=\"连接点、通知、切入点\"></a>连接点、通知、切入点</h4><ul>\n<li>连接点：代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行Spring AOP的位置。</li>\n<li>通知：是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SpringAOP框架触发的代码段。</li>\n<li>切入点：是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点</li>\n</ul>\n<h4 id=\"Spring切面可以应用五种类型的通知\"><a href=\"#Spring切面可以应用五种类型的通知\" class=\"headerlink\" title=\"Spring切面可以应用五种类型的通知\"></a>Spring切面可以应用五种类型的通知</h4><ul>\n<li>before：前置通知，在一个方法执行前被调用。</li>\n<li>after: 在方法执行之后调用的通知，无论方法执行是否成功。</li>\n<li>after-returning: 仅当方法成功完成后执行的通知。</li>\n<li>after-throwing: 在方法抛出异常退出时执行的通知。</li>\n<li>around: 在方法执行之前和之后调用的通知。</li>\n</ul>\n<h4 id=\"引入、目标对象、代理\"><a href=\"#引入、目标对象、代理\" class=\"headerlink\" title=\"引入、目标对象、代理\"></a>引入、目标对象、代理</h4><ul>\n<li>引入：允许我们在已存在的类中增加新的方法和属性。</li>\n<li>目标对象：被一个或者多个切面所通知的对象。它通常是一个代理对象。也指被通知（advised）对象。</li>\n<li>代理：是通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。</li>\n</ul>\n<h4 id=\"有几种不同类型的自动代理\"><a href=\"#有几种不同类型的自动代理\" class=\"headerlink\" title=\"有几种不同类型的自动代理\"></a>有几种不同类型的自动代理</h4><ul>\n<li>BeanNameAutoProxyCreator</li>\n<li>DefaultAdvisorAutoProxyCreator</li>\n<li>Metadata autoproxying</li>\n</ul>\n<h4 id=\"什么是织入。什么是织入应用的不同点\"><a href=\"#什么是织入。什么是织入应用的不同点\" class=\"headerlink\" title=\"什么是织入。什么是织入应用的不同点\"></a>什么是织入。什么是织入应用的不同点</h4><p>织入：把切面（aspect）连接到其它的应用程序类型或者对象上，并创建一个被通知（advised）的对象。</p>\n<p>织入可以在编译时，加载时，或运行时完成。</p>\n<h4 id=\"切面实现\"><a href=\"#切面实现\" class=\"headerlink\" title=\"切面实现\"></a>切面实现</h4><ul>\n<li><strong>基于XML Schema方式</strong>的切面实现：在这种情况下，切面由常规类以及基于XML的配置实现。</li>\n<li><strong>基于注解</strong>的切面实现：在这种情况下(基于@AspectJ的实现)，涉及到的切面声明的风格与带有java5标注的普通java类一致。</li>\n</ul>\n<h3 id=\"Spring中用到哪些设计模式\"><a href=\"#Spring中用到哪些设计模式\" class=\"headerlink\" title=\"Spring中用到哪些设计模式\"></a>Spring中用到哪些设计模式</h3><ul>\n<li>工厂模式（BeanFactory中）</li>\n<li>单例模式：Spring中默认bean为单例</li>\n<li>适配器模式（HandlerAdater）</li>\n<li>装饰者模式</li>\n<li>代理模式：在AOP和remoting中被用的比较多，AOP中用到JDK动态代理</li>\n<li>观察者模式（listener的实现，例如ApplicationListener）</li>\n<li>策略模式（定义一系列的算法，把它们一个个的封装起来，并且使它们可以相互替换。在实例化对象时用到）</li>\n<li>模板模式：用来解决代码重复的问题，jdbcTemplate</li>\n</ul>\n"},{"title":"CentOS7安装Nginx","date":"2019-06-25T05:31:04.000Z","photos":["https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/3.jpg?raw=true"],"description":"CentOS7通過安裝包的方式安裝Nginx","_content":"\n# CentOS7安裝Nginx\n## 1. 下載nginx安裝包\n`wget 官網下載地址`\n## 2.解壓編譯安裝\n`tar -zxvf nginx-***.tar.gz`\n\n`./configure --prefix=/usr/local/nginx（必须先建好目录）`\n\n此時可能會出現錯誤\n\n`./configure: error: the HTTP rewrite module requires the PCRE library.`\n\n`./configure: error: the HTTP cache module requires md5 functions`\n\n### 2.1  安裝pcre-devel\n\n`yum -y install pcre-devel`\n\n### 2.2 安裝openssl openssl-devel\n\n`yum -y install openssl openssl-devel`\n\n## 3. make、make install\n\n`make`\n\n`make install`\n\n## 4. 防火墻開啟對應端口\n\n`firewall-cmd --zone=public --add-port=80/tcp --permanent`\n\n`firewall-cmd --reload`\n\n# 为nginx添加SSL支持模块\n\n使用`proxy_pass https://XXXXXXXXX`时，遇到问题\n\n`nginx https protocol requires SSL support in /usr/local/nginx/conf/nginx.conf `\n\n**原因**：在当初编译安装时，没有加`--with-http_ssl_module`参数。\n\n**解决办法**：重新编译源码包。\n\n关闭nginx，切到源码包目录\n\n```shell\n./configure --prefix= /usr/local/nginx --with-http_ssl_module\nmake\n```\n\n<font color='red'>注意，此时千万不能手快直接 make install！</font>\n\n```shell\ncp /usr/local/nginx/sbin/nginx ~/\ncp objs /nginx /usr/local/nginx/sbin/\n```\n\n其中，objs/nginx 是新编译出来的nginx可执行程序。\n覆盖之后，再尝试重新启动nginx，就没有问题了。","source":"_posts/centos7安装nginx.md","raw":"---\ntitle: CentOS7安装Nginx\ndate: 2019-06-25 13:31:04\ntags: [Nginx]\ncategories: [Nginx]\nphotos:\n  - \"https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/3.jpg?raw=true\"\ndescription: CentOS7通過安裝包的方式安裝Nginx\n---\n\n# CentOS7安裝Nginx\n## 1. 下載nginx安裝包\n`wget 官網下載地址`\n## 2.解壓編譯安裝\n`tar -zxvf nginx-***.tar.gz`\n\n`./configure --prefix=/usr/local/nginx（必须先建好目录）`\n\n此時可能會出現錯誤\n\n`./configure: error: the HTTP rewrite module requires the PCRE library.`\n\n`./configure: error: the HTTP cache module requires md5 functions`\n\n### 2.1  安裝pcre-devel\n\n`yum -y install pcre-devel`\n\n### 2.2 安裝openssl openssl-devel\n\n`yum -y install openssl openssl-devel`\n\n## 3. make、make install\n\n`make`\n\n`make install`\n\n## 4. 防火墻開啟對應端口\n\n`firewall-cmd --zone=public --add-port=80/tcp --permanent`\n\n`firewall-cmd --reload`\n\n# 为nginx添加SSL支持模块\n\n使用`proxy_pass https://XXXXXXXXX`时，遇到问题\n\n`nginx https protocol requires SSL support in /usr/local/nginx/conf/nginx.conf `\n\n**原因**：在当初编译安装时，没有加`--with-http_ssl_module`参数。\n\n**解决办法**：重新编译源码包。\n\n关闭nginx，切到源码包目录\n\n```shell\n./configure --prefix= /usr/local/nginx --with-http_ssl_module\nmake\n```\n\n<font color='red'>注意，此时千万不能手快直接 make install！</font>\n\n```shell\ncp /usr/local/nginx/sbin/nginx ~/\ncp objs /nginx /usr/local/nginx/sbin/\n```\n\n其中，objs/nginx 是新编译出来的nginx可执行程序。\n覆盖之后，再尝试重新启动nginx，就没有问题了。","slug":"centos7安装nginx","published":1,"updated":"2025-02-22T18:52:19.820Z","comments":1,"layout":"post","_id":"cm7hqj8ap000tv001gfq8e9gk","content":"<h1 id=\"CentOS7安裝Nginx\"><a href=\"#CentOS7安裝Nginx\" class=\"headerlink\" title=\"CentOS7安裝Nginx\"></a>CentOS7安裝Nginx</h1><h2 id=\"1-下載nginx安裝包\"><a href=\"#1-下載nginx安裝包\" class=\"headerlink\" title=\"1. 下載nginx安裝包\"></a>1. 下載nginx安裝包</h2><p><code>wget 官網下載地址</code></p>\n<h2 id=\"2-解壓編譯安裝\"><a href=\"#2-解壓編譯安裝\" class=\"headerlink\" title=\"2.解壓編譯安裝\"></a>2.解壓編譯安裝</h2><p><code>tar -zxvf nginx-***.tar.gz</code></p>\n<p><code>./configure --prefix=/usr/local/nginx（必须先建好目录）</code></p>\n<p>此時可能會出現錯誤</p>\n<p><code>./configure: error: the HTTP rewrite module requires the PCRE library.</code></p>\n<p><code>./configure: error: the HTTP cache module requires md5 functions</code></p>\n<h3 id=\"2-1-安裝pcre-devel\"><a href=\"#2-1-安裝pcre-devel\" class=\"headerlink\" title=\"2.1  安裝pcre-devel\"></a>2.1  安裝pcre-devel</h3><p><code>yum -y install pcre-devel</code></p>\n<h3 id=\"2-2-安裝openssl-openssl-devel\"><a href=\"#2-2-安裝openssl-openssl-devel\" class=\"headerlink\" title=\"2.2 安裝openssl openssl-devel\"></a>2.2 安裝openssl openssl-devel</h3><p><code>yum -y install openssl openssl-devel</code></p>\n<h2 id=\"3-make、make-install\"><a href=\"#3-make、make-install\" class=\"headerlink\" title=\"3. make、make install\"></a>3. make、make install</h2><p><code>make</code></p>\n<p><code>make install</code></p>\n<h2 id=\"4-防火墻開啟對應端口\"><a href=\"#4-防火墻開啟對應端口\" class=\"headerlink\" title=\"4. 防火墻開啟對應端口\"></a>4. 防火墻開啟對應端口</h2><p><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></p>\n<p><code>firewall-cmd --reload</code></p>\n<h1 id=\"为nginx添加SSL支持模块\"><a href=\"#为nginx添加SSL支持模块\" class=\"headerlink\" title=\"为nginx添加SSL支持模块\"></a>为nginx添加SSL支持模块</h1><p>使用<code>proxy_pass https://XXXXXXXXX</code>时，遇到问题</p>\n<p><code>nginx https protocol requires SSL support in /usr/local/nginx/conf/nginx.conf </code></p>\n<p><strong>原因</strong>：在当初编译安装时，没有加<code>--with-http_ssl_module</code>参数。</p>\n<p><strong>解决办法</strong>：重新编译源码包。</p>\n<p>关闭nginx，切到源码包目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix= /usr/local/nginx --with-http_ssl_module</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p><font color='red'>注意，此时千万不能手快直接 make install！</font></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/nginx/sbin/nginx ~/</span><br><span class=\"line\">cp objs /nginx /usr/local/nginx/sbin/</span><br></pre></td></tr></table></figure>\n\n<p>其中，objs&#x2F;nginx 是新编译出来的nginx可执行程序。<br>覆盖之后，再尝试重新启动nginx，就没有问题了。</p>\n","length":855,"excerpt":"","more":"<h1 id=\"CentOS7安裝Nginx\"><a href=\"#CentOS7安裝Nginx\" class=\"headerlink\" title=\"CentOS7安裝Nginx\"></a>CentOS7安裝Nginx</h1><h2 id=\"1-下載nginx安裝包\"><a href=\"#1-下載nginx安裝包\" class=\"headerlink\" title=\"1. 下載nginx安裝包\"></a>1. 下載nginx安裝包</h2><p><code>wget 官網下載地址</code></p>\n<h2 id=\"2-解壓編譯安裝\"><a href=\"#2-解壓編譯安裝\" class=\"headerlink\" title=\"2.解壓編譯安裝\"></a>2.解壓編譯安裝</h2><p><code>tar -zxvf nginx-***.tar.gz</code></p>\n<p><code>./configure --prefix=/usr/local/nginx（必须先建好目录）</code></p>\n<p>此時可能會出現錯誤</p>\n<p><code>./configure: error: the HTTP rewrite module requires the PCRE library.</code></p>\n<p><code>./configure: error: the HTTP cache module requires md5 functions</code></p>\n<h3 id=\"2-1-安裝pcre-devel\"><a href=\"#2-1-安裝pcre-devel\" class=\"headerlink\" title=\"2.1  安裝pcre-devel\"></a>2.1  安裝pcre-devel</h3><p><code>yum -y install pcre-devel</code></p>\n<h3 id=\"2-2-安裝openssl-openssl-devel\"><a href=\"#2-2-安裝openssl-openssl-devel\" class=\"headerlink\" title=\"2.2 安裝openssl openssl-devel\"></a>2.2 安裝openssl openssl-devel</h3><p><code>yum -y install openssl openssl-devel</code></p>\n<h2 id=\"3-make、make-install\"><a href=\"#3-make、make-install\" class=\"headerlink\" title=\"3. make、make install\"></a>3. make、make install</h2><p><code>make</code></p>\n<p><code>make install</code></p>\n<h2 id=\"4-防火墻開啟對應端口\"><a href=\"#4-防火墻開啟對應端口\" class=\"headerlink\" title=\"4. 防火墻開啟對應端口\"></a>4. 防火墻開啟對應端口</h2><p><code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code></p>\n<p><code>firewall-cmd --reload</code></p>\n<h1 id=\"为nginx添加SSL支持模块\"><a href=\"#为nginx添加SSL支持模块\" class=\"headerlink\" title=\"为nginx添加SSL支持模块\"></a>为nginx添加SSL支持模块</h1><p>使用<code>proxy_pass https://XXXXXXXXX</code>时，遇到问题</p>\n<p><code>nginx https protocol requires SSL support in /usr/local/nginx/conf/nginx.conf </code></p>\n<p><strong>原因</strong>：在当初编译安装时，没有加<code>--with-http_ssl_module</code>参数。</p>\n<p><strong>解决办法</strong>：重新编译源码包。</p>\n<p>关闭nginx，切到源码包目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix= /usr/local/nginx --with-http_ssl_module</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<p><font color='red'>注意，此时千万不能手快直接 make install！</font></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/local/nginx/sbin/nginx ~/</span><br><span class=\"line\">cp objs /nginx /usr/local/nginx/sbin/</span><br></pre></td></tr></table></figure>\n\n<p>其中，objs&#x2F;nginx 是新编译出来的nginx可执行程序。<br>覆盖之后，再尝试重新启动nginx，就没有问题了。</p>\n"},{"title":"Hexo 踩坑实录","date":"2025-02-23T13:16:13.000Z","description":"Hexo 踩坑实录","_content":"\n# 踩坑\n\n## 0. 背景\n\n版本信息\n\n\n> hexo: 7.3.0\n> hexo-cli: 4.3.2\n> os: darwin 23.5.0 14.5\n> node: 23.7.0\n> acorn: 8.14.0\n> ada: 2.9.2\n> amaro: 0.3.0\n> ares: 1.34.4\n> brotli: 1.1.0\n> cjs_module_lexer: 1.4.1\n> cldr: 46.0\n> icu: 76.1\n> llhttp: 9.2.1\n> modules: 131\n> napi: 10\n> nbytes: 0.1.1\n> ncrypto: 0.0.1\n> nghttp2: 1.64.0\n> openssl: 3.4.1\n> simdjson: 3.10.1\n> simdutf: 6.0.3\n> sqlite: 3.47.2\n> tz: 2024b\n> undici: 6.21.1\n> unicode: 16.0\n> uv: 1.50.0\n> uvwasi: 0.0.21\n> v8: 12.9.202.28-node.12\n> zlib: 1.2.12\n\n\n## 1. 字数、阅读时长失效\n文章的\"字数、阅读时长\"字样存在，但是没有值或者 Nan\n\n原因：<font color= #871F78> _hexo-symbols-count-time_ </font> 的版本问题\n\n解决方案：\n```\nnpm i hexo-symbols-count-time@latest\n# or\nnpm i hexo-symbols-count-time@0.6.0\n# or\nrm package-lock.json\nnpm i hexo-symbols-count-time\n# or\nnpm un hexo-symbols-count-time\nnpm i hexo-symbols-count-time\n\n```\n\n## 2. 侧边栏不能居中\n原来写的侧边栏是可以居中的，这次更新版本不能居中...\n\n没找到设置的地方，自己改了改，不太会前端...\n\n> .../source/css/_common/outline/sidebar/sidebar.styl\n\n修改sidebar-inner的样式\n```css\n.sidebar-inner {\n  color: $grey-dark;\n  padding: $sidebar-padding 10px;\n  text-align: center;\n  position: relative;\n  top: 20%;\n}\n\n```\n\n不太行，文章里的侧边栏也被改了...\n\n## 3. 一些莫名其妙的报错\n比如 hexo deploy 时\n很大概率是版本问题，删掉重新下载\n```\nnpm un XX \n```","source":"_posts/hexo 踩坑实录.md","raw":"---\ntitle: Hexo 踩坑实录\ndate: 2025-2-23 21:16:13\ntags: [Hexo]\ncategories: [Hexo]\ndescription: Hexo 踩坑实录\n---\n\n# 踩坑\n\n## 0. 背景\n\n版本信息\n\n\n> hexo: 7.3.0\n> hexo-cli: 4.3.2\n> os: darwin 23.5.0 14.5\n> node: 23.7.0\n> acorn: 8.14.0\n> ada: 2.9.2\n> amaro: 0.3.0\n> ares: 1.34.4\n> brotli: 1.1.0\n> cjs_module_lexer: 1.4.1\n> cldr: 46.0\n> icu: 76.1\n> llhttp: 9.2.1\n> modules: 131\n> napi: 10\n> nbytes: 0.1.1\n> ncrypto: 0.0.1\n> nghttp2: 1.64.0\n> openssl: 3.4.1\n> simdjson: 3.10.1\n> simdutf: 6.0.3\n> sqlite: 3.47.2\n> tz: 2024b\n> undici: 6.21.1\n> unicode: 16.0\n> uv: 1.50.0\n> uvwasi: 0.0.21\n> v8: 12.9.202.28-node.12\n> zlib: 1.2.12\n\n\n## 1. 字数、阅读时长失效\n文章的\"字数、阅读时长\"字样存在，但是没有值或者 Nan\n\n原因：<font color= #871F78> _hexo-symbols-count-time_ </font> 的版本问题\n\n解决方案：\n```\nnpm i hexo-symbols-count-time@latest\n# or\nnpm i hexo-symbols-count-time@0.6.0\n# or\nrm package-lock.json\nnpm i hexo-symbols-count-time\n# or\nnpm un hexo-symbols-count-time\nnpm i hexo-symbols-count-time\n\n```\n\n## 2. 侧边栏不能居中\n原来写的侧边栏是可以居中的，这次更新版本不能居中...\n\n没找到设置的地方，自己改了改，不太会前端...\n\n> .../source/css/_common/outline/sidebar/sidebar.styl\n\n修改sidebar-inner的样式\n```css\n.sidebar-inner {\n  color: $grey-dark;\n  padding: $sidebar-padding 10px;\n  text-align: center;\n  position: relative;\n  top: 20%;\n}\n\n```\n\n不太行，文章里的侧边栏也被改了...\n\n## 3. 一些莫名其妙的报错\n比如 hexo deploy 时\n很大概率是版本问题，删掉重新下载\n```\nnpm un XX \n```","slug":"hexo 踩坑实录","published":1,"updated":"2025-02-23T16:02:44.968Z","_id":"cm7hqj8aq000wv001axqucdrx","comments":1,"layout":"post","photos":[],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h1><h2 id=\"0-背景\"><a href=\"#0-背景\" class=\"headerlink\" title=\"0. 背景\"></a>0. 背景</h2><p>版本信息</p>\n<blockquote>\n<p>hexo: 7.3.0<br>hexo-cli: 4.3.2<br>os: darwin 23.5.0 14.5<br>node: 23.7.0<br>acorn: 8.14.0<br>ada: 2.9.2<br>amaro: 0.3.0<br>ares: 1.34.4<br>brotli: 1.1.0<br>cjs_module_lexer: 1.4.1<br>cldr: 46.0<br>icu: 76.1<br>llhttp: 9.2.1<br>modules: 131<br>napi: 10<br>nbytes: 0.1.1<br>ncrypto: 0.0.1<br>nghttp2: 1.64.0<br>openssl: 3.4.1<br>simdjson: 3.10.1<br>simdutf: 6.0.3<br>sqlite: 3.47.2<br>tz: 2024b<br>undici: 6.21.1<br>unicode: 16.0<br>uv: 1.50.0<br>uvwasi: 0.0.21<br>v8: 12.9.202.28-node.12<br>zlib: 1.2.12</p>\n</blockquote>\n<h2 id=\"1-字数、阅读时长失效\"><a href=\"#1-字数、阅读时长失效\" class=\"headerlink\" title=\"1. 字数、阅读时长失效\"></a>1. 字数、阅读时长失效</h2><p>文章的”字数、阅读时长”字样存在，但是没有值或者 Nan</p>\n<p>原因：<font color= #871F78> <em>hexo-symbols-count-time</em> </font> 的版本问题</p>\n<p>解决方案：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-symbols-count-time@latest</span><br><span class=\"line\"># or</span><br><span class=\"line\">npm i hexo-symbols-count-time@0.6.0</span><br><span class=\"line\"># or</span><br><span class=\"line\">rm package-lock.json</span><br><span class=\"line\">npm i hexo-symbols-count-time</span><br><span class=\"line\"># or</span><br><span class=\"line\">npm un hexo-symbols-count-time</span><br><span class=\"line\">npm i hexo-symbols-count-time</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-侧边栏不能居中\"><a href=\"#2-侧边栏不能居中\" class=\"headerlink\" title=\"2. 侧边栏不能居中\"></a>2. 侧边栏不能居中</h2><p>原来写的侧边栏是可以居中的，这次更新版本不能居中…</p>\n<p>没找到设置的地方，自己改了改，不太会前端…</p>\n<blockquote>\n<p>…&#x2F;source&#x2F;css&#x2F;_common&#x2F;outline&#x2F;sidebar&#x2F;sidebar.styl</p>\n</blockquote>\n<p>修改sidebar-inner的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: $grey-dark;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: $sidebar-padding <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>不太行，文章里的侧边栏也被改了…</p>\n<h2 id=\"3-一些莫名其妙的报错\"><a href=\"#3-一些莫名其妙的报错\" class=\"headerlink\" title=\"3. 一些莫名其妙的报错\"></a>3. 一些莫名其妙的报错</h2><p>比如 hexo deploy 时<br>很大概率是版本问题，删掉重新下载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un XX </span><br></pre></td></tr></table></figure>","length":971,"excerpt":"","more":"<h1 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h1><h2 id=\"0-背景\"><a href=\"#0-背景\" class=\"headerlink\" title=\"0. 背景\"></a>0. 背景</h2><p>版本信息</p>\n<blockquote>\n<p>hexo: 7.3.0<br>hexo-cli: 4.3.2<br>os: darwin 23.5.0 14.5<br>node: 23.7.0<br>acorn: 8.14.0<br>ada: 2.9.2<br>amaro: 0.3.0<br>ares: 1.34.4<br>brotli: 1.1.0<br>cjs_module_lexer: 1.4.1<br>cldr: 46.0<br>icu: 76.1<br>llhttp: 9.2.1<br>modules: 131<br>napi: 10<br>nbytes: 0.1.1<br>ncrypto: 0.0.1<br>nghttp2: 1.64.0<br>openssl: 3.4.1<br>simdjson: 3.10.1<br>simdutf: 6.0.3<br>sqlite: 3.47.2<br>tz: 2024b<br>undici: 6.21.1<br>unicode: 16.0<br>uv: 1.50.0<br>uvwasi: 0.0.21<br>v8: 12.9.202.28-node.12<br>zlib: 1.2.12</p>\n</blockquote>\n<h2 id=\"1-字数、阅读时长失效\"><a href=\"#1-字数、阅读时长失效\" class=\"headerlink\" title=\"1. 字数、阅读时长失效\"></a>1. 字数、阅读时长失效</h2><p>文章的”字数、阅读时长”字样存在，但是没有值或者 Nan</p>\n<p>原因：<font color= #871F78> <em>hexo-symbols-count-time</em> </font> 的版本问题</p>\n<p>解决方案：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-symbols-count-time@latest</span><br><span class=\"line\"># or</span><br><span class=\"line\">npm i hexo-symbols-count-time@0.6.0</span><br><span class=\"line\"># or</span><br><span class=\"line\">rm package-lock.json</span><br><span class=\"line\">npm i hexo-symbols-count-time</span><br><span class=\"line\"># or</span><br><span class=\"line\">npm un hexo-symbols-count-time</span><br><span class=\"line\">npm i hexo-symbols-count-time</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-侧边栏不能居中\"><a href=\"#2-侧边栏不能居中\" class=\"headerlink\" title=\"2. 侧边栏不能居中\"></a>2. 侧边栏不能居中</h2><p>原来写的侧边栏是可以居中的，这次更新版本不能居中…</p>\n<p>没找到设置的地方，自己改了改，不太会前端…</p>\n<blockquote>\n<p>…&#x2F;source&#x2F;css&#x2F;_common&#x2F;outline&#x2F;sidebar&#x2F;sidebar.styl</p>\n</blockquote>\n<p>修改sidebar-inner的样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: $grey-dark;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: $sidebar-padding <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>不太行，文章里的侧边栏也被改了…</p>\n<h2 id=\"3-一些莫名其妙的报错\"><a href=\"#3-一些莫名其妙的报错\" class=\"headerlink\" title=\"3. 一些莫名其妙的报错\"></a>3. 一些莫名其妙的报错</h2><p>比如 hexo deploy 时<br>很大概率是版本问题，删掉重新下载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un XX </span><br></pre></td></tr></table></figure>"},{"title":"Hexo如何在github上备份","date":"2019-03-24T07:24:27.000Z","description":"Hexo如何在github上备份，在不同电脑上同步能用到。","_content":"\n## 1. 换机之前的步骤\n\n1. 克隆项目到本地\n```\n git clone 项目\n```\n\n2. 进入项目文件夹，删掉除.git外的所有。\n\n3. 把原来hexo内所有内容复制过来。\n\n4. 创建分支\n```\ngit checkout -b hexo\n```\n\n5. 添加add、commit、推送，操作类似普通项目\n```\ngit add --all\ngit commit -m \"\"\ngit push --set-upstream origin hexo\n```\n\n6. 发布博客和更新\n```\nhexo new post \"新文章\"\nhexo d -g\n```\n\n7. git三部曲\n```\ngit add . \ngit commit -m \"注释\" \ngit push origin hexo\n```\n\n\n\n## 2. 换机之后的步骤\n\n1. clone到本地\n```\ngit clone -b hexo 项目\n```\n\n2. 发布博客和更新\n```\nhexo new post \"新文章\"\nhexo d -g\n```\n\n3. git三部曲\n```\ngit add . \ngit commit -m \"注释\" \ngit push origin hexo\n```\n\n---\n\n参考文献： https://blog.csdn.net/heimu24/article/details/81210640\n\n\n\n## 3. 可能出现的问题\n\n#### 1. themes/next无法提交\n\n[Hexo + Github page博客 themes/next 文件夹因存在.git而无法提交到git的解决办法]: https://blog.csdn.net/diaoliyi1350/article/details/101751995\n\n根本原因是next主题也是一个repo。\n\n1. 剪切 themes/next/.git文件夹到其它处\n\n2. 从暂存区删除该文件夹\n``` git\ngit rm --cache themes/next\n```\n\n3. 使用git status查看状态\n\n4. git三部曲\n\n5. 再移回themes/next/.git文件夹\n\n#### 2. themes/next在git add后在github仍是空\n\n新机pull下来后hexo没有页面，原因是旧的themes/next中有.git文件夹，删掉.git后再重新传一下，步骤：``` git rm --cached themes/next```\n\n+重新```git add themes/next ``` 三部曲。","source":"_posts/hexo换电脑要做的.md","raw":"---\ntitle: Hexo如何在github上备份\ndate: 2019-03-24 15:24:27\ntags: Hexo\ncategories: Hexo\ndescription: Hexo如何在github上备份，在不同电脑上同步能用到。\n---\n\n## 1. 换机之前的步骤\n\n1. 克隆项目到本地\n```\n git clone 项目\n```\n\n2. 进入项目文件夹，删掉除.git外的所有。\n\n3. 把原来hexo内所有内容复制过来。\n\n4. 创建分支\n```\ngit checkout -b hexo\n```\n\n5. 添加add、commit、推送，操作类似普通项目\n```\ngit add --all\ngit commit -m \"\"\ngit push --set-upstream origin hexo\n```\n\n6. 发布博客和更新\n```\nhexo new post \"新文章\"\nhexo d -g\n```\n\n7. git三部曲\n```\ngit add . \ngit commit -m \"注释\" \ngit push origin hexo\n```\n\n\n\n## 2. 换机之后的步骤\n\n1. clone到本地\n```\ngit clone -b hexo 项目\n```\n\n2. 发布博客和更新\n```\nhexo new post \"新文章\"\nhexo d -g\n```\n\n3. git三部曲\n```\ngit add . \ngit commit -m \"注释\" \ngit push origin hexo\n```\n\n---\n\n参考文献： https://blog.csdn.net/heimu24/article/details/81210640\n\n\n\n## 3. 可能出现的问题\n\n#### 1. themes/next无法提交\n\n[Hexo + Github page博客 themes/next 文件夹因存在.git而无法提交到git的解决办法]: https://blog.csdn.net/diaoliyi1350/article/details/101751995\n\n根本原因是next主题也是一个repo。\n\n1. 剪切 themes/next/.git文件夹到其它处\n\n2. 从暂存区删除该文件夹\n``` git\ngit rm --cache themes/next\n```\n\n3. 使用git status查看状态\n\n4. git三部曲\n\n5. 再移回themes/next/.git文件夹\n\n#### 2. themes/next在git add后在github仍是空\n\n新机pull下来后hexo没有页面，原因是旧的themes/next中有.git文件夹，删掉.git后再重新传一下，步骤：``` git rm --cached themes/next```\n\n+重新```git add themes/next ``` 三部曲。","slug":"hexo换电脑要做的","published":1,"updated":"2025-02-22T18:52:19.822Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8ar0011v0012ky2ghi2","content":"<h2 id=\"1-换机之前的步骤\"><a href=\"#1-换机之前的步骤\" class=\"headerlink\" title=\"1. 换机之前的步骤\"></a>1. 换机之前的步骤</h2><ol>\n<li><p>克隆项目到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 项目</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入项目文件夹，删掉除.git外的所有。</p>\n</li>\n<li><p>把原来hexo内所有内容复制过来。</p>\n</li>\n<li><p>创建分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hexo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加add、commit、推送，操作类似普通项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add --all</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布博客和更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &quot;新文章&quot;</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git三部曲</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . </span><br><span class=\"line\">git commit -m &quot;注释&quot; </span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"2-换机之后的步骤\"><a href=\"#2-换机之后的步骤\" class=\"headerlink\" title=\"2. 换机之后的步骤\"></a>2. 换机之后的步骤</h2><ol>\n<li><p>clone到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b hexo 项目</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布博客和更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &quot;新文章&quot;</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git三部曲</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . </span><br><span class=\"line\">git commit -m &quot;注释&quot; </span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>参考文献： <a href=\"https://blog.csdn.net/heimu24/article/details/81210640\">https://blog.csdn.net/heimu24/article/details/81210640</a></p>\n<h2 id=\"3-可能出现的问题\"><a href=\"#3-可能出现的问题\" class=\"headerlink\" title=\"3. 可能出现的问题\"></a>3. 可能出现的问题</h2><h4 id=\"1-themes-next无法提交\"><a href=\"#1-themes-next无法提交\" class=\"headerlink\" title=\"1. themes&#x2F;next无法提交\"></a>1. themes&#x2F;next无法提交</h4><p>根本原因是next主题也是一个repo。</p>\n<ol>\n<li><p>剪切 themes&#x2F;next&#x2F;.git文件夹到其它处</p>\n</li>\n<li><p>从暂存区删除该文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cache themes/next</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用git status查看状态</p>\n</li>\n<li><p>git三部曲</p>\n</li>\n<li><p>再移回themes&#x2F;next&#x2F;.git文件夹</p>\n</li>\n</ol>\n<h4 id=\"2-themes-next在git-add后在github仍是空\"><a href=\"#2-themes-next在git-add后在github仍是空\" class=\"headerlink\" title=\"2. themes&#x2F;next在git add后在github仍是空\"></a>2. themes&#x2F;next在git add后在github仍是空</h4><p>新机pull下来后hexo没有页面，原因是旧的themes&#x2F;next中有.git文件夹，删掉.git后再重新传一下，步骤：<code> git rm --cached themes/next</code></p>\n<p>+重新<code>git add themes/next </code> 三部曲。</p>\n","length":794,"excerpt":"","more":"<h2 id=\"1-换机之前的步骤\"><a href=\"#1-换机之前的步骤\" class=\"headerlink\" title=\"1. 换机之前的步骤\"></a>1. 换机之前的步骤</h2><ol>\n<li><p>克隆项目到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone 项目</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入项目文件夹，删掉除.git外的所有。</p>\n</li>\n<li><p>把原来hexo内所有内容复制过来。</p>\n</li>\n<li><p>创建分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hexo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加add、commit、推送，操作类似普通项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add --all</span><br><span class=\"line\">git commit -m &quot;&quot;</span><br><span class=\"line\">git push --set-upstream origin hexo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布博客和更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &quot;新文章&quot;</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git三部曲</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . </span><br><span class=\"line\">git commit -m &quot;注释&quot; </span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"2-换机之后的步骤\"><a href=\"#2-换机之后的步骤\" class=\"headerlink\" title=\"2. 换机之后的步骤\"></a>2. 换机之后的步骤</h2><ol>\n<li><p>clone到本地</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b hexo 项目</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发布博客和更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &quot;新文章&quot;</span><br><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>git三部曲</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add . </span><br><span class=\"line\">git commit -m &quot;注释&quot; </span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>参考文献： <a href=\"https://blog.csdn.net/heimu24/article/details/81210640\">https://blog.csdn.net/heimu24/article/details/81210640</a></p>\n<h2 id=\"3-可能出现的问题\"><a href=\"#3-可能出现的问题\" class=\"headerlink\" title=\"3. 可能出现的问题\"></a>3. 可能出现的问题</h2><h4 id=\"1-themes-next无法提交\"><a href=\"#1-themes-next无法提交\" class=\"headerlink\" title=\"1. themes&#x2F;next无法提交\"></a>1. themes&#x2F;next无法提交</h4><p>根本原因是next主题也是一个repo。</p>\n<ol>\n<li><p>剪切 themes&#x2F;next&#x2F;.git文件夹到其它处</p>\n</li>\n<li><p>从暂存区删除该文件夹</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cache themes/next</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用git status查看状态</p>\n</li>\n<li><p>git三部曲</p>\n</li>\n<li><p>再移回themes&#x2F;next&#x2F;.git文件夹</p>\n</li>\n</ol>\n<h4 id=\"2-themes-next在git-add后在github仍是空\"><a href=\"#2-themes-next在git-add后在github仍是空\" class=\"headerlink\" title=\"2. themes&#x2F;next在git add后在github仍是空\"></a>2. themes&#x2F;next在git add后在github仍是空</h4><p>新机pull下来后hexo没有页面，原因是旧的themes&#x2F;next中有.git文件夹，删掉.git后再重新传一下，步骤：<code> git rm --cached themes/next</code></p>\n<p>+重新<code>git add themes/next </code> 三部曲。</p>\n"},{"title":"Java集合总结","date":"2019-03-27T14:17:19.000Z","description":"Collection、Map到底是什么","_content":"\n\n# Java集合总结\n\n参考：[java三大集合框架](https://blog.csdn.net/weixin_39464761/article/details/75137902)\n\n![image](/image/interview_prep/collection.jpg)\n### Collection\n\n#### List\n- ArrayList：Object数组\n- Vector：Object数组\n- LinkedList：双向循环链表\n\n#### Set\n- HashSet（无序，唯一）：基于HashMap实现，底层采用HashMap保存数组。\n- LinkedHashSet：继承与HashSet，并且其内部是通过LinkedHashMap实现。\n- TreeSet（有序，唯一）：红黑树。\n\n### Map \n- HashMap：JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的.JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。\n- LinkedHashMap：继承自HashMap，所以底层同HashMap，增加了一条双向链表，实现了顺序相关逻辑。\n- HashTable：数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。\n- TreeSet：红黑树。\n\n\n## ArrayList和LinkedList\n- **线程安全**：都不是线程安全的。\n- **底层数据结构**：ArrayList使用的是Object数据，LinkedList使用双向循环链表。\n- **插入删除是否受位置影响**：ArrayList采用数组存储，所以时间复杂度受位置影响；LinkedList是双向链表，所以近似O(1)。\n- **是否支持快速随机访问**：ArrayList支持通过元素的序号访问，LinkedList不可以。\n- **内存空间占用**：ArrayList的结尾会预留一定空间，而LinkedList则是每个元素需要空间存放前驱和后继。\n\n## ArrayList与Vector\n- Vector的所有方法都是同步的，所以线程安全\n- ArrayList线程不安全。\n\n## HashMap\n- JDK1.8前是数组+链表\n- JDK1.8后，当容量大于阈值（默认8）后，链表转化为红黑树。\n- TreeMap、TreeSet和JDK1.8后的HashMap底层都是红黑树。\n\n\n## HashMap和HashTable\n- **线程安全**：HashMap不是线程安全的，HashTable内部方法都是synchronized修饰，线程安全。\n- **效率**：HashMap更快。\n- **null的支持**：HashMap中，只有一个键可以为null，值可以多个为null，HashTable不允许，抛异常。\n- **初始容量和扩充容量**：HashMap初始为16，每次扩充原来的2倍，HashTable初始为11，扩充为2n+1\n- **底层结构**：JDK1.8后，当容量大于阈值（默认8）后，链表转化为红黑树\n\n[Java集合类面试题](https://blog.csdn.net/hfismyangel/article/details/78156419)\n\n## 为何Collection不从Cloneable和Serializable接口继承\nCollection接口指定一组对象，对象就是它的元素。如何维护这些元素由具体实现决定。Collection是一个抽象表现，重要的实现。\n\n## 为何Map接口不继承于Collection接口\n尽管Map接口和它的实现也是集合框架的一部分，但Map不是集合，集合也不是Map。因此，Map继承Collection毫无意义，反之亦然。\n\n如果Map继承Collection接口，那么元素去哪儿？Map包含key-value对，它提供抽取key或value列表集合的方法，但是它不适合“一组对象”规范。\n\n## Iterator是什么\nIterator接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者在迭代过程中移除元素。\n\n## Enumeration和Iterator接口的区别\nEnumeration的速度是Iterator的两倍，也使用更少的内存。Enumeration是非常基础的，也满足了基础的需要。但是，与Enumeration相比，Iterator更加安全，因为当一个集合正在被遍历的时候，它会阻止其它线程去修改集合。\n\n迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者从集合中移除元素，而Enumeration不能做到。为了使它的功能更加清晰，迭代器方法名已经经过改善。\n\n## 为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标\n可以在当前Iterator的顶层实现，但是它用得很少，如果将它加到接口中，每个继承都要去实现它，这没有意义。\n\n## Iterator和ListIterator之间有什么区别\n- Iterator可以适用于Set、List，ListIterator只能用于List\n- ListIterator可以双向遍历，Iterator只能向前遍历\n- ListIterator继承于Iterator，添加了额外的功能，比如添加、替换、获取前面或后面的元素。\n\n## 遍历List方式\n\n```java\nList<String> strList = new ArrayList<>();\n// for-each遍历\nfor(String obj : strList){\n    System.out.println(obj);\n}\n// Iterator遍历\nIterator<String> it = strList.iterator();\nwhile(it.hasNext()){\n    String obj = it.next();\n    System.out.println(obj);\n}\n```\n迭代器更加线程安全，因为它可以确保，在当前遍历的集合元素被更改的时候，它会抛出ConcurrentModificationException。\n\n## 如何从给定集合那里创建一个synchronized的集合\n\n使用Collections.synchronizedCollection(Collectionc)根据指定集合来获取一个synchronized（线程安全的）集合\n\n## 哪些集合类是线程安全的\nVector、HashTable、Properties和Stack是同步类，所以它们是线程安全的，可以在多线程环境下使用。Java1.5并发API包括一些集合类，允许迭代时修改，因为它们都工作在集合的克隆上，所以它们在多线程环境中是安全的。\n\n\n\n\n\n\n","source":"_posts/java集合总结.md","raw":"---\ntitle: Java集合总结\ndate: 2019-03-27 22:17:19\ntags: [面试,Java]\ncategories: [面试,Java]\ndescription: Collection、Map到底是什么\n---\n\n\n# Java集合总结\n\n参考：[java三大集合框架](https://blog.csdn.net/weixin_39464761/article/details/75137902)\n\n![image](/image/interview_prep/collection.jpg)\n### Collection\n\n#### List\n- ArrayList：Object数组\n- Vector：Object数组\n- LinkedList：双向循环链表\n\n#### Set\n- HashSet（无序，唯一）：基于HashMap实现，底层采用HashMap保存数组。\n- LinkedHashSet：继承与HashSet，并且其内部是通过LinkedHashMap实现。\n- TreeSet（有序，唯一）：红黑树。\n\n### Map \n- HashMap：JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的.JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。\n- LinkedHashMap：继承自HashMap，所以底层同HashMap，增加了一条双向链表，实现了顺序相关逻辑。\n- HashTable：数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。\n- TreeSet：红黑树。\n\n\n## ArrayList和LinkedList\n- **线程安全**：都不是线程安全的。\n- **底层数据结构**：ArrayList使用的是Object数据，LinkedList使用双向循环链表。\n- **插入删除是否受位置影响**：ArrayList采用数组存储，所以时间复杂度受位置影响；LinkedList是双向链表，所以近似O(1)。\n- **是否支持快速随机访问**：ArrayList支持通过元素的序号访问，LinkedList不可以。\n- **内存空间占用**：ArrayList的结尾会预留一定空间，而LinkedList则是每个元素需要空间存放前驱和后继。\n\n## ArrayList与Vector\n- Vector的所有方法都是同步的，所以线程安全\n- ArrayList线程不安全。\n\n## HashMap\n- JDK1.8前是数组+链表\n- JDK1.8后，当容量大于阈值（默认8）后，链表转化为红黑树。\n- TreeMap、TreeSet和JDK1.8后的HashMap底层都是红黑树。\n\n\n## HashMap和HashTable\n- **线程安全**：HashMap不是线程安全的，HashTable内部方法都是synchronized修饰，线程安全。\n- **效率**：HashMap更快。\n- **null的支持**：HashMap中，只有一个键可以为null，值可以多个为null，HashTable不允许，抛异常。\n- **初始容量和扩充容量**：HashMap初始为16，每次扩充原来的2倍，HashTable初始为11，扩充为2n+1\n- **底层结构**：JDK1.8后，当容量大于阈值（默认8）后，链表转化为红黑树\n\n[Java集合类面试题](https://blog.csdn.net/hfismyangel/article/details/78156419)\n\n## 为何Collection不从Cloneable和Serializable接口继承\nCollection接口指定一组对象，对象就是它的元素。如何维护这些元素由具体实现决定。Collection是一个抽象表现，重要的实现。\n\n## 为何Map接口不继承于Collection接口\n尽管Map接口和它的实现也是集合框架的一部分，但Map不是集合，集合也不是Map。因此，Map继承Collection毫无意义，反之亦然。\n\n如果Map继承Collection接口，那么元素去哪儿？Map包含key-value对，它提供抽取key或value列表集合的方法，但是它不适合“一组对象”规范。\n\n## Iterator是什么\nIterator接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者在迭代过程中移除元素。\n\n## Enumeration和Iterator接口的区别\nEnumeration的速度是Iterator的两倍，也使用更少的内存。Enumeration是非常基础的，也满足了基础的需要。但是，与Enumeration相比，Iterator更加安全，因为当一个集合正在被遍历的时候，它会阻止其它线程去修改集合。\n\n迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者从集合中移除元素，而Enumeration不能做到。为了使它的功能更加清晰，迭代器方法名已经经过改善。\n\n## 为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标\n可以在当前Iterator的顶层实现，但是它用得很少，如果将它加到接口中，每个继承都要去实现它，这没有意义。\n\n## Iterator和ListIterator之间有什么区别\n- Iterator可以适用于Set、List，ListIterator只能用于List\n- ListIterator可以双向遍历，Iterator只能向前遍历\n- ListIterator继承于Iterator，添加了额外的功能，比如添加、替换、获取前面或后面的元素。\n\n## 遍历List方式\n\n```java\nList<String> strList = new ArrayList<>();\n// for-each遍历\nfor(String obj : strList){\n    System.out.println(obj);\n}\n// Iterator遍历\nIterator<String> it = strList.iterator();\nwhile(it.hasNext()){\n    String obj = it.next();\n    System.out.println(obj);\n}\n```\n迭代器更加线程安全，因为它可以确保，在当前遍历的集合元素被更改的时候，它会抛出ConcurrentModificationException。\n\n## 如何从给定集合那里创建一个synchronized的集合\n\n使用Collections.synchronizedCollection(Collectionc)根据指定集合来获取一个synchronized（线程安全的）集合\n\n## 哪些集合类是线程安全的\nVector、HashTable、Properties和Stack是同步类，所以它们是线程安全的，可以在多线程环境下使用。Java1.5并发API包括一些集合类，允许迭代时修改，因为它们都工作在集合的克隆上，所以它们在多线程环境中是安全的。\n\n\n\n\n\n\n","slug":"java集合总结","published":1,"updated":"2025-02-22T18:52:19.823Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8ar0014v001744wgrgq","content":"<h1 id=\"Java集合总结\"><a href=\"#Java集合总结\" class=\"headerlink\" title=\"Java集合总结\"></a>Java集合总结</h1><p>参考：<a href=\"https://blog.csdn.net/weixin_39464761/article/details/75137902\">java三大集合框架</a></p>\n<p><img src=\"/image/interview_prep/collection.jpg\" alt=\"image\"></p>\n<h3 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h3><h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><ul>\n<li>ArrayList：Object数组</li>\n<li>Vector：Object数组</li>\n<li>LinkedList：双向循环链表</li>\n</ul>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><ul>\n<li>HashSet（无序，唯一）：基于HashMap实现，底层采用HashMap保存数组。</li>\n<li>LinkedHashSet：继承与HashSet，并且其内部是通过LinkedHashMap实现。</li>\n<li>TreeSet（有序，唯一）：红黑树。</li>\n</ul>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><ul>\n<li>HashMap：JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的.JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</li>\n<li>LinkedHashMap：继承自HashMap，所以底层同HashMap，增加了一条双向链表，实现了顺序相关逻辑。</li>\n<li>HashTable：数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。</li>\n<li>TreeSet：红黑树。</li>\n</ul>\n<h2 id=\"ArrayList和LinkedList\"><a href=\"#ArrayList和LinkedList\" class=\"headerlink\" title=\"ArrayList和LinkedList\"></a>ArrayList和LinkedList</h2><ul>\n<li><strong>线程安全</strong>：都不是线程安全的。</li>\n<li><strong>底层数据结构</strong>：ArrayList使用的是Object数据，LinkedList使用双向循环链表。</li>\n<li><strong>插入删除是否受位置影响</strong>：ArrayList采用数组存储，所以时间复杂度受位置影响；LinkedList是双向链表，所以近似O(1)。</li>\n<li><strong>是否支持快速随机访问</strong>：ArrayList支持通过元素的序号访问，LinkedList不可以。</li>\n<li><strong>内存空间占用</strong>：ArrayList的结尾会预留一定空间，而LinkedList则是每个元素需要空间存放前驱和后继。</li>\n</ul>\n<h2 id=\"ArrayList与Vector\"><a href=\"#ArrayList与Vector\" class=\"headerlink\" title=\"ArrayList与Vector\"></a>ArrayList与Vector</h2><ul>\n<li>Vector的所有方法都是同步的，所以线程安全</li>\n<li>ArrayList线程不安全。</li>\n</ul>\n<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><ul>\n<li>JDK1.8前是数组+链表</li>\n<li>JDK1.8后，当容量大于阈值（默认8）后，链表转化为红黑树。</li>\n<li>TreeMap、TreeSet和JDK1.8后的HashMap底层都是红黑树。</li>\n</ul>\n<h2 id=\"HashMap和HashTable\"><a href=\"#HashMap和HashTable\" class=\"headerlink\" title=\"HashMap和HashTable\"></a>HashMap和HashTable</h2><ul>\n<li><strong>线程安全</strong>：HashMap不是线程安全的，HashTable内部方法都是synchronized修饰，线程安全。</li>\n<li><strong>效率</strong>：HashMap更快。</li>\n<li><strong>null的支持</strong>：HashMap中，只有一个键可以为null，值可以多个为null，HashTable不允许，抛异常。</li>\n<li><strong>初始容量和扩充容量</strong>：HashMap初始为16，每次扩充原来的2倍，HashTable初始为11，扩充为2n+1</li>\n<li><strong>底层结构</strong>：JDK1.8后，当容量大于阈值（默认8）后，链表转化为红黑树</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/hfismyangel/article/details/78156419\">Java集合类面试题</a></p>\n<h2 id=\"为何Collection不从Cloneable和Serializable接口继承\"><a href=\"#为何Collection不从Cloneable和Serializable接口继承\" class=\"headerlink\" title=\"为何Collection不从Cloneable和Serializable接口继承\"></a>为何Collection不从Cloneable和Serializable接口继承</h2><p>Collection接口指定一组对象，对象就是它的元素。如何维护这些元素由具体实现决定。Collection是一个抽象表现，重要的实现。</p>\n<h2 id=\"为何Map接口不继承于Collection接口\"><a href=\"#为何Map接口不继承于Collection接口\" class=\"headerlink\" title=\"为何Map接口不继承于Collection接口\"></a>为何Map接口不继承于Collection接口</h2><p>尽管Map接口和它的实现也是集合框架的一部分，但Map不是集合，集合也不是Map。因此，Map继承Collection毫无意义，反之亦然。</p>\n<p>如果Map继承Collection接口，那么元素去哪儿？Map包含key-value对，它提供抽取key或value列表集合的方法，但是它不适合“一组对象”规范。</p>\n<h2 id=\"Iterator是什么\"><a href=\"#Iterator是什么\" class=\"headerlink\" title=\"Iterator是什么\"></a>Iterator是什么</h2><p>Iterator接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者在迭代过程中移除元素。</p>\n<h2 id=\"Enumeration和Iterator接口的区别\"><a href=\"#Enumeration和Iterator接口的区别\" class=\"headerlink\" title=\"Enumeration和Iterator接口的区别\"></a>Enumeration和Iterator接口的区别</h2><p>Enumeration的速度是Iterator的两倍，也使用更少的内存。Enumeration是非常基础的，也满足了基础的需要。但是，与Enumeration相比，Iterator更加安全，因为当一个集合正在被遍历的时候，它会阻止其它线程去修改集合。</p>\n<p>迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者从集合中移除元素，而Enumeration不能做到。为了使它的功能更加清晰，迭代器方法名已经经过改善。</p>\n<h2 id=\"为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标\"><a href=\"#为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标\" class=\"headerlink\" title=\"为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标\"></a>为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标</h2><p>可以在当前Iterator的顶层实现，但是它用得很少，如果将它加到接口中，每个继承都要去实现它，这没有意义。</p>\n<h2 id=\"Iterator和ListIterator之间有什么区别\"><a href=\"#Iterator和ListIterator之间有什么区别\" class=\"headerlink\" title=\"Iterator和ListIterator之间有什么区别\"></a>Iterator和ListIterator之间有什么区别</h2><ul>\n<li>Iterator可以适用于Set、List，ListIterator只能用于List</li>\n<li>ListIterator可以双向遍历，Iterator只能向前遍历</li>\n<li>ListIterator继承于Iterator，添加了额外的功能，比如添加、替换、获取前面或后面的元素。</li>\n</ul>\n<h2 id=\"遍历List方式\"><a href=\"#遍历List方式\" class=\"headerlink\" title=\"遍历List方式\"></a>遍历List方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// for-each遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(String obj : strList)&#123;</span><br><span class=\"line\">    System.out.println(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Iterator遍历</span></span><br><span class=\"line\">Iterator&lt;String&gt; it = strList.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">    System.out.println(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>迭代器更加线程安全，因为它可以确保，在当前遍历的集合元素被更改的时候，它会抛出ConcurrentModificationException。</p>\n<h2 id=\"如何从给定集合那里创建一个synchronized的集合\"><a href=\"#如何从给定集合那里创建一个synchronized的集合\" class=\"headerlink\" title=\"如何从给定集合那里创建一个synchronized的集合\"></a>如何从给定集合那里创建一个synchronized的集合</h2><p>使用Collections.synchronizedCollection(Collectionc)根据指定集合来获取一个synchronized（线程安全的）集合</p>\n<h2 id=\"哪些集合类是线程安全的\"><a href=\"#哪些集合类是线程安全的\" class=\"headerlink\" title=\"哪些集合类是线程安全的\"></a>哪些集合类是线程安全的</h2><p>Vector、HashTable、Properties和Stack是同步类，所以它们是线程安全的，可以在多线程环境下使用。Java1.5并发API包括一些集合类，允许迭代时修改，因为它们都工作在集合的克隆上，所以它们在多线程环境中是安全的。</p>\n","length":2548,"excerpt":"","more":"<h1 id=\"Java集合总结\"><a href=\"#Java集合总结\" class=\"headerlink\" title=\"Java集合总结\"></a>Java集合总结</h1><p>参考：<a href=\"https://blog.csdn.net/weixin_39464761/article/details/75137902\">java三大集合框架</a></p>\n<p><img src=\"/image/interview_prep/collection.jpg\" alt=\"image\"></p>\n<h3 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h3><h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><ul>\n<li>ArrayList：Object数组</li>\n<li>Vector：Object数组</li>\n<li>LinkedList：双向循环链表</li>\n</ul>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><ul>\n<li>HashSet（无序，唯一）：基于HashMap实现，底层采用HashMap保存数组。</li>\n<li>LinkedHashSet：继承与HashSet，并且其内部是通过LinkedHashMap实现。</li>\n<li>TreeSet（有序，唯一）：红黑树。</li>\n</ul>\n<h3 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h3><ul>\n<li>HashMap：JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的.JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</li>\n<li>LinkedHashMap：继承自HashMap，所以底层同HashMap，增加了一条双向链表，实现了顺序相关逻辑。</li>\n<li>HashTable：数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的。</li>\n<li>TreeSet：红黑树。</li>\n</ul>\n<h2 id=\"ArrayList和LinkedList\"><a href=\"#ArrayList和LinkedList\" class=\"headerlink\" title=\"ArrayList和LinkedList\"></a>ArrayList和LinkedList</h2><ul>\n<li><strong>线程安全</strong>：都不是线程安全的。</li>\n<li><strong>底层数据结构</strong>：ArrayList使用的是Object数据，LinkedList使用双向循环链表。</li>\n<li><strong>插入删除是否受位置影响</strong>：ArrayList采用数组存储，所以时间复杂度受位置影响；LinkedList是双向链表，所以近似O(1)。</li>\n<li><strong>是否支持快速随机访问</strong>：ArrayList支持通过元素的序号访问，LinkedList不可以。</li>\n<li><strong>内存空间占用</strong>：ArrayList的结尾会预留一定空间，而LinkedList则是每个元素需要空间存放前驱和后继。</li>\n</ul>\n<h2 id=\"ArrayList与Vector\"><a href=\"#ArrayList与Vector\" class=\"headerlink\" title=\"ArrayList与Vector\"></a>ArrayList与Vector</h2><ul>\n<li>Vector的所有方法都是同步的，所以线程安全</li>\n<li>ArrayList线程不安全。</li>\n</ul>\n<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><ul>\n<li>JDK1.8前是数组+链表</li>\n<li>JDK1.8后，当容量大于阈值（默认8）后，链表转化为红黑树。</li>\n<li>TreeMap、TreeSet和JDK1.8后的HashMap底层都是红黑树。</li>\n</ul>\n<h2 id=\"HashMap和HashTable\"><a href=\"#HashMap和HashTable\" class=\"headerlink\" title=\"HashMap和HashTable\"></a>HashMap和HashTable</h2><ul>\n<li><strong>线程安全</strong>：HashMap不是线程安全的，HashTable内部方法都是synchronized修饰，线程安全。</li>\n<li><strong>效率</strong>：HashMap更快。</li>\n<li><strong>null的支持</strong>：HashMap中，只有一个键可以为null，值可以多个为null，HashTable不允许，抛异常。</li>\n<li><strong>初始容量和扩充容量</strong>：HashMap初始为16，每次扩充原来的2倍，HashTable初始为11，扩充为2n+1</li>\n<li><strong>底层结构</strong>：JDK1.8后，当容量大于阈值（默认8）后，链表转化为红黑树</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/hfismyangel/article/details/78156419\">Java集合类面试题</a></p>\n<h2 id=\"为何Collection不从Cloneable和Serializable接口继承\"><a href=\"#为何Collection不从Cloneable和Serializable接口继承\" class=\"headerlink\" title=\"为何Collection不从Cloneable和Serializable接口继承\"></a>为何Collection不从Cloneable和Serializable接口继承</h2><p>Collection接口指定一组对象，对象就是它的元素。如何维护这些元素由具体实现决定。Collection是一个抽象表现，重要的实现。</p>\n<h2 id=\"为何Map接口不继承于Collection接口\"><a href=\"#为何Map接口不继承于Collection接口\" class=\"headerlink\" title=\"为何Map接口不继承于Collection接口\"></a>为何Map接口不继承于Collection接口</h2><p>尽管Map接口和它的实现也是集合框架的一部分，但Map不是集合，集合也不是Map。因此，Map继承Collection毫无意义，反之亦然。</p>\n<p>如果Map继承Collection接口，那么元素去哪儿？Map包含key-value对，它提供抽取key或value列表集合的方法，但是它不适合“一组对象”规范。</p>\n<h2 id=\"Iterator是什么\"><a href=\"#Iterator是什么\" class=\"headerlink\" title=\"Iterator是什么\"></a>Iterator是什么</h2><p>Iterator接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者在迭代过程中移除元素。</p>\n<h2 id=\"Enumeration和Iterator接口的区别\"><a href=\"#Enumeration和Iterator接口的区别\" class=\"headerlink\" title=\"Enumeration和Iterator接口的区别\"></a>Enumeration和Iterator接口的区别</h2><p>Enumeration的速度是Iterator的两倍，也使用更少的内存。Enumeration是非常基础的，也满足了基础的需要。但是，与Enumeration相比，Iterator更加安全，因为当一个集合正在被遍历的时候，它会阻止其它线程去修改集合。</p>\n<p>迭代器取代了Java集合框架中的Enumeration。迭代器允许调用者从集合中移除元素，而Enumeration不能做到。为了使它的功能更加清晰，迭代器方法名已经经过改善。</p>\n<h2 id=\"为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标\"><a href=\"#为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标\" class=\"headerlink\" title=\"为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标\"></a>为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标</h2><p>可以在当前Iterator的顶层实现，但是它用得很少，如果将它加到接口中，每个继承都要去实现它，这没有意义。</p>\n<h2 id=\"Iterator和ListIterator之间有什么区别\"><a href=\"#Iterator和ListIterator之间有什么区别\" class=\"headerlink\" title=\"Iterator和ListIterator之间有什么区别\"></a>Iterator和ListIterator之间有什么区别</h2><ul>\n<li>Iterator可以适用于Set、List，ListIterator只能用于List</li>\n<li>ListIterator可以双向遍历，Iterator只能向前遍历</li>\n<li>ListIterator继承于Iterator，添加了额外的功能，比如添加、替换、获取前面或后面的元素。</li>\n</ul>\n<h2 id=\"遍历List方式\"><a href=\"#遍历List方式\" class=\"headerlink\" title=\"遍历List方式\"></a>遍历List方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; strList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">// for-each遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(String obj : strList)&#123;</span><br><span class=\"line\">    System.out.println(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Iterator遍历</span></span><br><span class=\"line\">Iterator&lt;String&gt; it = strList.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> it.next();</span><br><span class=\"line\">    System.out.println(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>迭代器更加线程安全，因为它可以确保，在当前遍历的集合元素被更改的时候，它会抛出ConcurrentModificationException。</p>\n<h2 id=\"如何从给定集合那里创建一个synchronized的集合\"><a href=\"#如何从给定集合那里创建一个synchronized的集合\" class=\"headerlink\" title=\"如何从给定集合那里创建一个synchronized的集合\"></a>如何从给定集合那里创建一个synchronized的集合</h2><p>使用Collections.synchronizedCollection(Collectionc)根据指定集合来获取一个synchronized（线程安全的）集合</p>\n<h2 id=\"哪些集合类是线程安全的\"><a href=\"#哪些集合类是线程安全的\" class=\"headerlink\" title=\"哪些集合类是线程安全的\"></a>哪些集合类是线程安全的</h2><p>Vector、HashTable、Properties和Stack是同步类，所以它们是线程安全的，可以在多线程环境下使用。Java1.5并发API包括一些集合类，允许迭代时修改，因为它们都工作在集合的克隆上，所以它们在多线程环境中是安全的。</p>\n"},{"title":"JDK动态代理","date":"2019-10-12T12:45:04.000Z","photos":["https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true"],"description":"JDK动态代理及实现","_content":"\n# JDK动态代理\n\n> 整个JDK动态代理的秘密也就这些，简单一句话，动态代理就是要生成一个包装类对象，由于代理的对象是动态的，所以叫动态代理。由于我们需要增强，这个增强是需要留给开发人员开发代码的，因此代理类不能直接包含被代理对象，而是一个InvocationHandler，该InvocationHandler包含被代理对象，并负责分发请求给被代理对象，分发前后均可以做增强。从原理可以看出，JDK动态代理是“对象”的代理。\n>\n> 版权声明：本文为CSDN博主「探索者一号」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n> 原文链接：https://blog.csdn.net/flyfeifei66/article/details/81481222\n\n\n\n```java\ninterface TargetInterface {\n    String method1();\n    void method2();\n    int method3(int x);\n}\nclass Target implements TargetInterface{\n\n    @Override\n    public String method1() {\n        System.out.println(\"method1 running...\");\n        return \"aaa\";\n    }\n\n    @Override\n    public void method2() {\n        System.out.println(\"method2 running...\");\n    }\n\n    @Override\n    public int method3(int x) {\n        return x;\n    }\n\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Target target = new Target();\n        TargetInterface newProxyInstance = (TargetInterface) Proxy.newProxyInstance(\n                target.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                // new InvocationHandler 重新invoke方法\n                (proxy, method, argss)->{\n                    System.out.println(\"before\");Object invoke = method.invoke(target, argss);System.out.println(\"after\");\n                    return invoke;});\n        String method1 = newProxyInstance.method1();\n        newProxyInstance.method2();\n        int method3 = newProxyInstance.method3(100);\n        System.out.println(method1);\n        System.out.println(method3);\n    }\n}\n```\n\n","source":"_posts/jdk代理.md","raw":"---\ntitle: JDK动态代理\ndate: 2019-10-12 20:45:04\ntags: [面试,Java]\ncategories: [面试,Java]\nphotos:\n  - \"https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/1.jpg?raw=true\"\ndescription: JDK动态代理及实现\n---\n\n# JDK动态代理\n\n> 整个JDK动态代理的秘密也就这些，简单一句话，动态代理就是要生成一个包装类对象，由于代理的对象是动态的，所以叫动态代理。由于我们需要增强，这个增强是需要留给开发人员开发代码的，因此代理类不能直接包含被代理对象，而是一个InvocationHandler，该InvocationHandler包含被代理对象，并负责分发请求给被代理对象，分发前后均可以做增强。从原理可以看出，JDK动态代理是“对象”的代理。\n>\n> 版权声明：本文为CSDN博主「探索者一号」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n> 原文链接：https://blog.csdn.net/flyfeifei66/article/details/81481222\n\n\n\n```java\ninterface TargetInterface {\n    String method1();\n    void method2();\n    int method3(int x);\n}\nclass Target implements TargetInterface{\n\n    @Override\n    public String method1() {\n        System.out.println(\"method1 running...\");\n        return \"aaa\";\n    }\n\n    @Override\n    public void method2() {\n        System.out.println(\"method2 running...\");\n    }\n\n    @Override\n    public int method3(int x) {\n        return x;\n    }\n\n}\n```\n\n```java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Target target = new Target();\n        TargetInterface newProxyInstance = (TargetInterface) Proxy.newProxyInstance(\n                target.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                // new InvocationHandler 重新invoke方法\n                (proxy, method, argss)->{\n                    System.out.println(\"before\");Object invoke = method.invoke(target, argss);System.out.println(\"after\");\n                    return invoke;});\n        String method1 = newProxyInstance.method1();\n        newProxyInstance.method2();\n        int method3 = newProxyInstance.method3(100);\n        System.out.println(method1);\n        System.out.println(method3);\n    }\n}\n```\n\n","slug":"jdk代理","published":1,"updated":"2025-02-22T18:52:19.823Z","comments":1,"layout":"post","_id":"cm7hqj8as0017v0015t62f53k","content":"<h1 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h1><blockquote>\n<p>整个JDK动态代理的秘密也就这些，简单一句话，动态代理就是要生成一个包装类对象，由于代理的对象是动态的，所以叫动态代理。由于我们需要增强，这个增强是需要留给开发人员开发代码的，因此代理类不能直接包含被代理对象，而是一个InvocationHandler，该InvocationHandler包含被代理对象，并负责分发请求给被代理对象，分发前后均可以做增强。从原理可以看出，JDK动态代理是“对象”的代理。</p>\n<p>版权声明：本文为CSDN博主「探索者一号」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/flyfeifei66/article/details/81481222\">https://blog.csdn.net/flyfeifei66/article/details/81481222</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">TargetInterface</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method3</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TargetInterface</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method1 running...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;aaa&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method2 running...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">method3</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Target</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Target</span>();</span><br><span class=\"line\">        <span class=\"type\">TargetInterface</span> <span class=\"variable\">newProxyInstance</span> <span class=\"operator\">=</span> (TargetInterface) Proxy.newProxyInstance(</span><br><span class=\"line\">                target.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"comment\">// new InvocationHandler 重新invoke方法</span></span><br><span class=\"line\">                (proxy, method, argss)-&gt;&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;before&quot;</span>);<span class=\"type\">Object</span> <span class=\"variable\">invoke</span> <span class=\"operator\">=</span> method.invoke(target, argss);System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> invoke;&#125;);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">method1</span> <span class=\"operator\">=</span> newProxyInstance.method1();</span><br><span class=\"line\">        newProxyInstance.method2();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">method3</span> <span class=\"operator\">=</span> newProxyInstance.method3(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(method1);</span><br><span class=\"line\">        System.out.println(method3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","length":1403,"excerpt":"","more":"<h1 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h1><blockquote>\n<p>整个JDK动态代理的秘密也就这些，简单一句话，动态代理就是要生成一个包装类对象，由于代理的对象是动态的，所以叫动态代理。由于我们需要增强，这个增强是需要留给开发人员开发代码的，因此代理类不能直接包含被代理对象，而是一个InvocationHandler，该InvocationHandler包含被代理对象，并负责分发请求给被代理对象，分发前后均可以做增强。从原理可以看出，JDK动态代理是“对象”的代理。</p>\n<p>版权声明：本文为CSDN博主「探索者一号」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href=\"https://blog.csdn.net/flyfeifei66/article/details/81481222\">https://blog.csdn.net/flyfeifei66/article/details/81481222</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">TargetInterface</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">method1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">method3</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Target</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TargetInterface</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method1 running...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;aaa&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method2 running...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">method3</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Target</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Target</span>();</span><br><span class=\"line\">        <span class=\"type\">TargetInterface</span> <span class=\"variable\">newProxyInstance</span> <span class=\"operator\">=</span> (TargetInterface) Proxy.newProxyInstance(</span><br><span class=\"line\">                target.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"comment\">// new InvocationHandler 重新invoke方法</span></span><br><span class=\"line\">                (proxy, method, argss)-&gt;&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;before&quot;</span>);<span class=\"type\">Object</span> <span class=\"variable\">invoke</span> <span class=\"operator\">=</span> method.invoke(target, argss);System.out.println(<span class=\"string\">&quot;after&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> invoke;&#125;);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">method1</span> <span class=\"operator\">=</span> newProxyInstance.method1();</span><br><span class=\"line\">        newProxyInstance.method2();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">method3</span> <span class=\"operator\">=</span> newProxyInstance.method3(<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(method1);</span><br><span class=\"line\">        System.out.println(method3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"剑指offer算法题 27——36","date":"2019-03-23T12:03:31.000Z","description":"搞定剑指offer","_content":"\n# 剑指offer算法题 27——36\n\n# 剑指offer算法题 27\n\n## 27 二叉搜索树转换成双向链表\n输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。\n\n<font color='red'>“不能创建任何新的结点”，但是需要new tail new tail\n</font>\n\n递归或栈的方法中序遍历。\n\n```java\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    TreeNode head = null;\n    TreeNode tail = null;\n    public TreeNode Convert(TreeNode pRootOfTree) {\n        if(pRootOfTree == null)\n            return null;\n        ConvertNode(pRootOfTree);\n        return head;\n    }\n    private void ConvertNode(TreeNode node){\n        if(node == null)\n            return;\n        ConvertNode(node.left);\n        if(head == null){\n            head = node;\n            tail = node;\n        }else{\n            tail.right = node;\n            node.left = tail;\n            tail = node;\n        }\n        ConvertNode(node.right);\n        \n    }\n}\n```\n\n## 28 字符串排列\n\n输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。\n- 按字典序打印，需要把结果：Collections.sort(res);\n- 避免重复的，需要判断：if(i != index && chars[i] == chars[index])\n\n```java\nimport java.util.ArrayList;\nimport java.util.Collections;\npublic class Solution {\n    ArrayList<String> res = new ArrayList<String>();\n    public ArrayList<String> Permutation(String str) {\n        char[] chars = str.toCharArray();\n        if(str.length() == 0)\n            return res;\n        res = Permutation(chars, 0);\n        Collections.sort(res);\n        return res;\n    }\n    private ArrayList<String> Permutation(char[] chars, int index){\n        if(index == chars.length - 1)\n            res.add(String.valueOf(chars));\n        else{\n            for(int i = index; i < chars.length; i++){\n                if(i != index && chars[i] == chars[index]){\n                    continue;\n                }\n                swap(chars, i, index);\n                Permutation(chars, index + 1);\n                swap(chars, index, i);\n\n            }\n        }\n        return res;\n    }\n    private void swap(char[] chars, int i ,int j){\n        char  temp = chars[i];\n        chars[i] = chars[j];\n        chars[j] = temp;\n    }\n}\n```\n## 29 数组中次数超过的数\n\n数组中有一个数字出现的次数超过的数数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。\n\n- <font color='red'>可以用hashmap</font>\n- <font color='red'>可以先排序</font>\n- <font color='red'>超过一半，即超过其他数之和。用一个num记录当前count大于零的数，count表示此数的次数，如果新遍历的数不是num，count--，否则count++，当count归零，更新num。</font>\n\n```java\npublic class Solution {\n    public int MoreThanHalfNum_Solution(int [] array) {\n        if(array.length == 0)\n            return 0;\n        int num = array[0], count = 1;\n        for(int i = 1; i < array.length; i++){\n            if(array[i] != num){\n                if(count == 0)\n                    num = array[i];\n                else\n                    count--;\n            }else\n                count++;\n        }\n        if(count > 0)\n            return num;\n        else\n            return 0;\n    }\n}\n```\n\n## 30 最小的K个数\n输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。\n\n```java\nimport java.util.PriorityQueue;\nimport java.util.ArrayList;\nimport java.util.Comparator;\npublic class Solution {\n    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        if(k > input.length || k == 0)\n            return res;\n        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(k, new Comparator<Integer>() {\n \n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o2.compareTo(o1);\n            }\n        });\n        for(int i = 0; i < input.length; i++){\n            if(queue.size() < k){\n                queue.offer(input[i]);\n            }else if(queue.peek() > input[i]){\n                    queue.poll();\n                    queue.offer(input[i]);\n            }\n        }\n        while(!queue.isEmpty()){\n            res.add(queue.poll());\n        }\n        return res;\n    }\n}\n```\n\n## 31 连续子数组的最大和\nHZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)\n\n```\npublic class Solution {\n    public int FindGreatestSumOfSubArray(int[] array) {\n        int cur = 0;\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < array.length; i++){\n            if(cur > 0)\n                cur += array[i];\n            else\n                cur = array[i];\n            if(cur > max)\n                max = cur;\n        }\n        return max;\n    }\n}\n```\n## 32 整数中1出现的次\n求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。\n\n<font color='red'>规律：当计算右数第 i 位包含的 x 的个数时</font>\n\n<font color='red'>1. 取第 i位左边(高位)的数字，乘以 10^(i-1)，得到基础值 a</font>\n\n<font color='red'>2. 取第 i 位数字，计算修正值</font>\n\n<font color='red'>3. 如果大于 x , 则结果为 a + 10^(i-1)</font>\n\n<font color='red'>4. 如果小于 x，则结果为 a</font>\n\n<font color='red'>5. 如果等于 x，则取第 i 位右边(低位)数字，设为 b，最后结果为 a + b + 1</font>\n\n\n\n```\n// n - n / i * i 是当前左边一位\npublic class Solution {\n    public int NumberOf1Between1AndN_Solution(int n) {\n        int count = 0;\n        for(int i = 1; n / i != 0; i *= 10){\n            int base = n / i / 10 ;\n            base *= i;\n            int bias = n / i % 10;\n            if(bias < 1)\n                count += base;\n            else if(bias > 1)\n                count += base + i;\n            else{\n                count += base + n - n / i * i + 1;\n            }\n            \n        }\n        return count;\n    }\n}\n```\n\n## 33 把数组排成最小的数\n输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。\n\n<font color='red'>类似冒泡排序</font>\n\n```\npublic class Solution {\n    public String PrintMinNumber(int [] numbers) {\n        ArrayList<String> list = new ArrayList<>();\n        for(int n : numbers){\n            list.add(String.valueOf(n));\n        }\n        for(int i = 0;i <list.size(); i++){\n            for(int j = 0; j < list.size() - 1 - i; j++){\n                if(Long.parseLong(list.get(j) + list.get(j + 1)) > Long.parseLong(list.get(j + 1) + list.get(j))) {\n                    String temp = list.get(j + 1);\n                    list.set(j + 1 , list.get(j));\n                    list.set(j, temp);\n                }\n            }\n        }\n        String res = \"\";\n        for (String s:list) {\n            res += s;\n        }\n        return res;\n    }\n}\n```\n\n## 34 丑数\n把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。\n\n```\nimport java.util.PriorityQueue;\npublic class Solution {\n    public int GetUglyNumber_Solution(int index) {\n        if(index == 0)\n            return 0;\n        PriorityQueue<Long> queue = new PriorityQueue();\n        queue.offer(1L);\n        long num = 1L;\n        for(int i = 0; i != index; i++){\n            num = queue.poll();\n            while(!queue.isEmpty() && num == queue.peek())\n                queue.poll();\n            queue.offer(num * 2);\n            queue.offer(num * 3);\n            queue.offer(num * 5);\n        }\n        return (int)num;\n    }\n}\n```\n\n# 35第一个只出现一次的字符\n\n在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.\n\n\n```\nimport java.util.HashMap;\npublic class Solution {\n    public int FirstNotRepeatingChar(String str) {\n        char[] cs = str.toCharArray();\n        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c : cs) {\n            if (!map.containsKey(c))\n                map.put(c, 1);\n            else\n                map.put(c, map.get(c) + 1);\n        }\n        for (int i = 0; i < cs.length; i++) {\n            if (map.get(cs[i]) == 1)\n                return i;\n        }\n        return -1;\n    }\n}\n```\n\n## 36 数组中的逆序对\n在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007\n\n<font color='red'>归并排序，注意是从后往前放copy数组。</font>\n\n```\npublic class Solution {\n    public int InversePairs(int [] array) {\n        if(array.length == 0)\n            return 0;\n        return mergeSort(array, 0, array.length - 1);\n    }\n    private int mergeSort(int[] array, int start, int end){\n        int mid = (end + start)/ 2;\n        if(end == start)\n            return 0;\n        int leftCount = mergeSort(array, start, mid);\n        int rightCount = mergeSort(array, mid + 1, end);\n        int i = mid, j = end;\n        int count = 0;\n        int index = end - start;\n        int[] copy = new int[end - start + 1];\n        while(i >= start && j >= mid + 1){\n            if(array[i] > array[j]){\n                count = (count + j - mid) % 1000000007;\n                copy[index--] = array[i--];\n            }else{\n                copy[index--] = array[j--];\n            }\n        }\n        while(i >= start){\n            copy[index--] = array[i--];\n        }\n        while(j >= mid + 1){\n            copy[index--] = array[j--];\n        }\n        for(int k = 0; k < copy.length; k++)\n            array[start + k] = copy[k];\n        return (leftCount + rightCount + count) % 1000000007;\n    }\n}\n```\n","source":"_posts/剑指offer算法题 27-36.md","raw":"---\ntitle: 剑指offer算法题 27——36\ndate: 2019-3-23 20:03:31\ntags: [刷题,面试]\ncategories: [面试,算法题]\ndescription: 搞定剑指offer\n---\n\n# 剑指offer算法题 27——36\n\n# 剑指offer算法题 27\n\n## 27 二叉搜索树转换成双向链表\n输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。\n\n<font color='red'>“不能创建任何新的结点”，但是需要new tail new tail\n</font>\n\n递归或栈的方法中序遍历。\n\n```java\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    TreeNode head = null;\n    TreeNode tail = null;\n    public TreeNode Convert(TreeNode pRootOfTree) {\n        if(pRootOfTree == null)\n            return null;\n        ConvertNode(pRootOfTree);\n        return head;\n    }\n    private void ConvertNode(TreeNode node){\n        if(node == null)\n            return;\n        ConvertNode(node.left);\n        if(head == null){\n            head = node;\n            tail = node;\n        }else{\n            tail.right = node;\n            node.left = tail;\n            tail = node;\n        }\n        ConvertNode(node.right);\n        \n    }\n}\n```\n\n## 28 字符串排列\n\n输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。\n- 按字典序打印，需要把结果：Collections.sort(res);\n- 避免重复的，需要判断：if(i != index && chars[i] == chars[index])\n\n```java\nimport java.util.ArrayList;\nimport java.util.Collections;\npublic class Solution {\n    ArrayList<String> res = new ArrayList<String>();\n    public ArrayList<String> Permutation(String str) {\n        char[] chars = str.toCharArray();\n        if(str.length() == 0)\n            return res;\n        res = Permutation(chars, 0);\n        Collections.sort(res);\n        return res;\n    }\n    private ArrayList<String> Permutation(char[] chars, int index){\n        if(index == chars.length - 1)\n            res.add(String.valueOf(chars));\n        else{\n            for(int i = index; i < chars.length; i++){\n                if(i != index && chars[i] == chars[index]){\n                    continue;\n                }\n                swap(chars, i, index);\n                Permutation(chars, index + 1);\n                swap(chars, index, i);\n\n            }\n        }\n        return res;\n    }\n    private void swap(char[] chars, int i ,int j){\n        char  temp = chars[i];\n        chars[i] = chars[j];\n        chars[j] = temp;\n    }\n}\n```\n## 29 数组中次数超过的数\n\n数组中有一个数字出现的次数超过的数数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。\n\n- <font color='red'>可以用hashmap</font>\n- <font color='red'>可以先排序</font>\n- <font color='red'>超过一半，即超过其他数之和。用一个num记录当前count大于零的数，count表示此数的次数，如果新遍历的数不是num，count--，否则count++，当count归零，更新num。</font>\n\n```java\npublic class Solution {\n    public int MoreThanHalfNum_Solution(int [] array) {\n        if(array.length == 0)\n            return 0;\n        int num = array[0], count = 1;\n        for(int i = 1; i < array.length; i++){\n            if(array[i] != num){\n                if(count == 0)\n                    num = array[i];\n                else\n                    count--;\n            }else\n                count++;\n        }\n        if(count > 0)\n            return num;\n        else\n            return 0;\n    }\n}\n```\n\n## 30 最小的K个数\n输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。\n\n```java\nimport java.util.PriorityQueue;\nimport java.util.ArrayList;\nimport java.util.Comparator;\npublic class Solution {\n    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        if(k > input.length || k == 0)\n            return res;\n        PriorityQueue<Integer> queue = new PriorityQueue<Integer>(k, new Comparator<Integer>() {\n \n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o2.compareTo(o1);\n            }\n        });\n        for(int i = 0; i < input.length; i++){\n            if(queue.size() < k){\n                queue.offer(input[i]);\n            }else if(queue.peek() > input[i]){\n                    queue.poll();\n                    queue.offer(input[i]);\n            }\n        }\n        while(!queue.isEmpty()){\n            res.add(queue.poll());\n        }\n        return res;\n    }\n}\n```\n\n## 31 连续子数组的最大和\nHZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)\n\n```\npublic class Solution {\n    public int FindGreatestSumOfSubArray(int[] array) {\n        int cur = 0;\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < array.length; i++){\n            if(cur > 0)\n                cur += array[i];\n            else\n                cur = array[i];\n            if(cur > max)\n                max = cur;\n        }\n        return max;\n    }\n}\n```\n## 32 整数中1出现的次\n求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。\n\n<font color='red'>规律：当计算右数第 i 位包含的 x 的个数时</font>\n\n<font color='red'>1. 取第 i位左边(高位)的数字，乘以 10^(i-1)，得到基础值 a</font>\n\n<font color='red'>2. 取第 i 位数字，计算修正值</font>\n\n<font color='red'>3. 如果大于 x , 则结果为 a + 10^(i-1)</font>\n\n<font color='red'>4. 如果小于 x，则结果为 a</font>\n\n<font color='red'>5. 如果等于 x，则取第 i 位右边(低位)数字，设为 b，最后结果为 a + b + 1</font>\n\n\n\n```\n// n - n / i * i 是当前左边一位\npublic class Solution {\n    public int NumberOf1Between1AndN_Solution(int n) {\n        int count = 0;\n        for(int i = 1; n / i != 0; i *= 10){\n            int base = n / i / 10 ;\n            base *= i;\n            int bias = n / i % 10;\n            if(bias < 1)\n                count += base;\n            else if(bias > 1)\n                count += base + i;\n            else{\n                count += base + n - n / i * i + 1;\n            }\n            \n        }\n        return count;\n    }\n}\n```\n\n## 33 把数组排成最小的数\n输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。\n\n<font color='red'>类似冒泡排序</font>\n\n```\npublic class Solution {\n    public String PrintMinNumber(int [] numbers) {\n        ArrayList<String> list = new ArrayList<>();\n        for(int n : numbers){\n            list.add(String.valueOf(n));\n        }\n        for(int i = 0;i <list.size(); i++){\n            for(int j = 0; j < list.size() - 1 - i; j++){\n                if(Long.parseLong(list.get(j) + list.get(j + 1)) > Long.parseLong(list.get(j + 1) + list.get(j))) {\n                    String temp = list.get(j + 1);\n                    list.set(j + 1 , list.get(j));\n                    list.set(j, temp);\n                }\n            }\n        }\n        String res = \"\";\n        for (String s:list) {\n            res += s;\n        }\n        return res;\n    }\n}\n```\n\n## 34 丑数\n把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。\n\n```\nimport java.util.PriorityQueue;\npublic class Solution {\n    public int GetUglyNumber_Solution(int index) {\n        if(index == 0)\n            return 0;\n        PriorityQueue<Long> queue = new PriorityQueue();\n        queue.offer(1L);\n        long num = 1L;\n        for(int i = 0; i != index; i++){\n            num = queue.poll();\n            while(!queue.isEmpty() && num == queue.peek())\n                queue.poll();\n            queue.offer(num * 2);\n            queue.offer(num * 3);\n            queue.offer(num * 5);\n        }\n        return (int)num;\n    }\n}\n```\n\n# 35第一个只出现一次的字符\n\n在一个字符串(0<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.\n\n\n```\nimport java.util.HashMap;\npublic class Solution {\n    public int FirstNotRepeatingChar(String str) {\n        char[] cs = str.toCharArray();\n        HashMap<Character, Integer> map = new HashMap<>();\n        for (char c : cs) {\n            if (!map.containsKey(c))\n                map.put(c, 1);\n            else\n                map.put(c, map.get(c) + 1);\n        }\n        for (int i = 0; i < cs.length; i++) {\n            if (map.get(cs[i]) == 1)\n                return i;\n        }\n        return -1;\n    }\n}\n```\n\n## 36 数组中的逆序对\n在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007\n\n<font color='red'>归并排序，注意是从后往前放copy数组。</font>\n\n```\npublic class Solution {\n    public int InversePairs(int [] array) {\n        if(array.length == 0)\n            return 0;\n        return mergeSort(array, 0, array.length - 1);\n    }\n    private int mergeSort(int[] array, int start, int end){\n        int mid = (end + start)/ 2;\n        if(end == start)\n            return 0;\n        int leftCount = mergeSort(array, start, mid);\n        int rightCount = mergeSort(array, mid + 1, end);\n        int i = mid, j = end;\n        int count = 0;\n        int index = end - start;\n        int[] copy = new int[end - start + 1];\n        while(i >= start && j >= mid + 1){\n            if(array[i] > array[j]){\n                count = (count + j - mid) % 1000000007;\n                copy[index--] = array[i--];\n            }else{\n                copy[index--] = array[j--];\n            }\n        }\n        while(i >= start){\n            copy[index--] = array[i--];\n        }\n        while(j >= mid + 1){\n            copy[index--] = array[j--];\n        }\n        for(int k = 0; k < copy.length; k++)\n            array[start + k] = copy[k];\n        return (leftCount + rightCount + count) % 1000000007;\n    }\n}\n```\n","slug":"剑指offer算法题 27-36","published":1,"updated":"2025-02-22T18:52:19.823Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8at001bv00149gseitx","content":"<h1 id=\"剑指offer算法题-27——36\"><a href=\"#剑指offer算法题-27——36\" class=\"headerlink\" title=\"剑指offer算法题 27——36\"></a>剑指offer算法题 27——36</h1><h1 id=\"剑指offer算法题-27\"><a href=\"#剑指offer算法题-27\" class=\"headerlink\" title=\"剑指offer算法题 27\"></a>剑指offer算法题 27</h1><h2 id=\"27-二叉搜索树转换成双向链表\"><a href=\"#27-二叉搜索树转换成双向链表\" class=\"headerlink\" title=\"27 二叉搜索树转换成双向链表\"></a>27 二叉搜索树转换成双向链表</h2><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p>\n<p><font color='red'>“不能创建任何新的结点”，但是需要new tail new tail<br></font></p>\n<p>递归或栈的方法中序遍历。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TreeNode</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">TreeNode</span> <span class=\"variable\">tail</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">Convert</span><span class=\"params\">(TreeNode pRootOfTree)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRootOfTree == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        ConvertNode(pRootOfTree);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ConvertNode</span><span class=\"params\">(TreeNode node)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ConvertNode(node.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            head = node;</span><br><span class=\"line\">            tail = node;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tail.right = node;</span><br><span class=\"line\">            node.left = tail;</span><br><span class=\"line\">            tail = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ConvertNode(node.right);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"28-字符串排列\"><a href=\"#28-字符串排列\" class=\"headerlink\" title=\"28 字符串排列\"></a>28 字符串排列</h2><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</p>\n<ul>\n<li>按字典序打印，需要把结果：Collections.sort(res);</li>\n<li>避免重复的，需要判断：if(i !&#x3D; index &amp;&amp; chars[i] &#x3D;&#x3D; chars[index])</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;String&gt; <span class=\"title function_\">Permutation</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] chars = str.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.length() == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        res = Permutation(chars, <span class=\"number\">0</span>);</span><br><span class=\"line\">        Collections.sort(res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; <span class=\"title function_\">Permutation</span><span class=\"params\">(<span class=\"type\">char</span>[] chars, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == chars.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">            res.add(String.valueOf(chars));</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> index; i &lt; chars.length; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i != index &amp;&amp; chars[i] == chars[index])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                swap(chars, i, index);</span><br><span class=\"line\">                Permutation(chars, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">                swap(chars, index, i);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">char</span>[] chars, <span class=\"type\">int</span> i ,<span class=\"type\">int</span> j)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>  <span class=\"variable\">temp</span> <span class=\"operator\">=</span> chars[i];</span><br><span class=\"line\">        chars[i] = chars[j];</span><br><span class=\"line\">        chars[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"29-数组中次数超过的数\"><a href=\"#29-数组中次数超过的数\" class=\"headerlink\" title=\"29 数组中次数超过的数\"></a>29 数组中次数超过的数</h2><p>数组中有一个数字出现的次数超过的数数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p>\n<ul>\n<li><font color='red'>可以用hashmap</font></li>\n<li><font color='red'>可以先排序</font></li>\n<li><font color='red'>超过一半，即超过其他数之和。用一个num记录当前count大于零的数，count表示此数的次数，如果新遍历的数不是num，count–，否则count++，当count归零，更新num。</font></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">MoreThanHalfNum_Solution</span><span class=\"params\">(<span class=\"type\">int</span> [] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>], count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[i] != num)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    num = array[i];</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    count--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">                count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"30-最小的K个数\"><a href=\"#30-最小的K个数\" class=\"headerlink\" title=\"30 最小的K个数\"></a>30 最小的K个数</h2><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">GetLeastNumbers_Solution</span><span class=\"params\">(<span class=\"type\">int</span> [] input, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &gt; input.length || k == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        PriorityQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;Integer&gt;(k, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o2.compareTo(o1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; input.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.size() &lt; k)&#123;</span><br><span class=\"line\">                queue.offer(input[i]);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(queue.peek() &gt; input[i])&#123;</span><br><span class=\"line\">                    queue.poll();</span><br><span class=\"line\">                    queue.offer(input[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">            res.add(queue.poll());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"31-连续子数组的最大和\"><a href=\"#31-连续子数组的最大和\" class=\"headerlink\" title=\"31 连续子数组的最大和\"></a>31 连续子数组的最大和</h2><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int FindGreatestSumOfSubArray(int[] array) &#123;</span><br><span class=\"line\">        int cur = 0;</span><br><span class=\"line\">        int max = Integer.MIN_VALUE;</span><br><span class=\"line\">        for(int i = 0; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">            if(cur &gt; 0)</span><br><span class=\"line\">                cur += array[i];</span><br><span class=\"line\">            else</span><br><span class=\"line\">                cur = array[i];</span><br><span class=\"line\">            if(cur &gt; max)</span><br><span class=\"line\">                max = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"32-整数中1出现的次\"><a href=\"#32-整数中1出现的次\" class=\"headerlink\" title=\"32 整数中1出现的次\"></a>32 整数中1出现的次</h2><p>求出1<del>13的整数中1出现的次数,并算出100</del>1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。</p>\n<p><font color='red'>规律：当计算右数第 i 位包含的 x 的个数时</font></p>\n<p><font color='red'>1. 取第 i位左边(高位)的数字，乘以 10^(i-1)，得到基础值 a</font></p>\n<p><font color='red'>2. 取第 i 位数字，计算修正值</font></p>\n<p><font color='red'>3. 如果大于 x , 则结果为 a + 10^(i-1)</font></p>\n<p><font color='red'>4. 如果小于 x，则结果为 a</font></p>\n<p><font color='red'>5. 如果等于 x，则取第 i 位右边(低位)数字，设为 b，最后结果为 a + b + 1</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// n - n / i * i 是当前左边一位</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int NumberOf1Between1AndN_Solution(int n) &#123;</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        for(int i = 1; n / i != 0; i *= 10)&#123;</span><br><span class=\"line\">            int base = n / i / 10 ;</span><br><span class=\"line\">            base *= i;</span><br><span class=\"line\">            int bias = n / i % 10;</span><br><span class=\"line\">            if(bias &lt; 1)</span><br><span class=\"line\">                count += base;</span><br><span class=\"line\">            else if(bias &gt; 1)</span><br><span class=\"line\">                count += base + i;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                count += base + n - n / i * i + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"33-把数组排成最小的数\"><a href=\"#33-把数组排成最小的数\" class=\"headerlink\" title=\"33 把数组排成最小的数\"></a>33 把数组排成最小的数</h2><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>\n<p><font color='red'>类似冒泡排序</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public String PrintMinNumber(int [] numbers) &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for(int n : numbers)&#123;</span><br><span class=\"line\">            list.add(String.valueOf(n));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = 0;i &lt;list.size(); i++)&#123;</span><br><span class=\"line\">            for(int j = 0; j &lt; list.size() - 1 - i; j++)&#123;</span><br><span class=\"line\">                if(Long.parseLong(list.get(j) + list.get(j + 1)) &gt; Long.parseLong(list.get(j + 1) + list.get(j))) &#123;</span><br><span class=\"line\">                    String temp = list.get(j + 1);</span><br><span class=\"line\">                    list.set(j + 1 , list.get(j));</span><br><span class=\"line\">                    list.set(j, temp);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String res = &quot;&quot;;</span><br><span class=\"line\">        for (String s:list) &#123;</span><br><span class=\"line\">            res += s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"34-丑数\"><a href=\"#34-丑数\" class=\"headerlink\" title=\"34 丑数\"></a>34 丑数</h2><p>把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.PriorityQueue;</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int GetUglyNumber_Solution(int index) &#123;</span><br><span class=\"line\">        if(index == 0)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        PriorityQueue&lt;Long&gt; queue = new PriorityQueue();</span><br><span class=\"line\">        queue.offer(1L);</span><br><span class=\"line\">        long num = 1L;</span><br><span class=\"line\">        for(int i = 0; i != index; i++)&#123;</span><br><span class=\"line\">            num = queue.poll();</span><br><span class=\"line\">            while(!queue.isEmpty() &amp;&amp; num == queue.peek())</span><br><span class=\"line\">                queue.poll();</span><br><span class=\"line\">            queue.offer(num * 2);</span><br><span class=\"line\">            queue.offer(num * 3);</span><br><span class=\"line\">            queue.offer(num * 5);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return (int)num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"35第一个只出现一次的字符\"><a href=\"#35第一个只出现一次的字符\" class=\"headerlink\" title=\"35第一个只出现一次的字符\"></a>35第一个只出现一次的字符</h1><p>在一个字符串(0&lt;&#x3D;字符串长度&lt;&#x3D;10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int FirstNotRepeatingChar(String str) &#123;</span><br><span class=\"line\">        char[] cs = str.toCharArray();</span><br><span class=\"line\">        HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (char c : cs) &#123;</span><br><span class=\"line\">            if (!map.containsKey(c))</span><br><span class=\"line\">                map.put(c, 1);</span><br><span class=\"line\">            else</span><br><span class=\"line\">                map.put(c, map.get(c) + 1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt; cs.length; i++) &#123;</span><br><span class=\"line\">            if (map.get(cs[i]) == 1)</span><br><span class=\"line\">                return i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"36-数组中的逆序对\"><a href=\"#36-数组中的逆序对\" class=\"headerlink\" title=\"36 数组中的逆序对\"></a>36 数组中的逆序对</h2><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007</p>\n<p><font color='red'>归并排序，注意是从后往前放copy数组。</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int InversePairs(int [] array) &#123;</span><br><span class=\"line\">        if(array.length == 0)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        return mergeSort(array, 0, array.length - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private int mergeSort(int[] array, int start, int end)&#123;</span><br><span class=\"line\">        int mid = (end + start)/ 2;</span><br><span class=\"line\">        if(end == start)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        int leftCount = mergeSort(array, start, mid);</span><br><span class=\"line\">        int rightCount = mergeSort(array, mid + 1, end);</span><br><span class=\"line\">        int i = mid, j = end;</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        int index = end - start;</span><br><span class=\"line\">        int[] copy = new int[end - start + 1];</span><br><span class=\"line\">        while(i &gt;= start &amp;&amp; j &gt;= mid + 1)&#123;</span><br><span class=\"line\">            if(array[i] &gt; array[j])&#123;</span><br><span class=\"line\">                count = (count + j - mid) % 1000000007;</span><br><span class=\"line\">                copy[index--] = array[i--];</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                copy[index--] = array[j--];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(i &gt;= start)&#123;</span><br><span class=\"line\">            copy[index--] = array[i--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(j &gt;= mid + 1)&#123;</span><br><span class=\"line\">            copy[index--] = array[j--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int k = 0; k &lt; copy.length; k++)</span><br><span class=\"line\">            array[start + k] = copy[k];</span><br><span class=\"line\">        return (leftCount + rightCount + count) % 1000000007;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","length":6945,"excerpt":"","more":"<h1 id=\"剑指offer算法题-27——36\"><a href=\"#剑指offer算法题-27——36\" class=\"headerlink\" title=\"剑指offer算法题 27——36\"></a>剑指offer算法题 27——36</h1><h1 id=\"剑指offer算法题-27\"><a href=\"#剑指offer算法题-27\" class=\"headerlink\" title=\"剑指offer算法题 27\"></a>剑指offer算法题 27</h1><h2 id=\"27-二叉搜索树转换成双向链表\"><a href=\"#27-二叉搜索树转换成双向链表\" class=\"headerlink\" title=\"27 二叉搜索树转换成双向链表\"></a>27 二叉搜索树转换成双向链表</h2><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p>\n<p><font color='red'>“不能创建任何新的结点”，但是需要new tail new tail<br></font></p>\n<p>递归或栈的方法中序遍历。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TreeNode</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">TreeNode</span> <span class=\"variable\">tail</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">Convert</span><span class=\"params\">(TreeNode pRootOfTree)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pRootOfTree == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        ConvertNode(pRootOfTree);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ConvertNode</span><span class=\"params\">(TreeNode node)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        ConvertNode(node.left);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            head = node;</span><br><span class=\"line\">            tail = node;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            tail.right = node;</span><br><span class=\"line\">            node.left = tail;</span><br><span class=\"line\">            tail = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ConvertNode(node.right);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"28-字符串排列\"><a href=\"#28-字符串排列\" class=\"headerlink\" title=\"28 字符串排列\"></a>28 字符串排列</h2><p>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</p>\n<ul>\n<li>按字典序打印，需要把结果：Collections.sort(res);</li>\n<li>避免重复的，需要判断：if(i !&#x3D; index &amp;&amp; chars[i] &#x3D;&#x3D; chars[index])</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;String&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;String&gt; <span class=\"title function_\">Permutation</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>[] chars = str.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.length() == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        res = Permutation(chars, <span class=\"number\">0</span>);</span><br><span class=\"line\">        Collections.sort(res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; <span class=\"title function_\">Permutation</span><span class=\"params\">(<span class=\"type\">char</span>[] chars, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index == chars.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">            res.add(String.valueOf(chars));</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> index; i &lt; chars.length; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i != index &amp;&amp; chars[i] == chars[index])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                swap(chars, i, index);</span><br><span class=\"line\">                Permutation(chars, index + <span class=\"number\">1</span>);</span><br><span class=\"line\">                swap(chars, index, i);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">char</span>[] chars, <span class=\"type\">int</span> i ,<span class=\"type\">int</span> j)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span>  <span class=\"variable\">temp</span> <span class=\"operator\">=</span> chars[i];</span><br><span class=\"line\">        chars[i] = chars[j];</span><br><span class=\"line\">        chars[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"29-数组中次数超过的数\"><a href=\"#29-数组中次数超过的数\" class=\"headerlink\" title=\"29 数组中次数超过的数\"></a>29 数组中次数超过的数</h2><p>数组中有一个数字出现的次数超过的数数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p>\n<ul>\n<li><font color='red'>可以用hashmap</font></li>\n<li><font color='red'>可以先排序</font></li>\n<li><font color='red'>超过一半，即超过其他数之和。用一个num记录当前count大于零的数，count表示此数的次数，如果新遍历的数不是num，count–，否则count++，当count归零，更新num。</font></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">MoreThanHalfNum_Solution</span><span class=\"params\">(<span class=\"type\">int</span> [] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>], count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[i] != num)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    num = array[i];</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    count--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">                count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"30-最小的K个数\"><a href=\"#30-最小的K个数\" class=\"headerlink\" title=\"30 最小的K个数\"></a>30 最小的K个数</h2><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">GetLeastNumbers_Solution</span><span class=\"params\">(<span class=\"type\">int</span> [] input, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &gt; input.length || k == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        PriorityQueue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;Integer&gt;(k, <span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(Integer o1, Integer o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o2.compareTo(o1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; input.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(queue.size() &lt; k)&#123;</span><br><span class=\"line\">                queue.offer(input[i]);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(queue.peek() &gt; input[i])&#123;</span><br><span class=\"line\">                    queue.poll();</span><br><span class=\"line\">                    queue.offer(input[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">            res.add(queue.poll());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"31-连续子数组的最大和\"><a href=\"#31-连续子数组的最大和\" class=\"headerlink\" title=\"31 连续子数组的最大和\"></a>31 连续子数组的最大和</h2><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int FindGreatestSumOfSubArray(int[] array) &#123;</span><br><span class=\"line\">        int cur = 0;</span><br><span class=\"line\">        int max = Integer.MIN_VALUE;</span><br><span class=\"line\">        for(int i = 0; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">            if(cur &gt; 0)</span><br><span class=\"line\">                cur += array[i];</span><br><span class=\"line\">            else</span><br><span class=\"line\">                cur = array[i];</span><br><span class=\"line\">            if(cur &gt; max)</span><br><span class=\"line\">                max = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"32-整数中1出现的次\"><a href=\"#32-整数中1出现的次\" class=\"headerlink\" title=\"32 整数中1出现的次\"></a>32 整数中1出现的次</h2><p>求出1<del>13的整数中1出现的次数,并算出100</del>1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。</p>\n<p><font color='red'>规律：当计算右数第 i 位包含的 x 的个数时</font></p>\n<p><font color='red'>1. 取第 i位左边(高位)的数字，乘以 10^(i-1)，得到基础值 a</font></p>\n<p><font color='red'>2. 取第 i 位数字，计算修正值</font></p>\n<p><font color='red'>3. 如果大于 x , 则结果为 a + 10^(i-1)</font></p>\n<p><font color='red'>4. 如果小于 x，则结果为 a</font></p>\n<p><font color='red'>5. 如果等于 x，则取第 i 位右边(低位)数字，设为 b，最后结果为 a + b + 1</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// n - n / i * i 是当前左边一位</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int NumberOf1Between1AndN_Solution(int n) &#123;</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        for(int i = 1; n / i != 0; i *= 10)&#123;</span><br><span class=\"line\">            int base = n / i / 10 ;</span><br><span class=\"line\">            base *= i;</span><br><span class=\"line\">            int bias = n / i % 10;</span><br><span class=\"line\">            if(bias &lt; 1)</span><br><span class=\"line\">                count += base;</span><br><span class=\"line\">            else if(bias &gt; 1)</span><br><span class=\"line\">                count += base + i;</span><br><span class=\"line\">            else&#123;</span><br><span class=\"line\">                count += base + n - n / i * i + 1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"33-把数组排成最小的数\"><a href=\"#33-把数组排成最小的数\" class=\"headerlink\" title=\"33 把数组排成最小的数\"></a>33 把数组排成最小的数</h2><p>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p>\n<p><font color='red'>类似冒泡排序</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public String PrintMinNumber(int [] numbers) &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        for(int n : numbers)&#123;</span><br><span class=\"line\">            list.add(String.valueOf(n));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int i = 0;i &lt;list.size(); i++)&#123;</span><br><span class=\"line\">            for(int j = 0; j &lt; list.size() - 1 - i; j++)&#123;</span><br><span class=\"line\">                if(Long.parseLong(list.get(j) + list.get(j + 1)) &gt; Long.parseLong(list.get(j + 1) + list.get(j))) &#123;</span><br><span class=\"line\">                    String temp = list.get(j + 1);</span><br><span class=\"line\">                    list.set(j + 1 , list.get(j));</span><br><span class=\"line\">                    list.set(j, temp);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String res = &quot;&quot;;</span><br><span class=\"line\">        for (String s:list) &#123;</span><br><span class=\"line\">            res += s;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"34-丑数\"><a href=\"#34-丑数\" class=\"headerlink\" title=\"34 丑数\"></a>34 丑数</h2><p>把只包含质因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含质因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.PriorityQueue;</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int GetUglyNumber_Solution(int index) &#123;</span><br><span class=\"line\">        if(index == 0)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        PriorityQueue&lt;Long&gt; queue = new PriorityQueue();</span><br><span class=\"line\">        queue.offer(1L);</span><br><span class=\"line\">        long num = 1L;</span><br><span class=\"line\">        for(int i = 0; i != index; i++)&#123;</span><br><span class=\"line\">            num = queue.poll();</span><br><span class=\"line\">            while(!queue.isEmpty() &amp;&amp; num == queue.peek())</span><br><span class=\"line\">                queue.poll();</span><br><span class=\"line\">            queue.offer(num * 2);</span><br><span class=\"line\">            queue.offer(num * 3);</span><br><span class=\"line\">            queue.offer(num * 5);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return (int)num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"35第一个只出现一次的字符\"><a href=\"#35第一个只出现一次的字符\" class=\"headerlink\" title=\"35第一个只出现一次的字符\"></a>35第一个只出现一次的字符</h1><p>在一个字符串(0&lt;&#x3D;字符串长度&lt;&#x3D;10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置, 如果没有则返回 -1（需要区分大小写）.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int FirstNotRepeatingChar(String str) &#123;</span><br><span class=\"line\">        char[] cs = str.toCharArray();</span><br><span class=\"line\">        HashMap&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class=\"line\">        for (char c : cs) &#123;</span><br><span class=\"line\">            if (!map.containsKey(c))</span><br><span class=\"line\">                map.put(c, 1);</span><br><span class=\"line\">            else</span><br><span class=\"line\">                map.put(c, map.get(c) + 1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for (int i = 0; i &lt; cs.length; i++) &#123;</span><br><span class=\"line\">            if (map.get(cs[i]) == 1)</span><br><span class=\"line\">                return i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"36-数组中的逆序对\"><a href=\"#36-数组中的逆序对\" class=\"headerlink\" title=\"36 数组中的逆序对\"></a>36 数组中的逆序对</h2><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。并将P对1000000007取模的结果输出。 即输出P%1000000007</p>\n<p><font color='red'>归并排序，注意是从后往前放copy数组。</font></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int InversePairs(int [] array) &#123;</span><br><span class=\"line\">        if(array.length == 0)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        return mergeSort(array, 0, array.length - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private int mergeSort(int[] array, int start, int end)&#123;</span><br><span class=\"line\">        int mid = (end + start)/ 2;</span><br><span class=\"line\">        if(end == start)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        int leftCount = mergeSort(array, start, mid);</span><br><span class=\"line\">        int rightCount = mergeSort(array, mid + 1, end);</span><br><span class=\"line\">        int i = mid, j = end;</span><br><span class=\"line\">        int count = 0;</span><br><span class=\"line\">        int index = end - start;</span><br><span class=\"line\">        int[] copy = new int[end - start + 1];</span><br><span class=\"line\">        while(i &gt;= start &amp;&amp; j &gt;= mid + 1)&#123;</span><br><span class=\"line\">            if(array[i] &gt; array[j])&#123;</span><br><span class=\"line\">                count = (count + j - mid) % 1000000007;</span><br><span class=\"line\">                copy[index--] = array[i--];</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                copy[index--] = array[j--];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(i &gt;= start)&#123;</span><br><span class=\"line\">            copy[index--] = array[i--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        while(j &gt;= mid + 1)&#123;</span><br><span class=\"line\">            copy[index--] = array[j--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(int k = 0; k &lt; copy.length; k++)</span><br><span class=\"line\">            array[start + k] = copy[k];</span><br><span class=\"line\">        return (leftCount + rightCount + count) % 1000000007;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"剑指offer算法题 3——26","date":"2019-03-21T13:55:35.000Z","description":"搞定剑指offer","_content":"\n# 剑指offer算法题 3——26\n\n## 03 二维数组中的查找\n在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n\n```java\n//从右上角开始遍历。\npublic class Solution {\n    public boolean Find(int target, int [][] array) {\n        int row = array.length;\n        int col = array[0].length;\n        if(row==0 || col==0)\n            return false;\n        int i = 0, j = col - 1;\n        while(array[i][j]!=target){\n            if(array[i][j]<target){\n                i++;\n            }else{\n                j--;\n            }\n            if(i > row - 1 || j < 0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n## 04 替换空格\n请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n```java\npublic class Solution {\n    public String replaceSpace(StringBuffer str) {\n        String res = \"\";\n        for(int i=str.length()-1;i>=0;i--){\n            if(str.charAt(i)==' ')\n                res = \"%20\" + res;\n            else\n                res = str.charAt(i) + res;\n        }\n        return res;\n    }\n}\n```\n\n## 05 从尾到头打印链表\n输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。\n\n\n```java\n// 用栈 或 反转链表\n\n/**\n*    public class ListNode {\n*        int val;\n*        ListNode next = null;\n*\n*        ListNode(int val) {\n*            this.val = val;\n*        }\n*    }\n*\n*/\nimport java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        ListNode newHead = null;\n        ListNode left = null;\n        ListNode now = listNode;\n        while(now != null){\n            left = newHead;\n            newHead = now;\n            now = now.next;\n            newHead.next = left;\n        }\n        while(newHead != null){\n            res.add(newHead.val);\n            newHead = newHead.next;\n        }\n        return res;\n    }\n}\n```\n\n## 06 重建二叉树\n输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n\n```java\n/**\n * Definition for binary tree\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nimport java.util.Arrays;\npublic class Solution {\n    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {\n        if(pre.length == 0){\n            return null;\n        }\n        TreeNode root = new TreeNode(pre[0]);\n        int mid = 0;\n        for(int i = 0;i < in.length;i++){\n            if(in[i] == pre[0])\n                mid = i;\n        }\n        root.left = reConstructBinaryTree(Arrays.copyOfRange(pre, 1, 1 + mid),\n                                         Arrays.copyOfRange(in, 0, mid));\n        root.right = reConstructBinaryTree(Arrays.copyOfRange(pre, 1 + mid, pre.length),\n                                         Arrays.copyOfRange(in, mid + 1, in.length));\n        return root;\n    }\n}\n```\n\n## 07 两个栈实现队列\n\n```java\nimport java.util.Stack;\n\npublic class Solution {\n    Stack<Integer> stack1 = new Stack<Integer>();\n    Stack<Integer> stack2 = new Stack<Integer>();\n    \n    public void push(int node) {\n        stack1.push(node);\n    }\n    \n    public int pop() {\n        if(stack2.isEmpty()){\n            while(!stack1.isEmpty()){\n                int num = stack1.pop();\n                stack2.push(num);\n            }\n        }\n        return stack2.pop();\n\n    }\n}\n```\n\n## 08 旋转数组的最小数字\n把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。\n\n```\nimport java.util.ArrayList;\npublic class Solution {\n    public int minNumberInRotateArray(int [] array) {\n        if(array.length == 0)\n            return 0;\n        int low = 0;\n        int mid = (array.length + low) / 2;\n        int high = array.length - 1;\n        while(low < high){\n            mid = low + (high - low) / 2; \n            if(array[mid] > array[high]){\n                low = mid + 1;\n            }else if (array[mid] < array[high]){\n                high = mid;\n            }else{\n                high--;\n            }\n        }\n        return array[low];\n    }\n}\n```\n## 09 斐波那契数列\n大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。\nn<=39\n\n```java\n// 使用动态规划\npublic class Solution {\n    public int Fibonacci(int n) {\n        int f1 = 0;\n        int f2 = 1;\n        int index = 0;\n        int res = 0;\n        while(index <= n){\n            if(index == 0){\n                res = f1;\n            }else if(index == 1){\n                res = f2;\n            }\n            else{\n                res = f1 + f2;\n                f1 = f2;\n                f2 = res;\n            }\n            index ++;\n        }\n        return res;\n    }\n}\n```\n\n## 10 二进制中1的个数\n输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。\n\n```java\n// 自己写的\npublic class Solution {\n    public int NumberOf1(int n) {\n        int count = 0;\n        for(int i = 0; i < 32; i++){\n            if((n & 1) == 1){\n                count++;\n            }\n            n = n >> 1;\n        }\n        return count;\n    }\n}\n// 网上更简练的，n按位与n-1，可以将最后一个1变成0\npublic class Solution {\n    public int NumberOf1(int n) {\n        int count = 0;\n        while(n!=0){\n            count += 1;\n            n &= (n-1);\n        }\n        return count;\n    }\n}\n```\n\n## 11 数值的整数次方\n给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。\n\n```java\n//  & 1 判断奇偶\npublic class Solution {\n    public double Power(double base, int exponent) {\n        if(base == 0)\n            return 0;\n        if(exponent == 0)\n            return 1;\n        if(exponent < 0)\n            return 1 / Power(base, exponent * (-1));\n        if((exponent & 1) == 1){\n            return base * Power(base, exponent / 2) * Power(base, exponent / 2);\n        }else{\n            return Power(base, exponent / 2) * Power(base, exponent / 2);\n        }\n  }\n}\n```\n## 14 调整数组顺序使奇数位于偶数前面\n输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。\n\n```java\n// 不开空间，用指针也比较麻烦，时间复杂度也不低，没找到指针比较好的办法\nimport java.util.List;\nimport java.util.ArrayList;\npublic class Solution {\n    public void reOrderArray(int [] array) {\n        ArrayList<Integer> list1 = new  ArrayList<Integer>();\n        ArrayList<Integer> list2 = new  ArrayList<Integer>();\n        for(int i = 0; i < array.length; i++){\n            if((array[i] & 1) == 1){\n                list1.add(array[i]);\n            }else{\n                list2.add(array[i]);\n            }\n        }\n        List<Integer> listAll = new ArrayList<Integer>();\n        listAll.addAll(list1);\n        listAll.addAll(list2);\n        for(int i = 0; i < array.length; i++){\n            array[i] = listAll.get(i);\n        }\n    }\n}\n```\n\n## 15 输入一个链表，输出该链表中倒数第k个结点\n链表中倒数第k个结点\n\n```\nif(right == null)\n    return null;\n```\n<font color=#ff0000 >注意这句的位置，要放在right = right.next;前面，否则{1,2,3,4,5},5/6 会有问题。</font>\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode FindKthToTail(ListNode head,int k) {\n        if(k == 0 || head == null)\n            return null;\n        int index = 0;\n        ListNode right = head;\n        for(int i = 0;i < k; i++){\n            if(right == null)\n                return null;\n            right = right.next;\n        }\n        ListNode left = head;\n        while(right != null){\n            right = right.next;\n            left = left.next;\n        }\n        return left;\n    }\n}\n```\n\n## 16 反转链表\n输入一个链表，反转链表后，输出新链表的表头。\n\n<font color=#ff0000 >要注意 now = now.next; newHead.next = left;的先后顺序</font>\n\n```java\n// 要注意 now = now.next; newHead.next = left;的先后顺序\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n        if(head == null || head.next == null){\n            return head;\n        }\n        ListNode newHead = null;\n        ListNode left = null;\n        ListNode now = head;\n        while(now != null){\n            left = newHead;\n            newHead = now;\n            now = now.next;\n            newHead.next = left;\n        }\n        return newHead;\n    }\n}\n```\n\n## 17 合并两个排序的链表\n输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\n\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\n// 非递归\npublic class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2) {\n        if(list1 == null)\n            return list2;\n        if(list2 == null)\n            return list1;\n        ListNode head = new ListNode(-1);\n        ListNode now = head;\n        while(list1 != null && list2 != null){\n            if(list1.val < list2.val){\n                now.next = list1;\n                list1 = list1.next;\n            }\n            else{\n                now.next = list2;\n                list2 = list2.next;\n            }\n            now = now.next;\n        }\n        if(list1 != null)\n            now.next = list1;\n        if(list2 != null)\n            now.next = list2;\n        return head.next;\n    }\n}\n// 递归\npublic class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2) {\n        if(list1 == null)\n            return list2;\n        if(list2 == null)\n            return list1;\n        ListNode node = list1;\n        if(list1.val < list2.val){\n            node = list1;\n            node.next = Merge(list1.next, list2);\n        }else{\n            node = list2;\n            node.next = Merge(list1, list2.next);            \n        }\n        return node;\n    }\n}\n```\n\n## 18 树的子结构\n输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）\n\n```java\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    public boolean HasSubtree(TreeNode root1,TreeNode root2) {\n        if(root2 == null || root1 == null)\n            return false;\n        return isSubtree(root1, root2) \n            || HasSubtree(root1.left, root2) \n            || HasSubtree(root1.right, root2);\n    }\n    private boolean isSubtree(TreeNode root1, TreeNode root2) {\n        if(root2 == null){\n            return true;\n        }\n        if(root1 == null)\n            return false;\n        if(root1.val == root2.val){\n            return isSubtree(root1.left, root2.left) && isSubtree(root1.right, root2.right);\n        }else{\n            return false;\n        }\n    }\n}\n```\n\n## 19 二叉树的镜像\n操作给定的二叉树，将其变换为源二叉树的镜像。\n\n```java\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    public void Mirror(TreeNode root) {\n        if(root == null)\n            return;\n        TreeNode node = root.left;\n        root.left = root.right;\n        root.right = node;\n        Mirror(root.left);\n        Mirror(root.right);\n    }\n}\n```\n\n\n## 20 顺时针打印矩阵\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.\n\n\n```java\nimport java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> printMatrix(int [][] matrix) {\n       if(matrix.length == 0 || matrix[0].length == 0)\n           return null;\n        int row = matrix.length, col = matrix[0].length;\n        int top = 0, left = 0, right = col - 1, buttom = row - 1;\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        while(left <= right && top <= buttom){\n            for(int i = left; i <= right; i++){\n                res.add(matrix[top][i]);\n            }\n            for(int i = top + 1; i <= buttom; i++){\n                res.add(matrix[i][right]);\n            }\n            if(top != buttom)\n                for(int i = right - 1; i >= left; i--){\n                    res.add(matrix[buttom][i]);\n                }\n            if(left != right)\n                for(int i = buttom - 1; i > top; i--){\n                    res.add(matrix[i][left]);\n                }\n            left++;top++;right--;buttom--;\n        }\n        return res;\n    }\n}\n```\n\n## 21 包含min函数的栈\n定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。\n\n```java\nimport java.util.Stack;\n\npublic class Solution {\n    Stack<Integer> stack = new Stack<>();\n    Stack<Integer> minStack = new Stack<>();\n    \n    public void push(int node) {\n        stack.push(node);\n        int min = node;\n        if(!minStack.isEmpty())\n            min = minStack.pop();\n        minStack.push(min);\n        if(node < min)\n            min = node;\n        minStack.push(min);\n    }\n    \n    public void pop() {\n        stack.pop();\n        minStack.pop();\n    }\n    \n    public int top() {\n        int num = stack.pop();\n        stack.push(num);\n        return num;\n    }\n    \n    public int min() {\n        int num = minStack.pop();\n        minStack.push(num);\n        return num;\n    }\n}\n```\n\n## 22 栈的压入、弹出序列\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n\n```java\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Solution {\n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n        if(pushA.length != popA.length || \n               pushA.length == 0 ||\n               popA.length == 0)\n            return false;\n        Stack<Integer> stack = new Stack<Integer>();\n        int index = 0;\n        for(int i = 0; i < pushA.length; i++){\n            stack.push(pushA[i]);\n            while(stack.peek() == popA[index]){\n                stack.pop();\n                index++;\n                if(index == popA.length)\n                    return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n## 23 从上往下打出二叉树\n从上往下打印出二叉树的每个节点，同层节点从左至右打印。\n\n```java\nimport java.util.ArrayList;\nimport java.util.Queue;\nimport java.util.LinkedList;\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        if(root == null)\n            return res;\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.offer(root);\n        while(!queue.isEmpty()){\n            int size = queue.size();\n            for(int i = 0; i < size; i++){\n                TreeNode node = queue.poll();\n                res.add(node.val);\n                if(node.left != null)\n                    queue.offer(node.left);\n                if(node.right != null)\n                    queue.offer(node.right);\n            }\n        }\n        return res;\n    }\n}\n```\n\n## 24 二叉搜索树的后序遍历\n输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。\n\n```java\npublic class Solution {\n    public boolean VerifySquenceOfBST(int [] sequence) {\n        if(sequence.length == 0)\n            return false;\n        return judge(sequence, 0, sequence.length -1 );\n    }\n    private boolean judge(int[] sequence, int start ,int end){\n        int root = end;\n        int i = start;\n        if(start >= end)\n            return true;\n        while(i < end && sequence[i] < sequence[end])\n            i++;\n        for(int j = i; j < end; j++){\n            if(sequence[j] < sequence[end])\n                return false;\n        }\n        return judge(sequence, start, i - 1 ) && judge(sequence, i, end - 1);\n    }\n}\n```\n\n## 25 二叉树中和为某一值的路径\n输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)\n\n```java\nimport java.util.ArrayList;\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();\n    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {\n        ArrayList<Integer> array = new ArrayList<Integer>();\n        if(target > 0 && root != null)\n            find(root, target, array);\n        return res;\n\n    }\n    private void find(TreeNode root,int target, ArrayList<Integer> array){\n        array.add(root.val);\n        target = target - root.val;\n        if(target == 0 && root.left == null && root.right == null)\n            res.add((ArrayList<Integer>)array.clone());\n        else {\n            if(root.left != null)\n                find(root.left, target, array);\n            if(root.right != null)\n                find(root.right, target, array);\n        }\n        array.remove(array.size() - 1);\n    }\n}\n```\n\n## 26 复杂链表的复制\n输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）\n\n<font color=#ff0000 >“输出结果中请不要返回参数中的节点引用”，在第三步时，就要RandomListNode newNode。</font>\n\n```java\n/*\npublic class RandomListNode {\n    int label;\n    RandomListNode next = null;\n    RandomListNode random = null;\n\n    RandomListNode(int label) {\n        this.label = label;\n    }\n}\n*/\npublic class Solution {\n    public RandomListNode Clone(RandomListNode pHead)\n    {\n        if(pHead == null)\n            return null;\n        RandomListNode node = pHead;\n        while(node != null){\n            RandomListNode newNode = new RandomListNode(node.label);\n            newNode.next = node.next;\n            node.next = newNode;\n            node = node.next.next;\n        }\n        node = pHead;\n        while(node != null){\n            if(node.random != null)\n                node.next.random = node.random.next;\n            node = node.next.next;\n        }\n        node = pHead;\n        RandomListNode newHead = node.next;\n        while(node != null){\n            RandomListNode newNode = node.next;\n            node.next = node.next.next;\n            newNode.next = newNode.next == null? null: newNode.next.next;\n            node = node.next;\n        }\n        return newHead;\n    }\n}\n```\n\n\n\n","source":"_posts/剑指offer算法题 3-26.md","raw":"---\ntitle: 剑指offer算法题 3——26\ndate: 2019-3-21 21:55:35\ntags: [刷题,面试]\ncategories: [面试,算法题]\ndescription: 搞定剑指offer\n---\n\n# 剑指offer算法题 3——26\n\n## 03 二维数组中的查找\n在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n\n\n```java\n//从右上角开始遍历。\npublic class Solution {\n    public boolean Find(int target, int [][] array) {\n        int row = array.length;\n        int col = array[0].length;\n        if(row==0 || col==0)\n            return false;\n        int i = 0, j = col - 1;\n        while(array[i][j]!=target){\n            if(array[i][j]<target){\n                i++;\n            }else{\n                j--;\n            }\n            if(i > row - 1 || j < 0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n## 04 替换空格\n请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。\n\n```java\npublic class Solution {\n    public String replaceSpace(StringBuffer str) {\n        String res = \"\";\n        for(int i=str.length()-1;i>=0;i--){\n            if(str.charAt(i)==' ')\n                res = \"%20\" + res;\n            else\n                res = str.charAt(i) + res;\n        }\n        return res;\n    }\n}\n```\n\n## 05 从尾到头打印链表\n输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。\n\n\n```java\n// 用栈 或 反转链表\n\n/**\n*    public class ListNode {\n*        int val;\n*        ListNode next = null;\n*\n*        ListNode(int val) {\n*            this.val = val;\n*        }\n*    }\n*\n*/\nimport java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        ListNode newHead = null;\n        ListNode left = null;\n        ListNode now = listNode;\n        while(now != null){\n            left = newHead;\n            newHead = now;\n            now = now.next;\n            newHead.next = left;\n        }\n        while(newHead != null){\n            res.add(newHead.val);\n            newHead = newHead.next;\n        }\n        return res;\n    }\n}\n```\n\n## 06 重建二叉树\n输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n\n```java\n/**\n * Definition for binary tree\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nimport java.util.Arrays;\npublic class Solution {\n    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {\n        if(pre.length == 0){\n            return null;\n        }\n        TreeNode root = new TreeNode(pre[0]);\n        int mid = 0;\n        for(int i = 0;i < in.length;i++){\n            if(in[i] == pre[0])\n                mid = i;\n        }\n        root.left = reConstructBinaryTree(Arrays.copyOfRange(pre, 1, 1 + mid),\n                                         Arrays.copyOfRange(in, 0, mid));\n        root.right = reConstructBinaryTree(Arrays.copyOfRange(pre, 1 + mid, pre.length),\n                                         Arrays.copyOfRange(in, mid + 1, in.length));\n        return root;\n    }\n}\n```\n\n## 07 两个栈实现队列\n\n```java\nimport java.util.Stack;\n\npublic class Solution {\n    Stack<Integer> stack1 = new Stack<Integer>();\n    Stack<Integer> stack2 = new Stack<Integer>();\n    \n    public void push(int node) {\n        stack1.push(node);\n    }\n    \n    public int pop() {\n        if(stack2.isEmpty()){\n            while(!stack1.isEmpty()){\n                int num = stack1.pop();\n                stack2.push(num);\n            }\n        }\n        return stack2.pop();\n\n    }\n}\n```\n\n## 08 旋转数组的最小数字\n把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。\n\n```\nimport java.util.ArrayList;\npublic class Solution {\n    public int minNumberInRotateArray(int [] array) {\n        if(array.length == 0)\n            return 0;\n        int low = 0;\n        int mid = (array.length + low) / 2;\n        int high = array.length - 1;\n        while(low < high){\n            mid = low + (high - low) / 2; \n            if(array[mid] > array[high]){\n                low = mid + 1;\n            }else if (array[mid] < array[high]){\n                high = mid;\n            }else{\n                high--;\n            }\n        }\n        return array[low];\n    }\n}\n```\n## 09 斐波那契数列\n大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。\nn<=39\n\n```java\n// 使用动态规划\npublic class Solution {\n    public int Fibonacci(int n) {\n        int f1 = 0;\n        int f2 = 1;\n        int index = 0;\n        int res = 0;\n        while(index <= n){\n            if(index == 0){\n                res = f1;\n            }else if(index == 1){\n                res = f2;\n            }\n            else{\n                res = f1 + f2;\n                f1 = f2;\n                f2 = res;\n            }\n            index ++;\n        }\n        return res;\n    }\n}\n```\n\n## 10 二进制中1的个数\n输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。\n\n```java\n// 自己写的\npublic class Solution {\n    public int NumberOf1(int n) {\n        int count = 0;\n        for(int i = 0; i < 32; i++){\n            if((n & 1) == 1){\n                count++;\n            }\n            n = n >> 1;\n        }\n        return count;\n    }\n}\n// 网上更简练的，n按位与n-1，可以将最后一个1变成0\npublic class Solution {\n    public int NumberOf1(int n) {\n        int count = 0;\n        while(n!=0){\n            count += 1;\n            n &= (n-1);\n        }\n        return count;\n    }\n}\n```\n\n## 11 数值的整数次方\n给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。\n\n```java\n//  & 1 判断奇偶\npublic class Solution {\n    public double Power(double base, int exponent) {\n        if(base == 0)\n            return 0;\n        if(exponent == 0)\n            return 1;\n        if(exponent < 0)\n            return 1 / Power(base, exponent * (-1));\n        if((exponent & 1) == 1){\n            return base * Power(base, exponent / 2) * Power(base, exponent / 2);\n        }else{\n            return Power(base, exponent / 2) * Power(base, exponent / 2);\n        }\n  }\n}\n```\n## 14 调整数组顺序使奇数位于偶数前面\n输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。\n\n```java\n// 不开空间，用指针也比较麻烦，时间复杂度也不低，没找到指针比较好的办法\nimport java.util.List;\nimport java.util.ArrayList;\npublic class Solution {\n    public void reOrderArray(int [] array) {\n        ArrayList<Integer> list1 = new  ArrayList<Integer>();\n        ArrayList<Integer> list2 = new  ArrayList<Integer>();\n        for(int i = 0; i < array.length; i++){\n            if((array[i] & 1) == 1){\n                list1.add(array[i]);\n            }else{\n                list2.add(array[i]);\n            }\n        }\n        List<Integer> listAll = new ArrayList<Integer>();\n        listAll.addAll(list1);\n        listAll.addAll(list2);\n        for(int i = 0; i < array.length; i++){\n            array[i] = listAll.get(i);\n        }\n    }\n}\n```\n\n## 15 输入一个链表，输出该链表中倒数第k个结点\n链表中倒数第k个结点\n\n```\nif(right == null)\n    return null;\n```\n<font color=#ff0000 >注意这句的位置，要放在right = right.next;前面，否则{1,2,3,4,5},5/6 会有问题。</font>\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode FindKthToTail(ListNode head,int k) {\n        if(k == 0 || head == null)\n            return null;\n        int index = 0;\n        ListNode right = head;\n        for(int i = 0;i < k; i++){\n            if(right == null)\n                return null;\n            right = right.next;\n        }\n        ListNode left = head;\n        while(right != null){\n            right = right.next;\n            left = left.next;\n        }\n        return left;\n    }\n}\n```\n\n## 16 反转链表\n输入一个链表，反转链表后，输出新链表的表头。\n\n<font color=#ff0000 >要注意 now = now.next; newHead.next = left;的先后顺序</font>\n\n```java\n// 要注意 now = now.next; newHead.next = left;的先后顺序\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n        if(head == null || head.next == null){\n            return head;\n        }\n        ListNode newHead = null;\n        ListNode left = null;\n        ListNode now = head;\n        while(now != null){\n            left = newHead;\n            newHead = now;\n            now = now.next;\n            newHead.next = left;\n        }\n        return newHead;\n    }\n}\n```\n\n## 17 合并两个排序的链表\n输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。\n\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\n// 非递归\npublic class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2) {\n        if(list1 == null)\n            return list2;\n        if(list2 == null)\n            return list1;\n        ListNode head = new ListNode(-1);\n        ListNode now = head;\n        while(list1 != null && list2 != null){\n            if(list1.val < list2.val){\n                now.next = list1;\n                list1 = list1.next;\n            }\n            else{\n                now.next = list2;\n                list2 = list2.next;\n            }\n            now = now.next;\n        }\n        if(list1 != null)\n            now.next = list1;\n        if(list2 != null)\n            now.next = list2;\n        return head.next;\n    }\n}\n// 递归\npublic class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2) {\n        if(list1 == null)\n            return list2;\n        if(list2 == null)\n            return list1;\n        ListNode node = list1;\n        if(list1.val < list2.val){\n            node = list1;\n            node.next = Merge(list1.next, list2);\n        }else{\n            node = list2;\n            node.next = Merge(list1, list2.next);            \n        }\n        return node;\n    }\n}\n```\n\n## 18 树的子结构\n输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）\n\n```java\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    public boolean HasSubtree(TreeNode root1,TreeNode root2) {\n        if(root2 == null || root1 == null)\n            return false;\n        return isSubtree(root1, root2) \n            || HasSubtree(root1.left, root2) \n            || HasSubtree(root1.right, root2);\n    }\n    private boolean isSubtree(TreeNode root1, TreeNode root2) {\n        if(root2 == null){\n            return true;\n        }\n        if(root1 == null)\n            return false;\n        if(root1.val == root2.val){\n            return isSubtree(root1.left, root2.left) && isSubtree(root1.right, root2.right);\n        }else{\n            return false;\n        }\n    }\n}\n```\n\n## 19 二叉树的镜像\n操作给定的二叉树，将其变换为源二叉树的镜像。\n\n```java\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    public void Mirror(TreeNode root) {\n        if(root == null)\n            return;\n        TreeNode node = root.left;\n        root.left = root.right;\n        root.right = node;\n        Mirror(root.left);\n        Mirror(root.right);\n    }\n}\n```\n\n\n## 20 顺时针打印矩阵\n输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.\n\n\n```java\nimport java.util.ArrayList;\npublic class Solution {\n    public ArrayList<Integer> printMatrix(int [][] matrix) {\n       if(matrix.length == 0 || matrix[0].length == 0)\n           return null;\n        int row = matrix.length, col = matrix[0].length;\n        int top = 0, left = 0, right = col - 1, buttom = row - 1;\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        while(left <= right && top <= buttom){\n            for(int i = left; i <= right; i++){\n                res.add(matrix[top][i]);\n            }\n            for(int i = top + 1; i <= buttom; i++){\n                res.add(matrix[i][right]);\n            }\n            if(top != buttom)\n                for(int i = right - 1; i >= left; i--){\n                    res.add(matrix[buttom][i]);\n                }\n            if(left != right)\n                for(int i = buttom - 1; i > top; i--){\n                    res.add(matrix[i][left]);\n                }\n            left++;top++;right--;buttom--;\n        }\n        return res;\n    }\n}\n```\n\n## 21 包含min函数的栈\n定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。\n\n```java\nimport java.util.Stack;\n\npublic class Solution {\n    Stack<Integer> stack = new Stack<>();\n    Stack<Integer> minStack = new Stack<>();\n    \n    public void push(int node) {\n        stack.push(node);\n        int min = node;\n        if(!minStack.isEmpty())\n            min = minStack.pop();\n        minStack.push(min);\n        if(node < min)\n            min = node;\n        minStack.push(min);\n    }\n    \n    public void pop() {\n        stack.pop();\n        minStack.pop();\n    }\n    \n    public int top() {\n        int num = stack.pop();\n        stack.push(num);\n        return num;\n    }\n    \n    public int min() {\n        int num = minStack.pop();\n        minStack.push(num);\n        return num;\n    }\n}\n```\n\n## 22 栈的压入、弹出序列\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n\n```java\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Solution {\n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n        if(pushA.length != popA.length || \n               pushA.length == 0 ||\n               popA.length == 0)\n            return false;\n        Stack<Integer> stack = new Stack<Integer>();\n        int index = 0;\n        for(int i = 0; i < pushA.length; i++){\n            stack.push(pushA[i]);\n            while(stack.peek() == popA[index]){\n                stack.pop();\n                index++;\n                if(index == popA.length)\n                    return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n## 23 从上往下打出二叉树\n从上往下打印出二叉树的每个节点，同层节点从左至右打印。\n\n```java\nimport java.util.ArrayList;\nimport java.util.Queue;\nimport java.util.LinkedList;\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        if(root == null)\n            return res;\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.offer(root);\n        while(!queue.isEmpty()){\n            int size = queue.size();\n            for(int i = 0; i < size; i++){\n                TreeNode node = queue.poll();\n                res.add(node.val);\n                if(node.left != null)\n                    queue.offer(node.left);\n                if(node.right != null)\n                    queue.offer(node.right);\n            }\n        }\n        return res;\n    }\n}\n```\n\n## 24 二叉搜索树的后序遍历\n输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。\n\n```java\npublic class Solution {\n    public boolean VerifySquenceOfBST(int [] sequence) {\n        if(sequence.length == 0)\n            return false;\n        return judge(sequence, 0, sequence.length -1 );\n    }\n    private boolean judge(int[] sequence, int start ,int end){\n        int root = end;\n        int i = start;\n        if(start >= end)\n            return true;\n        while(i < end && sequence[i] < sequence[end])\n            i++;\n        for(int j = i; j < end; j++){\n            if(sequence[j] < sequence[end])\n                return false;\n        }\n        return judge(sequence, start, i - 1 ) && judge(sequence, i, end - 1);\n    }\n}\n```\n\n## 25 二叉树中和为某一值的路径\n输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)\n\n```java\nimport java.util.ArrayList;\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();\n    public ArrayList<ArrayList<Integer>> FindPath(TreeNode root,int target) {\n        ArrayList<Integer> array = new ArrayList<Integer>();\n        if(target > 0 && root != null)\n            find(root, target, array);\n        return res;\n\n    }\n    private void find(TreeNode root,int target, ArrayList<Integer> array){\n        array.add(root.val);\n        target = target - root.val;\n        if(target == 0 && root.left == null && root.right == null)\n            res.add((ArrayList<Integer>)array.clone());\n        else {\n            if(root.left != null)\n                find(root.left, target, array);\n            if(root.right != null)\n                find(root.right, target, array);\n        }\n        array.remove(array.size() - 1);\n    }\n}\n```\n\n## 26 复杂链表的复制\n输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）\n\n<font color=#ff0000 >“输出结果中请不要返回参数中的节点引用”，在第三步时，就要RandomListNode newNode。</font>\n\n```java\n/*\npublic class RandomListNode {\n    int label;\n    RandomListNode next = null;\n    RandomListNode random = null;\n\n    RandomListNode(int label) {\n        this.label = label;\n    }\n}\n*/\npublic class Solution {\n    public RandomListNode Clone(RandomListNode pHead)\n    {\n        if(pHead == null)\n            return null;\n        RandomListNode node = pHead;\n        while(node != null){\n            RandomListNode newNode = new RandomListNode(node.label);\n            newNode.next = node.next;\n            node.next = newNode;\n            node = node.next.next;\n        }\n        node = pHead;\n        while(node != null){\n            if(node.random != null)\n                node.next.random = node.random.next;\n            node = node.next.next;\n        }\n        node = pHead;\n        RandomListNode newHead = node.next;\n        while(node != null){\n            RandomListNode newNode = node.next;\n            node.next = node.next.next;\n            newNode.next = newNode.next == null? null: newNode.next.next;\n            node = node.next;\n        }\n        return newHead;\n    }\n}\n```\n\n\n\n","slug":"剑指offer算法题 3-26","published":1,"updated":"2025-02-22T18:52:19.824Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8au001ev0012n7aci93","content":"<h1 id=\"剑指offer算法题-3——26\"><a href=\"#剑指offer算法题-3——26\" class=\"headerlink\" title=\"剑指offer算法题 3——26\"></a>剑指offer算法题 3——26</h1><h2 id=\"03-二维数组中的查找\"><a href=\"#03-二维数组中的查找\" class=\"headerlink\" title=\"03 二维数组中的查找\"></a>03 二维数组中的查找</h2><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从右上角开始遍历。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span> [][] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">col</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row==<span class=\"number\">0</span> || col==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = col - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(array[i][j]!=target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[i][j]&lt;target)&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt; row - <span class=\"number\">1</span> || j &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"04-替换空格\"><a href=\"#04-替换空格\" class=\"headerlink\" title=\"04 替换空格\"></a>04 替换空格</h2><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">replaceSpace</span><span class=\"params\">(StringBuffer str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=str.length()-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.charAt(i)==<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">                res = <span class=\"string\">&quot;%20&quot;</span> + res;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                res = str.charAt(i) + res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"05-从尾到头打印链表\"><a href=\"#05-从尾到头打印链表\" class=\"headerlink\" title=\"05 从尾到头打印链表\"></a>05 从尾到头打印链表</h2><p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用栈 或 反转链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*    public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*        int val;</span></span><br><span class=\"line\"><span class=\"comment\">*        ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*        ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*            this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">*        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> listNode;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            left = newHead;</span><br><span class=\"line\">            newHead = now;</span><br><span class=\"line\">            now = now.next;</span><br><span class=\"line\">            newHead.next = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(newHead != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            res.add(newHead.val);</span><br><span class=\"line\">            newHead = newHead.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"06-重建二叉树\"><a href=\"#06-重建二叉树\" class=\"headerlink\" title=\"06 重建二叉树\"></a>06 重建二叉树</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for binary tree</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">reConstructBinaryTree</span><span class=\"params\">(<span class=\"type\">int</span> [] pre,<span class=\"type\">int</span> [] in)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(pre[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; in.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(in[i] == pre[<span class=\"number\">0</span>])</span><br><span class=\"line\">                mid = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root.left = reConstructBinaryTree(Arrays.copyOfRange(pre, <span class=\"number\">1</span>, <span class=\"number\">1</span> + mid),</span><br><span class=\"line\">                                         Arrays.copyOfRange(in, <span class=\"number\">0</span>, mid));</span><br><span class=\"line\">        root.right = reConstructBinaryTree(Arrays.copyOfRange(pre, <span class=\"number\">1</span> + mid, pre.length),</span><br><span class=\"line\">                                         Arrays.copyOfRange(in, mid + <span class=\"number\">1</span>, in.length));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"07-两个栈实现队列\"><a href=\"#07-两个栈实现队列\" class=\"headerlink\" title=\"07 两个栈实现队列\"></a>07 两个栈实现队列</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Integer&gt;();</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Integer&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> node)</span> &#123;</span><br><span class=\"line\">        stack1.push(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stack2.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!stack1.isEmpty())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> stack1.pop();</span><br><span class=\"line\">                stack2.push(num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack2.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"08-旋转数组的最小数字\"><a href=\"#08-旋转数组的最小数字\" class=\"headerlink\" title=\"08 旋转数组的最小数字\"></a>08 旋转数组的最小数字</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int minNumberInRotateArray(int [] array) &#123;</span><br><span class=\"line\">        if(array.length == 0)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        int low = 0;</span><br><span class=\"line\">        int mid = (array.length + low) / 2;</span><br><span class=\"line\">        int high = array.length - 1;</span><br><span class=\"line\">        while(low &lt; high)&#123;</span><br><span class=\"line\">            mid = low + (high - low) / 2; </span><br><span class=\"line\">            if(array[mid] &gt; array[high])&#123;</span><br><span class=\"line\">                low = mid + 1;</span><br><span class=\"line\">            &#125;else if (array[mid] &lt; array[high])&#123;</span><br><span class=\"line\">                high = mid;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                high--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return array[low];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"09-斐波那契数列\"><a href=\"#09-斐波那契数列\" class=\"headerlink\" title=\"09 斐波那契数列\"></a>09 斐波那契数列</h2><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。<br>n&lt;&#x3D;39</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用动态规划</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">Fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">f2</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index &lt;= n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                res = f1;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(index == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                res = f2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res = f1 + f2;</span><br><span class=\"line\">                f1 = f2;</span><br><span class=\"line\">                f2 = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-二进制中1的个数\"><a href=\"#10-二进制中1的个数\" class=\"headerlink\" title=\"10 二进制中1的个数\"></a>10 二进制中1的个数</h2><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自己写的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">NumberOf1</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n = n &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 网上更简练的，n按位与n-1，可以将最后一个1变成0</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">NumberOf1</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">            n &amp;= (n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-数值的整数次方\"><a href=\"#11-数值的整数次方\" class=\"headerlink\" title=\"11 数值的整数次方\"></a>11 数值的整数次方</h2><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  &amp; 1 判断奇偶</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">Power</span><span class=\"params\">(<span class=\"type\">double</span> base, <span class=\"type\">int</span> exponent)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(base == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exponent == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exponent &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span> / Power(base, exponent * (-<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((exponent &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> base * Power(base, exponent / <span class=\"number\">2</span>) * Power(base, exponent / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Power(base, exponent / <span class=\"number\">2</span>) * Power(base, exponent / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-调整数组顺序使奇数位于偶数前面\"><a href=\"#14-调整数组顺序使奇数位于偶数前面\" class=\"headerlink\" title=\"14 调整数组顺序使奇数位于偶数前面\"></a>14 调整数组顺序使奇数位于偶数前面</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不开空间，用指针也比较麻烦，时间复杂度也不低，没找到指针比较好的办法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reOrderArray</span><span class=\"params\">(<span class=\"type\">int</span> [] array)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list1 = <span class=\"keyword\">new</span>  <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list2 = <span class=\"keyword\">new</span>  <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((array[i] &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                list1.add(array[i]);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                list2.add(array[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Integer&gt; listAll = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        listAll.addAll(list1);</span><br><span class=\"line\">        listAll.addAll(list2);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">            array[i] = listAll.get(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-输入一个链表，输出该链表中倒数第k个结点\"><a href=\"#15-输入一个链表，输出该链表中倒数第k个结点\" class=\"headerlink\" title=\"15 输入一个链表，输出该链表中倒数第k个结点\"></a>15 输入一个链表，输出该链表中倒数第k个结点</h2><p>链表中倒数第k个结点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(right == null)</span><br><span class=\"line\">    return null;</span><br></pre></td></tr></table></figure>\n<p><font color=#ff0000 >注意这句的位置，要放在right &#x3D; right.next;前面，否则{1,2,3,4,5},5&#x2F;6 会有问题。</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">FindKthToTail</span><span class=\"params\">(ListNode head,<span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == <span class=\"number\">0</span> || head == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; k; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(right == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            right = right.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            right = right.next;</span><br><span class=\"line\">            left = left.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-反转链表\"><a href=\"#16-反转链表\" class=\"headerlink\" title=\"16 反转链表\"></a>16 反转链表</h2><p>输入一个链表，反转链表后，输出新链表的表头。</p>\n<p><font color=#ff0000 >要注意 now &#x3D; now.next; newHead.next &#x3D; left;的先后顺序</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 要注意 now = now.next; newHead.next = left;的先后顺序</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">ReverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            left = newHead;</span><br><span class=\"line\">            newHead = now;</span><br><span class=\"line\">            now = now.next;</span><br><span class=\"line\">            newHead.next = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17-合并两个排序的链表\"><a href=\"#17-合并两个排序的链表\" class=\"headerlink\" title=\"17 合并两个排序的链表\"></a>17 合并两个排序的链表</h2><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">// 非递归</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">Merge</span><span class=\"params\">(ListNode list1,ListNode list2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list1 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list2 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(list1 != <span class=\"literal\">null</span> &amp;&amp; list2 != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(list1.val &lt; list2.val)&#123;</span><br><span class=\"line\">                now.next = list1;</span><br><span class=\"line\">                list1 = list1.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                now.next = list2;</span><br><span class=\"line\">                list2 = list2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            now = now.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list1 != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            now.next = list1;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list2 != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            now.next = list2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">Merge</span><span class=\"params\">(ListNode list1,ListNode list2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list1 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list2 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> list1;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list1.val &lt; list2.val)&#123;</span><br><span class=\"line\">            node = list1;</span><br><span class=\"line\">            node.next = Merge(list1.next, list2);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            node = list2;</span><br><span class=\"line\">            node.next = Merge(list1, list2.next);            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18-树的子结构\"><a href=\"#18-树的子结构\" class=\"headerlink\" title=\"18 树的子结构\"></a>18 树的子结构</h2><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">HasSubtree</span><span class=\"params\">(TreeNode root1,TreeNode root2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root2 == <span class=\"literal\">null</span> || root1 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSubtree(root1, root2) </span><br><span class=\"line\">            || HasSubtree(root1.left, root2) </span><br><span class=\"line\">            || HasSubtree(root1.right, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSubtree</span><span class=\"params\">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root2 == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root1 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root1.val == root2.val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isSubtree(root1.left, root2.left) &amp;&amp; isSubtree(root1.right, root2.right);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19-二叉树的镜像\"><a href=\"#19-二叉树的镜像\" class=\"headerlink\" title=\"19 二叉树的镜像\"></a>19 二叉树的镜像</h2><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Mirror</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root.left;</span><br><span class=\"line\">        root.left = root.right;</span><br><span class=\"line\">        root.right = node;</span><br><span class=\"line\">        Mirror(root.left);</span><br><span class=\"line\">        Mirror(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"20-顺时针打印矩阵\"><a href=\"#20-顺时针打印矩阵\" class=\"headerlink\" title=\"20 顺时针打印矩阵\"></a>20 顺时针打印矩阵</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">printMatrix</span><span class=\"params\">(<span class=\"type\">int</span> [][] matrix)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> matrix.length, col = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">top</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, left = <span class=\"number\">0</span>, right = col - <span class=\"number\">1</span>, buttom = row - <span class=\"number\">1</span>;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right &amp;&amp; top &lt;= buttom)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> left; i &lt;= right; i++)&#123;</span><br><span class=\"line\">                res.add(matrix[top][i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> top + <span class=\"number\">1</span>; i &lt;= buttom; i++)&#123;</span><br><span class=\"line\">                res.add(matrix[i][right]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(top != buttom)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> right - <span class=\"number\">1</span>; i &gt;= left; i--)&#123;</span><br><span class=\"line\">                    res.add(matrix[buttom][i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left != right)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> buttom - <span class=\"number\">1</span>; i &gt; top; i--)&#123;</span><br><span class=\"line\">                    res.add(matrix[i][left]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            left++;top++;right--;buttom--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21-包含min函数的栈\"><a href=\"#21-包含min函数的栈\" class=\"headerlink\" title=\"21 包含min函数的栈\"></a>21 包含min函数的栈</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    Stack&lt;Integer&gt; minStack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> node)</span> &#123;</span><br><span class=\"line\">        stack.push(node);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> node;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minStack.isEmpty())</span><br><span class=\"line\">            min = minStack.pop();</span><br><span class=\"line\">        minStack.push(min);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node &lt; min)</span><br><span class=\"line\">            min = node;</span><br><span class=\"line\">        minStack.push(min);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        stack.pop();</span><br><span class=\"line\">        minStack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">top</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">        stack.push(num);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">min</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> minStack.pop();</span><br><span class=\"line\">        minStack.push(num);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-栈的压入、弹出序列\"><a href=\"#22-栈的压入、弹出序列\" class=\"headerlink\" title=\"22 栈的压入、弹出序列\"></a>22 栈的压入、弹出序列</h2><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">IsPopOrder</span><span class=\"params\">(<span class=\"type\">int</span> [] pushA,<span class=\"type\">int</span> [] popA)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pushA.length != popA.length || </span><br><span class=\"line\">               pushA.length == <span class=\"number\">0</span> ||</span><br><span class=\"line\">               popA.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; pushA.length; i++)&#123;</span><br><span class=\"line\">            stack.push(pushA[i]);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(stack.peek() == popA[index])&#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">                index++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index == popA.length)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-从上往下打出二叉树\"><a href=\"#23-从上往下打出二叉树\" class=\"headerlink\" title=\"23 从上往下打出二叉树\"></a>23 从上往下打出二叉树</h2><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">PrintFromTopToBottom</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class=\"line\">        queue.offer(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> queue.poll();</span><br><span class=\"line\">                res.add(node.val);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.left != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    queue.offer(node.left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.right != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    queue.offer(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"24-二叉搜索树的后序遍历\"><a href=\"#24-二叉搜索树的后序遍历\" class=\"headerlink\" title=\"24 二叉搜索树的后序遍历\"></a>24 二叉搜索树的后序遍历</h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">VerifySquenceOfBST</span><span class=\"params\">(<span class=\"type\">int</span> [] sequence)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sequence.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> judge(sequence, <span class=\"number\">0</span>, sequence.length -<span class=\"number\">1</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judge</span><span class=\"params\">(<span class=\"type\">int</span>[] sequence, <span class=\"type\">int</span> start ,<span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> end;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start &gt;= end)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt; end &amp;&amp; sequence[i] &lt; sequence[end])</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; end; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sequence[j] &lt; sequence[end])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> judge(sequence, start, i - <span class=\"number\">1</span> ) &amp;&amp; judge(sequence, i, end - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"25-二叉树中和为某一值的路径\"><a href=\"#25-二叉树中和为某一值的路径\" class=\"headerlink\" title=\"25 二叉树中和为某一值的路径\"></a>25 二叉树中和为某一值的路径</h2><p>输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class=\"title function_\">FindPath</span><span class=\"params\">(TreeNode root,<span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; array = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &gt; <span class=\"number\">0</span> &amp;&amp; root != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            find(root, target, array);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(TreeNode root,<span class=\"type\">int</span> target, ArrayList&lt;Integer&gt; array)</span>&#123;</span><br><span class=\"line\">        array.add(root.val);</span><br><span class=\"line\">        target = target - root.val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span> &amp;&amp; root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            res.add((ArrayList&lt;Integer&gt;)array.clone());</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.left != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                find(root.left, target, array);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.right != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                find(root.right, target, array);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        array.remove(array.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-复杂链表的复制\"><a href=\"#26-复杂链表的复制\" class=\"headerlink\" title=\"26 复杂链表的复制\"></a>26 复杂链表的复制</h2><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p>\n<p><font color=#ff0000 >“输出结果中请不要返回参数中的节点引用”，在第三步时，就要RandomListNode newNode。</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class RandomListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int label;</span></span><br><span class=\"line\"><span class=\"comment\">    RandomListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\">    RandomListNode random = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    RandomListNode(int label) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.label = label;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> RandomListNode <span class=\"title function_\">Clone</span><span class=\"params\">(RandomListNode pHead)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pHead == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">RandomListNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> pHead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">RandomListNode</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomListNode</span>(node.label);</span><br><span class=\"line\">            newNode.next = node.next;</span><br><span class=\"line\">            node.next = newNode;</span><br><span class=\"line\">            node = node.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node = pHead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.random != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                node.next.random = node.random.next;</span><br><span class=\"line\">            node = node.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node = pHead;</span><br><span class=\"line\">        <span class=\"type\">RandomListNode</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">RandomListNode</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">            node.next = node.next.next;</span><br><span class=\"line\">            newNode.next = newNode.next == <span class=\"literal\">null</span>? <span class=\"literal\">null</span>: newNode.next.next;</span><br><span class=\"line\">            node = node.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","length":14143,"excerpt":"","more":"<h1 id=\"剑指offer算法题-3——26\"><a href=\"#剑指offer算法题-3——26\" class=\"headerlink\" title=\"剑指offer算法题 3——26\"></a>剑指offer算法题 3——26</h1><h2 id=\"03-二维数组中的查找\"><a href=\"#03-二维数组中的查找\" class=\"headerlink\" title=\"03 二维数组中的查找\"></a>03 二维数组中的查找</h2><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从右上角开始遍历。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">Find</span><span class=\"params\">(<span class=\"type\">int</span> target, <span class=\"type\">int</span> [][] array)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">col</span> <span class=\"operator\">=</span> array[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(row==<span class=\"number\">0</span> || col==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = col - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(array[i][j]!=target)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[i][j]&lt;target)&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i &gt; row - <span class=\"number\">1</span> || j &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"04-替换空格\"><a href=\"#04-替换空格\" class=\"headerlink\" title=\"04 替换空格\"></a>04 替换空格</h2><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">replaceSpace</span><span class=\"params\">(StringBuffer str)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=str.length()-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(str.charAt(i)==<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">                res = <span class=\"string\">&quot;%20&quot;</span> + res;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                res = str.charAt(i) + res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"05-从尾到头打印链表\"><a href=\"#05-从尾到头打印链表\" class=\"headerlink\" title=\"05 从尾到头打印链表\"></a>05 从尾到头打印链表</h2><p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用栈 或 反转链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*    public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*        int val;</span></span><br><span class=\"line\"><span class=\"comment\">*        ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*        ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*            this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">*        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">printListFromTailToHead</span><span class=\"params\">(ListNode listNode)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> listNode;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            left = newHead;</span><br><span class=\"line\">            newHead = now;</span><br><span class=\"line\">            now = now.next;</span><br><span class=\"line\">            newHead.next = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(newHead != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            res.add(newHead.val);</span><br><span class=\"line\">            newHead = newHead.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"06-重建二叉树\"><a href=\"#06-重建二叉树\" class=\"headerlink\" title=\"06 重建二叉树\"></a>06 重建二叉树</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for binary tree</span></span><br><span class=\"line\"><span class=\"comment\"> * public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">reConstructBinaryTree</span><span class=\"params\">(<span class=\"type\">int</span> [] pre,<span class=\"type\">int</span> [] in)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(pre[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; in.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(in[i] == pre[<span class=\"number\">0</span>])</span><br><span class=\"line\">                mid = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root.left = reConstructBinaryTree(Arrays.copyOfRange(pre, <span class=\"number\">1</span>, <span class=\"number\">1</span> + mid),</span><br><span class=\"line\">                                         Arrays.copyOfRange(in, <span class=\"number\">0</span>, mid));</span><br><span class=\"line\">        root.right = reConstructBinaryTree(Arrays.copyOfRange(pre, <span class=\"number\">1</span> + mid, pre.length),</span><br><span class=\"line\">                                         Arrays.copyOfRange(in, mid + <span class=\"number\">1</span>, in.length));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"07-两个栈实现队列\"><a href=\"#07-两个栈实现队列\" class=\"headerlink\" title=\"07 两个栈实现队列\"></a>07 两个栈实现队列</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Integer&gt;();</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Integer&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> node)</span> &#123;</span><br><span class=\"line\">        stack1.push(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stack2.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!stack1.isEmpty())&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> stack1.pop();</span><br><span class=\"line\">                stack2.push(num);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack2.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"08-旋转数组的最小数字\"><a href=\"#08-旋转数组的最小数字\" class=\"headerlink\" title=\"08 旋转数组的最小数字\"></a>08 旋转数组的最小数字</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">    public int minNumberInRotateArray(int [] array) &#123;</span><br><span class=\"line\">        if(array.length == 0)</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        int low = 0;</span><br><span class=\"line\">        int mid = (array.length + low) / 2;</span><br><span class=\"line\">        int high = array.length - 1;</span><br><span class=\"line\">        while(low &lt; high)&#123;</span><br><span class=\"line\">            mid = low + (high - low) / 2; </span><br><span class=\"line\">            if(array[mid] &gt; array[high])&#123;</span><br><span class=\"line\">                low = mid + 1;</span><br><span class=\"line\">            &#125;else if (array[mid] &lt; array[high])&#123;</span><br><span class=\"line\">                high = mid;</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                high--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return array[low];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"09-斐波那契数列\"><a href=\"#09-斐波那契数列\" class=\"headerlink\" title=\"09 斐波那契数列\"></a>09 斐波那契数列</h2><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。<br>n&lt;&#x3D;39</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用动态规划</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">Fibonacci</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">f2</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index &lt;= n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                res = f1;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(index == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                res = f2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                res = f1 + f2;</span><br><span class=\"line\">                f1 = f2;</span><br><span class=\"line\">                f2 = res;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            index ++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-二进制中1的个数\"><a href=\"#10-二进制中1的个数\" class=\"headerlink\" title=\"10 二进制中1的个数\"></a>10 二进制中1的个数</h2><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自己写的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">NumberOf1</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">32</span>; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((n &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            n = n &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 网上更简练的，n按位与n-1，可以将最后一个1变成0</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">NumberOf1</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            count += <span class=\"number\">1</span>;</span><br><span class=\"line\">            n &amp;= (n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11-数值的整数次方\"><a href=\"#11-数值的整数次方\" class=\"headerlink\" title=\"11 数值的整数次方\"></a>11 数值的整数次方</h2><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//  &amp; 1 判断奇偶</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">Power</span><span class=\"params\">(<span class=\"type\">double</span> base, <span class=\"type\">int</span> exponent)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(base == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exponent == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exponent &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span> / Power(base, exponent * (-<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((exponent &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> base * Power(base, exponent / <span class=\"number\">2</span>) * Power(base, exponent / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Power(base, exponent / <span class=\"number\">2</span>) * Power(base, exponent / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"14-调整数组顺序使奇数位于偶数前面\"><a href=\"#14-调整数组顺序使奇数位于偶数前面\" class=\"headerlink\" title=\"14 调整数组顺序使奇数位于偶数前面\"></a>14 调整数组顺序使奇数位于偶数前面</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不开空间，用指针也比较麻烦，时间复杂度也不低，没找到指针比较好的办法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reOrderArray</span><span class=\"params\">(<span class=\"type\">int</span> [] array)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list1 = <span class=\"keyword\">new</span>  <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list2 = <span class=\"keyword\">new</span>  <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((array[i] &amp; <span class=\"number\">1</span>) == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                list1.add(array[i]);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                list2.add(array[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        List&lt;Integer&gt; listAll = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        listAll.addAll(list1);</span><br><span class=\"line\">        listAll.addAll(list2);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">            array[i] = listAll.get(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"15-输入一个链表，输出该链表中倒数第k个结点\"><a href=\"#15-输入一个链表，输出该链表中倒数第k个结点\" class=\"headerlink\" title=\"15 输入一个链表，输出该链表中倒数第k个结点\"></a>15 输入一个链表，输出该链表中倒数第k个结点</h2><p>链表中倒数第k个结点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(right == null)</span><br><span class=\"line\">    return null;</span><br></pre></td></tr></table></figure>\n<p><font color=#ff0000 >注意这句的位置，要放在right &#x3D; right.next;前面，否则{1,2,3,4,5},5&#x2F;6 会有问题。</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">FindKthToTail</span><span class=\"params\">(ListNode head,<span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k == <span class=\"number\">0</span> || head == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;i &lt; k; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(right == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            right = right.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(right != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            right = right.next;</span><br><span class=\"line\">            left = left.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"16-反转链表\"><a href=\"#16-反转链表\" class=\"headerlink\" title=\"16 反转链表\"></a>16 反转链表</h2><p>输入一个链表，反转链表后，输出新链表的表头。</p>\n<p><font color=#ff0000 >要注意 now &#x3D; now.next; newHead.next &#x3D; left;的先后顺序</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 要注意 now = now.next; newHead.next = left;的先后顺序</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">ReverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            left = newHead;</span><br><span class=\"line\">            newHead = now;</span><br><span class=\"line\">            now = now.next;</span><br><span class=\"line\">            newHead.next = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"17-合并两个排序的链表\"><a href=\"#17-合并两个排序的链表\" class=\"headerlink\" title=\"17 合并两个排序的链表\"></a>17 合并两个排序的链表</h2><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val;</span></span><br><span class=\"line\"><span class=\"comment\">    ListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    ListNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"><span class=\"comment\">// 非递归</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">Merge</span><span class=\"params\">(ListNode list1,ListNode list2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list1 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list2 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(list1 != <span class=\"literal\">null</span> &amp;&amp; list2 != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(list1.val &lt; list2.val)&#123;</span><br><span class=\"line\">                now.next = list1;</span><br><span class=\"line\">                list1 = list1.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                now.next = list2;</span><br><span class=\"line\">                list2 = list2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            now = now.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list1 != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            now.next = list1;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list2 != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            now.next = list2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 递归</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">Merge</span><span class=\"params\">(ListNode list1,ListNode list2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list1 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list2 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> list1;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> list1;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list1.val &lt; list2.val)&#123;</span><br><span class=\"line\">            node = list1;</span><br><span class=\"line\">            node.next = Merge(list1.next, list2);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            node = list2;</span><br><span class=\"line\">            node.next = Merge(list1, list2.next);            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18-树的子结构\"><a href=\"#18-树的子结构\" class=\"headerlink\" title=\"18 树的子结构\"></a>18 树的子结构</h2><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">HasSubtree</span><span class=\"params\">(TreeNode root1,TreeNode root2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root2 == <span class=\"literal\">null</span> || root1 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSubtree(root1, root2) </span><br><span class=\"line\">            || HasSubtree(root1.left, root2) </span><br><span class=\"line\">            || HasSubtree(root1.right, root2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSubtree</span><span class=\"params\">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root2 == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root1 == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root1.val == root2.val)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> isSubtree(root1.left, root2.left) &amp;&amp; isSubtree(root1.right, root2.right);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19-二叉树的镜像\"><a href=\"#19-二叉树的镜像\" class=\"headerlink\" title=\"19 二叉树的镜像\"></a>19 二叉树的镜像</h2><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Mirror</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> root.left;</span><br><span class=\"line\">        root.left = root.right;</span><br><span class=\"line\">        root.right = node;</span><br><span class=\"line\">        Mirror(root.left);</span><br><span class=\"line\">        Mirror(root.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"20-顺时针打印矩阵\"><a href=\"#20-顺时针打印矩阵\" class=\"headerlink\" title=\"20 顺时针打印矩阵\"></a>20 顺时针打印矩阵</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">printMatrix</span><span class=\"params\">(<span class=\"type\">int</span> [][] matrix)</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(matrix.length == <span class=\"number\">0</span> || matrix[<span class=\"number\">0</span>].length == <span class=\"number\">0</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> matrix.length, col = matrix[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">top</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, left = <span class=\"number\">0</span>, right = col - <span class=\"number\">1</span>, buttom = row - <span class=\"number\">1</span>;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt;= right &amp;&amp; top &lt;= buttom)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> left; i &lt;= right; i++)&#123;</span><br><span class=\"line\">                res.add(matrix[top][i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> top + <span class=\"number\">1</span>; i &lt;= buttom; i++)&#123;</span><br><span class=\"line\">                res.add(matrix[i][right]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(top != buttom)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> right - <span class=\"number\">1</span>; i &gt;= left; i--)&#123;</span><br><span class=\"line\">                    res.add(matrix[buttom][i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left != right)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> buttom - <span class=\"number\">1</span>; i &gt; top; i--)&#123;</span><br><span class=\"line\">                    res.add(matrix[i][left]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            left++;top++;right--;buttom--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"21-包含min函数的栈\"><a href=\"#21-包含min函数的栈\" class=\"headerlink\" title=\"21 包含min函数的栈\"></a>21 包含min函数的栈</h2><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    Stack&lt;Integer&gt; minStack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> node)</span> &#123;</span><br><span class=\"line\">        stack.push(node);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> node;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!minStack.isEmpty())</span><br><span class=\"line\">            min = minStack.pop();</span><br><span class=\"line\">        minStack.push(min);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node &lt; min)</span><br><span class=\"line\">            min = node;</span><br><span class=\"line\">        minStack.push(min);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        stack.pop();</span><br><span class=\"line\">        minStack.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">top</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">        stack.push(num);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">min</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> minStack.pop();</span><br><span class=\"line\">        minStack.push(num);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"22-栈的压入、弹出序列\"><a href=\"#22-栈的压入、弹出序列\" class=\"headerlink\" title=\"22 栈的压入、弹出序列\"></a>22 栈的压入、弹出序列</h2><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">IsPopOrder</span><span class=\"params\">(<span class=\"type\">int</span> [] pushA,<span class=\"type\">int</span> [] popA)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pushA.length != popA.length || </span><br><span class=\"line\">               pushA.length == <span class=\"number\">0</span> ||</span><br><span class=\"line\">               popA.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        Stack&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; pushA.length; i++)&#123;</span><br><span class=\"line\">            stack.push(pushA[i]);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(stack.peek() == popA[index])&#123;</span><br><span class=\"line\">                stack.pop();</span><br><span class=\"line\">                index++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index == popA.length)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"23-从上往下打出二叉树\"><a href=\"#23-从上往下打出二叉树\" class=\"headerlink\" title=\"23 从上往下打出二叉树\"></a>23 从上往下打出二叉树</h2><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"title function_\">PrintFromTopToBottom</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class=\"line\">        queue.offer(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> queue.poll();</span><br><span class=\"line\">                res.add(node.val);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.left != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    queue.offer(node.left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(node.right != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    queue.offer(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"24-二叉搜索树的后序遍历\"><a href=\"#24-二叉搜索树的后序遍历\" class=\"headerlink\" title=\"24 二叉搜索树的后序遍历\"></a>24 二叉搜索树的后序遍历</h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">VerifySquenceOfBST</span><span class=\"params\">(<span class=\"type\">int</span> [] sequence)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sequence.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> judge(sequence, <span class=\"number\">0</span>, sequence.length -<span class=\"number\">1</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judge</span><span class=\"params\">(<span class=\"type\">int</span>[] sequence, <span class=\"type\">int</span> start ,<span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> end;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(start &gt;= end)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i &lt; end &amp;&amp; sequence[i] &lt; sequence[end])</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j &lt; end; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sequence[j] &lt; sequence[end])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> judge(sequence, start, i - <span class=\"number\">1</span> ) &amp;&amp; judge(sequence, i, end - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"25-二叉树中和为某一值的路径\"><a href=\"#25-二叉树中和为某一值的路径\" class=\"headerlink\" title=\"25 二叉树中和为某一值的路径\"></a>25 二叉树中和为某一值的路径</h2><p>输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">public class TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int val = 0;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode left = null;</span></span><br><span class=\"line\"><span class=\"comment\">    TreeNode right = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    public TreeNode(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class=\"title function_\">FindPath</span><span class=\"params\">(TreeNode root,<span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; array = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target &gt; <span class=\"number\">0</span> &amp;&amp; root != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            find(root, target, array);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">find</span><span class=\"params\">(TreeNode root,<span class=\"type\">int</span> target, ArrayList&lt;Integer&gt; array)</span>&#123;</span><br><span class=\"line\">        array.add(root.val);</span><br><span class=\"line\">        target = target - root.val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span> &amp;&amp; root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            res.add((ArrayList&lt;Integer&gt;)array.clone());</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.left != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                find(root.left, target, array);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.right != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                find(root.right, target, array);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        array.remove(array.size() - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"26-复杂链表的复制\"><a href=\"#26-复杂链表的复制\" class=\"headerlink\" title=\"26 复杂链表的复制\"></a>26 复杂链表的复制</h2><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p>\n<p><font color=#ff0000 >“输出结果中请不要返回参数中的节点引用”，在第三步时，就要RandomListNode newNode。</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">public class RandomListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int label;</span></span><br><span class=\"line\"><span class=\"comment\">    RandomListNode next = null;</span></span><br><span class=\"line\"><span class=\"comment\">    RandomListNode random = null;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    RandomListNode(int label) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.label = label;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> RandomListNode <span class=\"title function_\">Clone</span><span class=\"params\">(RandomListNode pHead)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pHead == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">RandomListNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> pHead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">RandomListNode</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomListNode</span>(node.label);</span><br><span class=\"line\">            newNode.next = node.next;</span><br><span class=\"line\">            node.next = newNode;</span><br><span class=\"line\">            node = node.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node = pHead;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.random != <span class=\"literal\">null</span>)</span><br><span class=\"line\">                node.next.random = node.random.next;</span><br><span class=\"line\">            node = node.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        node = pHead;</span><br><span class=\"line\">        <span class=\"type\">RandomListNode</span> <span class=\"variable\">newHead</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(node != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">RandomListNode</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> node.next;</span><br><span class=\"line\">            node.next = node.next.next;</span><br><span class=\"line\">            newNode.next = newNode.next == <span class=\"literal\">null</span>? <span class=\"literal\">null</span>: newNode.next.next;</span><br><span class=\"line\">            node = node.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"常用排序算法-java实现","date":"2019-03-25T07:02:26.000Z","description":"常用排序算法-java实现","_content":"\n\n# 常用排序算法-java实现\n\n## 快排\n\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(nlog₂n) | O(nlog₂n)|\tO(n²)|\tO(1)（原地分区递归版）\n\n\n\n```java\npublic void quickSort(int[] array){\n    return sort(array, 0, array.length);\n}\nprivate int getMid(int[] array, int start, int end){\n    int temp = array[start];\n    while(start < end){\n        while(start < end && temp < array[end])\n            end--;\n        array[end] = array[start];\n        while(start < end && temp > array[start])\n            start++;\n        array[start] = array[high];\n    }\n    array[start] = temp;\n    return start;\n}\nprivate void sort(int[] array, int start, int end){\n    if(start < end){\n        int mid = getMid(array, start, end);\n        sort(array, start, mid - 1);\n        sort(array, mid + 1, end);\n    }\n}\n```\n## 归并排序\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(nlog₂n) | O(nlog₂n)|\tO(nlog₂n)|\tO(n)）\n\n```java\npublic void mergeSort(int[] array){\n    return merge(array, 0, array.length - 1);\n}\nprivate void merge(int[] array, int start, int end){\n    if(end == start)\n        return;\n    int mid = (end + start) / 2;\n    int i = start, j = mid + 1, index = 0;\n    int[] copy = new int[end - start + 1];\n    merge(array, start, mid);\n    merge(array, mid + 1, end);\n    \n    while(i <= mid && j <= end){\n        if(array[i] > array[j])\n            copy[index++] = array[j++];\n        else\n            copy[index++] = array[i++];\n    }\n    while(i <= mid)\n        copy[index++] = array[i++];\n    while(j <= end)\n        copy[index++] = array[j++];\n    for(int m = 0; m > copy.length; m++)\n        array[start + m] = copy[m];\n}\n```\n## 堆排序\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(nlog₂n) | O(nlog₂n)|\tO(nlog₂n)|\tO(1)）\n\n```java\npublic void heapSort(int[] array){\n    for(int i = array.length - 1; i > 0; i--){\n        maxHeapify(array, i);\n        int temp = array[i];\n        array[i] = array[0];\n        array[0] = temp;\n    }\n}\nprivate void maxHeapify(int[] array, int index){\n    int child;\n    for(int i = (index - 1)/ 2; i > 0; i--){\n        child = 2 * i + 1;\n        if(array[child + 1] > array[child])\n            child++;\n        if(array[child] > array[i]){\n            int temp = array[child];\n            array[child] = array[i];\n            array[i] = temp;\n        }\n    }\n}\n```\n## 基数\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(d*(n+r))|\tO(d*(n+r))|\tO(d*(n+r))|\tO(n+r)\n\n```java\npublic void radixSort(int[] array, int d){\n    int[][] bucket = new int[10][array.length];\n    int n = 1;\n    int index = 0;\n    while(n < d){\n        int[] order = new int[10];\n        for(int num : array){\n            int digit = num / n % 10;\n            bucket[digit][order[digit]] = num;\n            order[digit]++;\n        }\n        for(int i = 0; i < bucket.length; i++){\n            if(order[i] == 0)\n                continue;\n            for(int j = 0; j < order[i]; j++){\n                array[index++] = bucket[i][j];\n            }\n        }\n        index = 0;\n        n *= 1;\n    }\n}\n```\n\n## 希尔\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(nlog2 n)|\tO(nlog2 n)|\tO(nlog2 n)|\tO(1)\n\n```java\npublic void shellSort(int[] array){\n    int length = array.length;\n    int d = length / 2;\n    while(d > 0){\n        for(int i = 0; i < length; i++){\n            for(int j = i; j + d < length; j += d){\n                if(array[j] < array[i]){\n                    int temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                }\n            }\n        }\n        d /= 2;\n    }\n}\n```\n\n## 冒泡\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(n²)|\tO(n)|\tO(n²)|\tO(1)\n\n```java\npublic void bubbleSort(int[] array){\n    for(int i = 0; i < array.length; i++){\n        for(int j = 0; j < array.length - 1 - i; j++){\n            if(array[j] < array[j + 1]){\n                int temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n        }\n    }\n}\n```\n\n## 选择\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(n²)|\tO(n²)|\tO(n²)|\tO(1)\n\n```java\npublic void selectSort(int[] array){\n    for(int i = 0; i < array.length; i++){\n        int min = i;\n        for(int j = i + 1; j < array.length; j++){\n            if(array[j] < array[j + 1]){\n                min = j;\n            }\n        }\n        if(min != i){\n            int temp = array[i];\n            array[i] = array[min];\n            array[min] = temp;\n        }\n    }\n}\n```\n## 直接插入\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(n²)|\tO(n²)|\tO(n²)|\tO(1)\n\n```java\npublic void insertSort(int[] array){\n    if(array.length < 1)\n        return;\n    for(int i = 1; i < array.length; i++){\n        int num = array[i];\n        int j;\n        for(j = i; j > 0 && array[j] > num; j--){\n            array[j] = array[j - 1];\n        }\n        array[i] = num;\n    }\n}\n```\n\n## 总结、对比\n\n算法 | 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性\n:-:|:-:|:-:|:-:|:-:|:-:\n冒泡排序|O(n²)|\tO(n²)|\tO(n²)|\tO(1)|稳定\n选择排序|\tO(n²)|\tO(n²)|\tO(n²)|\tO(1)|\t不稳定\n直接插入排序|\tO(n²)|\tO(n)|\tO(n²)|\tO(1)|\t稳定\n折半插入排序|\tO(n²)|\tO(n)|\tO(n²)|\tO(1)|\t稳定\n希尔排序|\tO(n^1.3)|\tO(nlogn)|\tO(n²)|\tO(1)|\t不稳定\n归并排序|\tO(nlog₂n)|\tO(nlog₂n)|\tO(nlog₂n)|\tO(n)|\t稳定\n快速排序|\tO(nlog₂n)|\tO(nlog₂n)|\tO(n²)|\tO(nlog₂n)|\t不稳定\n堆排序|\tO(nlog₂n)|\tO(nlog₂n)|\tO(nlog₂n)|\tO(1)|\t不稳定\n基数排序|\tO(n+k)|\tO(n+k)|\tO(n+k)|\tO(k)|\t稳定\n桶排序|\tO(n+k)|\tO(n+k)|\tO(n²)|\tO(n+k)\t|(不)稳定\n基数排序|\tO(d(n+k))|\tO(d(n+k))|\tO(d(n+kd))|\tO(n+kd)|\t稳定\n\n---\n\n参考文献：\nhttps://www.cnblogs.com/morethink/p/8419151.html#%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\n","source":"_posts/常用排序算法-java实现.md","raw":"---\ntitle: 常用排序算法-java实现\ndate: 2019-03-25 15:02:26\ntags: [面试]\ncategories: [面试]\ndescription: 常用排序算法-java实现\n---\n\n\n# 常用排序算法-java实现\n\n## 快排\n\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(nlog₂n) | O(nlog₂n)|\tO(n²)|\tO(1)（原地分区递归版）\n\n\n\n```java\npublic void quickSort(int[] array){\n    return sort(array, 0, array.length);\n}\nprivate int getMid(int[] array, int start, int end){\n    int temp = array[start];\n    while(start < end){\n        while(start < end && temp < array[end])\n            end--;\n        array[end] = array[start];\n        while(start < end && temp > array[start])\n            start++;\n        array[start] = array[high];\n    }\n    array[start] = temp;\n    return start;\n}\nprivate void sort(int[] array, int start, int end){\n    if(start < end){\n        int mid = getMid(array, start, end);\n        sort(array, start, mid - 1);\n        sort(array, mid + 1, end);\n    }\n}\n```\n## 归并排序\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(nlog₂n) | O(nlog₂n)|\tO(nlog₂n)|\tO(n)）\n\n```java\npublic void mergeSort(int[] array){\n    return merge(array, 0, array.length - 1);\n}\nprivate void merge(int[] array, int start, int end){\n    if(end == start)\n        return;\n    int mid = (end + start) / 2;\n    int i = start, j = mid + 1, index = 0;\n    int[] copy = new int[end - start + 1];\n    merge(array, start, mid);\n    merge(array, mid + 1, end);\n    \n    while(i <= mid && j <= end){\n        if(array[i] > array[j])\n            copy[index++] = array[j++];\n        else\n            copy[index++] = array[i++];\n    }\n    while(i <= mid)\n        copy[index++] = array[i++];\n    while(j <= end)\n        copy[index++] = array[j++];\n    for(int m = 0; m > copy.length; m++)\n        array[start + m] = copy[m];\n}\n```\n## 堆排序\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(nlog₂n) | O(nlog₂n)|\tO(nlog₂n)|\tO(1)）\n\n```java\npublic void heapSort(int[] array){\n    for(int i = array.length - 1; i > 0; i--){\n        maxHeapify(array, i);\n        int temp = array[i];\n        array[i] = array[0];\n        array[0] = temp;\n    }\n}\nprivate void maxHeapify(int[] array, int index){\n    int child;\n    for(int i = (index - 1)/ 2; i > 0; i--){\n        child = 2 * i + 1;\n        if(array[child + 1] > array[child])\n            child++;\n        if(array[child] > array[i]){\n            int temp = array[child];\n            array[child] = array[i];\n            array[i] = temp;\n        }\n    }\n}\n```\n## 基数\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(d*(n+r))|\tO(d*(n+r))|\tO(d*(n+r))|\tO(n+r)\n\n```java\npublic void radixSort(int[] array, int d){\n    int[][] bucket = new int[10][array.length];\n    int n = 1;\n    int index = 0;\n    while(n < d){\n        int[] order = new int[10];\n        for(int num : array){\n            int digit = num / n % 10;\n            bucket[digit][order[digit]] = num;\n            order[digit]++;\n        }\n        for(int i = 0; i < bucket.length; i++){\n            if(order[i] == 0)\n                continue;\n            for(int j = 0; j < order[i]; j++){\n                array[index++] = bucket[i][j];\n            }\n        }\n        index = 0;\n        n *= 1;\n    }\n}\n```\n\n## 希尔\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(nlog2 n)|\tO(nlog2 n)|\tO(nlog2 n)|\tO(1)\n\n```java\npublic void shellSort(int[] array){\n    int length = array.length;\n    int d = length / 2;\n    while(d > 0){\n        for(int i = 0; i < length; i++){\n            for(int j = i; j + d < length; j += d){\n                if(array[j] < array[i]){\n                    int temp = array[i];\n                    array[i] = array[j];\n                    array[j] = temp;\n                }\n            }\n        }\n        d /= 2;\n    }\n}\n```\n\n## 冒泡\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(n²)|\tO(n)|\tO(n²)|\tO(1)\n\n```java\npublic void bubbleSort(int[] array){\n    for(int i = 0; i < array.length; i++){\n        for(int j = 0; j < array.length - 1 - i; j++){\n            if(array[j] < array[j + 1]){\n                int temp = array[i];\n                array[i] = array[j];\n                array[j] = temp;\n            }\n        }\n    }\n}\n```\n\n## 选择\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(n²)|\tO(n²)|\tO(n²)|\tO(1)\n\n```java\npublic void selectSort(int[] array){\n    for(int i = 0; i < array.length; i++){\n        int min = i;\n        for(int j = i + 1; j < array.length; j++){\n            if(array[j] < array[j + 1]){\n                min = j;\n            }\n        }\n        if(min != i){\n            int temp = array[i];\n            array[i] = array[min];\n            array[min] = temp;\n        }\n    }\n}\n```\n## 直接插入\n平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度\n:-:|:-:|:-:|:-:\nO(n²)|\tO(n²)|\tO(n²)|\tO(1)\n\n```java\npublic void insertSort(int[] array){\n    if(array.length < 1)\n        return;\n    for(int i = 1; i < array.length; i++){\n        int num = array[i];\n        int j;\n        for(j = i; j > 0 && array[j] > num; j--){\n            array[j] = array[j - 1];\n        }\n        array[i] = num;\n    }\n}\n```\n\n## 总结、对比\n\n算法 | 平均时间复杂度 | 最好情况 | 最坏情况 | 空间复杂度 | 稳定性\n:-:|:-:|:-:|:-:|:-:|:-:\n冒泡排序|O(n²)|\tO(n²)|\tO(n²)|\tO(1)|稳定\n选择排序|\tO(n²)|\tO(n²)|\tO(n²)|\tO(1)|\t不稳定\n直接插入排序|\tO(n²)|\tO(n)|\tO(n²)|\tO(1)|\t稳定\n折半插入排序|\tO(n²)|\tO(n)|\tO(n²)|\tO(1)|\t稳定\n希尔排序|\tO(n^1.3)|\tO(nlogn)|\tO(n²)|\tO(1)|\t不稳定\n归并排序|\tO(nlog₂n)|\tO(nlog₂n)|\tO(nlog₂n)|\tO(n)|\t稳定\n快速排序|\tO(nlog₂n)|\tO(nlog₂n)|\tO(n²)|\tO(nlog₂n)|\t不稳定\n堆排序|\tO(nlog₂n)|\tO(nlog₂n)|\tO(nlog₂n)|\tO(1)|\t不稳定\n基数排序|\tO(n+k)|\tO(n+k)|\tO(n+k)|\tO(k)|\t稳定\n桶排序|\tO(n+k)|\tO(n+k)|\tO(n²)|\tO(n+k)\t|(不)稳定\n基数排序|\tO(d(n+k))|\tO(d(n+k))|\tO(d(n+kd))|\tO(n+kd)|\t稳定\n\n---\n\n参考文献：\nhttps://www.cnblogs.com/morethink/p/8419151.html#%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\n","slug":"常用排序算法-java实现","published":1,"updated":"2025-02-22T18:52:19.824Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8av001iv001839w50f7","content":"<h1 id=\"常用排序算法-java实现\"><a href=\"#常用排序算法-java实现\" class=\"headerlink\" title=\"常用排序算法-java实现\"></a>常用排序算法-java实现</h1><h2 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)（原地分区递归版）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sort(array, <span class=\"number\">0</span>, array.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getMid</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[start];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(start &lt; end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt; end &amp;&amp; temp &lt; array[end])</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        array[end] = array[start];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt; end &amp;&amp; temp &gt; array[start])</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        array[start] = array[high];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    array[start] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(start &lt; end)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> getMid(array, start, end);</span><br><span class=\"line\">        sort(array, start, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(array, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(n)）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(end == start)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (end + start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start, j = mid + <span class=\"number\">1</span>, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] copy = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[end - start + <span class=\"number\">1</span>];</span><br><span class=\"line\">    merge(array, start, mid);</span><br><span class=\"line\">    merge(array, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[i] &gt; array[j])</span><br><span class=\"line\">            copy[index++] = array[j++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            copy[index++] = array[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid)</span><br><span class=\"line\">        copy[index++] = array[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= end)</span><br><span class=\"line\">        copy[index++] = array[j++];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; m &gt; copy.length; m++)</span><br><span class=\"line\">        array[start + m] = copy[m];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(1)）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">heapSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> array.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        maxHeapify(array, i);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">        array[i] = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">        array[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">maxHeapify</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (index - <span class=\"number\">1</span>)/ <span class=\"number\">2</span>; i &gt; <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        child = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[child + <span class=\"number\">1</span>] &gt; array[child])</span><br><span class=\"line\">            child++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[child] &gt; array[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[child];</span><br><span class=\"line\">            array[child] = array[i];</span><br><span class=\"line\">            array[i] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基数\"><a href=\"#基数\" class=\"headerlink\" title=\"基数\"></a>基数</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(d*(n+r))</td>\n<td align=\"center\">O(d*(n+r))</td>\n<td align=\"center\">O(d*(n+r))</td>\n<td align=\"center\">O(n+r)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">radixSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> d)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[][] bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>][array.length];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &lt; d)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] order = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : array)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">digit</span> <span class=\"operator\">=</span> num / n % <span class=\"number\">10</span>;</span><br><span class=\"line\">            bucket[digit][order[digit]] = num;</span><br><span class=\"line\">            order[digit]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; bucket.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(order[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; order[i]; j++)&#123;</span><br><span class=\"line\">                array[index++] = bucket[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        n *= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"希尔\"><a href=\"#希尔\" class=\"headerlink\" title=\"希尔\"></a>希尔</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(nlog2 n)</td>\n<td align=\"center\">O(nlog2 n)</td>\n<td align=\"center\">O(nlog2 n)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shellSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> length / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(d &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j + d &lt; length; j += d)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(array[j] &lt; array[i])&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">                    array[i] = array[j];</span><br><span class=\"line\">                    array[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        d /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡\"><a href=\"#冒泡\" class=\"headerlink\" title=\"冒泡\"></a>冒泡</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array.length - <span class=\"number\">1</span> - i; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[j] &lt; array[j + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">                array[i] = array[j];</span><br><span class=\"line\">                array[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; array.length; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[j] &lt; array[j + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                min = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(min != i)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">            array[i] = array[min];</span><br><span class=\"line\">            array[min] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"直接插入\"><a href=\"#直接插入\" class=\"headerlink\" title=\"直接插入\"></a>直接插入</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(array.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; array[j] &gt; num; j--)&#123;</span><br><span class=\"line\">            array[j] = array[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        array[i] = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结、对比\"><a href=\"#总结、对比\" class=\"headerlink\" title=\"总结、对比\"></a>总结、对比</h2><table>\n<thead>\n<tr>\n<th align=\"center\">算法</th>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n<th align=\"center\">稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">冒泡排序</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">选择排序</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">直接插入排序</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">折半插入排序</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">希尔排序</td>\n<td align=\"center\">O(n^1.3)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">归并排序</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">快速排序</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">堆排序</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">基数排序</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(k)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">桶排序</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">(不)稳定</td>\n</tr>\n<tr>\n<td align=\"center\">基数排序</td>\n<td align=\"center\">O(d(n+k))</td>\n<td align=\"center\">O(d(n+k))</td>\n<td align=\"center\">O(d(n+kd))</td>\n<td align=\"center\">O(n+kd)</td>\n<td align=\"center\">稳定</td>\n</tr>\n</tbody></table>\n<hr>\n<p>参考文献：<br><a href=\"https://www.cnblogs.com/morethink/p/8419151.html#%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\">https://www.cnblogs.com/morethink/p/8419151.html#%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F</a></p>\n","length":4002,"excerpt":"","more":"<h1 id=\"常用排序算法-java实现\"><a href=\"#常用排序算法-java实现\" class=\"headerlink\" title=\"常用排序算法-java实现\"></a>常用排序算法-java实现</h1><h2 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)（原地分区递归版）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">quickSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sort(array, <span class=\"number\">0</span>, array.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getMid</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[start];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(start &lt; end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt; end &amp;&amp; temp &lt; array[end])</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        array[end] = array[start];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start &lt; end &amp;&amp; temp &gt; array[start])</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        array[start] = array[high];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    array[start] = temp;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sort</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(start &lt; end)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> getMid(array, start, end);</span><br><span class=\"line\">        sort(array, start, mid - <span class=\"number\">1</span>);</span><br><span class=\"line\">        sort(array, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(n)）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mergeSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(array, <span class=\"number\">0</span>, array.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(end == start)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (end + start) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start, j = mid + <span class=\"number\">1</span>, index = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] copy = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[end - start + <span class=\"number\">1</span>];</span><br><span class=\"line\">    merge(array, start, mid);</span><br><span class=\"line\">    merge(array, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid &amp;&amp; j &lt;= end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[i] &gt; array[j])</span><br><span class=\"line\">            copy[index++] = array[j++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            copy[index++] = array[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt;= mid)</span><br><span class=\"line\">        copy[index++] = array[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt;= end)</span><br><span class=\"line\">        copy[index++] = array[j++];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; m &gt; copy.length; m++)</span><br><span class=\"line\">        array[start + m] = copy[m];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(1)）</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">heapSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> array.length - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        maxHeapify(array, i);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">        array[i] = array[<span class=\"number\">0</span>];</span><br><span class=\"line\">        array[<span class=\"number\">0</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">maxHeapify</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> child;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> (index - <span class=\"number\">1</span>)/ <span class=\"number\">2</span>; i &gt; <span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">        child = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[child + <span class=\"number\">1</span>] &gt; array[child])</span><br><span class=\"line\">            child++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array[child] &gt; array[i])&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[child];</span><br><span class=\"line\">            array[child] = array[i];</span><br><span class=\"line\">            array[i] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"基数\"><a href=\"#基数\" class=\"headerlink\" title=\"基数\"></a>基数</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(d*(n+r))</td>\n<td align=\"center\">O(d*(n+r))</td>\n<td align=\"center\">O(d*(n+r))</td>\n<td align=\"center\">O(n+r)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">radixSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array, <span class=\"type\">int</span> d)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[][] bucket = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>][array.length];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &lt; d)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] order = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : array)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">digit</span> <span class=\"operator\">=</span> num / n % <span class=\"number\">10</span>;</span><br><span class=\"line\">            bucket[digit][order[digit]] = num;</span><br><span class=\"line\">            order[digit]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; bucket.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(order[i] == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; order[i]; j++)&#123;</span><br><span class=\"line\">                array[index++] = bucket[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        n *= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"希尔\"><a href=\"#希尔\" class=\"headerlink\" title=\"希尔\"></a>希尔</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(nlog2 n)</td>\n<td align=\"center\">O(nlog2 n)</td>\n<td align=\"center\">O(nlog2 n)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shellSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> length / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(d &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i; j + d &lt; length; j += d)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(array[j] &lt; array[i])&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">                    array[i] = array[j];</span><br><span class=\"line\">                    array[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        d /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡\"><a href=\"#冒泡\" class=\"headerlink\" title=\"冒泡\"></a>冒泡</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bubbleSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; array.length - <span class=\"number\">1</span> - i; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[j] &lt; array[j + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">                array[i] = array[j];</span><br><span class=\"line\">                array[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">selectSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt; array.length; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[j] &lt; array[j + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                min = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(min != i)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">            array[i] = array[min];</span><br><span class=\"line\">            array[min] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"直接插入\"><a href=\"#直接插入\" class=\"headerlink\" title=\"直接插入\"></a>直接插入</h2><table>\n<thead>\n<tr>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertSort</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(array.length &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> array[i];</span><br><span class=\"line\">        <span class=\"type\">int</span> j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; array[j] &gt; num; j--)&#123;</span><br><span class=\"line\">            array[j] = array[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        array[i] = num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结、对比\"><a href=\"#总结、对比\" class=\"headerlink\" title=\"总结、对比\"></a>总结、对比</h2><table>\n<thead>\n<tr>\n<th align=\"center\">算法</th>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好情况</th>\n<th align=\"center\">最坏情况</th>\n<th align=\"center\">空间复杂度</th>\n<th align=\"center\">稳定性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">冒泡排序</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">选择排序</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">直接插入排序</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">折半插入排序</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">希尔排序</td>\n<td align=\"center\">O(n^1.3)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">归并排序</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">快速排序</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">堆排序</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(nlog₂n)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"center\">不稳定</td>\n</tr>\n<tr>\n<td align=\"center\">基数排序</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(k)</td>\n<td align=\"center\">稳定</td>\n</tr>\n<tr>\n<td align=\"center\">桶排序</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">O(n²)</td>\n<td align=\"center\">O(n+k)</td>\n<td align=\"center\">(不)稳定</td>\n</tr>\n<tr>\n<td align=\"center\">基数排序</td>\n<td align=\"center\">O(d(n+k))</td>\n<td align=\"center\">O(d(n+k))</td>\n<td align=\"center\">O(d(n+kd))</td>\n<td align=\"center\">O(n+kd)</td>\n<td align=\"center\">稳定</td>\n</tr>\n</tbody></table>\n<hr>\n<p>参考文献：<br><a href=\"https://www.cnblogs.com/morethink/p/8419151.html#%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\">https://www.cnblogs.com/morethink/p/8419151.html#%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F</a></p>\n"},{"title":"常用设计模式","date":"2019-03-28T03:10:51.000Z","description":"面试中可能会问到的设计模式，自己写的范例","_content":"\n\n\n\n# 常用设计模式（java）\n[23种常用设计模式的UML类图](https://www.cnblogs.com/zytrue/p/8484806.html)\n\n## 1. 创建型\n\n### 1.1 三种工厂模式\n\n#### 1. 简单工厂模式\n参考：\n[java 三种工厂模式](https://www.cnblogs.com/zailushang1996/p/8601808.html)\n\n简单工厂模式又 叫静态工厂方法模式（Static FactoryMethod Pattern），是通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。\n\n##### 代码示例：\n一个抽象的武器接口：\n\n```java\npublic interface ISword{\n    void swordSkill();\n}\n```\n\n一个具体产品类，武器阐释者：\n\n```java\npublic class ChanShiZhe implements ISword{\n    @Override\n    public void swordSkill(){\n        System.out.println(\"阐释者——星爆弃疗斩\");\n    }\n}\n```\n\n另一个具体产品类，武器闪烁之光：\n```java\npublic class ShanShuoZhiGuang implements ISword{\n    @Override\n    public void swordSkill(){\n        System.out.println(\"闪烁之光——圣母圣咏\");\n    }\n}\n```\n\n简单工厂类：\n```java\npublic class SimplySwordFactory{\n    public static final int TYPE_CSZ = 1;\n    public static final int TYPE_SSZG = 2;\n    \n    public static ISword createSword(int type){\n        switch(type){\n            case TYPE_CSZ: \n                return new ChanShiZhe();\n            case TYPE_SSZG:\n                return new ShanShuoZhiGuang();\n            default:\n                return new ChanShiZhe();\n        }\n    }\n}\n```\n\n测试：\n```java\npublic class SimpleFactoryTest {\n    public static void main(String[] args){\n        ISword sword = SimplySwordFactory.createSword(SimplySwordFactory.TYPE_CSZ);\n        sword.swordSkill();\n    }\n}\n```\n##### 总结\n特点：\n- 它是一个具体的类，非接口 抽象类。有一个重要的create()方法，利用if或者 switch创建产品并返回。\n- create()方法通常是静态的，所以也称之为静态工厂。\n缺点：\n- 扩展性差（我想增加一种武器，除了新增一个武器产品类，还需要修改工厂类方法）\n- 不同的产品需要不同额外参数的时候 不支持。\n\n#### 2. 工厂方法\n![FactoryMethod](/image/interview_prep/FactoryMethod.png)\n\n提供一个用于创建对象的接口(工厂接口)，让其实现类(工厂实现类)决定实例化哪一个类(产品类)，并且由该实现类创建对应类的实例。\n\n步骤：\n1. 创建抽象工厂类，定义具体工厂的公共接口；\n2. 创建抽象产品类 ，定义具体产品的公共接口；\n3. 创建具体产品类（继承抽象产品类） & 定义生产的具体产品；\n4. 创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；\n5. 外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例\n\n##### 代码示例：\n工厂接口：\n```java\npublic interface Factory {\n    ISword createSword();\n}\n```\n其实现类（获取具体产品）:\n```java\npublic class ChanShiZheFactory implements Factory{\n    @Override\n    public ISword createSword(){\n        return new ChanShiZhe();\n    }\n}\n```\n\n```java\npublic class ShanShuoZhiGuangFactory implements Factory{\n    @Override\n    public ISword createSword(){\n        return new ShanShuoZhiGuang();\n    }\n}\n```\n测试：\n```java\npublic class FactoryTest {\n    public static void main(String[] args){\n        ISword csz = new ChanShiZheFactory().createSword();\n        csz.swordSkill();\n        ISword sszg = new ShanShuoZhiGuangFactory().createSword();\n        sszg.swordSkill();\n    }\n}\n```\n\n##### 总结\n优点：\n- 更符合开-闭原则：新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可\n- 符合单一职责原则：每个具体工厂类只负责创建对应的产品\n- 不使用静态工厂方法，可以形成基于继承的等级结构\n\n缺点：\n- 添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；\n- 由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。\n- 虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类\n- 一个具体工厂只能创建一种具体产品\n\n\n#### 3. 抽象工厂模式\n参考：\n[Java设计模式之抽象工厂模式](https://www.cnblogs.com/yeahwell/p/4727202.html)\n\n![AbstractFactory](/image/interview_prep/AbstractFactory.png)\n\n当每个抽象产品都有多于一个的具体子类的时候（空调有型号A和B两种，发动机也有型号A和B两种），工厂角色怎么知道实例化哪一个子类呢？比如每个抽象产品角色都有两个具体产品（产品空调有两个具体产品空调A和空调B）。抽象工厂模式提供两个具体工厂角色（宝马320系列工厂和宝马230系列工厂），分别对应于这两个具体产品角色，每一个具体工厂角色只负责某一个产品角色的实例化。每一个具体工厂类只负责创建抽象产品的某一个具体子类的实例。\n\n##### 代码示例：\n产品类：\n\n```java\n// 武器及型号\npublic interface Sword {\n    void equip();\n}\n\npublic class SwordA implements Sword{\n    public void equip(){\n        System.out.println(\"装备-->双刀\");\n    }\n}\npublic class SwordB implements Sword{\n    public void equip(){\n        System.out.println(\"装备-->细剑\");\n    }\n}\n\n//技能及型号\npublic interface Skill {\n    void release();\n} \npublic class SkillA implements Skill{\n    public void release(){\n        System.out.println(\"发动-->双刀流\");\n    }\n}\npublic class SkillB implements Skill{\n    public void release(){\n        System.out.println(\"发动-->圣母圣咏\");\n    }\n}\n```\n创建工厂类\n\n```java\n//创建工厂的接口  \npublic interface AbstractFactory {  \n    //装备武器\n    public Sword createSword();\n    //装备技能 \n    public Skill createSkill(); \n}  \n\n\n//为桐人装备  \npublic class Factorykirito implements AbstractFactory{  \n      \n    @Override  \n    public Sword createSword() {    \n        return new SwordA();  \n    }  \n    @Override  \n    public Skill createSkill() {  \n        return new SkillA();  \n    }  \n}  \n//为亚丝娜装备 \npublic class FactoryAsuna implements AbstractFactory {  \n  \n     @Override  \n    public Sword createSword() {    \n        return new SwordB();  \n    }  \n    @Override  \n    public Skill createSkill() {  \n        return new SkillB();  \n    }  \n} \n```\n\n测试类:\n```java\npublic class FactoryTest  {  \n    public static void main(String[] args){  \n        //生产桐人\n        Factorykirito factorykirito = new Factorykirito();\n        System.out.println(\"这是桐人\");\n        factorykirito.createSword().equip();\n        factorykirito.createSkill().release();\n\n        //生产亚丝娜\n        FactoryAsuna factoryAsuna = new FactoryAsuna();\n        System.out.println(\"这是亚丝娜\");\n        factoryAsuna.createSword().equip();\n        factoryAsuna.createSkill().release(); \n    }\n}\n```\n控制台输出：\n```\n这是桐人\n装备-->双刀\n发动-->双刀流\n这是亚丝娜\n装备-->细剑\n发动-->圣母圣咏\n```\n\n\n### 1.2. 七种单例模式\n参考： \n[Java 单例模式](https://www.cnblogs.com/zhaoyanjun/p/5652930.html)\n\n为什么使用单例：\n- 在内存中只有一个对象，节省内存空间。避免频繁的创建销毁对象，可以提高性能。避免对共享资源的多重占用。可以全局访问。\n- 确保一个类只有一个实例，自行实例化并向系统提供这个实例。\n\n单例需要注意的问题：\n- 线程安全问题\n- 资源使用问题\n\n#### 1. 饿汉式\n\n```java\npublic class Singleton{\n    private static Singleton instance = new Singleton();\n    \n    private Singleton(){\n        \n    }\n    \n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n- 优点：未调用getInstance()时，实例已经创建，天生线程安全。\n- 缺点：如果一直没有调用getInstance()，但是实例已经存在，资源浪费。\n\n#### 2. 懒汉式\n\n```java\npublic class Singleton{\n    private static Singleton instance;\n    \n    private Singleton(){}\n    \n    public static Singleton getInstance(){\n        if(instance == null){\n            instance = new Singleton();\n        }\n        return intance;\n    }\n}\n```\n- 优点：方法被调用时才创建实例，节省资源。\n- 缺点：线程不安全。\n\n\n<font color='red'>只有单线程才是单例，多线程可能出现多个单例。</font>\n\n#### 3. synchronized加锁同步\n\n```java\npublic class Singleton(){\n    private static Singleton instance;\n    \n    private Singleton(){}\n    \n    public synchronized static Singleton getInstance(){\n        if(instance == null){\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n- 优点：同时满足单线程、多线程。\n- 缺点：性能差。\n\n#### 4. 双重校验\n\n```java\npublic class Singleton(){\n    private static Singleton instance;\n    \n    private Singleton(){}\n    \n    public static Singleton getInstance(){\n        if(instance == null){\n            synchronized(Singleton.class){\n                if(instance == null){\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n- 优点：同时满足单线程、多线程；性能问题得到优化。\n- 缺点：第一次加载慢，由于java内存模型一些原因偶尔失败。\n\n#### 5. volatile关键字\n\n\n```java\npublic class Singleton{\n    private static volatile instance;\n    \n    private Singleton(){}\n    \n    public static Singleton getInstance(){\n        if(instance = null){\n            synchronized(Singleton.class){\n                if(instance == null){\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n<font color='red'>volatile关键字可以解决指令重排。</font>如果没有volatile，两个线程AB，都是第一次调用方法，线程A先执行new，该构造方法是非原子性操作，编译后产生多条字节码指令，由于指令重排，可能会先执行赋值操作，即在内存中开辟空间，然后返回内存的引用，之后instance不再为空，但是实际初始化并未完成，此时线程B进入就会看到不为空但是不完整（初始化未完成）的Singleton对象，所以需要加入volatile关键字，禁止指令重排序优化，从而安全的实现单例。\n\n#### 6. 静态内部类\n\n静态内部类由JVM来保证线程安全。\n\n```java\npublic class Singleton{\n    private Singleton(){}\n    \n    private static class SingletonHolder{\n        private static Singleton instance = new Singleton();\n    }\n    \n    public static Singleton getInstance(){\n        return SingletonsHolder.instance;\n    }\n}\n```\n- 优点：资源利用率高，不执行getInstance()不被实例，可以执行该类其他静态方法。\n\n#### 7. 枚举类实现单例\n\n```\n使用枚举实现单例的方法虽然还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。\n——Joshua Bloch《effective java》\n```\n<font color='red'>枚举天生线程安全，且可避免反序列化破坏单例。</font>\n\nmore detail：[为什么我强烈建议大家使用枚举来实现单例](https://blog.csdn.net/moakun/article/details/80688851)\n```java\npublic enum Singleton{\n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n}\n```\n\n## 2. 结构型\n\n### 2.1. 适配器模式\n\n![Adapter](/image/interview_prep/Adapter.png)\n\n场景：结城明日奈想试试双刀流技能（<font color='red'>一个类的接口</font>）好不好玩，但是亚丝娜这个账号（<font color='red'>客户端所期待的接口</font>）没办法直接用双刀流（<font color='red'>接口不匹配的两个类无法一起工作</font>），只能借助适配器。\n\n#### 1. 类适配器\n参考：[Java设计模式之《适配器模式》及应用场景](https://www.cnblogs.com/V1haoge/p/6479118.html)\n\n原理：通过继承来实现适配器功能。\n\n当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后再继承接口B的实现类BB，这样我们可以在适配器P中访问接口B的方法了，这时我们在适配器P中的接口A方法中直接引用BB中的合适方法，这样就完成了一个简单的类适配器。\n\n```java\n// 亚丝娜账号\npublic interface IAsuna{\n    void login();\n}\n// 双刀流\npublic interface IShuangDaoSkil{\n    void releaseSkill();\n}\n// 双刀流实现类\npublic class ShuangDaoSkil implements IShuangDaoSkil{\n    @Override \n    public void releaseSkill(){\n        System.out.println(\"发动双刀流！\");\n    }\n}\n// 适配器\npublic class Adapter extends ShuangDaoSkil implements IAsuna{\n    @Override \n    public void login(){\n        releaseSkill();\n    }\n}\n\npublic class client{\n    public static void main(String[] args) {\n        IAsuna asuna = new Adapter();\n        asuna.login();\n    }\n} \n```\n#### 2. 对象适配器模式\n原理：通过组合来实现适配器功能。\n\n当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后在适配器P中定义私有变量C（对象）（B接口指向变量名），再定义一个带参数的构造器用来为对象C赋值，再在A接口的方法实现中使用对象C调用其来源于B接口的方法。\n\n\n```java\n// 亚丝娜账号\npublic interface IAsuna{\n    void login();\n}\n// 双刀流\npublic interface IShuangDaoSkil{\n    void releaseSkill();\n}\n// 双刀流实现类\npublic class ShuangDaoSkil implements IShuangDaoSkil{\n    @Override \n    public void releaseSkill(){\n        System.out.println(\"发动双刀流！\");\n    }\n}\n// 适配器\npublic class Adapter implements IAsuna {\n    private ShuangDaoSkil shuangDaoSkill;\n    public Adapter(ShuangDaoSkil shuangDaoSkill){\n        this.shuangDaoSkill = shuangDaoSkill;\n    }\n    @Override\n    public void login(){\n        shuangDaoSkill.releaseSkill();\n    }\n}\npublic class client{\n    public static void main(String[] args) {\n        IAsuna asuna = new Adapter(new ShuangDaoSkil());\n        asuna.login();\n    }\n} \n```\n\n#### 3. 接口适配器模式\n\n原理：通过抽象类来实现适配，这种适配稍别于上面所述的适配。\n\n当存在这样一个接口，其中定义了N多的方法，而我们现在却只想使用其中的一个到几个方法，如果我们直接实现接口，那么我们要对所有的方法进行实现，哪怕我们仅仅是对不需要的方法进行置空（只写一对大括号，不做具体方法实现）也会导致这个类变得臃肿，调用也不方便，这时我们可以使用一个抽象类作为中间件，即适配器，用这个抽象类实现接口，而在抽象类中所有的方法都进行置空，那么我们在创建抽象类的继承类，而且重写我们需要使用的那几个方法即可。\n\n```java\n// 目标接口\npublic interface ISkill{\n    void skill1();\n    void skill2();\n    void skill3();\n    void skill4();\n    void skill5();\n}\n// 适配器\npublic abstract Adapter implements ISkill{\n    public void skill1();\n    public void skill2();\n    public void skill3();\n    public void skill4();\n    public void skill5();\n}\n// 适配器实现类\npublic class Skill extends Adapter{\n    public void skill1();\n    public void skill2();\n}\npublic class client{\n    public static void main(String[] args) {\n        Skill skill = new Skill;\n        skill.skill1();\n        skill.skill2();\n    }\n} \n```\n#### 4. 使用场景\n\n类适配器与对象适配器的使用场景一致，仅仅是实现手段稍有区别，二者主要用于如下场景：\n\n- 想要使用一个已经存在的类，但是它却不符合现有的接口规范，导致无法直接去访问，这时创建一个适配器就能间接去访问这个类中的方法。\n- 我们有一个类，想将其设计为可重用的类（可被多处访问），我们可以创建适配器来将这个类来适配其他没有提供合适接口的类。\n\n以上两个场景其实就是从两个角度来描述一类问题，那就是要访问的方法不在合适的接口里，一个从接口出发（被访问），一个从访问出发（主动访问）。\n\n接口适配器使用场景：\n\n想要使用接口中的某个或某些方法，但是接口中有太多方法，我们要使用时必须实现接口并实现其中的所有方法，可以使用抽象类来实现接口，并不对方法进行实现（仅置空），然后我们再继承这个抽象类来通过重写想用的方法的方式来实现。这个抽象类就是适配器。\n\n### 2.2. 装饰器\n\n参考：[JAVA装饰器模式](https://www.cnblogs.com/qiumingcheng/p/5219631.html)、\n[Java设计模式之装饰者模式](https://www.cnblogs.com/lzb1096101803/p/4425483.html)\n\n![Decorator](/image/interview_prep/Decorator.png)\n\nDecorator装饰器，顾名思义，就是动态地给一个对象添加一些额外的职责，就好比为房子进行装修一样。因此，装饰器模式具有如下的特征：\n- 它必须具有一个装饰的对象。\n- 它必须拥有与被装饰对象相同的接口。\n- 它可以给被装饰对象添加额外的功能。\n\n用一句话总结就是：<font color='red'>保持接口，增强性能。</font>\n\n实际上是基于对象的适配器模式的一种变种。它与对象的适配器模式的异同点如下:\n- 相同点：都拥有一个目标对象。\n- 不同点：适配器模式需要实现另外一个接口，而装饰器模式必须实现该对象的接口。\n\n要实现装饰者模式,注意一下几点内容:\n1. 装饰者类要实现真实类<font color='red'>同样的接口</font>\n2. 装饰者类内有一个<font color='red'>真实对象的引用</font>(可以通过装饰者类的构造器传入)\n3. 装饰类对象在主类中接受请求,将<font color='red'>请求发送给真实的对象</font>(相当于已经将引用传递到了装饰类的真实对象)\n4. 装饰者可以在传入真实对象后,<font color='red'>增加一些附加功能</font>(因为装饰对象和真实对象都有同样的方法,装饰对象可以添加一定操作在调用真实对象的方法,或者先调用真实对象的方法,再添加自己的方法)\n5. 不用继承\n\n来个实例 桐人砍怪：\n\n```java\n// 砍怪的接口\npublic interface IKirito{\n    void takeSword();\n    void releaseSkill();\n    void getAward();\n    void operation();\n}\n// 正常砍怪的实现类\npublic class Kirito implements IKirito{\n    @Override\n    public void takeSword(){\n        System.out.println(\"取武器\");\n    }\n    @Override\n    public void releaseSkill(){\n        System.out.println(\"放技能\");\n    }\n    @Override\n    public void getAward(){\n        System.out.println(\"捡装备\");\n    }\n    @Override\n    public void operation() {\n        takeSword();\n        releaseSkill();\n        getAward();\n    }\n}\n// 定义出需要添加附加功能的抽象类\npublic abstract class AbstractKirito implements IKirito{\n    private IKirito kirito;\n    public AbstractKirito (IKirito kirito){\n        super();\n        this.kirito = kirito;\n    }\n\n    @Override\n    public void takeSword(){\n        this.kirito.takeSword();\n    }\n    @Override\n    public void releaseSkill(){\n        this.kirito.releaseSkill();\n    }\n    @Override\n    public void getAward(){\n        this.kirito.getAward();\n    }\n    @Override\n    public void operation() {\n        takeSword();\n        releaseSkill();\n        getAward();\n    }\n}\n// 继承Abstarct类,所以可以有选择的覆盖正常生产馒头的方法,并添加原有方法原来的信息,同时也可以添加自己的方法    \n//装饰者模式中这里最关键, 对应上述的第1个注意点:装饰者类要实现真实类同样的接口\n\npublic class WisdomDecorator extends AbstractKirito{\n    public WisdomDecorator(IKirito kirito){\n        super(kirito);\n    }\n\n    public void addWisdomBuff(){\n        System.out.println(\"加智力buff\");\n    }\n\n    @Override\n    public void releaseSkill() {\n        this.addWisdomBuff();\n        super.releaseSkill();\n    }\n}\n\npublic class StrengthDecorator extends AbstractKirito{\n    public StrengthDecorator(IKirito kirito){\n        super(kirito);\n    }\n\n    public void addStrenthBuff(){\n        System.out.println(\"加力量buff\");\n    }\n\n    @Override\n    public void releaseSkill() {\n        this.addStrenthBuff();\n        super.releaseSkill();\n    }\n}\npublic class AgilityDecorator extends AbstractKirito{\n    public AgilityDecorator(IKirito kirito){\n        super(kirito);\n    }\n\n    public void addAgilityBuff(){\n        System.out.println(\"加敏捷buff\");\n    }\n\n    @Override\n    public void releaseSkill() {\n        this.addAgilityBuff();\n        super.releaseSkill();\n    }\n}\n\npublic class client{\n    public static void main(String[] args) {\n        IKirito kirito = new Kirito();\n        kirito = new WisdomDecorator(kirito);\n        kirito = new StrengthDecorator(kirito);\n        kirito = new AgilityDecorator(kirito);\n        kirito.operation();\n    }\n}\n```\n输出：\n```\n取武器\n加敏捷buff\n加力量buff\n加智力buff\n放技能\n捡装备\n```\n\n装饰者模式中的4个角色\n- 被装饰者抽象Component:是一个接口或者抽象类,定义最核心的对象,这个类是装饰者的基类,例如IKirito接口\n- 被装饰者具体实现ConcreteComponent:这是Component接口或抽象类的实现,例如本例中的Kirito\n- 装饰者Decorator:一般是抽象类,实现Component,它里面必然有一个指向Component的引用,例如本例中AbstractKirito\n- 装饰者实现ConcreteDecorator1和ConcreteDecorator2:用来装饰最基本的类,如本例中的AgilityDecorator\n\n\n### 2.3 代理模式\n参考：[理解java的三种代理模式](https://www.cnblogs.com/boboxing/p/8126046.html)\n\n![Proxy](/image/interview_prep/Proxy.png)\n\n代理模式是一种设计模式，简单说即是在不改变源码的情况下，实现对目标对象的功能扩展。\n\n#### 1. 静态代理\n\n\n```java\npublic interface IPlayer{\n    void play();\n}\n\npublic class Player implements IPlayer{\n    @Override\n    public void play(){\n        System.out.println(\"进行游戏\");\n    }\n}\n\npublic class PlayerProxy implements IPlayer{\n    private IPlayer player;\n    \n    public PlayerProxy(IPlayer player){\n        this.player = player;\n    }\n    @Override\n    public void play(){\n        System.out.println(\"寻找伙伴\");\n        player.play();\n    }\n}\n\npublic class Test{\n    public static void main(String[] args) {\n        IPlayer player = new Player();\n        PlayerProxy proxy = new PlayerProxy(player);\n        proxy.play();\n    }\n}\n```\n\n**总结**：其实这里做的事情无非就是，创建一个代理类SingerProxy，继承了ISinger接口并实现了其中的方法。只不过这种实现特意包含了目标对象的方法，正是这种特征使得看起来像是“扩展”了目标对象的方法。假使代理对象中只是简单地对sing方法做了另一种实现而没有包含目标对象的方法，也就不能算作代理模式了。所以这里的包含是关键。\n\n**缺点**：这种实现方式很直观也很简单，但其缺点是代理对象必须提前写出，如果接口层发生了变化，代理对象的代码也要进行维护。如果能在运行时动态地写出代理对象，不但减少了一大批代理类的代码，也少了不断维护的烦恼，不过运行时的效率必定受到影响。这种方式就是接下来的动态代理。\n\n#### 2. 动态代理（JDK代理）\n跟静态代理的前提一样，依然是对Singer对象进行扩展\n\n```java\npublic interface IPlayer{\n    void play();\n}\n\npublic class Player implements IPlayer{\n    @Override\n    public void play(){\n        System.out.println(\"进行游戏\");\n    }\n}\n```\n\n调用Proxy类的静态方法newProxyInstance即可，该方法会返回代理类对象\n\n```java\npublic class Test{\n    public static void main(String[] args) {\n        // 1. 创建实例\n        Player target = new Player();\n        IPlayer proxy  = (IPlayer) Proxy.newProxyInstance(\n                target.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                new InvocationHandler() {\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                        // 2. 扩展1\n                        System.out.println(\"寻找伙伴\");\n                        //执行目标对象方法\n                        Object returnValue = method.invoke(target, args);\n                        // 3. 扩展2\n                        System.out.println(\"很开心\");\n                        return returnValue;\n                    }\n                });\n        // 4. 目标对象的方法\n        proxy.play();\n    }\n}\n```\n**总结**：以上代码只有1234部分是需要自己写出，其余部分全都是固定代码。由于java封装了newProxyInstance这个方法的实现细节，所以使用起来才能这么方便。\n**缺点**：可以看出静态代理和JDK代理有一个共同的缺点，就是目标对象必须实现一个或多个接口，假如没有，则可以使用Cglib代理。\n\n#### 3. Cglib代理\n前提条件：\n\n- 需要引入cglib的jar文件，由于Spring的核心包中已经包括了Cglib功能，所以也可以直接引入spring-core-3.2.5.jar\n- 目标类不能为final\n- 目标对象的方法如果为final/static，那么就不会被拦截，即不会执行目标对象额外的业务方法\n\n```java\npublic class Player {\n    public void play(){\n        System.out.println(\"进行游戏\");\n    }\n}\n```\n\n\n```java\n/**\n * Cglib子类代理工厂\n */\npublic class ProxyFactory implements MethodInterceptor{\n    // 维护目标对象\n    private Object target;\n\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    // 给目标对象创建一个代理对象\n    public Object getProxyInstance(){\n        //1.工具类\n        Enhancer en = new Enhancer();\n        //2.设置父类\n        en.setSuperclass(target.getClass());\n        //3.设置回调函数\n        en.setCallback(this);\n        //4.创建子类(代理对象)\n        return en.create();\n    }\n\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        // 步骤1\n        System.out.println(\"寻找伙伴\");\n        //执行目标对象的方法\n        Object returnValue = method.invoke(target, args);\n        // 步骤2\n        System.out.println(\"很开心\");\n        return returnValue;\n    }\n}\n\n\n/**\n * 测试类\n */\npublic class Test{\n    public static void main(String[] args){\n        //目标对象\n        Player target = new Player();\n        //代理对象\n        Player proxy = (Player)new ProxyFactory(target).getProxyInstance();\n        //执行代理对象的方法\n        proxy.play();\n    }\n}\n```\n\n这里的代码也非常固定，只有步骤1、2是需要自己写出.\n\n**总结**：三种代理模式各有优缺点和相应的适用范围，主要看目标对象是否实现了接口。\n\n以Spring框架所选择的代理模式举例：在Spring的AOP编程中：\n- 如果加入容器的目标对象有实现接口，用JDK代理\n- 如果目标对象没有实现接口，用Cglib代理\n\n## 3. 行为型\n\n### 3.1 模板方法模式\n参考：[java设计模式之模板方法模式](https://www.cnblogs.com/liaoweipeng/p/5790395.html)\n\n![TemplateMethod](/image/interview_prep/TemplateMethod.png)\n\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<font color = 'red'>通俗的说的就是有很多相同的步骤的，在某一些地方可能有一些差别适合于这种模式，如大话设计模式中说到的考试场景中，每个人的试卷都是一样的，只有答案不一样。这种场景就适合于模板方法模式。</font>\n\n\n```java\n// 用抽象基类定义算法框架\npublic abstract class PlayGame{\n    /*\n     * 模板方法 封装了所有子类所遵循的算法框架\n     */\n    public final void play(){\n        login();\n        if(isPlyerWantsBuff()){\n            addBuff();\n        }\n        releaseSkill();\n        getAward();\n    }\n    // 因为login和getAward对所有子类是共同的行为，所以没必要向子类过多开放，所以方法定义为private，这样我们在进行子类编码时可以减少复杂度。\n    // 这样不需要关注细枝末节，我们只需要关注我们特定业务的实现，这就是模板方法模式的好处。可以封装变与不变，将不变的固化在高层，隐藏其细节。\n    private void login(){\n        System.out.println(\"登陆游戏\");\n    }\n    private void getAward(){\n        System.out.println(\"捡装备\");\n    }\n    /*\n     * Hook 钩子函数,提供一个空的或者默认的实现 子类重写该方法，可以自行决定是否挂钩以及如何挂钩\n     */\n    protected boolean isPlyerWantsBuff(){\n        return true;\n    }\n    /*\n     * addBuff()和releaseSkill()这两个方法我们不知道它们在算法框架中的具体实现，因此定义为抽象方法，\n     * 我们用protected进行修饰， 在子类中可见便于进行重写。\n     */\n    protected abstract void addBuff();\n    protected abstract void releaseSkill();\n\n}\n// 具体子类延迟实现步骤\n/**\n * 提供制备咖啡的具体实现子类。 具体子类实现延迟步骤，满足特定的业务需求。\n *\n *\n */\npublic class AsunaPlayGame extends PlayGame{\n    @Override\n    protected void addBuff(){\n        System.out.println(\"加敏捷Buff\");\n    }\n    @Override\n    protected void releaseSkill(){\n        System.out.println(\"释放圣母圣咏\");\n    }\n}\npublic class KiritoPlayGame extends PlayGame{\n    @Override\n    protected boolean isPlyerWantsBuff(){\n        return false;\n    }\n    @Override\n    protected void addBuff(){\n        System.out.println(\"加敏捷Buff\");\n    }\n    @Override\n    protected void releaseSkill(){\n        System.out.println(\"释放星爆弃疗斩\");\n    }\n}\n// 测试类\npublic class client{\n    public static void main(String[] args) {\n        System.out.println(\"Kirito 开始游戏\");\n        PlayGame kirito = new KiritoPlayGame();\n        kirito.play();\n\n        System.out.println(\"\\n*********************************\");\n        System.out.println(\"Asuna 开始游戏\");\n        PlayGame asuna = new AsunaPlayGame();\n        asuna.play();\n    }\n}\n\n```\n\n控制台输出：\n```\nKirito 开始游戏\n登陆游戏\n释放星爆弃疗斩\n捡装备\n\n*********************************\nAsuna 开始游戏\n登陆游戏\n加敏捷Buff\n释放圣母圣咏\n捡装备\n```\n\n模板方法模式适用场景：\n- 一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。\n- 各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的- 操作的模板方法来替换这些不同的代码。\n- 控制子类扩展。模板方法只在特定点调用“hook”操作，这样就只允许在这些点进行扩展。\n\n### 3.2 观察者模式\n参考：[JAVA设计模式之观察者模式](https://www.cnblogs.com/luohanguo/p/7825656.html)\n\n![Observer](/image/interview_prep/Observer.png)\n\n定义：在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。\n解释：其实就是发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。\n\n- **抽象被观察者角色**：也就是一个抽象主题，它把所有对观察者对象的引用保存在一个集合中，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。\n- **抽象观察者角色**：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。\n- **具体被观察者角色**：也就是一个具体的主题，在集体主题的内部状态改变时，所有登记过的观察者发出通知。\n- **具体观察者角色**：实现抽象观察者角色所需要的更新接口，一边使本身的状态与制图的状态相协调。\n\n#### 场景\n有一个NPC务，不定时发布一些任务，在线玩家就可以收到推送消息，不在线就收不到推送消息。\n\n```java\n/***\n * 抽象被观察者接口\n * 声明了添加、删除、通知观察者方法\n *\n */\npublic interface Observerable{\n    public void registerObserver(Observer o);\n    public void removeObserver(Observer o);\n    public void notifyObserver();\n}\n/***\n * 抽象观察者\n * 定义了一个update()方法，当被观察者调用notifyObservers()方法时，观察者的update()方法会被回调。\n *\n */\npublic interface Observer {\n    public void update(String message);\n}\n\n/**\n * 被观察者，也就是微信公众号服务\n * 实现了Observerable接口，对Observerable接口的三个方法进行了具体实现\n */\npublic class NPC implements Observerable{\n    private List<Observer> list;\n    private String message;\n\n    public NPC(){\n        list = new ArrayList<>();\n    }\n    @Override\n    public void registerObserver(Observer o){\n        list.add(o);\n    }\n    @Override\n    public void removeObserver(Observer o){\n        if(!list.isEmpty()){\n            list.remove(o);\n        }\n    }\n    @Override\n    public void notifyObserver(){\n        for(Observer o : list){\n            o.update(message);\n        }\n    }\n    public void setMessage(String message){\n        this.message = message;\n        System.out.println(\"NPC发布新任务： \" + message);\n        notifyObserver();\n    }\n}\n/**\n * 观察者\n * 实现了update方法\n */\npublic class Player implements Observer{\n    private String name;\n    private String message;\n    public Player(String name){\n        this.name = name;\n    }\n    @Override\n    public void update(String message){\n        this.message = message;\n        receive(message);\n    }\n    public void receive(String message){\n        System.out.println(this.name + \" 收到任务 \" + message);\n    }\n}\n// 测试类\npublic class client{\n    public static void main(String[] args) {\n        NPC npc = new NPC();\n        Player kirito = new Player(\"Kirito\");\n        Player asuna = new Player(\"Asuna\");\n        Player shino = new Player(\"Shino\");\n        npc.registerObserver(kirito);\n        npc.registerObserver(asuna);\n        npc.registerObserver(shino);\n        npc.setMessage(\"第19层boss\");\n        System.out.println(\"----------------------------------------------\");\n        System.out.println(\"Shino掉线\");\n        npc.removeObserver(shino);\n        npc.setMessage(\"第23层boss\");\n    }\n}\n```\n控制台输出：\n```\nNPC发布新任务： 第19层boss\nKirito 收到任务 第19层boss\nAsuna 收到任务 第19层boss\nShino 收到任务 第19层boss\n----------------------------------------------\nShino掉线\nNPC发布新任务： 第23层boss\nKirito 收到任务 第23层boss\nAsuna 收到任务 第23层boss\n```\n\n#### 总结\n- 这个模式是松偶合的。改变主题或观察者中的一方，另一方不会受到影像。\n- JDK中也有自带的观察者模式。但是被观察者是一个类而不是接口，限制了它的复用能力。\n- 在JavaBean和Swing中也可以看到观察者模式的影子。","source":"_posts/常用设计模式.md","raw":"---\ntitle: 常用设计模式\ndate: 2019-3-28 11:10:51\ntags: [面试,设计模式]\ncategories: [面试,设计模式]\ndescription: 面试中可能会问到的设计模式，自己写的范例\n---\n\n\n\n\n# 常用设计模式（java）\n[23种常用设计模式的UML类图](https://www.cnblogs.com/zytrue/p/8484806.html)\n\n## 1. 创建型\n\n### 1.1 三种工厂模式\n\n#### 1. 简单工厂模式\n参考：\n[java 三种工厂模式](https://www.cnblogs.com/zailushang1996/p/8601808.html)\n\n简单工厂模式又 叫静态工厂方法模式（Static FactoryMethod Pattern），是通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。\n\n##### 代码示例：\n一个抽象的武器接口：\n\n```java\npublic interface ISword{\n    void swordSkill();\n}\n```\n\n一个具体产品类，武器阐释者：\n\n```java\npublic class ChanShiZhe implements ISword{\n    @Override\n    public void swordSkill(){\n        System.out.println(\"阐释者——星爆弃疗斩\");\n    }\n}\n```\n\n另一个具体产品类，武器闪烁之光：\n```java\npublic class ShanShuoZhiGuang implements ISword{\n    @Override\n    public void swordSkill(){\n        System.out.println(\"闪烁之光——圣母圣咏\");\n    }\n}\n```\n\n简单工厂类：\n```java\npublic class SimplySwordFactory{\n    public static final int TYPE_CSZ = 1;\n    public static final int TYPE_SSZG = 2;\n    \n    public static ISword createSword(int type){\n        switch(type){\n            case TYPE_CSZ: \n                return new ChanShiZhe();\n            case TYPE_SSZG:\n                return new ShanShuoZhiGuang();\n            default:\n                return new ChanShiZhe();\n        }\n    }\n}\n```\n\n测试：\n```java\npublic class SimpleFactoryTest {\n    public static void main(String[] args){\n        ISword sword = SimplySwordFactory.createSword(SimplySwordFactory.TYPE_CSZ);\n        sword.swordSkill();\n    }\n}\n```\n##### 总结\n特点：\n- 它是一个具体的类，非接口 抽象类。有一个重要的create()方法，利用if或者 switch创建产品并返回。\n- create()方法通常是静态的，所以也称之为静态工厂。\n缺点：\n- 扩展性差（我想增加一种武器，除了新增一个武器产品类，还需要修改工厂类方法）\n- 不同的产品需要不同额外参数的时候 不支持。\n\n#### 2. 工厂方法\n![FactoryMethod](/image/interview_prep/FactoryMethod.png)\n\n提供一个用于创建对象的接口(工厂接口)，让其实现类(工厂实现类)决定实例化哪一个类(产品类)，并且由该实现类创建对应类的实例。\n\n步骤：\n1. 创建抽象工厂类，定义具体工厂的公共接口；\n2. 创建抽象产品类 ，定义具体产品的公共接口；\n3. 创建具体产品类（继承抽象产品类） & 定义生产的具体产品；\n4. 创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；\n5. 外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例\n\n##### 代码示例：\n工厂接口：\n```java\npublic interface Factory {\n    ISword createSword();\n}\n```\n其实现类（获取具体产品）:\n```java\npublic class ChanShiZheFactory implements Factory{\n    @Override\n    public ISword createSword(){\n        return new ChanShiZhe();\n    }\n}\n```\n\n```java\npublic class ShanShuoZhiGuangFactory implements Factory{\n    @Override\n    public ISword createSword(){\n        return new ShanShuoZhiGuang();\n    }\n}\n```\n测试：\n```java\npublic class FactoryTest {\n    public static void main(String[] args){\n        ISword csz = new ChanShiZheFactory().createSword();\n        csz.swordSkill();\n        ISword sszg = new ShanShuoZhiGuangFactory().createSword();\n        sszg.swordSkill();\n    }\n}\n```\n\n##### 总结\n优点：\n- 更符合开-闭原则：新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可\n- 符合单一职责原则：每个具体工厂类只负责创建对应的产品\n- 不使用静态工厂方法，可以形成基于继承的等级结构\n\n缺点：\n- 添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；\n- 由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。\n- 虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类\n- 一个具体工厂只能创建一种具体产品\n\n\n#### 3. 抽象工厂模式\n参考：\n[Java设计模式之抽象工厂模式](https://www.cnblogs.com/yeahwell/p/4727202.html)\n\n![AbstractFactory](/image/interview_prep/AbstractFactory.png)\n\n当每个抽象产品都有多于一个的具体子类的时候（空调有型号A和B两种，发动机也有型号A和B两种），工厂角色怎么知道实例化哪一个子类呢？比如每个抽象产品角色都有两个具体产品（产品空调有两个具体产品空调A和空调B）。抽象工厂模式提供两个具体工厂角色（宝马320系列工厂和宝马230系列工厂），分别对应于这两个具体产品角色，每一个具体工厂角色只负责某一个产品角色的实例化。每一个具体工厂类只负责创建抽象产品的某一个具体子类的实例。\n\n##### 代码示例：\n产品类：\n\n```java\n// 武器及型号\npublic interface Sword {\n    void equip();\n}\n\npublic class SwordA implements Sword{\n    public void equip(){\n        System.out.println(\"装备-->双刀\");\n    }\n}\npublic class SwordB implements Sword{\n    public void equip(){\n        System.out.println(\"装备-->细剑\");\n    }\n}\n\n//技能及型号\npublic interface Skill {\n    void release();\n} \npublic class SkillA implements Skill{\n    public void release(){\n        System.out.println(\"发动-->双刀流\");\n    }\n}\npublic class SkillB implements Skill{\n    public void release(){\n        System.out.println(\"发动-->圣母圣咏\");\n    }\n}\n```\n创建工厂类\n\n```java\n//创建工厂的接口  \npublic interface AbstractFactory {  \n    //装备武器\n    public Sword createSword();\n    //装备技能 \n    public Skill createSkill(); \n}  \n\n\n//为桐人装备  \npublic class Factorykirito implements AbstractFactory{  \n      \n    @Override  \n    public Sword createSword() {    \n        return new SwordA();  \n    }  \n    @Override  \n    public Skill createSkill() {  \n        return new SkillA();  \n    }  \n}  \n//为亚丝娜装备 \npublic class FactoryAsuna implements AbstractFactory {  \n  \n     @Override  \n    public Sword createSword() {    \n        return new SwordB();  \n    }  \n    @Override  \n    public Skill createSkill() {  \n        return new SkillB();  \n    }  \n} \n```\n\n测试类:\n```java\npublic class FactoryTest  {  \n    public static void main(String[] args){  \n        //生产桐人\n        Factorykirito factorykirito = new Factorykirito();\n        System.out.println(\"这是桐人\");\n        factorykirito.createSword().equip();\n        factorykirito.createSkill().release();\n\n        //生产亚丝娜\n        FactoryAsuna factoryAsuna = new FactoryAsuna();\n        System.out.println(\"这是亚丝娜\");\n        factoryAsuna.createSword().equip();\n        factoryAsuna.createSkill().release(); \n    }\n}\n```\n控制台输出：\n```\n这是桐人\n装备-->双刀\n发动-->双刀流\n这是亚丝娜\n装备-->细剑\n发动-->圣母圣咏\n```\n\n\n### 1.2. 七种单例模式\n参考： \n[Java 单例模式](https://www.cnblogs.com/zhaoyanjun/p/5652930.html)\n\n为什么使用单例：\n- 在内存中只有一个对象，节省内存空间。避免频繁的创建销毁对象，可以提高性能。避免对共享资源的多重占用。可以全局访问。\n- 确保一个类只有一个实例，自行实例化并向系统提供这个实例。\n\n单例需要注意的问题：\n- 线程安全问题\n- 资源使用问题\n\n#### 1. 饿汉式\n\n```java\npublic class Singleton{\n    private static Singleton instance = new Singleton();\n    \n    private Singleton(){\n        \n    }\n    \n    public static Singleton getInstance(){\n        return instance;\n    }\n}\n```\n- 优点：未调用getInstance()时，实例已经创建，天生线程安全。\n- 缺点：如果一直没有调用getInstance()，但是实例已经存在，资源浪费。\n\n#### 2. 懒汉式\n\n```java\npublic class Singleton{\n    private static Singleton instance;\n    \n    private Singleton(){}\n    \n    public static Singleton getInstance(){\n        if(instance == null){\n            instance = new Singleton();\n        }\n        return intance;\n    }\n}\n```\n- 优点：方法被调用时才创建实例，节省资源。\n- 缺点：线程不安全。\n\n\n<font color='red'>只有单线程才是单例，多线程可能出现多个单例。</font>\n\n#### 3. synchronized加锁同步\n\n```java\npublic class Singleton(){\n    private static Singleton instance;\n    \n    private Singleton(){}\n    \n    public synchronized static Singleton getInstance(){\n        if(instance == null){\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n- 优点：同时满足单线程、多线程。\n- 缺点：性能差。\n\n#### 4. 双重校验\n\n```java\npublic class Singleton(){\n    private static Singleton instance;\n    \n    private Singleton(){}\n    \n    public static Singleton getInstance(){\n        if(instance == null){\n            synchronized(Singleton.class){\n                if(instance == null){\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n- 优点：同时满足单线程、多线程；性能问题得到优化。\n- 缺点：第一次加载慢，由于java内存模型一些原因偶尔失败。\n\n#### 5. volatile关键字\n\n\n```java\npublic class Singleton{\n    private static volatile instance;\n    \n    private Singleton(){}\n    \n    public static Singleton getInstance(){\n        if(instance = null){\n            synchronized(Singleton.class){\n                if(instance == null){\n                    instance = new Singleton();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n<font color='red'>volatile关键字可以解决指令重排。</font>如果没有volatile，两个线程AB，都是第一次调用方法，线程A先执行new，该构造方法是非原子性操作，编译后产生多条字节码指令，由于指令重排，可能会先执行赋值操作，即在内存中开辟空间，然后返回内存的引用，之后instance不再为空，但是实际初始化并未完成，此时线程B进入就会看到不为空但是不完整（初始化未完成）的Singleton对象，所以需要加入volatile关键字，禁止指令重排序优化，从而安全的实现单例。\n\n#### 6. 静态内部类\n\n静态内部类由JVM来保证线程安全。\n\n```java\npublic class Singleton{\n    private Singleton(){}\n    \n    private static class SingletonHolder{\n        private static Singleton instance = new Singleton();\n    }\n    \n    public static Singleton getInstance(){\n        return SingletonsHolder.instance;\n    }\n}\n```\n- 优点：资源利用率高，不执行getInstance()不被实例，可以执行该类其他静态方法。\n\n#### 7. 枚举类实现单例\n\n```\n使用枚举实现单例的方法虽然还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。\n——Joshua Bloch《effective java》\n```\n<font color='red'>枚举天生线程安全，且可避免反序列化破坏单例。</font>\n\nmore detail：[为什么我强烈建议大家使用枚举来实现单例](https://blog.csdn.net/moakun/article/details/80688851)\n```java\npublic enum Singleton{\n    INSTANCE;  \n    public void whateverMethod() {  \n    }  \n}\n```\n\n## 2. 结构型\n\n### 2.1. 适配器模式\n\n![Adapter](/image/interview_prep/Adapter.png)\n\n场景：结城明日奈想试试双刀流技能（<font color='red'>一个类的接口</font>）好不好玩，但是亚丝娜这个账号（<font color='red'>客户端所期待的接口</font>）没办法直接用双刀流（<font color='red'>接口不匹配的两个类无法一起工作</font>），只能借助适配器。\n\n#### 1. 类适配器\n参考：[Java设计模式之《适配器模式》及应用场景](https://www.cnblogs.com/V1haoge/p/6479118.html)\n\n原理：通过继承来实现适配器功能。\n\n当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后再继承接口B的实现类BB，这样我们可以在适配器P中访问接口B的方法了，这时我们在适配器P中的接口A方法中直接引用BB中的合适方法，这样就完成了一个简单的类适配器。\n\n```java\n// 亚丝娜账号\npublic interface IAsuna{\n    void login();\n}\n// 双刀流\npublic interface IShuangDaoSkil{\n    void releaseSkill();\n}\n// 双刀流实现类\npublic class ShuangDaoSkil implements IShuangDaoSkil{\n    @Override \n    public void releaseSkill(){\n        System.out.println(\"发动双刀流！\");\n    }\n}\n// 适配器\npublic class Adapter extends ShuangDaoSkil implements IAsuna{\n    @Override \n    public void login(){\n        releaseSkill();\n    }\n}\n\npublic class client{\n    public static void main(String[] args) {\n        IAsuna asuna = new Adapter();\n        asuna.login();\n    }\n} \n```\n#### 2. 对象适配器模式\n原理：通过组合来实现适配器功能。\n\n当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后在适配器P中定义私有变量C（对象）（B接口指向变量名），再定义一个带参数的构造器用来为对象C赋值，再在A接口的方法实现中使用对象C调用其来源于B接口的方法。\n\n\n```java\n// 亚丝娜账号\npublic interface IAsuna{\n    void login();\n}\n// 双刀流\npublic interface IShuangDaoSkil{\n    void releaseSkill();\n}\n// 双刀流实现类\npublic class ShuangDaoSkil implements IShuangDaoSkil{\n    @Override \n    public void releaseSkill(){\n        System.out.println(\"发动双刀流！\");\n    }\n}\n// 适配器\npublic class Adapter implements IAsuna {\n    private ShuangDaoSkil shuangDaoSkill;\n    public Adapter(ShuangDaoSkil shuangDaoSkill){\n        this.shuangDaoSkill = shuangDaoSkill;\n    }\n    @Override\n    public void login(){\n        shuangDaoSkill.releaseSkill();\n    }\n}\npublic class client{\n    public static void main(String[] args) {\n        IAsuna asuna = new Adapter(new ShuangDaoSkil());\n        asuna.login();\n    }\n} \n```\n\n#### 3. 接口适配器模式\n\n原理：通过抽象类来实现适配，这种适配稍别于上面所述的适配。\n\n当存在这样一个接口，其中定义了N多的方法，而我们现在却只想使用其中的一个到几个方法，如果我们直接实现接口，那么我们要对所有的方法进行实现，哪怕我们仅仅是对不需要的方法进行置空（只写一对大括号，不做具体方法实现）也会导致这个类变得臃肿，调用也不方便，这时我们可以使用一个抽象类作为中间件，即适配器，用这个抽象类实现接口，而在抽象类中所有的方法都进行置空，那么我们在创建抽象类的继承类，而且重写我们需要使用的那几个方法即可。\n\n```java\n// 目标接口\npublic interface ISkill{\n    void skill1();\n    void skill2();\n    void skill3();\n    void skill4();\n    void skill5();\n}\n// 适配器\npublic abstract Adapter implements ISkill{\n    public void skill1();\n    public void skill2();\n    public void skill3();\n    public void skill4();\n    public void skill5();\n}\n// 适配器实现类\npublic class Skill extends Adapter{\n    public void skill1();\n    public void skill2();\n}\npublic class client{\n    public static void main(String[] args) {\n        Skill skill = new Skill;\n        skill.skill1();\n        skill.skill2();\n    }\n} \n```\n#### 4. 使用场景\n\n类适配器与对象适配器的使用场景一致，仅仅是实现手段稍有区别，二者主要用于如下场景：\n\n- 想要使用一个已经存在的类，但是它却不符合现有的接口规范，导致无法直接去访问，这时创建一个适配器就能间接去访问这个类中的方法。\n- 我们有一个类，想将其设计为可重用的类（可被多处访问），我们可以创建适配器来将这个类来适配其他没有提供合适接口的类。\n\n以上两个场景其实就是从两个角度来描述一类问题，那就是要访问的方法不在合适的接口里，一个从接口出发（被访问），一个从访问出发（主动访问）。\n\n接口适配器使用场景：\n\n想要使用接口中的某个或某些方法，但是接口中有太多方法，我们要使用时必须实现接口并实现其中的所有方法，可以使用抽象类来实现接口，并不对方法进行实现（仅置空），然后我们再继承这个抽象类来通过重写想用的方法的方式来实现。这个抽象类就是适配器。\n\n### 2.2. 装饰器\n\n参考：[JAVA装饰器模式](https://www.cnblogs.com/qiumingcheng/p/5219631.html)、\n[Java设计模式之装饰者模式](https://www.cnblogs.com/lzb1096101803/p/4425483.html)\n\n![Decorator](/image/interview_prep/Decorator.png)\n\nDecorator装饰器，顾名思义，就是动态地给一个对象添加一些额外的职责，就好比为房子进行装修一样。因此，装饰器模式具有如下的特征：\n- 它必须具有一个装饰的对象。\n- 它必须拥有与被装饰对象相同的接口。\n- 它可以给被装饰对象添加额外的功能。\n\n用一句话总结就是：<font color='red'>保持接口，增强性能。</font>\n\n实际上是基于对象的适配器模式的一种变种。它与对象的适配器模式的异同点如下:\n- 相同点：都拥有一个目标对象。\n- 不同点：适配器模式需要实现另外一个接口，而装饰器模式必须实现该对象的接口。\n\n要实现装饰者模式,注意一下几点内容:\n1. 装饰者类要实现真实类<font color='red'>同样的接口</font>\n2. 装饰者类内有一个<font color='red'>真实对象的引用</font>(可以通过装饰者类的构造器传入)\n3. 装饰类对象在主类中接受请求,将<font color='red'>请求发送给真实的对象</font>(相当于已经将引用传递到了装饰类的真实对象)\n4. 装饰者可以在传入真实对象后,<font color='red'>增加一些附加功能</font>(因为装饰对象和真实对象都有同样的方法,装饰对象可以添加一定操作在调用真实对象的方法,或者先调用真实对象的方法,再添加自己的方法)\n5. 不用继承\n\n来个实例 桐人砍怪：\n\n```java\n// 砍怪的接口\npublic interface IKirito{\n    void takeSword();\n    void releaseSkill();\n    void getAward();\n    void operation();\n}\n// 正常砍怪的实现类\npublic class Kirito implements IKirito{\n    @Override\n    public void takeSword(){\n        System.out.println(\"取武器\");\n    }\n    @Override\n    public void releaseSkill(){\n        System.out.println(\"放技能\");\n    }\n    @Override\n    public void getAward(){\n        System.out.println(\"捡装备\");\n    }\n    @Override\n    public void operation() {\n        takeSword();\n        releaseSkill();\n        getAward();\n    }\n}\n// 定义出需要添加附加功能的抽象类\npublic abstract class AbstractKirito implements IKirito{\n    private IKirito kirito;\n    public AbstractKirito (IKirito kirito){\n        super();\n        this.kirito = kirito;\n    }\n\n    @Override\n    public void takeSword(){\n        this.kirito.takeSword();\n    }\n    @Override\n    public void releaseSkill(){\n        this.kirito.releaseSkill();\n    }\n    @Override\n    public void getAward(){\n        this.kirito.getAward();\n    }\n    @Override\n    public void operation() {\n        takeSword();\n        releaseSkill();\n        getAward();\n    }\n}\n// 继承Abstarct类,所以可以有选择的覆盖正常生产馒头的方法,并添加原有方法原来的信息,同时也可以添加自己的方法    \n//装饰者模式中这里最关键, 对应上述的第1个注意点:装饰者类要实现真实类同样的接口\n\npublic class WisdomDecorator extends AbstractKirito{\n    public WisdomDecorator(IKirito kirito){\n        super(kirito);\n    }\n\n    public void addWisdomBuff(){\n        System.out.println(\"加智力buff\");\n    }\n\n    @Override\n    public void releaseSkill() {\n        this.addWisdomBuff();\n        super.releaseSkill();\n    }\n}\n\npublic class StrengthDecorator extends AbstractKirito{\n    public StrengthDecorator(IKirito kirito){\n        super(kirito);\n    }\n\n    public void addStrenthBuff(){\n        System.out.println(\"加力量buff\");\n    }\n\n    @Override\n    public void releaseSkill() {\n        this.addStrenthBuff();\n        super.releaseSkill();\n    }\n}\npublic class AgilityDecorator extends AbstractKirito{\n    public AgilityDecorator(IKirito kirito){\n        super(kirito);\n    }\n\n    public void addAgilityBuff(){\n        System.out.println(\"加敏捷buff\");\n    }\n\n    @Override\n    public void releaseSkill() {\n        this.addAgilityBuff();\n        super.releaseSkill();\n    }\n}\n\npublic class client{\n    public static void main(String[] args) {\n        IKirito kirito = new Kirito();\n        kirito = new WisdomDecorator(kirito);\n        kirito = new StrengthDecorator(kirito);\n        kirito = new AgilityDecorator(kirito);\n        kirito.operation();\n    }\n}\n```\n输出：\n```\n取武器\n加敏捷buff\n加力量buff\n加智力buff\n放技能\n捡装备\n```\n\n装饰者模式中的4个角色\n- 被装饰者抽象Component:是一个接口或者抽象类,定义最核心的对象,这个类是装饰者的基类,例如IKirito接口\n- 被装饰者具体实现ConcreteComponent:这是Component接口或抽象类的实现,例如本例中的Kirito\n- 装饰者Decorator:一般是抽象类,实现Component,它里面必然有一个指向Component的引用,例如本例中AbstractKirito\n- 装饰者实现ConcreteDecorator1和ConcreteDecorator2:用来装饰最基本的类,如本例中的AgilityDecorator\n\n\n### 2.3 代理模式\n参考：[理解java的三种代理模式](https://www.cnblogs.com/boboxing/p/8126046.html)\n\n![Proxy](/image/interview_prep/Proxy.png)\n\n代理模式是一种设计模式，简单说即是在不改变源码的情况下，实现对目标对象的功能扩展。\n\n#### 1. 静态代理\n\n\n```java\npublic interface IPlayer{\n    void play();\n}\n\npublic class Player implements IPlayer{\n    @Override\n    public void play(){\n        System.out.println(\"进行游戏\");\n    }\n}\n\npublic class PlayerProxy implements IPlayer{\n    private IPlayer player;\n    \n    public PlayerProxy(IPlayer player){\n        this.player = player;\n    }\n    @Override\n    public void play(){\n        System.out.println(\"寻找伙伴\");\n        player.play();\n    }\n}\n\npublic class Test{\n    public static void main(String[] args) {\n        IPlayer player = new Player();\n        PlayerProxy proxy = new PlayerProxy(player);\n        proxy.play();\n    }\n}\n```\n\n**总结**：其实这里做的事情无非就是，创建一个代理类SingerProxy，继承了ISinger接口并实现了其中的方法。只不过这种实现特意包含了目标对象的方法，正是这种特征使得看起来像是“扩展”了目标对象的方法。假使代理对象中只是简单地对sing方法做了另一种实现而没有包含目标对象的方法，也就不能算作代理模式了。所以这里的包含是关键。\n\n**缺点**：这种实现方式很直观也很简单，但其缺点是代理对象必须提前写出，如果接口层发生了变化，代理对象的代码也要进行维护。如果能在运行时动态地写出代理对象，不但减少了一大批代理类的代码，也少了不断维护的烦恼，不过运行时的效率必定受到影响。这种方式就是接下来的动态代理。\n\n#### 2. 动态代理（JDK代理）\n跟静态代理的前提一样，依然是对Singer对象进行扩展\n\n```java\npublic interface IPlayer{\n    void play();\n}\n\npublic class Player implements IPlayer{\n    @Override\n    public void play(){\n        System.out.println(\"进行游戏\");\n    }\n}\n```\n\n调用Proxy类的静态方法newProxyInstance即可，该方法会返回代理类对象\n\n```java\npublic class Test{\n    public static void main(String[] args) {\n        // 1. 创建实例\n        Player target = new Player();\n        IPlayer proxy  = (IPlayer) Proxy.newProxyInstance(\n                target.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                new InvocationHandler() {\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                        // 2. 扩展1\n                        System.out.println(\"寻找伙伴\");\n                        //执行目标对象方法\n                        Object returnValue = method.invoke(target, args);\n                        // 3. 扩展2\n                        System.out.println(\"很开心\");\n                        return returnValue;\n                    }\n                });\n        // 4. 目标对象的方法\n        proxy.play();\n    }\n}\n```\n**总结**：以上代码只有1234部分是需要自己写出，其余部分全都是固定代码。由于java封装了newProxyInstance这个方法的实现细节，所以使用起来才能这么方便。\n**缺点**：可以看出静态代理和JDK代理有一个共同的缺点，就是目标对象必须实现一个或多个接口，假如没有，则可以使用Cglib代理。\n\n#### 3. Cglib代理\n前提条件：\n\n- 需要引入cglib的jar文件，由于Spring的核心包中已经包括了Cglib功能，所以也可以直接引入spring-core-3.2.5.jar\n- 目标类不能为final\n- 目标对象的方法如果为final/static，那么就不会被拦截，即不会执行目标对象额外的业务方法\n\n```java\npublic class Player {\n    public void play(){\n        System.out.println(\"进行游戏\");\n    }\n}\n```\n\n\n```java\n/**\n * Cglib子类代理工厂\n */\npublic class ProxyFactory implements MethodInterceptor{\n    // 维护目标对象\n    private Object target;\n\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    // 给目标对象创建一个代理对象\n    public Object getProxyInstance(){\n        //1.工具类\n        Enhancer en = new Enhancer();\n        //2.设置父类\n        en.setSuperclass(target.getClass());\n        //3.设置回调函数\n        en.setCallback(this);\n        //4.创建子类(代理对象)\n        return en.create();\n    }\n\n    @Override\n    public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n        // 步骤1\n        System.out.println(\"寻找伙伴\");\n        //执行目标对象的方法\n        Object returnValue = method.invoke(target, args);\n        // 步骤2\n        System.out.println(\"很开心\");\n        return returnValue;\n    }\n}\n\n\n/**\n * 测试类\n */\npublic class Test{\n    public static void main(String[] args){\n        //目标对象\n        Player target = new Player();\n        //代理对象\n        Player proxy = (Player)new ProxyFactory(target).getProxyInstance();\n        //执行代理对象的方法\n        proxy.play();\n    }\n}\n```\n\n这里的代码也非常固定，只有步骤1、2是需要自己写出.\n\n**总结**：三种代理模式各有优缺点和相应的适用范围，主要看目标对象是否实现了接口。\n\n以Spring框架所选择的代理模式举例：在Spring的AOP编程中：\n- 如果加入容器的目标对象有实现接口，用JDK代理\n- 如果目标对象没有实现接口，用Cglib代理\n\n## 3. 行为型\n\n### 3.1 模板方法模式\n参考：[java设计模式之模板方法模式](https://www.cnblogs.com/liaoweipeng/p/5790395.html)\n\n![TemplateMethod](/image/interview_prep/TemplateMethod.png)\n\n定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<font color = 'red'>通俗的说的就是有很多相同的步骤的，在某一些地方可能有一些差别适合于这种模式，如大话设计模式中说到的考试场景中，每个人的试卷都是一样的，只有答案不一样。这种场景就适合于模板方法模式。</font>\n\n\n```java\n// 用抽象基类定义算法框架\npublic abstract class PlayGame{\n    /*\n     * 模板方法 封装了所有子类所遵循的算法框架\n     */\n    public final void play(){\n        login();\n        if(isPlyerWantsBuff()){\n            addBuff();\n        }\n        releaseSkill();\n        getAward();\n    }\n    // 因为login和getAward对所有子类是共同的行为，所以没必要向子类过多开放，所以方法定义为private，这样我们在进行子类编码时可以减少复杂度。\n    // 这样不需要关注细枝末节，我们只需要关注我们特定业务的实现，这就是模板方法模式的好处。可以封装变与不变，将不变的固化在高层，隐藏其细节。\n    private void login(){\n        System.out.println(\"登陆游戏\");\n    }\n    private void getAward(){\n        System.out.println(\"捡装备\");\n    }\n    /*\n     * Hook 钩子函数,提供一个空的或者默认的实现 子类重写该方法，可以自行决定是否挂钩以及如何挂钩\n     */\n    protected boolean isPlyerWantsBuff(){\n        return true;\n    }\n    /*\n     * addBuff()和releaseSkill()这两个方法我们不知道它们在算法框架中的具体实现，因此定义为抽象方法，\n     * 我们用protected进行修饰， 在子类中可见便于进行重写。\n     */\n    protected abstract void addBuff();\n    protected abstract void releaseSkill();\n\n}\n// 具体子类延迟实现步骤\n/**\n * 提供制备咖啡的具体实现子类。 具体子类实现延迟步骤，满足特定的业务需求。\n *\n *\n */\npublic class AsunaPlayGame extends PlayGame{\n    @Override\n    protected void addBuff(){\n        System.out.println(\"加敏捷Buff\");\n    }\n    @Override\n    protected void releaseSkill(){\n        System.out.println(\"释放圣母圣咏\");\n    }\n}\npublic class KiritoPlayGame extends PlayGame{\n    @Override\n    protected boolean isPlyerWantsBuff(){\n        return false;\n    }\n    @Override\n    protected void addBuff(){\n        System.out.println(\"加敏捷Buff\");\n    }\n    @Override\n    protected void releaseSkill(){\n        System.out.println(\"释放星爆弃疗斩\");\n    }\n}\n// 测试类\npublic class client{\n    public static void main(String[] args) {\n        System.out.println(\"Kirito 开始游戏\");\n        PlayGame kirito = new KiritoPlayGame();\n        kirito.play();\n\n        System.out.println(\"\\n*********************************\");\n        System.out.println(\"Asuna 开始游戏\");\n        PlayGame asuna = new AsunaPlayGame();\n        asuna.play();\n    }\n}\n\n```\n\n控制台输出：\n```\nKirito 开始游戏\n登陆游戏\n释放星爆弃疗斩\n捡装备\n\n*********************************\nAsuna 开始游戏\n登陆游戏\n加敏捷Buff\n释放圣母圣咏\n捡装备\n```\n\n模板方法模式适用场景：\n- 一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。\n- 各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的- 操作的模板方法来替换这些不同的代码。\n- 控制子类扩展。模板方法只在特定点调用“hook”操作，这样就只允许在这些点进行扩展。\n\n### 3.2 观察者模式\n参考：[JAVA设计模式之观察者模式](https://www.cnblogs.com/luohanguo/p/7825656.html)\n\n![Observer](/image/interview_prep/Observer.png)\n\n定义：在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。\n解释：其实就是发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。\n\n- **抽象被观察者角色**：也就是一个抽象主题，它把所有对观察者对象的引用保存在一个集合中，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。\n- **抽象观察者角色**：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。\n- **具体被观察者角色**：也就是一个具体的主题，在集体主题的内部状态改变时，所有登记过的观察者发出通知。\n- **具体观察者角色**：实现抽象观察者角色所需要的更新接口，一边使本身的状态与制图的状态相协调。\n\n#### 场景\n有一个NPC务，不定时发布一些任务，在线玩家就可以收到推送消息，不在线就收不到推送消息。\n\n```java\n/***\n * 抽象被观察者接口\n * 声明了添加、删除、通知观察者方法\n *\n */\npublic interface Observerable{\n    public void registerObserver(Observer o);\n    public void removeObserver(Observer o);\n    public void notifyObserver();\n}\n/***\n * 抽象观察者\n * 定义了一个update()方法，当被观察者调用notifyObservers()方法时，观察者的update()方法会被回调。\n *\n */\npublic interface Observer {\n    public void update(String message);\n}\n\n/**\n * 被观察者，也就是微信公众号服务\n * 实现了Observerable接口，对Observerable接口的三个方法进行了具体实现\n */\npublic class NPC implements Observerable{\n    private List<Observer> list;\n    private String message;\n\n    public NPC(){\n        list = new ArrayList<>();\n    }\n    @Override\n    public void registerObserver(Observer o){\n        list.add(o);\n    }\n    @Override\n    public void removeObserver(Observer o){\n        if(!list.isEmpty()){\n            list.remove(o);\n        }\n    }\n    @Override\n    public void notifyObserver(){\n        for(Observer o : list){\n            o.update(message);\n        }\n    }\n    public void setMessage(String message){\n        this.message = message;\n        System.out.println(\"NPC发布新任务： \" + message);\n        notifyObserver();\n    }\n}\n/**\n * 观察者\n * 实现了update方法\n */\npublic class Player implements Observer{\n    private String name;\n    private String message;\n    public Player(String name){\n        this.name = name;\n    }\n    @Override\n    public void update(String message){\n        this.message = message;\n        receive(message);\n    }\n    public void receive(String message){\n        System.out.println(this.name + \" 收到任务 \" + message);\n    }\n}\n// 测试类\npublic class client{\n    public static void main(String[] args) {\n        NPC npc = new NPC();\n        Player kirito = new Player(\"Kirito\");\n        Player asuna = new Player(\"Asuna\");\n        Player shino = new Player(\"Shino\");\n        npc.registerObserver(kirito);\n        npc.registerObserver(asuna);\n        npc.registerObserver(shino);\n        npc.setMessage(\"第19层boss\");\n        System.out.println(\"----------------------------------------------\");\n        System.out.println(\"Shino掉线\");\n        npc.removeObserver(shino);\n        npc.setMessage(\"第23层boss\");\n    }\n}\n```\n控制台输出：\n```\nNPC发布新任务： 第19层boss\nKirito 收到任务 第19层boss\nAsuna 收到任务 第19层boss\nShino 收到任务 第19层boss\n----------------------------------------------\nShino掉线\nNPC发布新任务： 第23层boss\nKirito 收到任务 第23层boss\nAsuna 收到任务 第23层boss\n```\n\n#### 总结\n- 这个模式是松偶合的。改变主题或观察者中的一方，另一方不会受到影像。\n- JDK中也有自带的观察者模式。但是被观察者是一个类而不是接口，限制了它的复用能力。\n- 在JavaBean和Swing中也可以看到观察者模式的影子。","slug":"常用设计模式","published":1,"updated":"2025-02-22T18:52:19.825Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8aw001lv00131wee50f","content":"<h1 id=\"常用设计模式（java）\"><a href=\"#常用设计模式（java）\" class=\"headerlink\" title=\"常用设计模式（java）\"></a>常用设计模式（java）</h1><p><a href=\"https://www.cnblogs.com/zytrue/p/8484806.html\">23种常用设计模式的UML类图</a></p>\n<h2 id=\"1-创建型\"><a href=\"#1-创建型\" class=\"headerlink\" title=\"1. 创建型\"></a>1. 创建型</h2><h3 id=\"1-1-三种工厂模式\"><a href=\"#1-1-三种工厂模式\" class=\"headerlink\" title=\"1.1 三种工厂模式\"></a>1.1 三种工厂模式</h3><h4 id=\"1-简单工厂模式\"><a href=\"#1-简单工厂模式\" class=\"headerlink\" title=\"1. 简单工厂模式\"></a>1. 简单工厂模式</h4><p>参考：<br><a href=\"https://www.cnblogs.com/zailushang1996/p/8601808.html\">java 三种工厂模式</a></p>\n<p>简单工厂模式又 叫静态工厂方法模式（Static FactoryMethod Pattern），是通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<h5 id=\"代码示例：\"><a href=\"#代码示例：\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h5><p>一个抽象的武器接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ISword</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">swordSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个具体产品类，武器阐释者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChanShiZhe</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ISword</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swordSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阐释者——星爆弃疗斩&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个具体产品类，武器闪烁之光：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShanShuoZhiGuang</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ISword</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swordSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;闪烁之光——圣母圣咏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单工厂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimplySwordFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TYPE_CSZ</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TYPE_SSZG</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ISword <span class=\"title function_\">createSword</span><span class=\"params\">(<span class=\"type\">int</span> type)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> TYPE_CSZ: </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChanShiZhe</span>();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> TYPE_SSZG:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShanShuoZhiGuang</span>();</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChanShiZhe</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleFactoryTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ISword</span> <span class=\"variable\">sword</span> <span class=\"operator\">=</span> SimplySwordFactory.createSword(SimplySwordFactory.TYPE_CSZ);</span><br><span class=\"line\">        sword.swordSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>特点：</p>\n<ul>\n<li>它是一个具体的类，非接口 抽象类。有一个重要的create()方法，利用if或者 switch创建产品并返回。</li>\n<li>create()方法通常是静态的，所以也称之为静态工厂。<br>缺点：</li>\n<li>扩展性差（我想增加一种武器，除了新增一个武器产品类，还需要修改工厂类方法）</li>\n<li>不同的产品需要不同额外参数的时候 不支持。</li>\n</ul>\n<h4 id=\"2-工厂方法\"><a href=\"#2-工厂方法\" class=\"headerlink\" title=\"2. 工厂方法\"></a>2. 工厂方法</h4><p><img src=\"/image/interview_prep/FactoryMethod.png\" alt=\"FactoryMethod\"></p>\n<p>提供一个用于创建对象的接口(工厂接口)，让其实现类(工厂实现类)决定实例化哪一个类(产品类)，并且由该实现类创建对应类的实例。</p>\n<p>步骤：</p>\n<ol>\n<li>创建抽象工厂类，定义具体工厂的公共接口；</li>\n<li>创建抽象产品类 ，定义具体产品的公共接口；</li>\n<li>创建具体产品类（继承抽象产品类） &amp; 定义生产的具体产品；</li>\n<li>创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；</li>\n<li>外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例</li>\n</ol>\n<h5 id=\"代码示例：-1\"><a href=\"#代码示例：-1\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h5><p>工厂接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Factory</span> &#123;</span><br><span class=\"line\">    ISword <span class=\"title function_\">createSword</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实现类（获取具体产品）:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChanShiZheFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Factory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ISword <span class=\"title function_\">createSword</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChanShiZhe</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShanShuoZhiGuangFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Factory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ISword <span class=\"title function_\">createSword</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShanShuoZhiGuang</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FactoryTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ISword</span> <span class=\"variable\">csz</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChanShiZheFactory</span>().createSword();</span><br><span class=\"line\">        csz.swordSkill();</span><br><span class=\"line\">        <span class=\"type\">ISword</span> <span class=\"variable\">sszg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShanShuoZhiGuangFactory</span>().createSword();</span><br><span class=\"line\">        sszg.swordSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>优点：</p>\n<ul>\n<li>更符合开-闭原则：新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可</li>\n<li>符合单一职责原则：每个具体工厂类只负责创建对应的产品</li>\n<li>不使用静态工厂方法，可以形成基于继承的等级结构</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；</li>\n<li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li>\n<li>虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类</li>\n<li>一个具体工厂只能创建一种具体产品</li>\n</ul>\n<h4 id=\"3-抽象工厂模式\"><a href=\"#3-抽象工厂模式\" class=\"headerlink\" title=\"3. 抽象工厂模式\"></a>3. 抽象工厂模式</h4><p>参考：<br><a href=\"https://www.cnblogs.com/yeahwell/p/4727202.html\">Java设计模式之抽象工厂模式</a></p>\n<p><img src=\"/image/interview_prep/AbstractFactory.png\" alt=\"AbstractFactory\"></p>\n<p>当每个抽象产品都有多于一个的具体子类的时候（空调有型号A和B两种，发动机也有型号A和B两种），工厂角色怎么知道实例化哪一个子类呢？比如每个抽象产品角色都有两个具体产品（产品空调有两个具体产品空调A和空调B）。抽象工厂模式提供两个具体工厂角色（宝马320系列工厂和宝马230系列工厂），分别对应于这两个具体产品角色，每一个具体工厂角色只负责某一个产品角色的实例化。每一个具体工厂类只负责创建抽象产品的某一个具体子类的实例。</p>\n<h5 id=\"代码示例：-2\"><a href=\"#代码示例：-2\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h5><p>产品类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 武器及型号</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Sword</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">equip</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwordA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Sword</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">equip</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;装备--&gt;双刀&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwordB</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Sword</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">equip</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;装备--&gt;细剑&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//技能及型号</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Skill</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">release</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SkillA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Skill</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">release</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发动--&gt;双刀流&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SkillB</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Skill</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">release</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发动--&gt;圣母圣咏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建工厂类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建工厂的接口  </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AbstractFactory</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//装备武器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sword <span class=\"title function_\">createSword</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//装备技能 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Skill <span class=\"title function_\">createSkill</span><span class=\"params\">()</span>; </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为桐人装备  </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factorykirito</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sword <span class=\"title function_\">createSword</span><span class=\"params\">()</span> &#123;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SwordA</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Skill <span class=\"title function_\">createSkill</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SkillA</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//为亚丝娜装备 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FactoryAsuna</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sword <span class=\"title function_\">createSword</span><span class=\"params\">()</span> &#123;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SwordB</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Skill <span class=\"title function_\">createSkill</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SkillB</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FactoryTest</span>  &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//生产桐人</span></span><br><span class=\"line\">        <span class=\"type\">Factorykirito</span> <span class=\"variable\">factorykirito</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Factorykirito</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是桐人&quot;</span>);</span><br><span class=\"line\">        factorykirito.createSword().equip();</span><br><span class=\"line\">        factorykirito.createSkill().release();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//生产亚丝娜</span></span><br><span class=\"line\">        <span class=\"type\">FactoryAsuna</span> <span class=\"variable\">factoryAsuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FactoryAsuna</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是亚丝娜&quot;</span>);</span><br><span class=\"line\">        factoryAsuna.createSword().equip();</span><br><span class=\"line\">        factoryAsuna.createSkill().release(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是桐人</span><br><span class=\"line\">装备--&gt;双刀</span><br><span class=\"line\">发动--&gt;双刀流</span><br><span class=\"line\">这是亚丝娜</span><br><span class=\"line\">装备--&gt;细剑</span><br><span class=\"line\">发动--&gt;圣母圣咏</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"1-2-七种单例模式\"><a href=\"#1-2-七种单例模式\" class=\"headerlink\" title=\"1.2. 七种单例模式\"></a>1.2. 七种单例模式</h3><p>参考：<br><a href=\"https://www.cnblogs.com/zhaoyanjun/p/5652930.html\">Java 单例模式</a></p>\n<p>为什么使用单例：</p>\n<ul>\n<li>在内存中只有一个对象，节省内存空间。避免频繁的创建销毁对象，可以提高性能。避免对共享资源的多重占用。可以全局访问。</li>\n<li>确保一个类只有一个实例，自行实例化并向系统提供这个实例。</li>\n</ul>\n<p>单例需要注意的问题：</p>\n<ul>\n<li>线程安全问题</li>\n<li>资源使用问题</li>\n</ul>\n<h4 id=\"1-饿汉式\"><a href=\"#1-饿汉式\" class=\"headerlink\" title=\"1. 饿汉式\"></a>1. 饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：未调用getInstance()时，实例已经创建，天生线程安全。</li>\n<li>缺点：如果一直没有调用getInstance()，但是实例已经存在，资源浪费。</li>\n</ul>\n<h4 id=\"2-懒汉式\"><a href=\"#2-懒汉式\" class=\"headerlink\" title=\"2. 懒汉式\"></a>2. 懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> intance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：方法被调用时才创建实例，节省资源。</li>\n<li>缺点：线程不安全。</li>\n</ul>\n<p><font color='red'>只有单线程才是单例，多线程可能出现多个单例。</font></p>\n<h4 id=\"3-synchronized加锁同步\"><a href=\"#3-synchronized加锁同步\" class=\"headerlink\" title=\"3. synchronized加锁同步\"></a>3. synchronized加锁同步</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：同时满足单线程、多线程。</li>\n<li>缺点：性能差。</li>\n</ul>\n<h4 id=\"4-双重校验\"><a href=\"#4-双重校验\" class=\"headerlink\" title=\"4. 双重校验\"></a>4. 双重校验</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点：同时满足单线程、多线程；性能问题得到优化。</li>\n<li>缺点：第一次加载慢，由于java内存模型一些原因偶尔失败。</li>\n</ul>\n<h4 id=\"5-volatile关键字\"><a href=\"#5-volatile关键字\" class=\"headerlink\" title=\"5. volatile关键字\"></a>5. volatile关键字</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance = <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font color='red'>volatile关键字可以解决指令重排。</font>如果没有volatile，两个线程AB，都是第一次调用方法，线程A先执行new，该构造方法是非原子性操作，编译后产生多条字节码指令，由于指令重排，可能会先执行赋值操作，即在内存中开辟空间，然后返回内存的引用，之后instance不再为空，但是实际初始化并未完成，此时线程B进入就会看到不为空但是不完整（初始化未完成）的Singleton对象，所以需要加入volatile关键字，禁止指令重排序优化，从而安全的实现单例。</p>\n<h4 id=\"6-静态内部类\"><a href=\"#6-静态内部类\" class=\"headerlink\" title=\"6. 静态内部类\"></a>6. 静态内部类</h4><p>静态内部类由JVM来保证线程安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonsHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：资源利用率高，不执行getInstance()不被实例，可以执行该类其他静态方法。</li>\n</ul>\n<h4 id=\"7-枚举类实现单例\"><a href=\"#7-枚举类实现单例\" class=\"headerlink\" title=\"7. 枚举类实现单例\"></a>7. 枚举类实现单例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用枚举实现单例的方法虽然还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。</span><br><span class=\"line\">——Joshua Bloch《effective java》</span><br></pre></td></tr></table></figure>\n<p><font color='red'>枚举天生线程安全，且可避免反序列化破坏单例。</font></p>\n<p>more detail：<a href=\"https://blog.csdn.net/moakun/article/details/80688851\">为什么我强烈建议大家使用枚举来实现单例</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    INSTANCE;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">whateverMethod</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-结构型\"><a href=\"#2-结构型\" class=\"headerlink\" title=\"2. 结构型\"></a>2. 结构型</h2><h3 id=\"2-1-适配器模式\"><a href=\"#2-1-适配器模式\" class=\"headerlink\" title=\"2.1. 适配器模式\"></a>2.1. 适配器模式</h3><p><img src=\"/image/interview_prep/Adapter.png\" alt=\"Adapter\"></p>\n<p>场景：结城明日奈想试试双刀流技能（<font color='red'>一个类的接口</font>）好不好玩，但是亚丝娜这个账号（<font color='red'>客户端所期待的接口</font>）没办法直接用双刀流（<font color='red'>接口不匹配的两个类无法一起工作</font>），只能借助适配器。</p>\n<h4 id=\"1-类适配器\"><a href=\"#1-类适配器\" class=\"headerlink\" title=\"1. 类适配器\"></a>1. 类适配器</h4><p>参考：<a href=\"https://www.cnblogs.com/V1haoge/p/6479118.html\">Java设计模式之《适配器模式》及应用场景</a></p>\n<p>原理：通过继承来实现适配器功能。</p>\n<p>当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后再继承接口B的实现类BB，这样我们可以在适配器P中访问接口B的方法了，这时我们在适配器P中的接口A方法中直接引用BB中的合适方法，这样就完成了一个简单的类适配器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 亚丝娜账号</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IAsuna</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 双刀流</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IShuangDaoSkil</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 双刀流实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShuangDaoSkil</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IShuangDaoSkil</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发动双刀流！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 适配器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ShuangDaoSkil</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IAsuna</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">IAsuna</span> <span class=\"variable\">asuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter</span>();</span><br><span class=\"line\">        asuna.login();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h4 id=\"2-对象适配器模式\"><a href=\"#2-对象适配器模式\" class=\"headerlink\" title=\"2. 对象适配器模式\"></a>2. 对象适配器模式</h4><p>原理：通过组合来实现适配器功能。</p>\n<p>当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后在适配器P中定义私有变量C（对象）（B接口指向变量名），再定义一个带参数的构造器用来为对象C赋值，再在A接口的方法实现中使用对象C调用其来源于B接口的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 亚丝娜账号</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IAsuna</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 双刀流</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IShuangDaoSkil</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 双刀流实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShuangDaoSkil</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IShuangDaoSkil</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发动双刀流！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 适配器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IAsuna</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ShuangDaoSkil shuangDaoSkill;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Adapter</span><span class=\"params\">(ShuangDaoSkil shuangDaoSkill)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.shuangDaoSkill = shuangDaoSkill;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        shuangDaoSkill.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">IAsuna</span> <span class=\"variable\">asuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ShuangDaoSkil</span>());</span><br><span class=\"line\">        asuna.login();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-接口适配器模式\"><a href=\"#3-接口适配器模式\" class=\"headerlink\" title=\"3. 接口适配器模式\"></a>3. 接口适配器模式</h4><p>原理：通过抽象类来实现适配，这种适配稍别于上面所述的适配。</p>\n<p>当存在这样一个接口，其中定义了N多的方法，而我们现在却只想使用其中的一个到几个方法，如果我们直接实现接口，那么我们要对所有的方法进行实现，哪怕我们仅仅是对不需要的方法进行置空（只写一对大括号，不做具体方法实现）也会导致这个类变得臃肿，调用也不方便，这时我们可以使用一个抽象类作为中间件，即适配器，用这个抽象类实现接口，而在抽象类中所有的方法都进行置空，那么我们在创建抽象类的继承类，而且重写我们需要使用的那几个方法即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ISkill</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill3</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill4</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill5</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 适配器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Adapter <span class=\"keyword\">implements</span> <span class=\"title class_\">ISkill</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill3</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill4</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill5</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 适配器实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Skill</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Adapter</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Skill</span> <span class=\"variable\">skill</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Skill</span>;</span><br><span class=\"line\">        skill.skill1();</span><br><span class=\"line\">        skill.skill2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h4 id=\"4-使用场景\"><a href=\"#4-使用场景\" class=\"headerlink\" title=\"4. 使用场景\"></a>4. 使用场景</h4><p>类适配器与对象适配器的使用场景一致，仅仅是实现手段稍有区别，二者主要用于如下场景：</p>\n<ul>\n<li>想要使用一个已经存在的类，但是它却不符合现有的接口规范，导致无法直接去访问，这时创建一个适配器就能间接去访问这个类中的方法。</li>\n<li>我们有一个类，想将其设计为可重用的类（可被多处访问），我们可以创建适配器来将这个类来适配其他没有提供合适接口的类。</li>\n</ul>\n<p>以上两个场景其实就是从两个角度来描述一类问题，那就是要访问的方法不在合适的接口里，一个从接口出发（被访问），一个从访问出发（主动访问）。</p>\n<p>接口适配器使用场景：</p>\n<p>想要使用接口中的某个或某些方法，但是接口中有太多方法，我们要使用时必须实现接口并实现其中的所有方法，可以使用抽象类来实现接口，并不对方法进行实现（仅置空），然后我们再继承这个抽象类来通过重写想用的方法的方式来实现。这个抽象类就是适配器。</p>\n<h3 id=\"2-2-装饰器\"><a href=\"#2-2-装饰器\" class=\"headerlink\" title=\"2.2. 装饰器\"></a>2.2. 装饰器</h3><p>参考：<a href=\"https://www.cnblogs.com/qiumingcheng/p/5219631.html\">JAVA装饰器模式</a>、<br><a href=\"https://www.cnblogs.com/lzb1096101803/p/4425483.html\">Java设计模式之装饰者模式</a></p>\n<p><img src=\"/image/interview_prep/Decorator.png\" alt=\"Decorator\"></p>\n<p>Decorator装饰器，顾名思义，就是动态地给一个对象添加一些额外的职责，就好比为房子进行装修一样。因此，装饰器模式具有如下的特征：</p>\n<ul>\n<li>它必须具有一个装饰的对象。</li>\n<li>它必须拥有与被装饰对象相同的接口。</li>\n<li>它可以给被装饰对象添加额外的功能。</li>\n</ul>\n<p>用一句话总结就是：<font color='red'>保持接口，增强性能。</font></p>\n<p>实际上是基于对象的适配器模式的一种变种。它与对象的适配器模式的异同点如下:</p>\n<ul>\n<li>相同点：都拥有一个目标对象。</li>\n<li>不同点：适配器模式需要实现另外一个接口，而装饰器模式必须实现该对象的接口。</li>\n</ul>\n<p>要实现装饰者模式,注意一下几点内容:</p>\n<ol>\n<li>装饰者类要实现真实类<font color='red'>同样的接口</font></li>\n<li>装饰者类内有一个<font color='red'>真实对象的引用</font>(可以通过装饰者类的构造器传入)</li>\n<li>装饰类对象在主类中接受请求,将<font color='red'>请求发送给真实的对象</font>(相当于已经将引用传递到了装饰类的真实对象)</li>\n<li>装饰者可以在传入真实对象后,<font color='red'>增加一些附加功能</font>(因为装饰对象和真实对象都有同样的方法,装饰对象可以添加一定操作在调用真实对象的方法,或者先调用真实对象的方法,再添加自己的方法)</li>\n<li>不用继承</li>\n</ol>\n<p>来个实例 桐人砍怪：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 砍怪的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">takeSword</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">getAward</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 正常砍怪的实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Kirito</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takeSword</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;取武器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;放技能&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAward</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;捡装备&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        takeSword();</span><br><span class=\"line\">        releaseSkill();</span><br><span class=\"line\">        getAward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义出需要添加附加功能的抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractKirito</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IKirito kirito;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AbstractKirito</span> <span class=\"params\">(IKirito kirito)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.kirito = kirito;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takeSword</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.kirito.takeSword();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.kirito.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAward</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.kirito.getAward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        takeSword();</span><br><span class=\"line\">        releaseSkill();</span><br><span class=\"line\">        getAward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继承Abstarct类,所以可以有选择的覆盖正常生产馒头的方法,并添加原有方法原来的信息,同时也可以添加自己的方法    </span></span><br><span class=\"line\"><span class=\"comment\">//装饰者模式中这里最关键, 对应上述的第1个注意点:装饰者类要实现真实类同样的接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WisdomDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WisdomDecorator</span><span class=\"params\">(IKirito kirito)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(kirito);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addWisdomBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加智力buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.addWisdomBuff();</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StrengthDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StrengthDecorator</span><span class=\"params\">(IKirito kirito)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(kirito);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addStrenthBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加力量buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.addStrenthBuff();</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AgilityDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AgilityDecorator</span><span class=\"params\">(IKirito kirito)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(kirito);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addAgilityBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加敏捷buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.addAgilityBuff();</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">IKirito</span> <span class=\"variable\">kirito</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Kirito</span>();</span><br><span class=\"line\">        kirito = <span class=\"keyword\">new</span> <span class=\"title class_\">WisdomDecorator</span>(kirito);</span><br><span class=\"line\">        kirito = <span class=\"keyword\">new</span> <span class=\"title class_\">StrengthDecorator</span>(kirito);</span><br><span class=\"line\">        kirito = <span class=\"keyword\">new</span> <span class=\"title class_\">AgilityDecorator</span>(kirito);</span><br><span class=\"line\">        kirito.operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">取武器</span><br><span class=\"line\">加敏捷buff</span><br><span class=\"line\">加力量buff</span><br><span class=\"line\">加智力buff</span><br><span class=\"line\">放技能</span><br><span class=\"line\">捡装备</span><br></pre></td></tr></table></figure>\n\n<p>装饰者模式中的4个角色</p>\n<ul>\n<li>被装饰者抽象Component:是一个接口或者抽象类,定义最核心的对象,这个类是装饰者的基类,例如IKirito接口</li>\n<li>被装饰者具体实现ConcreteComponent:这是Component接口或抽象类的实现,例如本例中的Kirito</li>\n<li>装饰者Decorator:一般是抽象类,实现Component,它里面必然有一个指向Component的引用,例如本例中AbstractKirito</li>\n<li>装饰者实现ConcreteDecorator1和ConcreteDecorator2:用来装饰最基本的类,如本例中的AgilityDecorator</li>\n</ul>\n<h3 id=\"2-3-代理模式\"><a href=\"#2-3-代理模式\" class=\"headerlink\" title=\"2.3 代理模式\"></a>2.3 代理模式</h3><p>参考：<a href=\"https://www.cnblogs.com/boboxing/p/8126046.html\">理解java的三种代理模式</a></p>\n<p><img src=\"/image/interview_prep/Proxy.png\" alt=\"Proxy\"></p>\n<p>代理模式是一种设计模式，简单说即是在不改变源码的情况下，实现对目标对象的功能扩展。</p>\n<h4 id=\"1-静态代理\"><a href=\"#1-静态代理\" class=\"headerlink\" title=\"1. 静态代理\"></a>1. 静态代理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PlayerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPlayer player;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">PlayerProxy</span><span class=\"params\">(IPlayer player)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.player = player;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;寻找伙伴&quot;</span>);</span><br><span class=\"line\">        player.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">IPlayer</span> <span class=\"variable\">player</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>();</span><br><span class=\"line\">        <span class=\"type\">PlayerProxy</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PlayerProxy</span>(player);</span><br><span class=\"line\">        proxy.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：其实这里做的事情无非就是，创建一个代理类SingerProxy，继承了ISinger接口并实现了其中的方法。只不过这种实现特意包含了目标对象的方法，正是这种特征使得看起来像是“扩展”了目标对象的方法。假使代理对象中只是简单地对sing方法做了另一种实现而没有包含目标对象的方法，也就不能算作代理模式了。所以这里的包含是关键。</p>\n<p><strong>缺点</strong>：这种实现方式很直观也很简单，但其缺点是代理对象必须提前写出，如果接口层发生了变化，代理对象的代码也要进行维护。如果能在运行时动态地写出代理对象，不但减少了一大批代理类的代码，也少了不断维护的烦恼，不过运行时的效率必定受到影响。这种方式就是接下来的动态代理。</p>\n<h4 id=\"2-动态代理（JDK代理）\"><a href=\"#2-动态代理（JDK代理）\" class=\"headerlink\" title=\"2. 动态代理（JDK代理）\"></a>2. 动态代理（JDK代理）</h4><p>跟静态代理的前提一样，依然是对Singer对象进行扩展</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用Proxy类的静态方法newProxyInstance即可，该方法会返回代理类对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建实例</span></span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>();</span><br><span class=\"line\">        <span class=\"type\">IPlayer</span> <span class=\"variable\">proxy</span>  <span class=\"operator\">=</span> (IPlayer) Proxy.newProxyInstance(</span><br><span class=\"line\">                target.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 2. 扩展1</span></span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;寻找伙伴&quot;</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//执行目标对象方法</span></span><br><span class=\"line\">                        <span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">                        <span class=\"comment\">// 3. 扩展2</span></span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;很开心&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 4. 目标对象的方法</span></span><br><span class=\"line\">        proxy.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong>：以上代码只有1234部分是需要自己写出，其余部分全都是固定代码。由于java封装了newProxyInstance这个方法的实现细节，所以使用起来才能这么方便。<br><strong>缺点</strong>：可以看出静态代理和JDK代理有一个共同的缺点，就是目标对象必须实现一个或多个接口，假如没有，则可以使用Cglib代理。</p>\n<h4 id=\"3-Cglib代理\"><a href=\"#3-Cglib代理\" class=\"headerlink\" title=\"3. Cglib代理\"></a>3. Cglib代理</h4><p>前提条件：</p>\n<ul>\n<li>需要引入cglib的jar文件，由于Spring的核心包中已经包括了Cglib功能，所以也可以直接引入spring-core-3.2.5.jar</li>\n<li>目标类不能为final</li>\n<li>目标对象的方法如果为final&#x2F;static，那么就不会被拦截，即不会执行目标对象额外的业务方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Cglib子类代理工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 维护目标对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProxyFactory</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 给目标对象创建一个代理对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxyInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.工具类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">en</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">//2.设置父类</span></span><br><span class=\"line\">        en.setSuperclass(target.getClass());</span><br><span class=\"line\">        <span class=\"comment\">//3.设置回调函数</span></span><br><span class=\"line\">        en.setCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//4.创建子类(代理对象)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> en.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 步骤1</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;寻找伙伴&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//执行目标对象的方法</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">// 步骤2</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;很开心&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//目标对象</span></span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>();</span><br><span class=\"line\">        <span class=\"comment\">//代理对象</span></span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Player)<span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>(target).getProxyInstance();</span><br><span class=\"line\">        <span class=\"comment\">//执行代理对象的方法</span></span><br><span class=\"line\">        proxy.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的代码也非常固定，只有步骤1、2是需要自己写出.</p>\n<p><strong>总结</strong>：三种代理模式各有优缺点和相应的适用范围，主要看目标对象是否实现了接口。</p>\n<p>以Spring框架所选择的代理模式举例：在Spring的AOP编程中：</p>\n<ul>\n<li>如果加入容器的目标对象有实现接口，用JDK代理</li>\n<li>如果目标对象没有实现接口，用Cglib代理</li>\n</ul>\n<h2 id=\"3-行为型\"><a href=\"#3-行为型\" class=\"headerlink\" title=\"3. 行为型\"></a>3. 行为型</h2><h3 id=\"3-1-模板方法模式\"><a href=\"#3-1-模板方法模式\" class=\"headerlink\" title=\"3.1 模板方法模式\"></a>3.1 模板方法模式</h3><p>参考：<a href=\"https://www.cnblogs.com/liaoweipeng/p/5790395.html\">java设计模式之模板方法模式</a></p>\n<p><img src=\"/image/interview_prep/TemplateMethod.png\" alt=\"TemplateMethod\"></p>\n<p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<font color = 'red'>通俗的说的就是有很多相同的步骤的，在某一些地方可能有一些差别适合于这种模式，如大话设计模式中说到的考试场景中，每个人的试卷都是一样的，只有答案不一样。这种场景就适合于模板方法模式。</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用抽象基类定义算法框架</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PlayGame</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法 封装了所有子类所遵循的算法框架</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        login();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPlyerWantsBuff())&#123;</span><br><span class=\"line\">            addBuff();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        releaseSkill();</span><br><span class=\"line\">        getAward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为login和getAward对所有子类是共同的行为，所以没必要向子类过多开放，所以方法定义为private，这样我们在进行子类编码时可以减少复杂度。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样不需要关注细枝末节，我们只需要关注我们特定业务的实现，这就是模板方法模式的好处。可以封装变与不变，将不变的固化在高层，隐藏其细节。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;登陆游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAward</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;捡装备&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Hook 钩子函数,提供一个空的或者默认的实现 子类重写该方法，可以自行决定是否挂钩以及如何挂钩</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPlyerWantsBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * addBuff()和releaseSkill()这两个方法我们不知道它们在算法框架中的具体实现，因此定义为抽象方法，</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们用protected进行修饰， 在子类中可见便于进行重写。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addBuff</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体子类延迟实现步骤</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 提供制备咖啡的具体实现子类。 具体子类实现延迟步骤，满足特定的业务需求。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AsunaPlayGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PlayGame</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加敏捷Buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;释放圣母圣咏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KiritoPlayGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PlayGame</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPlyerWantsBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加敏捷Buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;释放星爆弃疗斩&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Kirito 开始游戏&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">PlayGame</span> <span class=\"variable\">kirito</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">KiritoPlayGame</span>();</span><br><span class=\"line\">        kirito.play();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n*********************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Asuna 开始游戏&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">PlayGame</span> <span class=\"variable\">asuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AsunaPlayGame</span>();</span><br><span class=\"line\">        asuna.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kirito 开始游戏</span><br><span class=\"line\">登陆游戏</span><br><span class=\"line\">释放星爆弃疗斩</span><br><span class=\"line\">捡装备</span><br><span class=\"line\"></span><br><span class=\"line\">*********************************</span><br><span class=\"line\">Asuna 开始游戏</span><br><span class=\"line\">登陆游戏</span><br><span class=\"line\">加敏捷Buff</span><br><span class=\"line\">释放圣母圣咏</span><br><span class=\"line\">捡装备</span><br></pre></td></tr></table></figure>\n\n<p>模板方法模式适用场景：</p>\n<ul>\n<li>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。</li>\n<li>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的- 操作的模板方法来替换这些不同的代码。</li>\n<li>控制子类扩展。模板方法只在特定点调用“hook”操作，这样就只允许在这些点进行扩展。</li>\n</ul>\n<h3 id=\"3-2-观察者模式\"><a href=\"#3-2-观察者模式\" class=\"headerlink\" title=\"3.2 观察者模式\"></a>3.2 观察者模式</h3><p>参考：<a href=\"https://www.cnblogs.com/luohanguo/p/7825656.html\">JAVA设计模式之观察者模式</a></p>\n<p><img src=\"/image/interview_prep/Observer.png\" alt=\"Observer\"></p>\n<p>定义：在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。<br>解释：其实就是发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。</p>\n<ul>\n<li><strong>抽象被观察者角色</strong>：也就是一个抽象主题，它把所有对观察者对象的引用保存在一个集合中，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。</li>\n<li><strong>抽象观察者角色</strong>：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</li>\n<li><strong>具体被观察者角色</strong>：也就是一个具体的主题，在集体主题的内部状态改变时，所有登记过的观察者发出通知。</li>\n<li><strong>具体观察者角色</strong>：实现抽象观察者角色所需要的更新接口，一边使本身的状态与制图的状态相协调。</li>\n</ul>\n<h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>有一个NPC务，不定时发布一些任务，在线玩家就可以收到推送消息，不在线就收不到推送消息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象被观察者接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明了添加、删除、通知观察者方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observerable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象观察者</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义了一个update()方法，当被观察者调用notifyObservers()方法时，观察者的update()方法会被回调。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被观察者，也就是微信公众号服务</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现了Observerable接口，对Observerable接口的三个方法进行了具体实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NPC</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observerable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; list;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NPC</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer o)</span>&#123;</span><br><span class=\"line\">        list.add(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer o)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!list.isEmpty())&#123;</span><br><span class=\"line\">            list.remove(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Observer o : list)&#123;</span><br><span class=\"line\">            o.update(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMessage</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;NPC发布新任务： &quot;</span> + message);</span><br><span class=\"line\">        notifyObserver();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 观察者</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现了update方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Player</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">        receive(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receive</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot; 收到任务 &quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NPC</span> <span class=\"variable\">npc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NPC</span>();</span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">kirito</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>(<span class=\"string\">&quot;Kirito&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">asuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>(<span class=\"string\">&quot;Asuna&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">shino</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>(<span class=\"string\">&quot;Shino&quot;</span>);</span><br><span class=\"line\">        npc.registerObserver(kirito);</span><br><span class=\"line\">        npc.registerObserver(asuna);</span><br><span class=\"line\">        npc.registerObserver(shino);</span><br><span class=\"line\">        npc.setMessage(<span class=\"string\">&quot;第19层boss&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----------------------------------------------&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Shino掉线&quot;</span>);</span><br><span class=\"line\">        npc.removeObserver(shino);</span><br><span class=\"line\">        npc.setMessage(<span class=\"string\">&quot;第23层boss&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NPC发布新任务： 第19层boss</span><br><span class=\"line\">Kirito 收到任务 第19层boss</span><br><span class=\"line\">Asuna 收到任务 第19层boss</span><br><span class=\"line\">Shino 收到任务 第19层boss</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">Shino掉线</span><br><span class=\"line\">NPC发布新任务： 第23层boss</span><br><span class=\"line\">Kirito 收到任务 第23层boss</span><br><span class=\"line\">Asuna 收到任务 第23层boss</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>这个模式是松偶合的。改变主题或观察者中的一方，另一方不会受到影像。</li>\n<li>JDK中也有自带的观察者模式。但是被观察者是一个类而不是接口，限制了它的复用能力。</li>\n<li>在JavaBean和Swing中也可以看到观察者模式的影子。</li>\n</ul>\n","length":20909,"excerpt":"","more":"<h1 id=\"常用设计模式（java）\"><a href=\"#常用设计模式（java）\" class=\"headerlink\" title=\"常用设计模式（java）\"></a>常用设计模式（java）</h1><p><a href=\"https://www.cnblogs.com/zytrue/p/8484806.html\">23种常用设计模式的UML类图</a></p>\n<h2 id=\"1-创建型\"><a href=\"#1-创建型\" class=\"headerlink\" title=\"1. 创建型\"></a>1. 创建型</h2><h3 id=\"1-1-三种工厂模式\"><a href=\"#1-1-三种工厂模式\" class=\"headerlink\" title=\"1.1 三种工厂模式\"></a>1.1 三种工厂模式</h3><h4 id=\"1-简单工厂模式\"><a href=\"#1-简单工厂模式\" class=\"headerlink\" title=\"1. 简单工厂模式\"></a>1. 简单工厂模式</h4><p>参考：<br><a href=\"https://www.cnblogs.com/zailushang1996/p/8601808.html\">java 三种工厂模式</a></p>\n<p>简单工厂模式又 叫静态工厂方法模式（Static FactoryMethod Pattern），是通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<h5 id=\"代码示例：\"><a href=\"#代码示例：\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h5><p>一个抽象的武器接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ISword</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">swordSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个具体产品类，武器阐释者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChanShiZhe</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ISword</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swordSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阐释者——星爆弃疗斩&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另一个具体产品类，武器闪烁之光：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShanShuoZhiGuang</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ISword</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swordSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;闪烁之光——圣母圣咏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单工厂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimplySwordFactory</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TYPE_CSZ</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TYPE_SSZG</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ISword <span class=\"title function_\">createSword</span><span class=\"params\">(<span class=\"type\">int</span> type)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(type)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> TYPE_CSZ: </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChanShiZhe</span>();</span><br><span class=\"line\">            <span class=\"keyword\">case</span> TYPE_SSZG:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShanShuoZhiGuang</span>();</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChanShiZhe</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleFactoryTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ISword</span> <span class=\"variable\">sword</span> <span class=\"operator\">=</span> SimplySwordFactory.createSword(SimplySwordFactory.TYPE_CSZ);</span><br><span class=\"line\">        sword.swordSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>特点：</p>\n<ul>\n<li>它是一个具体的类，非接口 抽象类。有一个重要的create()方法，利用if或者 switch创建产品并返回。</li>\n<li>create()方法通常是静态的，所以也称之为静态工厂。<br>缺点：</li>\n<li>扩展性差（我想增加一种武器，除了新增一个武器产品类，还需要修改工厂类方法）</li>\n<li>不同的产品需要不同额外参数的时候 不支持。</li>\n</ul>\n<h4 id=\"2-工厂方法\"><a href=\"#2-工厂方法\" class=\"headerlink\" title=\"2. 工厂方法\"></a>2. 工厂方法</h4><p><img src=\"/image/interview_prep/FactoryMethod.png\" alt=\"FactoryMethod\"></p>\n<p>提供一个用于创建对象的接口(工厂接口)，让其实现类(工厂实现类)决定实例化哪一个类(产品类)，并且由该实现类创建对应类的实例。</p>\n<p>步骤：</p>\n<ol>\n<li>创建抽象工厂类，定义具体工厂的公共接口；</li>\n<li>创建抽象产品类 ，定义具体产品的公共接口；</li>\n<li>创建具体产品类（继承抽象产品类） &amp; 定义生产的具体产品；</li>\n<li>创建具体工厂类（继承抽象工厂类），定义创建对应具体产品实例的方法；</li>\n<li>外界通过调用具体工厂类的方法，从而创建不同具体产品类的实例</li>\n</ol>\n<h5 id=\"代码示例：-1\"><a href=\"#代码示例：-1\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h5><p>工厂接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Factory</span> &#123;</span><br><span class=\"line\">    ISword <span class=\"title function_\">createSword</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其实现类（获取具体产品）:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChanShiZheFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Factory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ISword <span class=\"title function_\">createSword</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChanShiZhe</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShanShuoZhiGuangFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Factory</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ISword <span class=\"title function_\">createSword</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShanShuoZhiGuang</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FactoryTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">ISword</span> <span class=\"variable\">csz</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChanShiZheFactory</span>().createSword();</span><br><span class=\"line\">        csz.swordSkill();</span><br><span class=\"line\">        <span class=\"type\">ISword</span> <span class=\"variable\">sszg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShanShuoZhiGuangFactory</span>().createSword();</span><br><span class=\"line\">        sszg.swordSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>优点：</p>\n<ul>\n<li>更符合开-闭原则：新增一种产品时，只需要增加相应的具体产品类和相应的工厂子类即可</li>\n<li>符合单一职责原则：每个具体工厂类只负责创建对应的产品</li>\n<li>不使用静态工厂方法，可以形成基于继承的等级结构</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>添加新产品时，除了增加新产品类外，还要提供与之对应的具体工厂类，系统类的个数将成对增加，在一定程度上增加了系统的复杂度；同时，有更多的类需要编译和运行，会给系统带来一些额外的开销；</li>\n<li>由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度，且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。</li>\n<li>虽然保证了工厂方法内的对修改关闭，但对于使用工厂方法的类，如果要更换另外一种产品，仍然需要修改实例化的具体工厂类</li>\n<li>一个具体工厂只能创建一种具体产品</li>\n</ul>\n<h4 id=\"3-抽象工厂模式\"><a href=\"#3-抽象工厂模式\" class=\"headerlink\" title=\"3. 抽象工厂模式\"></a>3. 抽象工厂模式</h4><p>参考：<br><a href=\"https://www.cnblogs.com/yeahwell/p/4727202.html\">Java设计模式之抽象工厂模式</a></p>\n<p><img src=\"/image/interview_prep/AbstractFactory.png\" alt=\"AbstractFactory\"></p>\n<p>当每个抽象产品都有多于一个的具体子类的时候（空调有型号A和B两种，发动机也有型号A和B两种），工厂角色怎么知道实例化哪一个子类呢？比如每个抽象产品角色都有两个具体产品（产品空调有两个具体产品空调A和空调B）。抽象工厂模式提供两个具体工厂角色（宝马320系列工厂和宝马230系列工厂），分别对应于这两个具体产品角色，每一个具体工厂角色只负责某一个产品角色的实例化。每一个具体工厂类只负责创建抽象产品的某一个具体子类的实例。</p>\n<h5 id=\"代码示例：-2\"><a href=\"#代码示例：-2\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h5><p>产品类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 武器及型号</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Sword</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">equip</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwordA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Sword</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">equip</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;装备--&gt;双刀&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwordB</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Sword</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">equip</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;装备--&gt;细剑&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//技能及型号</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Skill</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">release</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SkillA</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Skill</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">release</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发动--&gt;双刀流&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SkillB</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Skill</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">release</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发动--&gt;圣母圣咏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建工厂类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建工厂的接口  </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AbstractFactory</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//装备武器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sword <span class=\"title function_\">createSword</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//装备技能 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Skill <span class=\"title function_\">createSkill</span><span class=\"params\">()</span>; </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为桐人装备  </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Factorykirito</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span>&#123;  </span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sword <span class=\"title function_\">createSword</span><span class=\"params\">()</span> &#123;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SwordA</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Skill <span class=\"title function_\">createSkill</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SkillA</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"comment\">//为亚丝娜装备 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FactoryAsuna</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AbstractFactory</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">     <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Sword <span class=\"title function_\">createSword</span><span class=\"params\">()</span> &#123;    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SwordB</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Skill <span class=\"title function_\">createSkill</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SkillB</span>();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>测试类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FactoryTest</span>  &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//生产桐人</span></span><br><span class=\"line\">        <span class=\"type\">Factorykirito</span> <span class=\"variable\">factorykirito</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Factorykirito</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是桐人&quot;</span>);</span><br><span class=\"line\">        factorykirito.createSword().equip();</span><br><span class=\"line\">        factorykirito.createSkill().release();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//生产亚丝娜</span></span><br><span class=\"line\">        <span class=\"type\">FactoryAsuna</span> <span class=\"variable\">factoryAsuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FactoryAsuna</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是亚丝娜&quot;</span>);</span><br><span class=\"line\">        factoryAsuna.createSword().equip();</span><br><span class=\"line\">        factoryAsuna.createSkill().release(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是桐人</span><br><span class=\"line\">装备--&gt;双刀</span><br><span class=\"line\">发动--&gt;双刀流</span><br><span class=\"line\">这是亚丝娜</span><br><span class=\"line\">装备--&gt;细剑</span><br><span class=\"line\">发动--&gt;圣母圣咏</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"1-2-七种单例模式\"><a href=\"#1-2-七种单例模式\" class=\"headerlink\" title=\"1.2. 七种单例模式\"></a>1.2. 七种单例模式</h3><p>参考：<br><a href=\"https://www.cnblogs.com/zhaoyanjun/p/5652930.html\">Java 单例模式</a></p>\n<p>为什么使用单例：</p>\n<ul>\n<li>在内存中只有一个对象，节省内存空间。避免频繁的创建销毁对象，可以提高性能。避免对共享资源的多重占用。可以全局访问。</li>\n<li>确保一个类只有一个实例，自行实例化并向系统提供这个实例。</li>\n</ul>\n<p>单例需要注意的问题：</p>\n<ul>\n<li>线程安全问题</li>\n<li>资源使用问题</li>\n</ul>\n<h4 id=\"1-饿汉式\"><a href=\"#1-饿汉式\" class=\"headerlink\" title=\"1. 饿汉式\"></a>1. 饿汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：未调用getInstance()时，实例已经创建，天生线程安全。</li>\n<li>缺点：如果一直没有调用getInstance()，但是实例已经存在，资源浪费。</li>\n</ul>\n<h4 id=\"2-懒汉式\"><a href=\"#2-懒汉式\" class=\"headerlink\" title=\"2. 懒汉式\"></a>2. 懒汉式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> intance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：方法被调用时才创建实例，节省资源。</li>\n<li>缺点：线程不安全。</li>\n</ul>\n<p><font color='red'>只有单线程才是单例，多线程可能出现多个单例。</font></p>\n<h4 id=\"3-synchronized加锁同步\"><a href=\"#3-synchronized加锁同步\" class=\"headerlink\" title=\"3. synchronized加锁同步\"></a>3. synchronized加锁同步</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：同时满足单线程、多线程。</li>\n<li>缺点：性能差。</li>\n</ul>\n<h4 id=\"4-双重校验\"><a href=\"#4-双重校验\" class=\"headerlink\" title=\"4. 双重校验\"></a>4. 双重校验</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优点：同时满足单线程、多线程；性能问题得到优化。</li>\n<li>缺点：第一次加载慢，由于java内存模型一些原因偶尔失败。</li>\n</ul>\n<h4 id=\"5-volatile关键字\"><a href=\"#5-volatile关键字\" class=\"headerlink\" title=\"5. volatile关键字\"></a>5. volatile关键字</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> instance;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(instance = <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(instance == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><font color='red'>volatile关键字可以解决指令重排。</font>如果没有volatile，两个线程AB，都是第一次调用方法，线程A先执行new，该构造方法是非原子性操作，编译后产生多条字节码指令，由于指令重排，可能会先执行赋值操作，即在内存中开辟空间，然后返回内存的引用，之后instance不再为空，但是实际初始化并未完成，此时线程B进入就会看到不为空但是不完整（初始化未完成）的Singleton对象，所以需要加入volatile关键字，禁止指令重排序优化，从而安全的实现单例。</p>\n<h4 id=\"6-静态内部类\"><a href=\"#6-静态内部类\" class=\"headerlink\" title=\"6. 静态内部类\"></a>6. 静态内部类</h4><p>静态内部类由JVM来保证线程安全。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SingletonHolder</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Singleton</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonsHolder.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>优点：资源利用率高，不执行getInstance()不被实例，可以执行该类其他静态方法。</li>\n</ul>\n<h4 id=\"7-枚举类实现单例\"><a href=\"#7-枚举类实现单例\" class=\"headerlink\" title=\"7. 枚举类实现单例\"></a>7. 枚举类实现单例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用枚举实现单例的方法虽然还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。</span><br><span class=\"line\">——Joshua Bloch《effective java》</span><br></pre></td></tr></table></figure>\n<p><font color='red'>枚举天生线程安全，且可避免反序列化破坏单例。</font></p>\n<p>more detail：<a href=\"https://blog.csdn.net/moakun/article/details/80688851\">为什么我强烈建议大家使用枚举来实现单例</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Singleton</span>&#123;</span><br><span class=\"line\">    INSTANCE;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">whateverMethod</span><span class=\"params\">()</span> &#123;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-结构型\"><a href=\"#2-结构型\" class=\"headerlink\" title=\"2. 结构型\"></a>2. 结构型</h2><h3 id=\"2-1-适配器模式\"><a href=\"#2-1-适配器模式\" class=\"headerlink\" title=\"2.1. 适配器模式\"></a>2.1. 适配器模式</h3><p><img src=\"/image/interview_prep/Adapter.png\" alt=\"Adapter\"></p>\n<p>场景：结城明日奈想试试双刀流技能（<font color='red'>一个类的接口</font>）好不好玩，但是亚丝娜这个账号（<font color='red'>客户端所期待的接口</font>）没办法直接用双刀流（<font color='red'>接口不匹配的两个类无法一起工作</font>），只能借助适配器。</p>\n<h4 id=\"1-类适配器\"><a href=\"#1-类适配器\" class=\"headerlink\" title=\"1. 类适配器\"></a>1. 类适配器</h4><p>参考：<a href=\"https://www.cnblogs.com/V1haoge/p/6479118.html\">Java设计模式之《适配器模式》及应用场景</a></p>\n<p>原理：通过继承来实现适配器功能。</p>\n<p>当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后再继承接口B的实现类BB，这样我们可以在适配器P中访问接口B的方法了，这时我们在适配器P中的接口A方法中直接引用BB中的合适方法，这样就完成了一个简单的类适配器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 亚丝娜账号</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IAsuna</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 双刀流</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IShuangDaoSkil</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 双刀流实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShuangDaoSkil</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IShuangDaoSkil</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发动双刀流！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 适配器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ShuangDaoSkil</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IAsuna</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">IAsuna</span> <span class=\"variable\">asuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter</span>();</span><br><span class=\"line\">        asuna.login();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h4 id=\"2-对象适配器模式\"><a href=\"#2-对象适配器模式\" class=\"headerlink\" title=\"2. 对象适配器模式\"></a>2. 对象适配器模式</h4><p>原理：通过组合来实现适配器功能。</p>\n<p>当我们要访问的接口A中没有我们想要的方法 ，却在另一个接口B中发现了合适的方法，我们又不能改变访问接口A，在这种情况下，我们可以定义一个适配器p来进行中转，这个适配器p要实现我们访问的接口A，这样我们就能继续访问当前接口A中的方法（虽然它目前不是我们的菜），然后在适配器P中定义私有变量C（对象）（B接口指向变量名），再定义一个带参数的构造器用来为对象C赋值，再在A接口的方法实现中使用对象C调用其来源于B接口的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 亚丝娜账号</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IAsuna</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 双刀流</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IShuangDaoSkil</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 双刀流实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShuangDaoSkil</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IShuangDaoSkil</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发动双刀流！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 适配器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Adapter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IAsuna</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ShuangDaoSkil shuangDaoSkill;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Adapter</span><span class=\"params\">(ShuangDaoSkil shuangDaoSkill)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.shuangDaoSkill = shuangDaoSkill;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        shuangDaoSkill.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">IAsuna</span> <span class=\"variable\">asuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Adapter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ShuangDaoSkil</span>());</span><br><span class=\"line\">        asuna.login();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-接口适配器模式\"><a href=\"#3-接口适配器模式\" class=\"headerlink\" title=\"3. 接口适配器模式\"></a>3. 接口适配器模式</h4><p>原理：通过抽象类来实现适配，这种适配稍别于上面所述的适配。</p>\n<p>当存在这样一个接口，其中定义了N多的方法，而我们现在却只想使用其中的一个到几个方法，如果我们直接实现接口，那么我们要对所有的方法进行实现，哪怕我们仅仅是对不需要的方法进行置空（只写一对大括号，不做具体方法实现）也会导致这个类变得臃肿，调用也不方便，这时我们可以使用一个抽象类作为中间件，即适配器，用这个抽象类实现接口，而在抽象类中所有的方法都进行置空，那么我们在创建抽象类的继承类，而且重写我们需要使用的那几个方法即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 目标接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ISkill</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill3</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill4</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">skill5</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 适配器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Adapter <span class=\"keyword\">implements</span> <span class=\"title class_\">ISkill</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill3</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill4</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill5</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 适配器实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Skill</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Adapter</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">skill2</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Skill</span> <span class=\"variable\">skill</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Skill</span>;</span><br><span class=\"line\">        skill.skill1();</span><br><span class=\"line\">        skill.skill2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h4 id=\"4-使用场景\"><a href=\"#4-使用场景\" class=\"headerlink\" title=\"4. 使用场景\"></a>4. 使用场景</h4><p>类适配器与对象适配器的使用场景一致，仅仅是实现手段稍有区别，二者主要用于如下场景：</p>\n<ul>\n<li>想要使用一个已经存在的类，但是它却不符合现有的接口规范，导致无法直接去访问，这时创建一个适配器就能间接去访问这个类中的方法。</li>\n<li>我们有一个类，想将其设计为可重用的类（可被多处访问），我们可以创建适配器来将这个类来适配其他没有提供合适接口的类。</li>\n</ul>\n<p>以上两个场景其实就是从两个角度来描述一类问题，那就是要访问的方法不在合适的接口里，一个从接口出发（被访问），一个从访问出发（主动访问）。</p>\n<p>接口适配器使用场景：</p>\n<p>想要使用接口中的某个或某些方法，但是接口中有太多方法，我们要使用时必须实现接口并实现其中的所有方法，可以使用抽象类来实现接口，并不对方法进行实现（仅置空），然后我们再继承这个抽象类来通过重写想用的方法的方式来实现。这个抽象类就是适配器。</p>\n<h3 id=\"2-2-装饰器\"><a href=\"#2-2-装饰器\" class=\"headerlink\" title=\"2.2. 装饰器\"></a>2.2. 装饰器</h3><p>参考：<a href=\"https://www.cnblogs.com/qiumingcheng/p/5219631.html\">JAVA装饰器模式</a>、<br><a href=\"https://www.cnblogs.com/lzb1096101803/p/4425483.html\">Java设计模式之装饰者模式</a></p>\n<p><img src=\"/image/interview_prep/Decorator.png\" alt=\"Decorator\"></p>\n<p>Decorator装饰器，顾名思义，就是动态地给一个对象添加一些额外的职责，就好比为房子进行装修一样。因此，装饰器模式具有如下的特征：</p>\n<ul>\n<li>它必须具有一个装饰的对象。</li>\n<li>它必须拥有与被装饰对象相同的接口。</li>\n<li>它可以给被装饰对象添加额外的功能。</li>\n</ul>\n<p>用一句话总结就是：<font color='red'>保持接口，增强性能。</font></p>\n<p>实际上是基于对象的适配器模式的一种变种。它与对象的适配器模式的异同点如下:</p>\n<ul>\n<li>相同点：都拥有一个目标对象。</li>\n<li>不同点：适配器模式需要实现另外一个接口，而装饰器模式必须实现该对象的接口。</li>\n</ul>\n<p>要实现装饰者模式,注意一下几点内容:</p>\n<ol>\n<li>装饰者类要实现真实类<font color='red'>同样的接口</font></li>\n<li>装饰者类内有一个<font color='red'>真实对象的引用</font>(可以通过装饰者类的构造器传入)</li>\n<li>装饰类对象在主类中接受请求,将<font color='red'>请求发送给真实的对象</font>(相当于已经将引用传递到了装饰类的真实对象)</li>\n<li>装饰者可以在传入真实对象后,<font color='red'>增加一些附加功能</font>(因为装饰对象和真实对象都有同样的方法,装饰对象可以添加一定操作在调用真实对象的方法,或者先调用真实对象的方法,再添加自己的方法)</li>\n<li>不用继承</li>\n</ol>\n<p>来个实例 桐人砍怪：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 砍怪的接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">takeSword</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">getAward</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 正常砍怪的实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Kirito</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takeSword</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;取武器&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;放技能&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAward</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;捡装备&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        takeSword();</span><br><span class=\"line\">        releaseSkill();</span><br><span class=\"line\">        getAward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义出需要添加附加功能的抽象类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractKirito</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IKirito kirito;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AbstractKirito</span> <span class=\"params\">(IKirito kirito)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.kirito = kirito;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">takeSword</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.kirito.takeSword();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.kirito.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAward</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.kirito.getAward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">operation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        takeSword();</span><br><span class=\"line\">        releaseSkill();</span><br><span class=\"line\">        getAward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 继承Abstarct类,所以可以有选择的覆盖正常生产馒头的方法,并添加原有方法原来的信息,同时也可以添加自己的方法    </span></span><br><span class=\"line\"><span class=\"comment\">//装饰者模式中这里最关键, 对应上述的第1个注意点:装饰者类要实现真实类同样的接口</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WisdomDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WisdomDecorator</span><span class=\"params\">(IKirito kirito)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(kirito);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addWisdomBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加智力buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.addWisdomBuff();</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StrengthDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">StrengthDecorator</span><span class=\"params\">(IKirito kirito)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(kirito);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addStrenthBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加力量buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.addStrenthBuff();</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AgilityDecorator</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractKirito</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AgilityDecorator</span><span class=\"params\">(IKirito kirito)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(kirito);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addAgilityBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加敏捷buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.addAgilityBuff();</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.releaseSkill();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">IKirito</span> <span class=\"variable\">kirito</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Kirito</span>();</span><br><span class=\"line\">        kirito = <span class=\"keyword\">new</span> <span class=\"title class_\">WisdomDecorator</span>(kirito);</span><br><span class=\"line\">        kirito = <span class=\"keyword\">new</span> <span class=\"title class_\">StrengthDecorator</span>(kirito);</span><br><span class=\"line\">        kirito = <span class=\"keyword\">new</span> <span class=\"title class_\">AgilityDecorator</span>(kirito);</span><br><span class=\"line\">        kirito.operation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">取武器</span><br><span class=\"line\">加敏捷buff</span><br><span class=\"line\">加力量buff</span><br><span class=\"line\">加智力buff</span><br><span class=\"line\">放技能</span><br><span class=\"line\">捡装备</span><br></pre></td></tr></table></figure>\n\n<p>装饰者模式中的4个角色</p>\n<ul>\n<li>被装饰者抽象Component:是一个接口或者抽象类,定义最核心的对象,这个类是装饰者的基类,例如IKirito接口</li>\n<li>被装饰者具体实现ConcreteComponent:这是Component接口或抽象类的实现,例如本例中的Kirito</li>\n<li>装饰者Decorator:一般是抽象类,实现Component,它里面必然有一个指向Component的引用,例如本例中AbstractKirito</li>\n<li>装饰者实现ConcreteDecorator1和ConcreteDecorator2:用来装饰最基本的类,如本例中的AgilityDecorator</li>\n</ul>\n<h3 id=\"2-3-代理模式\"><a href=\"#2-3-代理模式\" class=\"headerlink\" title=\"2.3 代理模式\"></a>2.3 代理模式</h3><p>参考：<a href=\"https://www.cnblogs.com/boboxing/p/8126046.html\">理解java的三种代理模式</a></p>\n<p><img src=\"/image/interview_prep/Proxy.png\" alt=\"Proxy\"></p>\n<p>代理模式是一种设计模式，简单说即是在不改变源码的情况下，实现对目标对象的功能扩展。</p>\n<h4 id=\"1-静态代理\"><a href=\"#1-静态代理\" class=\"headerlink\" title=\"1. 静态代理\"></a>1. 静态代理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PlayerProxy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IPlayer player;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">PlayerProxy</span><span class=\"params\">(IPlayer player)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.player = player;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;寻找伙伴&quot;</span>);</span><br><span class=\"line\">        player.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">IPlayer</span> <span class=\"variable\">player</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>();</span><br><span class=\"line\">        <span class=\"type\">PlayerProxy</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PlayerProxy</span>(player);</span><br><span class=\"line\">        proxy.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结</strong>：其实这里做的事情无非就是，创建一个代理类SingerProxy，继承了ISinger接口并实现了其中的方法。只不过这种实现特意包含了目标对象的方法，正是这种特征使得看起来像是“扩展”了目标对象的方法。假使代理对象中只是简单地对sing方法做了另一种实现而没有包含目标对象的方法，也就不能算作代理模式了。所以这里的包含是关键。</p>\n<p><strong>缺点</strong>：这种实现方式很直观也很简单，但其缺点是代理对象必须提前写出，如果接口层发生了变化，代理对象的代码也要进行维护。如果能在运行时动态地写出代理对象，不但减少了一大批代理类的代码，也少了不断维护的烦恼，不过运行时的效率必定受到影响。这种方式就是接下来的动态代理。</p>\n<h4 id=\"2-动态代理（JDK代理）\"><a href=\"#2-动态代理（JDK代理）\" class=\"headerlink\" title=\"2. 动态代理（JDK代理）\"></a>2. 动态代理（JDK代理）</h4><p>跟静态代理的前提一样，依然是对Singer对象进行扩展</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">IPlayer</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用Proxy类的静态方法newProxyInstance即可，该方法会返回代理类对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 创建实例</span></span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>();</span><br><span class=\"line\">        <span class=\"type\">IPlayer</span> <span class=\"variable\">proxy</span>  <span class=\"operator\">=</span> (IPlayer) Proxy.newProxyInstance(</span><br><span class=\"line\">                target.getClass().getClassLoader(),</span><br><span class=\"line\">                target.getClass().getInterfaces(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">InvocationHandler</span>() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 2. 扩展1</span></span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;寻找伙伴&quot;</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//执行目标对象方法</span></span><br><span class=\"line\">                        <span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">                        <span class=\"comment\">// 3. 扩展2</span></span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;很开心&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        <span class=\"comment\">// 4. 目标对象的方法</span></span><br><span class=\"line\">        proxy.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong>：以上代码只有1234部分是需要自己写出，其余部分全都是固定代码。由于java封装了newProxyInstance这个方法的实现细节，所以使用起来才能这么方便。<br><strong>缺点</strong>：可以看出静态代理和JDK代理有一个共同的缺点，就是目标对象必须实现一个或多个接口，假如没有，则可以使用Cglib代理。</p>\n<h4 id=\"3-Cglib代理\"><a href=\"#3-Cglib代理\" class=\"headerlink\" title=\"3. Cglib代理\"></a>3. Cglib代理</h4><p>前提条件：</p>\n<ul>\n<li>需要引入cglib的jar文件，由于Spring的核心包中已经包括了Cglib功能，所以也可以直接引入spring-core-3.2.5.jar</li>\n<li>目标类不能为final</li>\n<li>目标对象的方法如果为final&#x2F;static，那么就不会被拦截，即不会执行目标对象额外的业务方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Cglib子类代理工厂</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProxyFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodInterceptor</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 维护目标对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProxyFactory</span><span class=\"params\">(Object target)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 给目标对象创建一个代理对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">getProxyInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.工具类</span></span><br><span class=\"line\">        <span class=\"type\">Enhancer</span> <span class=\"variable\">en</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        <span class=\"comment\">//2.设置父类</span></span><br><span class=\"line\">        en.setSuperclass(target.getClass());</span><br><span class=\"line\">        <span class=\"comment\">//3.设置回调函数</span></span><br><span class=\"line\">        en.setCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//4.创建子类(代理对象)</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> en.create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 步骤1</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;寻找伙伴&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//执行目标对象的方法</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">returnValue</span> <span class=\"operator\">=</span> method.invoke(target, args);</span><br><span class=\"line\">        <span class=\"comment\">// 步骤2</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;很开心&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//目标对象</span></span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>();</span><br><span class=\"line\">        <span class=\"comment\">//代理对象</span></span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> (Player)<span class=\"keyword\">new</span> <span class=\"title class_\">ProxyFactory</span>(target).getProxyInstance();</span><br><span class=\"line\">        <span class=\"comment\">//执行代理对象的方法</span></span><br><span class=\"line\">        proxy.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的代码也非常固定，只有步骤1、2是需要自己写出.</p>\n<p><strong>总结</strong>：三种代理模式各有优缺点和相应的适用范围，主要看目标对象是否实现了接口。</p>\n<p>以Spring框架所选择的代理模式举例：在Spring的AOP编程中：</p>\n<ul>\n<li>如果加入容器的目标对象有实现接口，用JDK代理</li>\n<li>如果目标对象没有实现接口，用Cglib代理</li>\n</ul>\n<h2 id=\"3-行为型\"><a href=\"#3-行为型\" class=\"headerlink\" title=\"3. 行为型\"></a>3. 行为型</h2><h3 id=\"3-1-模板方法模式\"><a href=\"#3-1-模板方法模式\" class=\"headerlink\" title=\"3.1 模板方法模式\"></a>3.1 模板方法模式</h3><p>参考：<a href=\"https://www.cnblogs.com/liaoweipeng/p/5790395.html\">java设计模式之模板方法模式</a></p>\n<p><img src=\"/image/interview_prep/TemplateMethod.png\" alt=\"TemplateMethod\"></p>\n<p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<font color = 'red'>通俗的说的就是有很多相同的步骤的，在某一些地方可能有一些差别适合于这种模式，如大话设计模式中说到的考试场景中，每个人的试卷都是一样的，只有答案不一样。这种场景就适合于模板方法模式。</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用抽象基类定义算法框架</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PlayGame</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法 封装了所有子类所遵循的算法框架</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">play</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        login();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isPlyerWantsBuff())&#123;</span><br><span class=\"line\">            addBuff();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        releaseSkill();</span><br><span class=\"line\">        getAward();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为login和getAward对所有子类是共同的行为，所以没必要向子类过多开放，所以方法定义为private，这样我们在进行子类编码时可以减少复杂度。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这样不需要关注细枝末节，我们只需要关注我们特定业务的实现，这就是模板方法模式的好处。可以封装变与不变，将不变的固化在高层，隐藏其细节。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">login</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;登陆游戏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getAward</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;捡装备&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Hook 钩子函数,提供一个空的或者默认的实现 子类重写该方法，可以自行决定是否挂钩以及如何挂钩</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPlyerWantsBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * addBuff()和releaseSkill()这两个方法我们不知道它们在算法框架中的具体实现，因此定义为抽象方法，</span></span><br><span class=\"line\"><span class=\"comment\">     * 我们用protected进行修饰， 在子类中可见便于进行重写。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addBuff</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 具体子类延迟实现步骤</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 提供制备咖啡的具体实现子类。 具体子类实现延迟步骤，满足特定的业务需求。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AsunaPlayGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PlayGame</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加敏捷Buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;释放圣母圣咏&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">KiritoPlayGame</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">PlayGame</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPlyerWantsBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addBuff</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;加敏捷Buff&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">releaseSkill</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;释放星爆弃疗斩&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Kirito 开始游戏&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">PlayGame</span> <span class=\"variable\">kirito</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">KiritoPlayGame</span>();</span><br><span class=\"line\">        kirito.play();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n*********************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Asuna 开始游戏&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">PlayGame</span> <span class=\"variable\">asuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AsunaPlayGame</span>();</span><br><span class=\"line\">        asuna.play();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Kirito 开始游戏</span><br><span class=\"line\">登陆游戏</span><br><span class=\"line\">释放星爆弃疗斩</span><br><span class=\"line\">捡装备</span><br><span class=\"line\"></span><br><span class=\"line\">*********************************</span><br><span class=\"line\">Asuna 开始游戏</span><br><span class=\"line\">登陆游戏</span><br><span class=\"line\">加敏捷Buff</span><br><span class=\"line\">释放圣母圣咏</span><br><span class=\"line\">捡装备</span><br></pre></td></tr></table></figure>\n\n<p>模板方法模式适用场景：</p>\n<ul>\n<li>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。</li>\n<li>各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的- 操作的模板方法来替换这些不同的代码。</li>\n<li>控制子类扩展。模板方法只在特定点调用“hook”操作，这样就只允许在这些点进行扩展。</li>\n</ul>\n<h3 id=\"3-2-观察者模式\"><a href=\"#3-2-观察者模式\" class=\"headerlink\" title=\"3.2 观察者模式\"></a>3.2 观察者模式</h3><p>参考：<a href=\"https://www.cnblogs.com/luohanguo/p/7825656.html\">JAVA设计模式之观察者模式</a></p>\n<p><img src=\"/image/interview_prep/Observer.png\" alt=\"Observer\"></p>\n<p>定义：在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。<br>解释：其实就是发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。</p>\n<ul>\n<li><strong>抽象被观察者角色</strong>：也就是一个抽象主题，它把所有对观察者对象的引用保存在一个集合中，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者角色。一般用一个抽象类和接口来实现。</li>\n<li><strong>抽象观察者角色</strong>：为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</li>\n<li><strong>具体被观察者角色</strong>：也就是一个具体的主题，在集体主题的内部状态改变时，所有登记过的观察者发出通知。</li>\n<li><strong>具体观察者角色</strong>：实现抽象观察者角色所需要的更新接口，一边使本身的状态与制图的状态相协调。</li>\n</ul>\n<h4 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h4><p>有一个NPC务，不定时发布一些任务，在线玩家就可以收到推送消息，不在线就收不到推送消息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象被观察者接口</span></span><br><span class=\"line\"><span class=\"comment\"> * 声明了添加、删除、通知观察者方法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observerable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer o)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象观察者</span></span><br><span class=\"line\"><span class=\"comment\"> * 定义了一个update()方法，当被观察者调用notifyObservers()方法时，观察者的update()方法会被回调。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String message)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 被观察者，也就是微信公众号服务</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现了Observerable接口，对Observerable接口的三个方法进行了具体实现</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NPC</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observerable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Observer&gt; list;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NPC</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerObserver</span><span class=\"params\">(Observer o)</span>&#123;</span><br><span class=\"line\">        list.add(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">removeObserver</span><span class=\"params\">(Observer o)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!list.isEmpty())&#123;</span><br><span class=\"line\">            list.remove(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyObserver</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Observer o : list)&#123;</span><br><span class=\"line\">            o.update(message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMessage</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;NPC发布新任务： &quot;</span> + message);</span><br><span class=\"line\">        notifyObserver();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 观察者</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现了update方法</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Player</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Observer</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Player</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">update</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">        receive(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receive</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot; 收到任务 &quot;</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">client</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NPC</span> <span class=\"variable\">npc</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NPC</span>();</span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">kirito</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>(<span class=\"string\">&quot;Kirito&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">asuna</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>(<span class=\"string\">&quot;Asuna&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Player</span> <span class=\"variable\">shino</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Player</span>(<span class=\"string\">&quot;Shino&quot;</span>);</span><br><span class=\"line\">        npc.registerObserver(kirito);</span><br><span class=\"line\">        npc.registerObserver(asuna);</span><br><span class=\"line\">        npc.registerObserver(shino);</span><br><span class=\"line\">        npc.setMessage(<span class=\"string\">&quot;第19层boss&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;----------------------------------------------&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Shino掉线&quot;</span>);</span><br><span class=\"line\">        npc.removeObserver(shino);</span><br><span class=\"line\">        npc.setMessage(<span class=\"string\">&quot;第23层boss&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NPC发布新任务： 第19层boss</span><br><span class=\"line\">Kirito 收到任务 第19层boss</span><br><span class=\"line\">Asuna 收到任务 第19层boss</span><br><span class=\"line\">Shino 收到任务 第19层boss</span><br><span class=\"line\">----------------------------------------------</span><br><span class=\"line\">Shino掉线</span><br><span class=\"line\">NPC发布新任务： 第23层boss</span><br><span class=\"line\">Kirito 收到任务 第23层boss</span><br><span class=\"line\">Asuna 收到任务 第23层boss</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ul>\n<li>这个模式是松偶合的。改变主题或观察者中的一方，另一方不会受到影像。</li>\n<li>JDK中也有自带的观察者模式。但是被观察者是一个类而不是接口，限制了它的复用能力。</li>\n<li>在JavaBean和Swing中也可以看到观察者模式的影子。</li>\n</ul>\n"},{"title":"微信跳一跳Python脚本","date":"2018-01-09T11:57:19.000Z","description":"闲着无聊，搞一搞跳一跳。","_content":"\n\n# 微信跳一跳Python脚本\n\nadb+python，用的话先装adb， 感觉80%能跳到中心吧。\n\n### 代码\n\n``` python\n# -*- coding: utf-8 -*-\nimport time\nfrom PIL import Image\nimport os\nimport math\n\ndef isPixFuzzyDiff(r,g,b,pix):\n    if abs(r - pix[0]) < 10 and abs(g - pix[1]) < 10 and abs(b - pix[2]) < 10:\n        return False\n    else:\n        return True\ndef isPixAccurateDiff(r,g,b,pix):\n    if abs(r - pix[0]) < 1 and abs(g - pix[1]) < 1 and abs(b - pix[2]) < 1:\n        return False\n    else:\n        return True\ndef isWhiteCenter(pix):\n    if pix[0] == 245 and pix[1] == 245 and pix[2] ==245:\n        return True\n    else:\n        return False\n    \ndef getDistance(dep,des):\n    if des[0] > dep[0]:\n        x1,x2 = des[0],dep[0]\n    else:\n        x2,x1 = des[0],dep[0]\n    x = (x1 - x2)\n    y = (dep[1] - des[1])/2\n    dis = (x**2+y**2)**0.5\n    return dis\n\n\ndef getTopPixel(pix,height,width,depPix):\n    topPixel = [0,0]\n    if depPix[0] < width/2:\n        startpoint = depPix[0] + 40\n        endpoint = width - 2\n    else:\n        startpoint = 40\n        endpoint = depPix[0] - 40\n    deltaX = x0 = 0\n    flag = False\n    for y in range(int(0.18 * height),int(0.66 * height)):\n        for x in range(startpoint,endpoint):\n            if x == startpoint:           \n                r, g, b = pix[x, y][0:3]\n            elif isPixFuzzyDiff(r,g,b,pix[x,y]):   \n                r, g, b = pix[x, y][0:3]\n                flag = not flag\n                if not flag:\n                    break\n                x0 = x\n            elif flag :                \n                deltaX += 1 \n        else:\n            continue\n        break\n    print deltaX\n    topPixel = [x0 + math.floor(deltaX)/2,y]\n    return topPixel\n# button == buttom 懒得改\ndef getButtonPixel(topPixel,pix):\n    buttonPixel = [topPixel[0],0]\n    r, g, b = pix[topPixel[0],topPixel[1]][0:3]\n    for y in range(topPixel[1],topPixel[1] + 250):\n        if not isPixAccurateDiff(r,g,b,pix[topPixel[0],y]):\n            buttonPixel[1] = y          \n    return buttonPixel\n\ndef getdepPix(pix,height,width):\n    depPix = [0,0]\n    for y in range(1388,200,-1):\n        for x in range(2,width-2):\n            if isPixAccurateDiff(54,60,102,pix[x,y]):\n                continue\n            else:\n                depPix = [x,y]\n                break\n        else:\n            continue\n        break\n    return depPix\n\n\n\ndef main():\n    for i in range(20):\n        filename = str(int(time.time())) + '.png'\n        time.sleep(2)\n        print \"filename: \" + filename\n        time.sleep(2)\n        os.system('adb shell /system/bin/screencap -p /sdcard/jump/' + filename)    \n        print \"screencap\"\n        time.sleep(2)\n        os.system('adb pull /sdcard/jump/' + filename + ' d:/MyCode/Python/jump/' + filename)\n        print \"pull\"\n\n##        filename = '1515321961' + '.png'\n        im = Image.open(filename)\n        pix = im.load()\n        width = im.size[0]\n        height = im.size[1]\n        depPix = getdepPix(pix,height,width)\n        \n        topPixel = getTopPixel(pix,height,width,depPix)\n        buttonPixel = getButtonPixel(topPixel,pix)\n        desPix = [topPixel[0],(buttonPixel[1] - topPixel[1])/2 + topPixel[1]]\n        print topPixel\n        print buttonPixel\n        print desPix\n\n\n        print depPix\n        \n        dis =  getDistance(depPix,desPix)\n        print \"distance: \" + str(dis)\n        swipeTime = 722/475.1 * dis \n        print \"swipeTime:\" + str(swipeTime)\n        os.system(\"adb shell input swipe 250 250 300 300  \" + str(int(swipeTime)))\n    \nif __name__ == '__main__':\n    main()\n\n\n```","source":"_posts/微信跳一跳python脚本.md","raw":"---\ntitle: 微信跳一跳Python脚本\ndate: 2018-01-09 19:57:19\ntags: [Python]\ncategories: Python\ndescription: 闲着无聊，搞一搞跳一跳。\n---\n\n\n# 微信跳一跳Python脚本\n\nadb+python，用的话先装adb， 感觉80%能跳到中心吧。\n\n### 代码\n\n``` python\n# -*- coding: utf-8 -*-\nimport time\nfrom PIL import Image\nimport os\nimport math\n\ndef isPixFuzzyDiff(r,g,b,pix):\n    if abs(r - pix[0]) < 10 and abs(g - pix[1]) < 10 and abs(b - pix[2]) < 10:\n        return False\n    else:\n        return True\ndef isPixAccurateDiff(r,g,b,pix):\n    if abs(r - pix[0]) < 1 and abs(g - pix[1]) < 1 and abs(b - pix[2]) < 1:\n        return False\n    else:\n        return True\ndef isWhiteCenter(pix):\n    if pix[0] == 245 and pix[1] == 245 and pix[2] ==245:\n        return True\n    else:\n        return False\n    \ndef getDistance(dep,des):\n    if des[0] > dep[0]:\n        x1,x2 = des[0],dep[0]\n    else:\n        x2,x1 = des[0],dep[0]\n    x = (x1 - x2)\n    y = (dep[1] - des[1])/2\n    dis = (x**2+y**2)**0.5\n    return dis\n\n\ndef getTopPixel(pix,height,width,depPix):\n    topPixel = [0,0]\n    if depPix[0] < width/2:\n        startpoint = depPix[0] + 40\n        endpoint = width - 2\n    else:\n        startpoint = 40\n        endpoint = depPix[0] - 40\n    deltaX = x0 = 0\n    flag = False\n    for y in range(int(0.18 * height),int(0.66 * height)):\n        for x in range(startpoint,endpoint):\n            if x == startpoint:           \n                r, g, b = pix[x, y][0:3]\n            elif isPixFuzzyDiff(r,g,b,pix[x,y]):   \n                r, g, b = pix[x, y][0:3]\n                flag = not flag\n                if not flag:\n                    break\n                x0 = x\n            elif flag :                \n                deltaX += 1 \n        else:\n            continue\n        break\n    print deltaX\n    topPixel = [x0 + math.floor(deltaX)/2,y]\n    return topPixel\n# button == buttom 懒得改\ndef getButtonPixel(topPixel,pix):\n    buttonPixel = [topPixel[0],0]\n    r, g, b = pix[topPixel[0],topPixel[1]][0:3]\n    for y in range(topPixel[1],topPixel[1] + 250):\n        if not isPixAccurateDiff(r,g,b,pix[topPixel[0],y]):\n            buttonPixel[1] = y          \n    return buttonPixel\n\ndef getdepPix(pix,height,width):\n    depPix = [0,0]\n    for y in range(1388,200,-1):\n        for x in range(2,width-2):\n            if isPixAccurateDiff(54,60,102,pix[x,y]):\n                continue\n            else:\n                depPix = [x,y]\n                break\n        else:\n            continue\n        break\n    return depPix\n\n\n\ndef main():\n    for i in range(20):\n        filename = str(int(time.time())) + '.png'\n        time.sleep(2)\n        print \"filename: \" + filename\n        time.sleep(2)\n        os.system('adb shell /system/bin/screencap -p /sdcard/jump/' + filename)    \n        print \"screencap\"\n        time.sleep(2)\n        os.system('adb pull /sdcard/jump/' + filename + ' d:/MyCode/Python/jump/' + filename)\n        print \"pull\"\n\n##        filename = '1515321961' + '.png'\n        im = Image.open(filename)\n        pix = im.load()\n        width = im.size[0]\n        height = im.size[1]\n        depPix = getdepPix(pix,height,width)\n        \n        topPixel = getTopPixel(pix,height,width,depPix)\n        buttonPixel = getButtonPixel(topPixel,pix)\n        desPix = [topPixel[0],(buttonPixel[1] - topPixel[1])/2 + topPixel[1]]\n        print topPixel\n        print buttonPixel\n        print desPix\n\n\n        print depPix\n        \n        dis =  getDistance(depPix,desPix)\n        print \"distance: \" + str(dis)\n        swipeTime = 722/475.1 * dis \n        print \"swipeTime:\" + str(swipeTime)\n        os.system(\"adb shell input swipe 250 250 300 300  \" + str(int(swipeTime)))\n    \nif __name__ == '__main__':\n    main()\n\n\n```","slug":"微信跳一跳python脚本","published":1,"updated":"2025-02-22T18:52:19.825Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8ay001qv001dfz3h3bl","content":"<h1 id=\"微信跳一跳Python脚本\"><a href=\"#微信跳一跳Python脚本\" class=\"headerlink\" title=\"微信跳一跳Python脚本\"></a>微信跳一跳Python脚本</h1><p>adb+python，用的话先装adb， 感觉80%能跳到中心吧。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">isPixFuzzyDiff</span>(<span class=\"params\">r,g,b,pix</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(r - pix[<span class=\"number\">0</span>]) &lt; <span class=\"number\">10</span> <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(g - pix[<span class=\"number\">1</span>]) &lt; <span class=\"number\">10</span> <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(b - pix[<span class=\"number\">2</span>]) &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">isPixAccurateDiff</span>(<span class=\"params\">r,g,b,pix</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(r - pix[<span class=\"number\">0</span>]) &lt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(g - pix[<span class=\"number\">1</span>]) &lt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(b - pix[<span class=\"number\">2</span>]) &lt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">isWhiteCenter</span>(<span class=\"params\">pix</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pix[<span class=\"number\">0</span>] == <span class=\"number\">245</span> <span class=\"keyword\">and</span> pix[<span class=\"number\">1</span>] == <span class=\"number\">245</span> <span class=\"keyword\">and</span> pix[<span class=\"number\">2</span>] ==<span class=\"number\">245</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getDistance</span>(<span class=\"params\">dep,des</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> des[<span class=\"number\">0</span>] &gt; dep[<span class=\"number\">0</span>]:</span><br><span class=\"line\">        x1,x2 = des[<span class=\"number\">0</span>],dep[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        x2,x1 = des[<span class=\"number\">0</span>],dep[<span class=\"number\">0</span>]</span><br><span class=\"line\">    x = (x1 - x2)</span><br><span class=\"line\">    y = (dep[<span class=\"number\">1</span>] - des[<span class=\"number\">1</span>])/<span class=\"number\">2</span></span><br><span class=\"line\">    dis = (x**<span class=\"number\">2</span>+y**<span class=\"number\">2</span>)**<span class=\"number\">0.5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getTopPixel</span>(<span class=\"params\">pix,height,width,depPix</span>):</span><br><span class=\"line\">    topPixel = [<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> depPix[<span class=\"number\">0</span>] &lt; width/<span class=\"number\">2</span>:</span><br><span class=\"line\">        startpoint = depPix[<span class=\"number\">0</span>] + <span class=\"number\">40</span></span><br><span class=\"line\">        endpoint = width - <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        startpoint = <span class=\"number\">40</span></span><br><span class=\"line\">        endpoint = depPix[<span class=\"number\">0</span>] - <span class=\"number\">40</span></span><br><span class=\"line\">    deltaX = x0 = <span class=\"number\">0</span></span><br><span class=\"line\">    flag = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">int</span>(<span class=\"number\">0.18</span> * height),<span class=\"built_in\">int</span>(<span class=\"number\">0.66</span> * height)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(startpoint,endpoint):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x == startpoint:           </span><br><span class=\"line\">                r, g, b = pix[x, y][<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isPixFuzzyDiff(r,g,b,pix[x,y]):   </span><br><span class=\"line\">                r, g, b = pix[x, y][<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">                flag = <span class=\"keyword\">not</span> flag</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                x0 = x</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> flag :                </span><br><span class=\"line\">                deltaX += <span class=\"number\">1</span> </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> deltaX</span><br><span class=\"line\">    topPixel = [x0 + math.floor(deltaX)/<span class=\"number\">2</span>,y]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> topPixel</span><br><span class=\"line\"><span class=\"comment\"># button == buttom 懒得改</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getButtonPixel</span>(<span class=\"params\">topPixel,pix</span>):</span><br><span class=\"line\">    buttonPixel = [topPixel[<span class=\"number\">0</span>],<span class=\"number\">0</span>]</span><br><span class=\"line\">    r, g, b = pix[topPixel[<span class=\"number\">0</span>],topPixel[<span class=\"number\">1</span>]][<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(topPixel[<span class=\"number\">1</span>],topPixel[<span class=\"number\">1</span>] + <span class=\"number\">250</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isPixAccurateDiff(r,g,b,pix[topPixel[<span class=\"number\">0</span>],y]):</span><br><span class=\"line\">            buttonPixel[<span class=\"number\">1</span>] = y          </span><br><span class=\"line\">    <span class=\"keyword\">return</span> buttonPixel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getdepPix</span>(<span class=\"params\">pix,height,width</span>):</span><br><span class=\"line\">    depPix = [<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1388</span>,<span class=\"number\">200</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,width-<span class=\"number\">2</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isPixAccurateDiff(<span class=\"number\">54</span>,<span class=\"number\">60</span>,<span class=\"number\">102</span>,pix[x,y]):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                depPix = [x,y]</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> depPix</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        filename = <span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(time.time())) + <span class=\"string\">&#x27;.png&#x27;</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;filename: &quot;</span> + filename</span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        os.system(<span class=\"string\">&#x27;adb shell /system/bin/screencap -p /sdcard/jump/&#x27;</span> + filename)    </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;screencap&quot;</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        os.system(<span class=\"string\">&#x27;adb pull /sdcard/jump/&#x27;</span> + filename + <span class=\"string\">&#x27; d:/MyCode/Python/jump/&#x27;</span> + filename)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;pull&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##        filename = &#x27;1515321961&#x27; + &#x27;.png&#x27;</span></span><br><span class=\"line\">        im = Image.<span class=\"built_in\">open</span>(filename)</span><br><span class=\"line\">        pix = im.load()</span><br><span class=\"line\">        width = im.size[<span class=\"number\">0</span>]</span><br><span class=\"line\">        height = im.size[<span class=\"number\">1</span>]</span><br><span class=\"line\">        depPix = getdepPix(pix,height,width)</span><br><span class=\"line\">        </span><br><span class=\"line\">        topPixel = getTopPixel(pix,height,width,depPix)</span><br><span class=\"line\">        buttonPixel = getButtonPixel(topPixel,pix)</span><br><span class=\"line\">        desPix = [topPixel[<span class=\"number\">0</span>],(buttonPixel[<span class=\"number\">1</span>] - topPixel[<span class=\"number\">1</span>])/<span class=\"number\">2</span> + topPixel[<span class=\"number\">1</span>]]</span><br><span class=\"line\">        <span class=\"built_in\">print</span> topPixel</span><br><span class=\"line\">        <span class=\"built_in\">print</span> buttonPixel</span><br><span class=\"line\">        <span class=\"built_in\">print</span> desPix</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span> depPix</span><br><span class=\"line\">        </span><br><span class=\"line\">        dis =  getDistance(depPix,desPix)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;distance: &quot;</span> + <span class=\"built_in\">str</span>(dis)</span><br><span class=\"line\">        swipeTime = <span class=\"number\">722</span>/<span class=\"number\">475.1</span> * dis </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;swipeTime:&quot;</span> + <span class=\"built_in\">str</span>(swipeTime)</span><br><span class=\"line\">        os.system(<span class=\"string\">&quot;adb shell input swipe 250 250 300 300  &quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(swipeTime)))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","length":2717,"excerpt":"","more":"<h1 id=\"微信跳一跳Python脚本\"><a href=\"#微信跳一跳Python脚本\" class=\"headerlink\" title=\"微信跳一跳Python脚本\"></a>微信跳一跳Python脚本</h1><p>adb+python，用的话先装adb， 感觉80%能跳到中心吧。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">isPixFuzzyDiff</span>(<span class=\"params\">r,g,b,pix</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(r - pix[<span class=\"number\">0</span>]) &lt; <span class=\"number\">10</span> <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(g - pix[<span class=\"number\">1</span>]) &lt; <span class=\"number\">10</span> <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(b - pix[<span class=\"number\">2</span>]) &lt; <span class=\"number\">10</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">isPixAccurateDiff</span>(<span class=\"params\">r,g,b,pix</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(r - pix[<span class=\"number\">0</span>]) &lt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(g - pix[<span class=\"number\">1</span>]) &lt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"built_in\">abs</span>(b - pix[<span class=\"number\">2</span>]) &lt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">isWhiteCenter</span>(<span class=\"params\">pix</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> pix[<span class=\"number\">0</span>] == <span class=\"number\">245</span> <span class=\"keyword\">and</span> pix[<span class=\"number\">1</span>] == <span class=\"number\">245</span> <span class=\"keyword\">and</span> pix[<span class=\"number\">2</span>] ==<span class=\"number\">245</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getDistance</span>(<span class=\"params\">dep,des</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> des[<span class=\"number\">0</span>] &gt; dep[<span class=\"number\">0</span>]:</span><br><span class=\"line\">        x1,x2 = des[<span class=\"number\">0</span>],dep[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        x2,x1 = des[<span class=\"number\">0</span>],dep[<span class=\"number\">0</span>]</span><br><span class=\"line\">    x = (x1 - x2)</span><br><span class=\"line\">    y = (dep[<span class=\"number\">1</span>] - des[<span class=\"number\">1</span>])/<span class=\"number\">2</span></span><br><span class=\"line\">    dis = (x**<span class=\"number\">2</span>+y**<span class=\"number\">2</span>)**<span class=\"number\">0.5</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dis</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getTopPixel</span>(<span class=\"params\">pix,height,width,depPix</span>):</span><br><span class=\"line\">    topPixel = [<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> depPix[<span class=\"number\">0</span>] &lt; width/<span class=\"number\">2</span>:</span><br><span class=\"line\">        startpoint = depPix[<span class=\"number\">0</span>] + <span class=\"number\">40</span></span><br><span class=\"line\">        endpoint = width - <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        startpoint = <span class=\"number\">40</span></span><br><span class=\"line\">        endpoint = depPix[<span class=\"number\">0</span>] - <span class=\"number\">40</span></span><br><span class=\"line\">    deltaX = x0 = <span class=\"number\">0</span></span><br><span class=\"line\">    flag = <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">int</span>(<span class=\"number\">0.18</span> * height),<span class=\"built_in\">int</span>(<span class=\"number\">0.66</span> * height)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(startpoint,endpoint):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x == startpoint:           </span><br><span class=\"line\">                r, g, b = pix[x, y][<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> isPixFuzzyDiff(r,g,b,pix[x,y]):   </span><br><span class=\"line\">                r, g, b = pix[x, y][<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">                flag = <span class=\"keyword\">not</span> flag</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span></span><br><span class=\"line\">                x0 = x</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> flag :                </span><br><span class=\"line\">                deltaX += <span class=\"number\">1</span> </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span> deltaX</span><br><span class=\"line\">    topPixel = [x0 + math.floor(deltaX)/<span class=\"number\">2</span>,y]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> topPixel</span><br><span class=\"line\"><span class=\"comment\"># button == buttom 懒得改</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getButtonPixel</span>(<span class=\"params\">topPixel,pix</span>):</span><br><span class=\"line\">    buttonPixel = [topPixel[<span class=\"number\">0</span>],<span class=\"number\">0</span>]</span><br><span class=\"line\">    r, g, b = pix[topPixel[<span class=\"number\">0</span>],topPixel[<span class=\"number\">1</span>]][<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(topPixel[<span class=\"number\">1</span>],topPixel[<span class=\"number\">1</span>] + <span class=\"number\">250</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isPixAccurateDiff(r,g,b,pix[topPixel[<span class=\"number\">0</span>],y]):</span><br><span class=\"line\">            buttonPixel[<span class=\"number\">1</span>] = y          </span><br><span class=\"line\">    <span class=\"keyword\">return</span> buttonPixel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getdepPix</span>(<span class=\"params\">pix,height,width</span>):</span><br><span class=\"line\">    depPix = [<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1388</span>,<span class=\"number\">200</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,width-<span class=\"number\">2</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> isPixAccurateDiff(<span class=\"number\">54</span>,<span class=\"number\">60</span>,<span class=\"number\">102</span>,pix[x,y]):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                depPix = [x,y]</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> depPix</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">        filename = <span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(time.time())) + <span class=\"string\">&#x27;.png&#x27;</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;filename: &quot;</span> + filename</span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        os.system(<span class=\"string\">&#x27;adb shell /system/bin/screencap -p /sdcard/jump/&#x27;</span> + filename)    </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;screencap&quot;</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        os.system(<span class=\"string\">&#x27;adb pull /sdcard/jump/&#x27;</span> + filename + <span class=\"string\">&#x27; d:/MyCode/Python/jump/&#x27;</span> + filename)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;pull&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##        filename = &#x27;1515321961&#x27; + &#x27;.png&#x27;</span></span><br><span class=\"line\">        im = Image.<span class=\"built_in\">open</span>(filename)</span><br><span class=\"line\">        pix = im.load()</span><br><span class=\"line\">        width = im.size[<span class=\"number\">0</span>]</span><br><span class=\"line\">        height = im.size[<span class=\"number\">1</span>]</span><br><span class=\"line\">        depPix = getdepPix(pix,height,width)</span><br><span class=\"line\">        </span><br><span class=\"line\">        topPixel = getTopPixel(pix,height,width,depPix)</span><br><span class=\"line\">        buttonPixel = getButtonPixel(topPixel,pix)</span><br><span class=\"line\">        desPix = [topPixel[<span class=\"number\">0</span>],(buttonPixel[<span class=\"number\">1</span>] - topPixel[<span class=\"number\">1</span>])/<span class=\"number\">2</span> + topPixel[<span class=\"number\">1</span>]]</span><br><span class=\"line\">        <span class=\"built_in\">print</span> topPixel</span><br><span class=\"line\">        <span class=\"built_in\">print</span> buttonPixel</span><br><span class=\"line\">        <span class=\"built_in\">print</span> desPix</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span> depPix</span><br><span class=\"line\">        </span><br><span class=\"line\">        dis =  getDistance(depPix,desPix)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;distance: &quot;</span> + <span class=\"built_in\">str</span>(dis)</span><br><span class=\"line\">        swipeTime = <span class=\"number\">722</span>/<span class=\"number\">475.1</span> * dis </span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;swipeTime:&quot;</span> + <span class=\"built_in\">str</span>(swipeTime)</span><br><span class=\"line\">        os.system(<span class=\"string\">&quot;adb shell input swipe 250 250 300 300  &quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">int</span>(swipeTime)))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"搭建ShadowSocks","date":"2018-09-21T10:55:35.000Z","photos":["https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/3.jpg?raw=true"],"description":"科学上网必备","_content":"\n\n# 1. 搭建ShadowSocks\n\n\n## 1.1 客户端\n\n下载\nhttps://shadowsocks.org/en/download/clients.html\n\n![ssclient.png](/image/ssclient.png)\n\n## 1.2 ss的配制与使用\n\n### 1. 检查Python版本\n\n```\n$ python -version\n```\n\n### 2. 安装m2crypto和python-setuptools\n\n```\n$ yum install m2crypto python-setuptools\n```\n\n### 3. 安装pip\n\n```\nyum -y install epel-release\n\nyum -y install python-pip\n```\n\n或者（没试过）\n```\n$ easy_install pip\n```\n\n### 4. 安装ss\n\n```\n$ pip install shadowsocks\n```\n\n### 5. 配置服务器参数\n\n```\n$ vi /etc/shadowsocks.json\n```\n\n```\n{                                  \n    \"server\":\"my_server_ip\",          //服务器的IP地址\n    \"server_port\":7711,              //服务器的端口\n    \"local_address\": \"127.0.0.1\",       //本机IP地址\n    \"local_port\":1080,               //本机端口\n    \"password\":\"mypassword\",        //自己设定的密码\n    \"timeout\":300,                  //超出时间\n    \"method\":\"aes-256-cfb\",          //加密方法，推荐使用\"aes-256-cfb\"\n    \"fast_open\": false                //true 或 false}\n}\n```\n\n若是多用户模式，将server_port和password合并为port_password：\n\n```\n\"port_password\": {\n         \"443\": \" mypassword 1”,  //对应端口设定不同的密码\n         \"8888\": \" mypassword 2”\n     },\n```\n\n### 6. 安装gevent\n\nGevent可以提高ss性能，由于gevent依赖于libevent和greenlet\n\n```\n$ yum install -y libevent\n$ pip install greenlet\n$ pip install gevent\n```\n\n### 7. 配置防火墙\n\n为了提高系统的安全性，需要安装防火墙\n\n```\n$ yum install firewalld\n```\n\n启动防火墙\n\n```\n$ systemctl start firewalld\n```\n\n开启相应端口\n\n```\n$ firewall-cmd --permanent --zone=public --add-port=443/tcp\n$ firewall-cmd --reload\n```\n##  1.3 查看修改ss服务器的端口密码\n\n- 查看当前ss服务器所开放的端口\n\n```\nss -lntp | grep ssserver\n```\n\n- 查看当前ss服务器的密码，通过以下命令可见ss的配置文件，配置文件中自然有密码\n\n```\nps aux | grep ssserver\n```\n\n- 用cat查看下配置文件即可看见密码了，vim修改\n\n```\nvim /etc/shadowsocks.json\n```\n- ss启动停止方法\n\n启动，停止，重启，状态：\n\n```shell\nssserver -c /etc/shadowsocks.json -d start\n\nssserver -c /etc/shadowsocks.json -d stop\n\nssserver -c /etc/shadowsocks.json -d restart\n```\n\n参考：\nhttps://github.com/easonhuang123/blog/issues/1\nhttps://blog.whsir.com/post-1045.html\n\n# 2. 搭建SSR\n\n## 2.1 服务器\n\n### 1.install\n\n1. install git\n2. git clone https://github.com/shadowsocksr/shadowsocksr.git （github ssr）\n\n### 2.Usage for single user on linux platform\n\nIf you clone it into \"~~/shadowsocksr\"move to \"~~/shadowsocksr\", then run:\n\n```shell\nbash initcfg.sh\n```\n\nmove to \"~/shadowsocksr/shadowsocks\", then run:\n\n```shell\npython server.py -p 443 -k password -m aes-128-cfb -O auth_aes128_md5 -o tls1.2_ticket_auth_compatible\n```\n\nCheck all the options via `-h`.\n\nYou can also use a configuration file instead (recommend), move to \"~~/shadowsocksr\" and edit the file \"user-config.json\", then move to \"~~/shadowsocksr/shadowsocks\" again, just run:\n\n```shell\npython server.py\n```\n\nTo run in the background:\n\n```shell\n./logrun.sh\n```\n\nTo stop:\n\n```\n./stop.sh\n```\n\nTo monitor the log:\n\n```\n./tail.sh\n```\n\n### 3.配置firewall，开放端口 （for centos 7）\n\n```shell\n[root@centos7 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent\n[root@centos7 ~]# firewall-cmd --reload　# 重启防火墙\n```\n\n## 2.2 客户端\n\ngithub ssr\n\n# 3. 关于firewall\n\n<https://www.cnblogs.com/Sungeek/p/8257681.html>\n\n当下面实验修改的是永久生效的策略记录时，必须执行\"**--reload**\"参数后才能立即生效，否则要重启后再生效。\n\n**查看当前的区域：**\n\n```shell\n[root@CentOS7 ~]# firewall-cmd --get-default-zone\npublic\n```\n\n**查询网卡的区域：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --get-zone-of-interface=eno16777736\npublic\n```\n\n**在public中分别查询ssh与http服务是否被允许：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --zone=public --query-service=ssh\nyes\n[root@Centos7 ~]# firewall-cmd --zone=public --query-service=http\nno\n```\n\n**实例A:允许https服务流量通过public区域，要求立即生效且永久有效：**\n\n　　**方法一:分别设置当前生效与永久有效的规则记录：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --zone=public --add-service=https\nsuccess\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-service=https\nsuccess\n```\n\n　　**方法二:设置永久生效的规则记录后读取记录：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-service=https\nsuccess\n[root@Centos7 ~]# firewall-cmd --reload\nsuccess\n```\n\n**实例B:不再允许http服务流量通过public区域，要求立即生效且永久生效：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --remove-service=http\nsuccess\n\n[root@Centos7 ~]# firewall-cmd --reload \nsuccess\n```\n\n**实例C:允许8080与8081端口流量通过public区域，立即生效且永久生效：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-port=8080-8081/tcp\nsuccess\n[root@Centos7 ~]# firewall-cmd --reload \nsuccess\n```\n\n**实例D:查看模拟实验中的规则：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --zone=public --list-services \ndhcpv6-client http https ssh\n[root@Centos7 ~]# firewall-cmd --zone=public --list-ports \n8080-8081/tcp\n```\n\n**实例E：将访问主机888端口的请求转发至22端口：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.0.100\nsuccess\n[root@Centos7 ~]# firewall-cmd --reload \nsuccess\n```\n\n例如安装Nagios后，要开放5666端口与服务器连接，命令如下\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)\n\n```shell\n[root@centos7 ~]# firewall-cmd --add-port=5666/tcp　即时打开，这里也可以是一个端口范围，如1000-2000/tcp\nsuccess\n[root@centos7 ~]# firewall-cmd --permanent --add-port=5666/tcp　写入配置文件\nsuccess\n[root@centos7 ~]# firewall-cmd --reload　重启防火墙\nsuccess\n[root@centos7 ~]#\n```\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)\n\n**CentOS 7快速开放端口：**\n\nCentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，baidu之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：\n\n**开启端口**\n\n```shell\n[root@centos7 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent\n```\n\n**查询端口号80 是否开启：**\n\n \n\n```shell\n[root@centos7 ~]# firewall-cmd --query-port=80/tcp\n```\n\n**查询有哪些端口是开启的:**\n\n \n\n```shell\n[root@centos7 ~]# firewall-cmd --list-port\n```\n\n**![img](https://images2018.cnblogs.com/blog/872610/201806/872610-20180607143807700-372634451.png)**\n\n**命令含义：**\n\n--zone #作用域\n--add-port=80/tcp #添加端口，格式为：端口/通讯协议\n--permanent #永久生效，没有此参数重启后失效\n\n**重启防火墙**\n\n```shell\n[root@centos7 ~]# firewall-cmd --reload\n```","source":"_posts/搭建ShadowSocks.md","raw":"---\ntitle: 搭建ShadowSocks\ndate: 2018-9-21 18:55:35\ntags: [ShadowSocks]\ncategories: 科学上网\nphotos:\n  - \"https://github.com/LostEvangel/LostEvangel.github.io/blob/master/image/cover/3.jpg?raw=true\"\ndescription: 科学上网必备\n---\n\n\n# 1. 搭建ShadowSocks\n\n\n## 1.1 客户端\n\n下载\nhttps://shadowsocks.org/en/download/clients.html\n\n![ssclient.png](/image/ssclient.png)\n\n## 1.2 ss的配制与使用\n\n### 1. 检查Python版本\n\n```\n$ python -version\n```\n\n### 2. 安装m2crypto和python-setuptools\n\n```\n$ yum install m2crypto python-setuptools\n```\n\n### 3. 安装pip\n\n```\nyum -y install epel-release\n\nyum -y install python-pip\n```\n\n或者（没试过）\n```\n$ easy_install pip\n```\n\n### 4. 安装ss\n\n```\n$ pip install shadowsocks\n```\n\n### 5. 配置服务器参数\n\n```\n$ vi /etc/shadowsocks.json\n```\n\n```\n{                                  \n    \"server\":\"my_server_ip\",          //服务器的IP地址\n    \"server_port\":7711,              //服务器的端口\n    \"local_address\": \"127.0.0.1\",       //本机IP地址\n    \"local_port\":1080,               //本机端口\n    \"password\":\"mypassword\",        //自己设定的密码\n    \"timeout\":300,                  //超出时间\n    \"method\":\"aes-256-cfb\",          //加密方法，推荐使用\"aes-256-cfb\"\n    \"fast_open\": false                //true 或 false}\n}\n```\n\n若是多用户模式，将server_port和password合并为port_password：\n\n```\n\"port_password\": {\n         \"443\": \" mypassword 1”,  //对应端口设定不同的密码\n         \"8888\": \" mypassword 2”\n     },\n```\n\n### 6. 安装gevent\n\nGevent可以提高ss性能，由于gevent依赖于libevent和greenlet\n\n```\n$ yum install -y libevent\n$ pip install greenlet\n$ pip install gevent\n```\n\n### 7. 配置防火墙\n\n为了提高系统的安全性，需要安装防火墙\n\n```\n$ yum install firewalld\n```\n\n启动防火墙\n\n```\n$ systemctl start firewalld\n```\n\n开启相应端口\n\n```\n$ firewall-cmd --permanent --zone=public --add-port=443/tcp\n$ firewall-cmd --reload\n```\n##  1.3 查看修改ss服务器的端口密码\n\n- 查看当前ss服务器所开放的端口\n\n```\nss -lntp | grep ssserver\n```\n\n- 查看当前ss服务器的密码，通过以下命令可见ss的配置文件，配置文件中自然有密码\n\n```\nps aux | grep ssserver\n```\n\n- 用cat查看下配置文件即可看见密码了，vim修改\n\n```\nvim /etc/shadowsocks.json\n```\n- ss启动停止方法\n\n启动，停止，重启，状态：\n\n```shell\nssserver -c /etc/shadowsocks.json -d start\n\nssserver -c /etc/shadowsocks.json -d stop\n\nssserver -c /etc/shadowsocks.json -d restart\n```\n\n参考：\nhttps://github.com/easonhuang123/blog/issues/1\nhttps://blog.whsir.com/post-1045.html\n\n# 2. 搭建SSR\n\n## 2.1 服务器\n\n### 1.install\n\n1. install git\n2. git clone https://github.com/shadowsocksr/shadowsocksr.git （github ssr）\n\n### 2.Usage for single user on linux platform\n\nIf you clone it into \"~~/shadowsocksr\"move to \"~~/shadowsocksr\", then run:\n\n```shell\nbash initcfg.sh\n```\n\nmove to \"~/shadowsocksr/shadowsocks\", then run:\n\n```shell\npython server.py -p 443 -k password -m aes-128-cfb -O auth_aes128_md5 -o tls1.2_ticket_auth_compatible\n```\n\nCheck all the options via `-h`.\n\nYou can also use a configuration file instead (recommend), move to \"~~/shadowsocksr\" and edit the file \"user-config.json\", then move to \"~~/shadowsocksr/shadowsocks\" again, just run:\n\n```shell\npython server.py\n```\n\nTo run in the background:\n\n```shell\n./logrun.sh\n```\n\nTo stop:\n\n```\n./stop.sh\n```\n\nTo monitor the log:\n\n```\n./tail.sh\n```\n\n### 3.配置firewall，开放端口 （for centos 7）\n\n```shell\n[root@centos7 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent\n[root@centos7 ~]# firewall-cmd --reload　# 重启防火墙\n```\n\n## 2.2 客户端\n\ngithub ssr\n\n# 3. 关于firewall\n\n<https://www.cnblogs.com/Sungeek/p/8257681.html>\n\n当下面实验修改的是永久生效的策略记录时，必须执行\"**--reload**\"参数后才能立即生效，否则要重启后再生效。\n\n**查看当前的区域：**\n\n```shell\n[root@CentOS7 ~]# firewall-cmd --get-default-zone\npublic\n```\n\n**查询网卡的区域：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --get-zone-of-interface=eno16777736\npublic\n```\n\n**在public中分别查询ssh与http服务是否被允许：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --zone=public --query-service=ssh\nyes\n[root@Centos7 ~]# firewall-cmd --zone=public --query-service=http\nno\n```\n\n**实例A:允许https服务流量通过public区域，要求立即生效且永久有效：**\n\n　　**方法一:分别设置当前生效与永久有效的规则记录：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --zone=public --add-service=https\nsuccess\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-service=https\nsuccess\n```\n\n　　**方法二:设置永久生效的规则记录后读取记录：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-service=https\nsuccess\n[root@Centos7 ~]# firewall-cmd --reload\nsuccess\n```\n\n**实例B:不再允许http服务流量通过public区域，要求立即生效且永久生效：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --remove-service=http\nsuccess\n\n[root@Centos7 ~]# firewall-cmd --reload \nsuccess\n```\n\n**实例C:允许8080与8081端口流量通过public区域，立即生效且永久生效：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-port=8080-8081/tcp\nsuccess\n[root@Centos7 ~]# firewall-cmd --reload \nsuccess\n```\n\n**实例D:查看模拟实验中的规则：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --zone=public --list-services \ndhcpv6-client http https ssh\n[root@Centos7 ~]# firewall-cmd --zone=public --list-ports \n8080-8081/tcp\n```\n\n**实例E：将访问主机888端口的请求转发至22端口：**\n\n```shell\n[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.0.100\nsuccess\n[root@Centos7 ~]# firewall-cmd --reload \nsuccess\n```\n\n例如安装Nagios后，要开放5666端口与服务器连接，命令如下\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)\n\n```shell\n[root@centos7 ~]# firewall-cmd --add-port=5666/tcp　即时打开，这里也可以是一个端口范围，如1000-2000/tcp\nsuccess\n[root@centos7 ~]# firewall-cmd --permanent --add-port=5666/tcp　写入配置文件\nsuccess\n[root@centos7 ~]# firewall-cmd --reload　重启防火墙\nsuccess\n[root@centos7 ~]#\n```\n\n[![复制代码](https://common.cnblogs.com/images/copycode.gif)](javascript:void(0);)\n\n**CentOS 7快速开放端口：**\n\nCentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，baidu之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：\n\n**开启端口**\n\n```shell\n[root@centos7 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent\n```\n\n**查询端口号80 是否开启：**\n\n \n\n```shell\n[root@centos7 ~]# firewall-cmd --query-port=80/tcp\n```\n\n**查询有哪些端口是开启的:**\n\n \n\n```shell\n[root@centos7 ~]# firewall-cmd --list-port\n```\n\n**![img](https://images2018.cnblogs.com/blog/872610/201806/872610-20180607143807700-372634451.png)**\n\n**命令含义：**\n\n--zone #作用域\n--add-port=80/tcp #添加端口，格式为：端口/通讯协议\n--permanent #永久生效，没有此参数重启后失效\n\n**重启防火墙**\n\n```shell\n[root@centos7 ~]# firewall-cmd --reload\n```","slug":"搭建ShadowSocks","published":1,"updated":"2025-02-22T18:52:19.825Z","comments":1,"layout":"post","_id":"cm7hqj8ay001tv001hqq4dlwe","content":"<h1 id=\"1-搭建ShadowSocks\"><a href=\"#1-搭建ShadowSocks\" class=\"headerlink\" title=\"1. 搭建ShadowSocks\"></a>1. 搭建ShadowSocks</h1><h2 id=\"1-1-客户端\"><a href=\"#1-1-客户端\" class=\"headerlink\" title=\"1.1 客户端\"></a>1.1 客户端</h2><p>下载<br><a href=\"https://shadowsocks.org/en/download/clients.html\">https://shadowsocks.org/en/download/clients.html</a></p>\n<p><img src=\"/image/ssclient.png\" alt=\"ssclient.png\"></p>\n<h2 id=\"1-2-ss的配制与使用\"><a href=\"#1-2-ss的配制与使用\" class=\"headerlink\" title=\"1.2 ss的配制与使用\"></a>1.2 ss的配制与使用</h2><h3 id=\"1-检查Python版本\"><a href=\"#1-检查Python版本\" class=\"headerlink\" title=\"1. 检查Python版本\"></a>1. 检查Python版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装m2crypto和python-setuptools\"><a href=\"#2-安装m2crypto和python-setuptools\" class=\"headerlink\" title=\"2. 安装m2crypto和python-setuptools\"></a>2. 安装m2crypto和python-setuptools</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install m2crypto python-setuptools</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装pip\"><a href=\"#3-安装pip\" class=\"headerlink\" title=\"3. 安装pip\"></a>3. 安装pip</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install python-pip</span><br></pre></td></tr></table></figure>\n\n<p>或者（没试过）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ easy_install pip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-安装ss\"><a href=\"#4-安装ss\" class=\"headerlink\" title=\"4. 安装ss\"></a>4. 安装ss</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-配置服务器参数\"><a href=\"#5-配置服务器参数\" class=\"headerlink\" title=\"5. 配置服务器参数\"></a>5. 配置服务器参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;                                  </span><br><span class=\"line\">    &quot;server&quot;:&quot;my_server_ip&quot;,          //服务器的IP地址</span><br><span class=\"line\">    &quot;server_port&quot;:7711,              //服务器的端口</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,       //本机IP地址</span><br><span class=\"line\">    &quot;local_port&quot;:1080,               //本机端口</span><br><span class=\"line\">    &quot;password&quot;:&quot;mypassword&quot;,        //自己设定的密码</span><br><span class=\"line\">    &quot;timeout&quot;:300,                  //超出时间</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,          //加密方法，推荐使用&quot;aes-256-cfb&quot;</span><br><span class=\"line\">    &quot;fast_open&quot;: false                //true 或 false&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若是多用户模式，将server_port和password合并为port_password：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;port_password&quot;: &#123;</span><br><span class=\"line\">         &quot;443&quot;: &quot; mypassword 1”,  //对应端口设定不同的密码</span><br><span class=\"line\">         &quot;8888&quot;: &quot; mypassword 2”</span><br><span class=\"line\">     &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-安装gevent\"><a href=\"#6-安装gevent\" class=\"headerlink\" title=\"6. 安装gevent\"></a>6. 安装gevent</h3><p>Gevent可以提高ss性能，由于gevent依赖于libevent和greenlet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y libevent</span><br><span class=\"line\">$ pip install greenlet</span><br><span class=\"line\">$ pip install gevent</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-配置防火墙\"><a href=\"#7-配置防火墙\" class=\"headerlink\" title=\"7. 配置防火墙\"></a>7. 配置防火墙</h3><p>为了提高系统的安全性，需要安装防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install firewalld</span><br></pre></td></tr></table></figure>\n\n<p>启动防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start firewalld</span><br></pre></td></tr></table></figure>\n\n<p>开启相应端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --permanent --zone=public --add-port=443/tcp</span><br><span class=\"line\">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3-查看修改ss服务器的端口密码\"><a href=\"#1-3-查看修改ss服务器的端口密码\" class=\"headerlink\" title=\"1.3 查看修改ss服务器的端口密码\"></a>1.3 查看修改ss服务器的端口密码</h2><ul>\n<li>查看当前ss服务器所开放的端口</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss -lntp | grep ssserver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看当前ss服务器的密码，通过以下命令可见ss的配置文件，配置文件中自然有密码</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep ssserver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用cat查看下配置文件即可看见密码了，vim修改</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ss启动停止方法</li>\n</ul>\n<p>启动，停止，重启，状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\"></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d restart</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://github.com/easonhuang123/blog/issues/1\">https://github.com/easonhuang123/blog/issues/1</a><br><a href=\"https://blog.whsir.com/post-1045.html\">https://blog.whsir.com/post-1045.html</a></p>\n<h1 id=\"2-搭建SSR\"><a href=\"#2-搭建SSR\" class=\"headerlink\" title=\"2. 搭建SSR\"></a>2. 搭建SSR</h1><h2 id=\"2-1-服务器\"><a href=\"#2-1-服务器\" class=\"headerlink\" title=\"2.1 服务器\"></a>2.1 服务器</h2><h3 id=\"1-install\"><a href=\"#1-install\" class=\"headerlink\" title=\"1.install\"></a>1.install</h3><ol>\n<li>install git</li>\n<li>git clone <a href=\"https://github.com/shadowsocksr/shadowsocksr.git\">https://github.com/shadowsocksr/shadowsocksr.git</a> （github ssr）</li>\n</ol>\n<h3 id=\"2-Usage-for-single-user-on-linux-platform\"><a href=\"#2-Usage-for-single-user-on-linux-platform\" class=\"headerlink\" title=\"2.Usage for single user on linux platform\"></a>2.Usage for single user on linux platform</h3><p>If you clone it into “<del>&#x2F;shadowsocksr”move to “</del>&#x2F;shadowsocksr”, then run:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash initcfg.sh</span><br></pre></td></tr></table></figure>\n\n<p>move to “~&#x2F;shadowsocksr&#x2F;shadowsocks”, then run:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python server.py -p 443 -k password -m aes-128-cfb -O auth_aes128_md5 -o tls1.2_ticket_auth_compatible</span><br></pre></td></tr></table></figure>\n\n<p>Check all the options via <code>-h</code>.</p>\n<p>You can also use a configuration file instead (recommend), move to “<del>&#x2F;shadowsocksr” and edit the file “user-config.json”, then move to “</del>&#x2F;shadowsocksr&#x2F;shadowsocks” again, just run:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python server.py</span><br></pre></td></tr></table></figure>\n\n<p>To run in the background:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./logrun.sh</span><br></pre></td></tr></table></figure>\n\n<p>To stop:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./stop.sh</span><br></pre></td></tr></table></figure>\n\n<p>To monitor the log:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./tail.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-配置firewall，开放端口-（for-centos-7）\"><a href=\"#3-配置firewall，开放端口-（for-centos-7）\" class=\"headerlink\" title=\"3.配置firewall，开放端口 （for centos 7）\"></a>3.配置firewall，开放端口 （for centos 7）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class=\"line\">[root@centos7 ~]# firewall-cmd --reload　# 重启防火墙</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-客户端\"><a href=\"#2-2-客户端\" class=\"headerlink\" title=\"2.2 客户端\"></a>2.2 客户端</h2><p>github ssr</p>\n<h1 id=\"3-关于firewall\"><a href=\"#3-关于firewall\" class=\"headerlink\" title=\"3. 关于firewall\"></a>3. 关于firewall</h1><p><a href=\"https://www.cnblogs.com/Sungeek/p/8257681.html\">https://www.cnblogs.com/Sungeek/p/8257681.html</a></p>\n<p>当下面实验修改的是永久生效的策略记录时，必须执行”<strong>–reload</strong>“参数后才能立即生效，否则要重启后再生效。</p>\n<p><strong>查看当前的区域：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@CentOS7 ~]# firewall-cmd --get-default-zone</span><br><span class=\"line\">public</span><br></pre></td></tr></table></figure>\n\n<p><strong>查询网卡的区域：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --get-zone-of-interface=eno16777736</span><br><span class=\"line\">public</span><br></pre></td></tr></table></figure>\n\n<p><strong>在public中分别查询ssh与http服务是否被允许：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --query-service=ssh</span><br><span class=\"line\">yes</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --query-service=http</span><br><span class=\"line\">no</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例A:允许https服务流量通过public区域，要求立即生效且永久有效：</strong></p>\n<p>　　<strong>方法一:分别设置当前生效与永久有效的规则记录：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --add-service=https</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>方法二:设置永久生效的规则记录后读取记录：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --reload</span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例B:不再允许http服务流量通过public区域，要求立即生效且永久生效：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --remove-service=http</span><br><span class=\"line\">success</span><br><span class=\"line\"></span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --reload </span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例C:允许8080与8081端口流量通过public区域，立即生效且永久生效：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-port=8080-8081/tcp</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --reload </span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例D:查看模拟实验中的规则：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --list-services </span><br><span class=\"line\">dhcpv6-client http https ssh</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --list-ports </span><br><span class=\"line\">8080-8081/tcp</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例E：将访问主机888端口的请求转发至22端口：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.0.100</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --reload </span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p>例如安装Nagios后，要开放5666端口与服务器连接，命令如下</p>\n<p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --add-port=5666/tcp　即时打开，这里也可以是一个端口范围，如1000-2000/tcp</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@centos7 ~]# firewall-cmd --permanent --add-port=5666/tcp　写入配置文件</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@centos7 ~]# firewall-cmd --reload　重启防火墙</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@centos7 ~]#</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p>\n<p><strong>CentOS 7快速开放端口：</strong></p>\n<p>CentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，baidu之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：</p>\n<p><strong>开启端口</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n<p><strong>查询端口号80 是否开启：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --query-port=80/tcp</span><br></pre></td></tr></table></figure>\n\n<p><strong>查询有哪些端口是开启的:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --list-port</span><br></pre></td></tr></table></figure>\n\n<p><strong><img src=\"https://images2018.cnblogs.com/blog/872610/201806/872610-20180607143807700-372634451.png\" alt=\"img\"></strong></p>\n<p><strong>命令含义：</strong></p>\n<p>–zone #作用域<br>–add-port&#x3D;80&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议<br>–permanent #永久生效，没有此参数重启后失效</p>\n<p><strong>重启防火墙</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --reload</span><br></pre></td></tr></table></figure>","length":4534,"excerpt":"","more":"<h1 id=\"1-搭建ShadowSocks\"><a href=\"#1-搭建ShadowSocks\" class=\"headerlink\" title=\"1. 搭建ShadowSocks\"></a>1. 搭建ShadowSocks</h1><h2 id=\"1-1-客户端\"><a href=\"#1-1-客户端\" class=\"headerlink\" title=\"1.1 客户端\"></a>1.1 客户端</h2><p>下载<br><a href=\"https://shadowsocks.org/en/download/clients.html\">https://shadowsocks.org/en/download/clients.html</a></p>\n<p><img src=\"/image/ssclient.png\" alt=\"ssclient.png\"></p>\n<h2 id=\"1-2-ss的配制与使用\"><a href=\"#1-2-ss的配制与使用\" class=\"headerlink\" title=\"1.2 ss的配制与使用\"></a>1.2 ss的配制与使用</h2><h3 id=\"1-检查Python版本\"><a href=\"#1-检查Python版本\" class=\"headerlink\" title=\"1. 检查Python版本\"></a>1. 检查Python版本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装m2crypto和python-setuptools\"><a href=\"#2-安装m2crypto和python-setuptools\" class=\"headerlink\" title=\"2. 安装m2crypto和python-setuptools\"></a>2. 安装m2crypto和python-setuptools</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install m2crypto python-setuptools</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-安装pip\"><a href=\"#3-安装pip\" class=\"headerlink\" title=\"3. 安装pip\"></a>3. 安装pip</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install python-pip</span><br></pre></td></tr></table></figure>\n\n<p>或者（没试过）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ easy_install pip</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-安装ss\"><a href=\"#4-安装ss\" class=\"headerlink\" title=\"4. 安装ss\"></a>4. 安装ss</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install shadowsocks</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-配置服务器参数\"><a href=\"#5-配置服务器参数\" class=\"headerlink\" title=\"5. 配置服务器参数\"></a>5. 配置服务器参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;                                  </span><br><span class=\"line\">    &quot;server&quot;:&quot;my_server_ip&quot;,          //服务器的IP地址</span><br><span class=\"line\">    &quot;server_port&quot;:7711,              //服务器的端口</span><br><span class=\"line\">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,       //本机IP地址</span><br><span class=\"line\">    &quot;local_port&quot;:1080,               //本机端口</span><br><span class=\"line\">    &quot;password&quot;:&quot;mypassword&quot;,        //自己设定的密码</span><br><span class=\"line\">    &quot;timeout&quot;:300,                  //超出时间</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,          //加密方法，推荐使用&quot;aes-256-cfb&quot;</span><br><span class=\"line\">    &quot;fast_open&quot;: false                //true 或 false&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若是多用户模式，将server_port和password合并为port_password：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;port_password&quot;: &#123;</span><br><span class=\"line\">         &quot;443&quot;: &quot; mypassword 1”,  //对应端口设定不同的密码</span><br><span class=\"line\">         &quot;8888&quot;: &quot; mypassword 2”</span><br><span class=\"line\">     &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-安装gevent\"><a href=\"#6-安装gevent\" class=\"headerlink\" title=\"6. 安装gevent\"></a>6. 安装gevent</h3><p>Gevent可以提高ss性能，由于gevent依赖于libevent和greenlet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install -y libevent</span><br><span class=\"line\">$ pip install greenlet</span><br><span class=\"line\">$ pip install gevent</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-配置防火墙\"><a href=\"#7-配置防火墙\" class=\"headerlink\" title=\"7. 配置防火墙\"></a>7. 配置防火墙</h3><p>为了提高系统的安全性，需要安装防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install firewalld</span><br></pre></td></tr></table></figure>\n\n<p>启动防火墙</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start firewalld</span><br></pre></td></tr></table></figure>\n\n<p>开启相应端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --permanent --zone=public --add-port=443/tcp</span><br><span class=\"line\">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-3-查看修改ss服务器的端口密码\"><a href=\"#1-3-查看修改ss服务器的端口密码\" class=\"headerlink\" title=\"1.3 查看修改ss服务器的端口密码\"></a>1.3 查看修改ss服务器的端口密码</h2><ul>\n<li>查看当前ss服务器所开放的端口</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss -lntp | grep ssserver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看当前ss服务器的密码，通过以下命令可见ss的配置文件，配置文件中自然有密码</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep ssserver</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用cat查看下配置文件即可看见密码了，vim修改</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ss启动停止方法</li>\n</ul>\n<p>启动，停止，重启，状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\"></span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d restart</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://github.com/easonhuang123/blog/issues/1\">https://github.com/easonhuang123/blog/issues/1</a><br><a href=\"https://blog.whsir.com/post-1045.html\">https://blog.whsir.com/post-1045.html</a></p>\n<h1 id=\"2-搭建SSR\"><a href=\"#2-搭建SSR\" class=\"headerlink\" title=\"2. 搭建SSR\"></a>2. 搭建SSR</h1><h2 id=\"2-1-服务器\"><a href=\"#2-1-服务器\" class=\"headerlink\" title=\"2.1 服务器\"></a>2.1 服务器</h2><h3 id=\"1-install\"><a href=\"#1-install\" class=\"headerlink\" title=\"1.install\"></a>1.install</h3><ol>\n<li>install git</li>\n<li>git clone <a href=\"https://github.com/shadowsocksr/shadowsocksr.git\">https://github.com/shadowsocksr/shadowsocksr.git</a> （github ssr）</li>\n</ol>\n<h3 id=\"2-Usage-for-single-user-on-linux-platform\"><a href=\"#2-Usage-for-single-user-on-linux-platform\" class=\"headerlink\" title=\"2.Usage for single user on linux platform\"></a>2.Usage for single user on linux platform</h3><p>If you clone it into “<del>&#x2F;shadowsocksr”move to “</del>&#x2F;shadowsocksr”, then run:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash initcfg.sh</span><br></pre></td></tr></table></figure>\n\n<p>move to “~&#x2F;shadowsocksr&#x2F;shadowsocks”, then run:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python server.py -p 443 -k password -m aes-128-cfb -O auth_aes128_md5 -o tls1.2_ticket_auth_compatible</span><br></pre></td></tr></table></figure>\n\n<p>Check all the options via <code>-h</code>.</p>\n<p>You can also use a configuration file instead (recommend), move to “<del>&#x2F;shadowsocksr” and edit the file “user-config.json”, then move to “</del>&#x2F;shadowsocksr&#x2F;shadowsocks” again, just run:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python server.py</span><br></pre></td></tr></table></figure>\n\n<p>To run in the background:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./logrun.sh</span><br></pre></td></tr></table></figure>\n\n<p>To stop:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./stop.sh</span><br></pre></td></tr></table></figure>\n\n<p>To monitor the log:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./tail.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-配置firewall，开放端口-（for-centos-7）\"><a href=\"#3-配置firewall，开放端口-（for-centos-7）\" class=\"headerlink\" title=\"3.配置firewall，开放端口 （for centos 7）\"></a>3.配置firewall，开放端口 （for centos 7）</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class=\"line\">[root@centos7 ~]# firewall-cmd --reload　# 重启防火墙</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-客户端\"><a href=\"#2-2-客户端\" class=\"headerlink\" title=\"2.2 客户端\"></a>2.2 客户端</h2><p>github ssr</p>\n<h1 id=\"3-关于firewall\"><a href=\"#3-关于firewall\" class=\"headerlink\" title=\"3. 关于firewall\"></a>3. 关于firewall</h1><p><a href=\"https://www.cnblogs.com/Sungeek/p/8257681.html\">https://www.cnblogs.com/Sungeek/p/8257681.html</a></p>\n<p>当下面实验修改的是永久生效的策略记录时，必须执行”<strong>–reload</strong>“参数后才能立即生效，否则要重启后再生效。</p>\n<p><strong>查看当前的区域：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@CentOS7 ~]# firewall-cmd --get-default-zone</span><br><span class=\"line\">public</span><br></pre></td></tr></table></figure>\n\n<p><strong>查询网卡的区域：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --get-zone-of-interface=eno16777736</span><br><span class=\"line\">public</span><br></pre></td></tr></table></figure>\n\n<p><strong>在public中分别查询ssh与http服务是否被允许：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --query-service=ssh</span><br><span class=\"line\">yes</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --query-service=http</span><br><span class=\"line\">no</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例A:允许https服务流量通过public区域，要求立即生效且永久有效：</strong></p>\n<p>　　<strong>方法一:分别设置当前生效与永久有效的规则记录：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --add-service=https</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p>　　<strong>方法二:设置永久生效的规则记录后读取记录：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-service=https</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --reload</span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例B:不再允许http服务流量通过public区域，要求立即生效且永久生效：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --remove-service=http</span><br><span class=\"line\">success</span><br><span class=\"line\"></span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --reload </span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例C:允许8080与8081端口流量通过public区域，立即生效且永久生效：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-port=8080-8081/tcp</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --reload </span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例D:查看模拟实验中的规则：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --list-services </span><br><span class=\"line\">dhcpv6-client http https ssh</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --zone=public --list-ports </span><br><span class=\"line\">8080-8081/tcp</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例E：将访问主机888端口的请求转发至22端口：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@Centos7 ~]# firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.0.100</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@Centos7 ~]# firewall-cmd --reload </span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p>例如安装Nagios后，要开放5666端口与服务器连接，命令如下</p>\n<p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --add-port=5666/tcp　即时打开，这里也可以是一个端口范围，如1000-2000/tcp</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@centos7 ~]# firewall-cmd --permanent --add-port=5666/tcp　写入配置文件</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@centos7 ~]# firewall-cmd --reload　重启防火墙</span><br><span class=\"line\">success</span><br><span class=\"line\">[root@centos7 ~]#</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"javascript:void(0);\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></p>\n<p><strong>CentOS 7快速开放端口：</strong></p>\n<p>CentOS升级到7之后，发现无法使用iptables控制Linuxs的端口，baidu之后发现Centos 7使用firewalld代替了原来的iptables。下面记录如何使用firewalld开放Linux端口：</p>\n<p><strong>开启端口</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>\n\n<p><strong>查询端口号80 是否开启：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --query-port=80/tcp</span><br></pre></td></tr></table></figure>\n\n<p><strong>查询有哪些端口是开启的:</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --list-port</span><br></pre></td></tr></table></figure>\n\n<p><strong><img src=\"https://images2018.cnblogs.com/blog/872610/201806/872610-20180607143807700-372634451.png\" alt=\"img\"></strong></p>\n<p><strong>命令含义：</strong></p>\n<p>–zone #作用域<br>–add-port&#x3D;80&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议<br>–permanent #永久生效，没有此参数重启后失效</p>\n<p><strong>重启防火墙</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@centos7 ~]# firewall-cmd --reload</span><br></pre></td></tr></table></figure>"},{"title":"操作系统基础知识总结","date":"2019-07-01T07:16:13.000Z","description":"操作系统基础知识总结","_content":"\n# 操作系统基础知识总结\n摘自：https://blog.csdn.net/justloveyou_/article/details/78304294\n\n## 1. 进程和线程区别\n- **根本区别**：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。\n- **系统开销**：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。\n- **拥有资源**：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。\n- **调度**：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。\n- **通信方面**：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。\n- 包含关系：~~没有线程的进程可以看做是单线程的~~（凡是进程必须有并且至少有一个线程），如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。\n\nhttps://blog.csdn.net/kuangsonghan/article/details/80674777\n\n## 2. 什么是死锁？死锁产生的条件\n\n在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲，就是两个或多个进程无限期的阻塞、相互等待的一种状态。\n\n### 2.1 死锁产生的四个必要条件\n\n- 互斥：至少有一个资源必须属于非共享模式，即一次只能被一个进程使用；若其他申请使用该资源，那么申请进程必须等到该资源被释放为止；\n- 占有并等待：一个进程必须占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有；\n- 非抢占：进程不能被抢占，即资源只能被进程在完成任务后自愿释放\n- 循环等待：若干进程之间形成一种头尾相接的环形等待资源关系\n\n### 2.2 死锁的处理基本策略和常用方法\n\n解决死锁的基本方法主要有 预防死锁、避免死锁、检测死锁、解除死锁 、鸵鸟策略 等。\n\n#### 2.2.1 死锁预防\n\n只要确保死锁发生的四个必要条件中至少有一个不成立，就能预防死锁的发生\n\n- 打破互斥条件：由资源本身属性决定，无实际意义。\n- 打破占有并等待条件：可以实行资源预先分配策略(进程在运行前一次性向系统申请它所需要的全部资源，若所需全部资源得不到满足，则不分配任何资源，此进程暂不运行；只有当系统能满足当前进程所需的全部资源时，才一次性将所申请资源全部分配给该线程)或者只允许进程在没有占用资源时才可以申请资源（一个进程可申请一些资源并使用它们，但是在当前进程申请更多资源之前，它必须全部释放当前所占有的资源）。但是这种策略也存在一些缺点：在很多情况下，无法预知一个进程执行前所需的全部资源，因为进程是动态执行的，不可预知的；同时，会降低资源利用率，导致降低了进程的并发性。\n- 打破非抢占条件：允许进程强行从占有者哪里夺取某些资源。也就是说，但一个进程占有了一部分资源，在其申请新的资源且得不到满足时，它必须释放所有占有的资源以便让其它线程使用。这种预防死锁的方式实现起来困难，会降低系统性能。\n- 打破循环等待条件：实行资源有序分配策略。对所有资源排序编号，所有进程对资源的请求必须严格按资源序号递增的顺序提出，即只有占用了小号资源才能申请大号资源，这样就不回产生环路，预防死锁的发生。\n\n#### 2.2.2 死锁避免\n\n死锁避免的基本思想是动态地检测资源分配状态，以确保循环等待条件不成立，从而确保系统处于安全状态。\n\n#### 2.2.3 死锁解除\n\n死锁解除的常用两种方法为进程终止和资源抢占。\n\n## 3. 线程同步\n\n- <font color='red'>临界区</font>：临界区对象和互斥对象非常相似，只是互斥量允许在进程间使用，而临界区只限制与同一进程的各个线程之间使用，但是更节省资源，更有效率。\n- <font color='red'>互斥量</font>：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。\n- <font color='red'>信号量</font>：它允许同一时刻多个线程访问公共资源，但是要控制同一时刻访问的最大线程数量。\n- <font color='red'>事件（信号）</font>：通过通知操作保持多线程同步，还能实现多线程优先级比较。\n\n## 4. 进程通信\n- <font color='red'>管道（pipe）及命名管道（named pipe）</font>：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；\n- <font color='red'>信号（signal）</font>：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生\n- <font color='red'>消息队列</font>：是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；\n- <font color='red'>共享内存</font>：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等；\n- <font color='red'>信号量</font>：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段；\n- <font color='red'>套接字</font>：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。\n\n## 5. 进程有哪几种状态\n\n- 就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源；\n- 运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数；\n- 阻塞状态：进程等待某种条件，在条件满足之前无法执行；\n\n## 6. 线程有哪几种状态\n\n在 Java虚拟机 中，线程从最初的创建到最终的消亡，要经历若干个状态：创建(new)、就绪(runnable/start)、运行(running)、阻塞(blocked)、等待(waiting)、时间等待(time waiting) 和 消亡(dead/terminated)。在给定的时间点上，一个线程只能处于一种状态。\n\n## 7. 分页和分段有什么区别（内存管理）\n\n段式存储管理是一种符合用户视角的内存分配管理方案。在段式存储管理中，将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）\n\n页式存储管理方案是一种用户视角内存与物理内存相分离的内存分配管理方案。在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的帧，程序加载时，可以将任意一页放入内存中任意一个帧，这些帧不必连续，从而实现了离散分离。页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）。\n\n### 区别\n- 目的不同：分页是由于系统管理的需要而不是用户的需要，它是信息的物理单位；分段的目的是为了能更好地满足用户的需要，它是信息的逻辑单位，它含有一组其意义相对完整的信息；\n- 大小不同：页的大小固定且由系统决定，而段的长度却不固定，由其所完成的功能决定；\n- 地址空间不同： 段向用户提供二维地址空间；页向用户提供的是一维地址空间；\n- 信息共享：段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制；\n- 内存碎片：页式存储管理的优点是没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）；而段式管理的优点是没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）。\n\n## 8. 操作系统中进程调度策略有哪几种\n- FCFS(先来先服务，队列实现，非抢占的)：先请求CPU的进程先分配到CPU\n- SJF(最短作业优先调度算法)：平均等待时间最短，但难以知道下一个CPU区间长度\n- 优先级调度算法(可以是抢占的，也可以是非抢占的)：优先级越高越先分配到CPU，相同优先级先到先服务，存在的主要问题是：低优先级进程无穷等待CPU，会导致无穷阻塞或饥饿；解决方案：老化\n- 时间片轮转调度算法(可抢占的)：队列中没有进程被分配超过一个时间片的CPU时间，除非它是唯一可运行的进程。如果进程的CPU区间超过了一个时间片，那么该进程就被抢占并放回就绪队列。\n- 多级队列调度算法：将就绪队列分成多个独立的队列，每个队列都有自己的调度算法，队列之间采用固定优先级抢占调度。其中，一个进程根据自身属性被永久地分配到一个队列中。\n- 多级反馈队列调度算法：与多级队列调度算法相比，其允许进程在队列之间移动：若进程使用过多CPU时间，那么它会被转移到更低的优先级队列；在较低优先级队列等待时间过长的进程会被转移到更高优先级队列，以防止饥饿发生。\n","source":"_posts/操作系统.md","raw":"---\ntitle: 操作系统基础知识总结\ndate: 2019-7-1 15:16:13\ntags: [面试]\ncategories: [面试]\ndescription: 操作系统基础知识总结\n---\n\n# 操作系统基础知识总结\n摘自：https://blog.csdn.net/justloveyou_/article/details/78304294\n\n## 1. 进程和线程区别\n- **根本区别**：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。\n- **系统开销**：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。\n- **拥有资源**：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。\n- **调度**：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。\n- **通信方面**：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。\n- 包含关系：~~没有线程的进程可以看做是单线程的~~（凡是进程必须有并且至少有一个线程），如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。\n\nhttps://blog.csdn.net/kuangsonghan/article/details/80674777\n\n## 2. 什么是死锁？死锁产生的条件\n\n在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲，就是两个或多个进程无限期的阻塞、相互等待的一种状态。\n\n### 2.1 死锁产生的四个必要条件\n\n- 互斥：至少有一个资源必须属于非共享模式，即一次只能被一个进程使用；若其他申请使用该资源，那么申请进程必须等到该资源被释放为止；\n- 占有并等待：一个进程必须占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有；\n- 非抢占：进程不能被抢占，即资源只能被进程在完成任务后自愿释放\n- 循环等待：若干进程之间形成一种头尾相接的环形等待资源关系\n\n### 2.2 死锁的处理基本策略和常用方法\n\n解决死锁的基本方法主要有 预防死锁、避免死锁、检测死锁、解除死锁 、鸵鸟策略 等。\n\n#### 2.2.1 死锁预防\n\n只要确保死锁发生的四个必要条件中至少有一个不成立，就能预防死锁的发生\n\n- 打破互斥条件：由资源本身属性决定，无实际意义。\n- 打破占有并等待条件：可以实行资源预先分配策略(进程在运行前一次性向系统申请它所需要的全部资源，若所需全部资源得不到满足，则不分配任何资源，此进程暂不运行；只有当系统能满足当前进程所需的全部资源时，才一次性将所申请资源全部分配给该线程)或者只允许进程在没有占用资源时才可以申请资源（一个进程可申请一些资源并使用它们，但是在当前进程申请更多资源之前，它必须全部释放当前所占有的资源）。但是这种策略也存在一些缺点：在很多情况下，无法预知一个进程执行前所需的全部资源，因为进程是动态执行的，不可预知的；同时，会降低资源利用率，导致降低了进程的并发性。\n- 打破非抢占条件：允许进程强行从占有者哪里夺取某些资源。也就是说，但一个进程占有了一部分资源，在其申请新的资源且得不到满足时，它必须释放所有占有的资源以便让其它线程使用。这种预防死锁的方式实现起来困难，会降低系统性能。\n- 打破循环等待条件：实行资源有序分配策略。对所有资源排序编号，所有进程对资源的请求必须严格按资源序号递增的顺序提出，即只有占用了小号资源才能申请大号资源，这样就不回产生环路，预防死锁的发生。\n\n#### 2.2.2 死锁避免\n\n死锁避免的基本思想是动态地检测资源分配状态，以确保循环等待条件不成立，从而确保系统处于安全状态。\n\n#### 2.2.3 死锁解除\n\n死锁解除的常用两种方法为进程终止和资源抢占。\n\n## 3. 线程同步\n\n- <font color='red'>临界区</font>：临界区对象和互斥对象非常相似，只是互斥量允许在进程间使用，而临界区只限制与同一进程的各个线程之间使用，但是更节省资源，更有效率。\n- <font color='red'>互斥量</font>：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。\n- <font color='red'>信号量</font>：它允许同一时刻多个线程访问公共资源，但是要控制同一时刻访问的最大线程数量。\n- <font color='red'>事件（信号）</font>：通过通知操作保持多线程同步，还能实现多线程优先级比较。\n\n## 4. 进程通信\n- <font color='red'>管道（pipe）及命名管道（named pipe）</font>：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；\n- <font color='red'>信号（signal）</font>：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生\n- <font color='red'>消息队列</font>：是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；\n- <font color='red'>共享内存</font>：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等；\n- <font color='red'>信号量</font>：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段；\n- <font color='red'>套接字</font>：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。\n\n## 5. 进程有哪几种状态\n\n- 就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源；\n- 运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数；\n- 阻塞状态：进程等待某种条件，在条件满足之前无法执行；\n\n## 6. 线程有哪几种状态\n\n在 Java虚拟机 中，线程从最初的创建到最终的消亡，要经历若干个状态：创建(new)、就绪(runnable/start)、运行(running)、阻塞(blocked)、等待(waiting)、时间等待(time waiting) 和 消亡(dead/terminated)。在给定的时间点上，一个线程只能处于一种状态。\n\n## 7. 分页和分段有什么区别（内存管理）\n\n段式存储管理是一种符合用户视角的内存分配管理方案。在段式存储管理中，将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）\n\n页式存储管理方案是一种用户视角内存与物理内存相分离的内存分配管理方案。在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的帧，程序加载时，可以将任意一页放入内存中任意一个帧，这些帧不必连续，从而实现了离散分离。页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）。\n\n### 区别\n- 目的不同：分页是由于系统管理的需要而不是用户的需要，它是信息的物理单位；分段的目的是为了能更好地满足用户的需要，它是信息的逻辑单位，它含有一组其意义相对完整的信息；\n- 大小不同：页的大小固定且由系统决定，而段的长度却不固定，由其所完成的功能决定；\n- 地址空间不同： 段向用户提供二维地址空间；页向用户提供的是一维地址空间；\n- 信息共享：段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制；\n- 内存碎片：页式存储管理的优点是没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）；而段式管理的优点是没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）。\n\n## 8. 操作系统中进程调度策略有哪几种\n- FCFS(先来先服务，队列实现，非抢占的)：先请求CPU的进程先分配到CPU\n- SJF(最短作业优先调度算法)：平均等待时间最短，但难以知道下一个CPU区间长度\n- 优先级调度算法(可以是抢占的，也可以是非抢占的)：优先级越高越先分配到CPU，相同优先级先到先服务，存在的主要问题是：低优先级进程无穷等待CPU，会导致无穷阻塞或饥饿；解决方案：老化\n- 时间片轮转调度算法(可抢占的)：队列中没有进程被分配超过一个时间片的CPU时间，除非它是唯一可运行的进程。如果进程的CPU区间超过了一个时间片，那么该进程就被抢占并放回就绪队列。\n- 多级队列调度算法：将就绪队列分成多个独立的队列，每个队列都有自己的调度算法，队列之间采用固定优先级抢占调度。其中，一个进程根据自身属性被永久地分配到一个队列中。\n- 多级反馈队列调度算法：与多级队列调度算法相比，其允许进程在队列之间移动：若进程使用过多CPU时间，那么它会被转移到更低的优先级队列；在较低优先级队列等待时间过长的进程会被转移到更高优先级队列，以防止饥饿发生。\n","slug":"操作系统","published":1,"updated":"2025-02-22T18:52:19.826Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8b0001yv0019gzecrtp","content":"<h1 id=\"操作系统基础知识总结\"><a href=\"#操作系统基础知识总结\" class=\"headerlink\" title=\"操作系统基础知识总结\"></a>操作系统基础知识总结</h1><p>摘自：<a href=\"https://blog.csdn.net/justloveyou_/article/details/78304294\">https://blog.csdn.net/justloveyou_/article/details/78304294</a></p>\n<h2 id=\"1-进程和线程区别\"><a href=\"#1-进程和线程区别\" class=\"headerlink\" title=\"1. 进程和线程区别\"></a>1. 进程和线程区别</h2><ul>\n<li><strong>根本区别</strong>：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。</li>\n<li><strong>系统开销</strong>：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I&#x2F;O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。</li>\n<li><strong>拥有资源</strong>：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。</li>\n<li><strong>调度</strong>：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</li>\n<li><strong>通信方面</strong>：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。</li>\n<li>包含关系：<del>没有线程的进程可以看做是单线程的</del>（凡是进程必须有并且至少有一个线程），如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/kuangsonghan/article/details/80674777\">https://blog.csdn.net/kuangsonghan/article/details/80674777</a></p>\n<h2 id=\"2-什么是死锁？死锁产生的条件\"><a href=\"#2-什么是死锁？死锁产生的条件\" class=\"headerlink\" title=\"2. 什么是死锁？死锁产生的条件\"></a>2. 什么是死锁？死锁产生的条件</h2><p>在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲，就是两个或多个进程无限期的阻塞、相互等待的一种状态。</p>\n<h3 id=\"2-1-死锁产生的四个必要条件\"><a href=\"#2-1-死锁产生的四个必要条件\" class=\"headerlink\" title=\"2.1 死锁产生的四个必要条件\"></a>2.1 死锁产生的四个必要条件</h3><ul>\n<li>互斥：至少有一个资源必须属于非共享模式，即一次只能被一个进程使用；若其他申请使用该资源，那么申请进程必须等到该资源被释放为止；</li>\n<li>占有并等待：一个进程必须占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有；</li>\n<li>非抢占：进程不能被抢占，即资源只能被进程在完成任务后自愿释放</li>\n<li>循环等待：若干进程之间形成一种头尾相接的环形等待资源关系</li>\n</ul>\n<h3 id=\"2-2-死锁的处理基本策略和常用方法\"><a href=\"#2-2-死锁的处理基本策略和常用方法\" class=\"headerlink\" title=\"2.2 死锁的处理基本策略和常用方法\"></a>2.2 死锁的处理基本策略和常用方法</h3><p>解决死锁的基本方法主要有 预防死锁、避免死锁、检测死锁、解除死锁 、鸵鸟策略 等。</p>\n<h4 id=\"2-2-1-死锁预防\"><a href=\"#2-2-1-死锁预防\" class=\"headerlink\" title=\"2.2.1 死锁预防\"></a>2.2.1 死锁预防</h4><p>只要确保死锁发生的四个必要条件中至少有一个不成立，就能预防死锁的发生</p>\n<ul>\n<li>打破互斥条件：由资源本身属性决定，无实际意义。</li>\n<li>打破占有并等待条件：可以实行资源预先分配策略(进程在运行前一次性向系统申请它所需要的全部资源，若所需全部资源得不到满足，则不分配任何资源，此进程暂不运行；只有当系统能满足当前进程所需的全部资源时，才一次性将所申请资源全部分配给该线程)或者只允许进程在没有占用资源时才可以申请资源（一个进程可申请一些资源并使用它们，但是在当前进程申请更多资源之前，它必须全部释放当前所占有的资源）。但是这种策略也存在一些缺点：在很多情况下，无法预知一个进程执行前所需的全部资源，因为进程是动态执行的，不可预知的；同时，会降低资源利用率，导致降低了进程的并发性。</li>\n<li>打破非抢占条件：允许进程强行从占有者哪里夺取某些资源。也就是说，但一个进程占有了一部分资源，在其申请新的资源且得不到满足时，它必须释放所有占有的资源以便让其它线程使用。这种预防死锁的方式实现起来困难，会降低系统性能。</li>\n<li>打破循环等待条件：实行资源有序分配策略。对所有资源排序编号，所有进程对资源的请求必须严格按资源序号递增的顺序提出，即只有占用了小号资源才能申请大号资源，这样就不回产生环路，预防死锁的发生。</li>\n</ul>\n<h4 id=\"2-2-2-死锁避免\"><a href=\"#2-2-2-死锁避免\" class=\"headerlink\" title=\"2.2.2 死锁避免\"></a>2.2.2 死锁避免</h4><p>死锁避免的基本思想是动态地检测资源分配状态，以确保循环等待条件不成立，从而确保系统处于安全状态。</p>\n<h4 id=\"2-2-3-死锁解除\"><a href=\"#2-2-3-死锁解除\" class=\"headerlink\" title=\"2.2.3 死锁解除\"></a>2.2.3 死锁解除</h4><p>死锁解除的常用两种方法为进程终止和资源抢占。</p>\n<h2 id=\"3-线程同步\"><a href=\"#3-线程同步\" class=\"headerlink\" title=\"3. 线程同步\"></a>3. 线程同步</h2><ul>\n<li><font color='red'>临界区</font>：临界区对象和互斥对象非常相似，只是互斥量允许在进程间使用，而临界区只限制与同一进程的各个线程之间使用，但是更节省资源，更有效率。</li>\n<li><font color='red'>互斥量</font>：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。</li>\n<li><font color='red'>信号量</font>：它允许同一时刻多个线程访问公共资源，但是要控制同一时刻访问的最大线程数量。</li>\n<li><font color='red'>事件（信号）</font>：通过通知操作保持多线程同步，还能实现多线程优先级比较。</li>\n</ul>\n<h2 id=\"4-进程通信\"><a href=\"#4-进程通信\" class=\"headerlink\" title=\"4. 进程通信\"></a>4. 进程通信</h2><ul>\n<li><font color='red'>管道（pipe）及命名管道（named pipe）</font>：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；</li>\n<li><font color='red'>信号（signal）</font>：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生</li>\n<li><font color='red'>消息队列</font>：是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；</li>\n<li><font color='red'>共享内存</font>：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等；</li>\n<li><font color='red'>信号量</font>：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段；</li>\n<li><font color='red'>套接字</font>：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。</li>\n</ul>\n<h2 id=\"5-进程有哪几种状态\"><a href=\"#5-进程有哪几种状态\" class=\"headerlink\" title=\"5. 进程有哪几种状态\"></a>5. 进程有哪几种状态</h2><ul>\n<li>就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源；</li>\n<li>运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数；</li>\n<li>阻塞状态：进程等待某种条件，在条件满足之前无法执行；</li>\n</ul>\n<h2 id=\"6-线程有哪几种状态\"><a href=\"#6-线程有哪几种状态\" class=\"headerlink\" title=\"6. 线程有哪几种状态\"></a>6. 线程有哪几种状态</h2><p>在 Java虚拟机 中，线程从最初的创建到最终的消亡，要经历若干个状态：创建(new)、就绪(runnable&#x2F;start)、运行(running)、阻塞(blocked)、等待(waiting)、时间等待(time waiting) 和 消亡(dead&#x2F;terminated)。在给定的时间点上，一个线程只能处于一种状态。</p>\n<h2 id=\"7-分页和分段有什么区别（内存管理）\"><a href=\"#7-分页和分段有什么区别（内存管理）\" class=\"headerlink\" title=\"7. 分页和分段有什么区别（内存管理）\"></a>7. 分页和分段有什么区别（内存管理）</h2><p>段式存储管理是一种符合用户视角的内存分配管理方案。在段式存储管理中，将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）</p>\n<p>页式存储管理方案是一种用户视角内存与物理内存相分离的内存分配管理方案。在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的帧，程序加载时，可以将任意一页放入内存中任意一个帧，这些帧不必连续，从而实现了离散分离。页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>目的不同：分页是由于系统管理的需要而不是用户的需要，它是信息的物理单位；分段的目的是为了能更好地满足用户的需要，它是信息的逻辑单位，它含有一组其意义相对完整的信息；</li>\n<li>大小不同：页的大小固定且由系统决定，而段的长度却不固定，由其所完成的功能决定；</li>\n<li>地址空间不同： 段向用户提供二维地址空间；页向用户提供的是一维地址空间；</li>\n<li>信息共享：段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制；</li>\n<li>内存碎片：页式存储管理的优点是没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）；而段式管理的优点是没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）。</li>\n</ul>\n<h2 id=\"8-操作系统中进程调度策略有哪几种\"><a href=\"#8-操作系统中进程调度策略有哪几种\" class=\"headerlink\" title=\"8. 操作系统中进程调度策略有哪几种\"></a>8. 操作系统中进程调度策略有哪几种</h2><ul>\n<li>FCFS(先来先服务，队列实现，非抢占的)：先请求CPU的进程先分配到CPU</li>\n<li>SJF(最短作业优先调度算法)：平均等待时间最短，但难以知道下一个CPU区间长度</li>\n<li>优先级调度算法(可以是抢占的，也可以是非抢占的)：优先级越高越先分配到CPU，相同优先级先到先服务，存在的主要问题是：低优先级进程无穷等待CPU，会导致无穷阻塞或饥饿；解决方案：老化</li>\n<li>时间片轮转调度算法(可抢占的)：队列中没有进程被分配超过一个时间片的CPU时间，除非它是唯一可运行的进程。如果进程的CPU区间超过了一个时间片，那么该进程就被抢占并放回就绪队列。</li>\n<li>多级队列调度算法：将就绪队列分成多个独立的队列，每个队列都有自己的调度算法，队列之间采用固定优先级抢占调度。其中，一个进程根据自身属性被永久地分配到一个队列中。</li>\n<li>多级反馈队列调度算法：与多级队列调度算法相比，其允许进程在队列之间移动：若进程使用过多CPU时间，那么它会被转移到更低的优先级队列；在较低优先级队列等待时间过长的进程会被转移到更高优先级队列，以防止饥饿发生。</li>\n</ul>\n","length":3638,"excerpt":"","more":"<h1 id=\"操作系统基础知识总结\"><a href=\"#操作系统基础知识总结\" class=\"headerlink\" title=\"操作系统基础知识总结\"></a>操作系统基础知识总结</h1><p>摘自：<a href=\"https://blog.csdn.net/justloveyou_/article/details/78304294\">https://blog.csdn.net/justloveyou_/article/details/78304294</a></p>\n<h2 id=\"1-进程和线程区别\"><a href=\"#1-进程和线程区别\" class=\"headerlink\" title=\"1. 进程和线程区别\"></a>1. 进程和线程区别</h2><ul>\n<li><strong>根本区别</strong>：进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位。</li>\n<li><strong>系统开销</strong>：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I&#x2F;O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。</li>\n<li><strong>拥有资源</strong>：系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源。</li>\n<li><strong>调度</strong>：线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</li>\n<li><strong>通信方面</strong>：线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。</li>\n<li>包含关系：<del>没有线程的进程可以看做是单线程的</del>（凡是进程必须有并且至少有一个线程），如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</li>\n</ul>\n<p><a href=\"https://blog.csdn.net/kuangsonghan/article/details/80674777\">https://blog.csdn.net/kuangsonghan/article/details/80674777</a></p>\n<h2 id=\"2-什么是死锁？死锁产生的条件\"><a href=\"#2-什么是死锁？死锁产生的条件\" class=\"headerlink\" title=\"2. 什么是死锁？死锁产生的条件\"></a>2. 什么是死锁？死锁产生的条件</h2><p>在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲，就是两个或多个进程无限期的阻塞、相互等待的一种状态。</p>\n<h3 id=\"2-1-死锁产生的四个必要条件\"><a href=\"#2-1-死锁产生的四个必要条件\" class=\"headerlink\" title=\"2.1 死锁产生的四个必要条件\"></a>2.1 死锁产生的四个必要条件</h3><ul>\n<li>互斥：至少有一个资源必须属于非共享模式，即一次只能被一个进程使用；若其他申请使用该资源，那么申请进程必须等到该资源被释放为止；</li>\n<li>占有并等待：一个进程必须占有至少一个资源，并等待另一个资源，而该资源为其他进程所占有；</li>\n<li>非抢占：进程不能被抢占，即资源只能被进程在完成任务后自愿释放</li>\n<li>循环等待：若干进程之间形成一种头尾相接的环形等待资源关系</li>\n</ul>\n<h3 id=\"2-2-死锁的处理基本策略和常用方法\"><a href=\"#2-2-死锁的处理基本策略和常用方法\" class=\"headerlink\" title=\"2.2 死锁的处理基本策略和常用方法\"></a>2.2 死锁的处理基本策略和常用方法</h3><p>解决死锁的基本方法主要有 预防死锁、避免死锁、检测死锁、解除死锁 、鸵鸟策略 等。</p>\n<h4 id=\"2-2-1-死锁预防\"><a href=\"#2-2-1-死锁预防\" class=\"headerlink\" title=\"2.2.1 死锁预防\"></a>2.2.1 死锁预防</h4><p>只要确保死锁发生的四个必要条件中至少有一个不成立，就能预防死锁的发生</p>\n<ul>\n<li>打破互斥条件：由资源本身属性决定，无实际意义。</li>\n<li>打破占有并等待条件：可以实行资源预先分配策略(进程在运行前一次性向系统申请它所需要的全部资源，若所需全部资源得不到满足，则不分配任何资源，此进程暂不运行；只有当系统能满足当前进程所需的全部资源时，才一次性将所申请资源全部分配给该线程)或者只允许进程在没有占用资源时才可以申请资源（一个进程可申请一些资源并使用它们，但是在当前进程申请更多资源之前，它必须全部释放当前所占有的资源）。但是这种策略也存在一些缺点：在很多情况下，无法预知一个进程执行前所需的全部资源，因为进程是动态执行的，不可预知的；同时，会降低资源利用率，导致降低了进程的并发性。</li>\n<li>打破非抢占条件：允许进程强行从占有者哪里夺取某些资源。也就是说，但一个进程占有了一部分资源，在其申请新的资源且得不到满足时，它必须释放所有占有的资源以便让其它线程使用。这种预防死锁的方式实现起来困难，会降低系统性能。</li>\n<li>打破循环等待条件：实行资源有序分配策略。对所有资源排序编号，所有进程对资源的请求必须严格按资源序号递增的顺序提出，即只有占用了小号资源才能申请大号资源，这样就不回产生环路，预防死锁的发生。</li>\n</ul>\n<h4 id=\"2-2-2-死锁避免\"><a href=\"#2-2-2-死锁避免\" class=\"headerlink\" title=\"2.2.2 死锁避免\"></a>2.2.2 死锁避免</h4><p>死锁避免的基本思想是动态地检测资源分配状态，以确保循环等待条件不成立，从而确保系统处于安全状态。</p>\n<h4 id=\"2-2-3-死锁解除\"><a href=\"#2-2-3-死锁解除\" class=\"headerlink\" title=\"2.2.3 死锁解除\"></a>2.2.3 死锁解除</h4><p>死锁解除的常用两种方法为进程终止和资源抢占。</p>\n<h2 id=\"3-线程同步\"><a href=\"#3-线程同步\" class=\"headerlink\" title=\"3. 线程同步\"></a>3. 线程同步</h2><ul>\n<li><font color='red'>临界区</font>：临界区对象和互斥对象非常相似，只是互斥量允许在进程间使用，而临界区只限制与同一进程的各个线程之间使用，但是更节省资源，更有效率。</li>\n<li><font color='red'>互斥量</font>：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。</li>\n<li><font color='red'>信号量</font>：它允许同一时刻多个线程访问公共资源，但是要控制同一时刻访问的最大线程数量。</li>\n<li><font color='red'>事件（信号）</font>：通过通知操作保持多线程同步，还能实现多线程优先级比较。</li>\n</ul>\n<h2 id=\"4-进程通信\"><a href=\"#4-进程通信\" class=\"headerlink\" title=\"4. 进程通信\"></a>4. 进程通信</h2><ul>\n<li><font color='red'>管道（pipe）及命名管道（named pipe）</font>：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；</li>\n<li><font color='red'>信号（signal）</font>：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生</li>\n<li><font color='red'>消息队列</font>：是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息；</li>\n<li><font color='red'>共享内存</font>：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等；</li>\n<li><font color='red'>信号量</font>：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段；</li>\n<li><font color='red'>套接字</font>：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。</li>\n</ul>\n<h2 id=\"5-进程有哪几种状态\"><a href=\"#5-进程有哪几种状态\" class=\"headerlink\" title=\"5. 进程有哪几种状态\"></a>5. 进程有哪几种状态</h2><ul>\n<li>就绪状态：进程已获得除处理机以外的所需资源，等待分配处理机资源；</li>\n<li>运行状态：占用处理机资源运行，处于此状态的进程数小于等于CPU数；</li>\n<li>阻塞状态：进程等待某种条件，在条件满足之前无法执行；</li>\n</ul>\n<h2 id=\"6-线程有哪几种状态\"><a href=\"#6-线程有哪几种状态\" class=\"headerlink\" title=\"6. 线程有哪几种状态\"></a>6. 线程有哪几种状态</h2><p>在 Java虚拟机 中，线程从最初的创建到最终的消亡，要经历若干个状态：创建(new)、就绪(runnable&#x2F;start)、运行(running)、阻塞(blocked)、等待(waiting)、时间等待(time waiting) 和 消亡(dead&#x2F;terminated)。在给定的时间点上，一个线程只能处于一种状态。</p>\n<h2 id=\"7-分页和分段有什么区别（内存管理）\"><a href=\"#7-分页和分段有什么区别（内存管理）\" class=\"headerlink\" title=\"7. 分页和分段有什么区别（内存管理）\"></a>7. 分页和分段有什么区别（内存管理）</h2><p>段式存储管理是一种符合用户视角的内存分配管理方案。在段式存储管理中，将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）</p>\n<p>页式存储管理方案是一种用户视角内存与物理内存相分离的内存分配管理方案。在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的帧，程序加载时，可以将任意一页放入内存中任意一个帧，这些帧不必连续，从而实现了离散分离。页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）。</p>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>目的不同：分页是由于系统管理的需要而不是用户的需要，它是信息的物理单位；分段的目的是为了能更好地满足用户的需要，它是信息的逻辑单位，它含有一组其意义相对完整的信息；</li>\n<li>大小不同：页的大小固定且由系统决定，而段的长度却不固定，由其所完成的功能决定；</li>\n<li>地址空间不同： 段向用户提供二维地址空间；页向用户提供的是一维地址空间；</li>\n<li>信息共享：段是信息的逻辑单位，便于存储保护和信息的共享，页的保护和共享受到限制；</li>\n<li>内存碎片：页式存储管理的优点是没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）；而段式管理的优点是没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）。</li>\n</ul>\n<h2 id=\"8-操作系统中进程调度策略有哪几种\"><a href=\"#8-操作系统中进程调度策略有哪几种\" class=\"headerlink\" title=\"8. 操作系统中进程调度策略有哪几种\"></a>8. 操作系统中进程调度策略有哪几种</h2><ul>\n<li>FCFS(先来先服务，队列实现，非抢占的)：先请求CPU的进程先分配到CPU</li>\n<li>SJF(最短作业优先调度算法)：平均等待时间最短，但难以知道下一个CPU区间长度</li>\n<li>优先级调度算法(可以是抢占的，也可以是非抢占的)：优先级越高越先分配到CPU，相同优先级先到先服务，存在的主要问题是：低优先级进程无穷等待CPU，会导致无穷阻塞或饥饿；解决方案：老化</li>\n<li>时间片轮转调度算法(可抢占的)：队列中没有进程被分配超过一个时间片的CPU时间，除非它是唯一可运行的进程。如果进程的CPU区间超过了一个时间片，那么该进程就被抢占并放回就绪队列。</li>\n<li>多级队列调度算法：将就绪队列分成多个独立的队列，每个队列都有自己的调度算法，队列之间采用固定优先级抢占调度。其中，一个进程根据自身属性被永久地分配到一个队列中。</li>\n<li>多级反馈队列调度算法：与多级队列调度算法相比，其允许进程在队列之间移动：若进程使用过多CPU时间，那么它会被转移到更低的优先级队列；在较低优先级队列等待时间过长的进程会被转移到更高优先级队列，以防止饥饿发生。</li>\n</ul>\n"},{"title":"数据库事务总结","date":"2019-03-24T05:53:20.000Z","_content":"\n# 数据库事务总结\n\n\n\n---\n## 事务\n\n事务是一个不可分割的数据库操作序列，是数据库并发操作的基本单位，其结果是从一种一致性状态到另一种一致性状态。\n\n### 四大特性（ACID）\n\n#### 原子性（Atomicity）\n事务是数据库逻辑工作单位，其操作要么全做，要么全不做。\n\n#### 一致性（Consistency）\n其结果必须是从一种一致性状态到另一种一致性状态。\n\n#### 隔离性（Isolation）\n一个事务的执行不能被其他事务干扰。\n\n#### 持久性（Duration）\n持久性表示一旦事务被提交了，数据库的数据改变就是永久性的，即使遇到故障也不会丢失提交的操作。\n\n### 不考虑隔离性会出现的问题\n\n- **脏读**： 一个事务读到了另一个未提交事务的数据。\n- **不可重复读**：一个事务两次查询的间隔中，另一个事务修改并提交了数据，导致两次查询结果不同。\n- **幻读**：一个事务两次查询中数据笔数不一致。\n\n不可重复读和幻读都是查询中被另一个事务修改并提交了，不同的是不可重复读查询的是同一条数据，幻读是一批数据（比如数据的条数）。\n\n### 隔离级别\n\n- **Read Uncommitted(读未提交)**：所有事务都可以看到其他事务未提交的结果。一般很少用。\n- **Read commited(读已提交)**：一个事务只能看见已提交的结果。除mysql外大多数数据库默认。\n- **Repeatable Read(可重复读)**：确保了同一个事务的多个实例并发读数据时能看到相同的结果。mysql默认。\n- **Serializable(顺序读)**：最高的隔离级别，解决了幻读，但会出现大量超时和锁竞争。\n\n#### 事务隔离级别对比\n\n\n事务隔离级别 | 脏读 | 不可重复读 | 幻读\n---|:-:| :-:|:-:\nRead Uncommitted | 允许 | 允许 | 允许\nRead commited | 不允许 | 允许 | 允许\nRepeatable Read | 不允许 | 不允许 | 允许\nSerializable | 不允许 | 不允许 | 不允许\n\n#### 隔离级别与锁\nRead Uncommitted：读操作不加S锁。\nRead commited：读操作加S锁，在语句执行完释放锁。\nRepeatable Read：读操作加S锁，事务提交后释放锁。\nSerializable：在Repeatable read的基础上，加范围锁。\n\n### 操作\nstart transaction;开始事务\n\ncommit; 提交\n\nrollback; 回滚\n\n\n---\n\n参考文献：https://www.weiweiblog.cn/databases/","source":"_posts/数据库事务.md","raw":"---\n\ntitle: 数据库事务总结\ndate: 2019-3-24 13:53:20\ntags: [面试,数据库]\ncategories: [面试,数据库]\n\n---\n\n# 数据库事务总结\n\n\n\n---\n## 事务\n\n事务是一个不可分割的数据库操作序列，是数据库并发操作的基本单位，其结果是从一种一致性状态到另一种一致性状态。\n\n### 四大特性（ACID）\n\n#### 原子性（Atomicity）\n事务是数据库逻辑工作单位，其操作要么全做，要么全不做。\n\n#### 一致性（Consistency）\n其结果必须是从一种一致性状态到另一种一致性状态。\n\n#### 隔离性（Isolation）\n一个事务的执行不能被其他事务干扰。\n\n#### 持久性（Duration）\n持久性表示一旦事务被提交了，数据库的数据改变就是永久性的，即使遇到故障也不会丢失提交的操作。\n\n### 不考虑隔离性会出现的问题\n\n- **脏读**： 一个事务读到了另一个未提交事务的数据。\n- **不可重复读**：一个事务两次查询的间隔中，另一个事务修改并提交了数据，导致两次查询结果不同。\n- **幻读**：一个事务两次查询中数据笔数不一致。\n\n不可重复读和幻读都是查询中被另一个事务修改并提交了，不同的是不可重复读查询的是同一条数据，幻读是一批数据（比如数据的条数）。\n\n### 隔离级别\n\n- **Read Uncommitted(读未提交)**：所有事务都可以看到其他事务未提交的结果。一般很少用。\n- **Read commited(读已提交)**：一个事务只能看见已提交的结果。除mysql外大多数数据库默认。\n- **Repeatable Read(可重复读)**：确保了同一个事务的多个实例并发读数据时能看到相同的结果。mysql默认。\n- **Serializable(顺序读)**：最高的隔离级别，解决了幻读，但会出现大量超时和锁竞争。\n\n#### 事务隔离级别对比\n\n\n事务隔离级别 | 脏读 | 不可重复读 | 幻读\n---|:-:| :-:|:-:\nRead Uncommitted | 允许 | 允许 | 允许\nRead commited | 不允许 | 允许 | 允许\nRepeatable Read | 不允许 | 不允许 | 允许\nSerializable | 不允许 | 不允许 | 不允许\n\n#### 隔离级别与锁\nRead Uncommitted：读操作不加S锁。\nRead commited：读操作加S锁，在语句执行完释放锁。\nRepeatable Read：读操作加S锁，事务提交后释放锁。\nSerializable：在Repeatable read的基础上，加范围锁。\n\n### 操作\nstart transaction;开始事务\n\ncommit; 提交\n\nrollback; 回滚\n\n\n---\n\n参考文献：https://www.weiweiblog.cn/databases/","slug":"数据库事务","published":1,"updated":"2025-02-22T18:52:19.826Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8b10021v0015ln191oo","content":"<h1 id=\"数据库事务总结\"><a href=\"#数据库事务总结\" class=\"headerlink\" title=\"数据库事务总结\"></a>数据库事务总结</h1><hr>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>事务是一个不可分割的数据库操作序列，是数据库并发操作的基本单位，其结果是从一种一致性状态到另一种一致性状态。</p>\n<h3 id=\"四大特性（ACID）\"><a href=\"#四大特性（ACID）\" class=\"headerlink\" title=\"四大特性（ACID）\"></a>四大特性（ACID）</h3><h4 id=\"原子性（Atomicity）\"><a href=\"#原子性（Atomicity）\" class=\"headerlink\" title=\"原子性（Atomicity）\"></a>原子性（Atomicity）</h4><p>事务是数据库逻辑工作单位，其操作要么全做，要么全不做。</p>\n<h4 id=\"一致性（Consistency）\"><a href=\"#一致性（Consistency）\" class=\"headerlink\" title=\"一致性（Consistency）\"></a>一致性（Consistency）</h4><p>其结果必须是从一种一致性状态到另一种一致性状态。</p>\n<h4 id=\"隔离性（Isolation）\"><a href=\"#隔离性（Isolation）\" class=\"headerlink\" title=\"隔离性（Isolation）\"></a>隔离性（Isolation）</h4><p>一个事务的执行不能被其他事务干扰。</p>\n<h4 id=\"持久性（Duration）\"><a href=\"#持久性（Duration）\" class=\"headerlink\" title=\"持久性（Duration）\"></a>持久性（Duration）</h4><p>持久性表示一旦事务被提交了，数据库的数据改变就是永久性的，即使遇到故障也不会丢失提交的操作。</p>\n<h3 id=\"不考虑隔离性会出现的问题\"><a href=\"#不考虑隔离性会出现的问题\" class=\"headerlink\" title=\"不考虑隔离性会出现的问题\"></a>不考虑隔离性会出现的问题</h3><ul>\n<li><strong>脏读</strong>： 一个事务读到了另一个未提交事务的数据。</li>\n<li><strong>不可重复读</strong>：一个事务两次查询的间隔中，另一个事务修改并提交了数据，导致两次查询结果不同。</li>\n<li><strong>幻读</strong>：一个事务两次查询中数据笔数不一致。</li>\n</ul>\n<p>不可重复读和幻读都是查询中被另一个事务修改并提交了，不同的是不可重复读查询的是同一条数据，幻读是一批数据（比如数据的条数）。</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><ul>\n<li>**Read Uncommitted(读未提交)**：所有事务都可以看到其他事务未提交的结果。一般很少用。</li>\n<li>**Read commited(读已提交)**：一个事务只能看见已提交的结果。除mysql外大多数数据库默认。</li>\n<li>**Repeatable Read(可重复读)**：确保了同一个事务的多个实例并发读数据时能看到相同的结果。mysql默认。</li>\n<li>**Serializable(顺序读)**：最高的隔离级别，解决了幻读，但会出现大量超时和锁竞争。</li>\n</ul>\n<h4 id=\"事务隔离级别对比\"><a href=\"#事务隔离级别对比\" class=\"headerlink\" title=\"事务隔离级别对比\"></a>事务隔离级别对比</h4><table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read Uncommitted</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Read commited</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Repeatable Read</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n</tr>\n</tbody></table>\n<h4 id=\"隔离级别与锁\"><a href=\"#隔离级别与锁\" class=\"headerlink\" title=\"隔离级别与锁\"></a>隔离级别与锁</h4><p>Read Uncommitted：读操作不加S锁。<br>Read commited：读操作加S锁，在语句执行完释放锁。<br>Repeatable Read：读操作加S锁，事务提交后释放锁。<br>Serializable：在Repeatable read的基础上，加范围锁。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>start transaction;开始事务</p>\n<p>commit; 提交</p>\n<p>rollback; 回滚</p>\n<hr>\n<p>参考文献：<a href=\"https://www.weiweiblog.cn/databases/\">https://www.weiweiblog.cn/databases/</a></p>\n","length":943,"excerpt":"","more":"<h1 id=\"数据库事务总结\"><a href=\"#数据库事务总结\" class=\"headerlink\" title=\"数据库事务总结\"></a>数据库事务总结</h1><hr>\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>事务是一个不可分割的数据库操作序列，是数据库并发操作的基本单位，其结果是从一种一致性状态到另一种一致性状态。</p>\n<h3 id=\"四大特性（ACID）\"><a href=\"#四大特性（ACID）\" class=\"headerlink\" title=\"四大特性（ACID）\"></a>四大特性（ACID）</h3><h4 id=\"原子性（Atomicity）\"><a href=\"#原子性（Atomicity）\" class=\"headerlink\" title=\"原子性（Atomicity）\"></a>原子性（Atomicity）</h4><p>事务是数据库逻辑工作单位，其操作要么全做，要么全不做。</p>\n<h4 id=\"一致性（Consistency）\"><a href=\"#一致性（Consistency）\" class=\"headerlink\" title=\"一致性（Consistency）\"></a>一致性（Consistency）</h4><p>其结果必须是从一种一致性状态到另一种一致性状态。</p>\n<h4 id=\"隔离性（Isolation）\"><a href=\"#隔离性（Isolation）\" class=\"headerlink\" title=\"隔离性（Isolation）\"></a>隔离性（Isolation）</h4><p>一个事务的执行不能被其他事务干扰。</p>\n<h4 id=\"持久性（Duration）\"><a href=\"#持久性（Duration）\" class=\"headerlink\" title=\"持久性（Duration）\"></a>持久性（Duration）</h4><p>持久性表示一旦事务被提交了，数据库的数据改变就是永久性的，即使遇到故障也不会丢失提交的操作。</p>\n<h3 id=\"不考虑隔离性会出现的问题\"><a href=\"#不考虑隔离性会出现的问题\" class=\"headerlink\" title=\"不考虑隔离性会出现的问题\"></a>不考虑隔离性会出现的问题</h3><ul>\n<li><strong>脏读</strong>： 一个事务读到了另一个未提交事务的数据。</li>\n<li><strong>不可重复读</strong>：一个事务两次查询的间隔中，另一个事务修改并提交了数据，导致两次查询结果不同。</li>\n<li><strong>幻读</strong>：一个事务两次查询中数据笔数不一致。</li>\n</ul>\n<p>不可重复读和幻读都是查询中被另一个事务修改并提交了，不同的是不可重复读查询的是同一条数据，幻读是一批数据（比如数据的条数）。</p>\n<h3 id=\"隔离级别\"><a href=\"#隔离级别\" class=\"headerlink\" title=\"隔离级别\"></a>隔离级别</h3><ul>\n<li>**Read Uncommitted(读未提交)**：所有事务都可以看到其他事务未提交的结果。一般很少用。</li>\n<li>**Read commited(读已提交)**：一个事务只能看见已提交的结果。除mysql外大多数数据库默认。</li>\n<li>**Repeatable Read(可重复读)**：确保了同一个事务的多个实例并发读数据时能看到相同的结果。mysql默认。</li>\n<li>**Serializable(顺序读)**：最高的隔离级别，解决了幻读，但会出现大量超时和锁竞争。</li>\n</ul>\n<h4 id=\"事务隔离级别对比\"><a href=\"#事务隔离级别对比\" class=\"headerlink\" title=\"事务隔离级别对比\"></a>事务隔离级别对比</h4><table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read Uncommitted</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Read commited</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Repeatable Read</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n</tr>\n</tbody></table>\n<h4 id=\"隔离级别与锁\"><a href=\"#隔离级别与锁\" class=\"headerlink\" title=\"隔离级别与锁\"></a>隔离级别与锁</h4><p>Read Uncommitted：读操作不加S锁。<br>Read commited：读操作加S锁，在语句执行完释放锁。<br>Repeatable Read：读操作加S锁，事务提交后释放锁。<br>Serializable：在Repeatable read的基础上，加范围锁。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>start transaction;开始事务</p>\n<p>commit; 提交</p>\n<p>rollback; 回滚</p>\n<hr>\n<p>参考文献：<a href=\"https://www.weiweiblog.cn/databases/\">https://www.weiweiblog.cn/databases/</a></p>\n"},{"title":"数据库其他知识","date":"2019-03-24T06:20:01.000Z","_content":"\n# 数据库其他知识\n\n---\n\n## 其他知识\n\n### delete truncate drop区别\n\n区别 | delete | truncate | drop\n---|--- | --- | ---\n类型回滚 | 可回滚 | 不可回滚 | 不可回滚\n删除内容 | 表结构还在，删除表全部或部分内容 | 表结构还在，删除全部内容 | 删除表，所有数据、索引、权限一并删除\n删除速度 | 逐行删除，速度慢 | 速度快 | 速度快\n\n### 存储过程\n预编译的sql语句，一次创建，多次使用。\n#### 优点\n1. 预编译，效率高。\n2. 存放在数据库，减少网络传输。\n3. 安全性高，需要一定权限。\n4. 一次创建可多次使用，提高开发效率。\n\n### 视图\n从一个表或多个表导出的表，是虚表，不存具体数据。\n\n### 主从复制\n将主数据库的DDL、DML操作记录到二进制文件（BINLOG），传输到从数据库，从数据库重新执行，使得从数据库数据和主数据库保持一致。\n\n#### 主从复制作用\n- 主数据库故障可以切换到从数据库；\n- 可以读写分离；\n- 从数据库可以日志备份。\n\n#### 复制过程\n1. 主数据库更新数据完成前，将操作记录顺序记录到BINLOG；\n2. 从数据库开启一个I/O线程，该线程在主数据库打开一个普通连接，将读到的事件写入到中继日志，如果读取的进度跟上了master，就进入睡眠等待；\n3. 从数据库的SQL线程将读取中继日志，并顺序执行操作。\n\n### 大表数据查询的优化\n1. 优化Schema，sql语句、索引。\n2. 加缓存，memcached，redis\n3. 主从复制，读写分离\n4. 垂直拆分，分布式系统\n5. 水平切分，要选择合适的sharding key，为了好的查询效率，表结构也要改变，应用也需要改变，sql中尽量带sharding key，将数据定位到限定的表去查，而不是全部的表。\n\n\n\n---\n\n参考文献：https://www.weiweiblog.cn/databases/","source":"_posts/数据库其他知识.md","raw":"---\n\ntitle: 数据库其他知识\ndate: 2019-3-24 14:20:01\ntags: [面试,数据库]\ncategories: [面试,数据库]\n\n---\n\n# 数据库其他知识\n\n---\n\n## 其他知识\n\n### delete truncate drop区别\n\n区别 | delete | truncate | drop\n---|--- | --- | ---\n类型回滚 | 可回滚 | 不可回滚 | 不可回滚\n删除内容 | 表结构还在，删除表全部或部分内容 | 表结构还在，删除全部内容 | 删除表，所有数据、索引、权限一并删除\n删除速度 | 逐行删除，速度慢 | 速度快 | 速度快\n\n### 存储过程\n预编译的sql语句，一次创建，多次使用。\n#### 优点\n1. 预编译，效率高。\n2. 存放在数据库，减少网络传输。\n3. 安全性高，需要一定权限。\n4. 一次创建可多次使用，提高开发效率。\n\n### 视图\n从一个表或多个表导出的表，是虚表，不存具体数据。\n\n### 主从复制\n将主数据库的DDL、DML操作记录到二进制文件（BINLOG），传输到从数据库，从数据库重新执行，使得从数据库数据和主数据库保持一致。\n\n#### 主从复制作用\n- 主数据库故障可以切换到从数据库；\n- 可以读写分离；\n- 从数据库可以日志备份。\n\n#### 复制过程\n1. 主数据库更新数据完成前，将操作记录顺序记录到BINLOG；\n2. 从数据库开启一个I/O线程，该线程在主数据库打开一个普通连接，将读到的事件写入到中继日志，如果读取的进度跟上了master，就进入睡眠等待；\n3. 从数据库的SQL线程将读取中继日志，并顺序执行操作。\n\n### 大表数据查询的优化\n1. 优化Schema，sql语句、索引。\n2. 加缓存，memcached，redis\n3. 主从复制，读写分离\n4. 垂直拆分，分布式系统\n5. 水平切分，要选择合适的sharding key，为了好的查询效率，表结构也要改变，应用也需要改变，sql中尽量带sharding key，将数据定位到限定的表去查，而不是全部的表。\n\n\n\n---\n\n参考文献：https://www.weiweiblog.cn/databases/","slug":"数据库其他知识","published":1,"updated":"2025-02-22T18:52:19.826Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8b20026v001c75l9c2d","content":"<h1 id=\"数据库其他知识\"><a href=\"#数据库其他知识\" class=\"headerlink\" title=\"数据库其他知识\"></a>数据库其他知识</h1><hr>\n<h2 id=\"其他知识\"><a href=\"#其他知识\" class=\"headerlink\" title=\"其他知识\"></a>其他知识</h2><h3 id=\"delete-truncate-drop区别\"><a href=\"#delete-truncate-drop区别\" class=\"headerlink\" title=\"delete truncate drop区别\"></a>delete truncate drop区别</h3><table>\n<thead>\n<tr>\n<th>区别</th>\n<th>delete</th>\n<th>truncate</th>\n<th>drop</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类型回滚</td>\n<td>可回滚</td>\n<td>不可回滚</td>\n<td>不可回滚</td>\n</tr>\n<tr>\n<td>删除内容</td>\n<td>表结构还在，删除表全部或部分内容</td>\n<td>表结构还在，删除全部内容</td>\n<td>删除表，所有数据、索引、权限一并删除</td>\n</tr>\n<tr>\n<td>删除速度</td>\n<td>逐行删除，速度慢</td>\n<td>速度快</td>\n<td>速度快</td>\n</tr>\n</tbody></table>\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><p>预编译的sql语句，一次创建，多次使用。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>预编译，效率高。</li>\n<li>存放在数据库，减少网络传输。</li>\n<li>安全性高，需要一定权限。</li>\n<li>一次创建可多次使用，提高开发效率。</li>\n</ol>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><p>从一个表或多个表导出的表，是虚表，不存具体数据。</p>\n<h3 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h3><p>将主数据库的DDL、DML操作记录到二进制文件（BINLOG），传输到从数据库，从数据库重新执行，使得从数据库数据和主数据库保持一致。</p>\n<h4 id=\"主从复制作用\"><a href=\"#主从复制作用\" class=\"headerlink\" title=\"主从复制作用\"></a>主从复制作用</h4><ul>\n<li>主数据库故障可以切换到从数据库；</li>\n<li>可以读写分离；</li>\n<li>从数据库可以日志备份。</li>\n</ul>\n<h4 id=\"复制过程\"><a href=\"#复制过程\" class=\"headerlink\" title=\"复制过程\"></a>复制过程</h4><ol>\n<li>主数据库更新数据完成前，将操作记录顺序记录到BINLOG；</li>\n<li>从数据库开启一个I&#x2F;O线程，该线程在主数据库打开一个普通连接，将读到的事件写入到中继日志，如果读取的进度跟上了master，就进入睡眠等待；</li>\n<li>从数据库的SQL线程将读取中继日志，并顺序执行操作。</li>\n</ol>\n<h3 id=\"大表数据查询的优化\"><a href=\"#大表数据查询的优化\" class=\"headerlink\" title=\"大表数据查询的优化\"></a>大表数据查询的优化</h3><ol>\n<li>优化Schema，sql语句、索引。</li>\n<li>加缓存，memcached，redis</li>\n<li>主从复制，读写分离</li>\n<li>垂直拆分，分布式系统</li>\n<li>水平切分，要选择合适的sharding key，为了好的查询效率，表结构也要改变，应用也需要改变，sql中尽量带sharding key，将数据定位到限定的表去查，而不是全部的表。</li>\n</ol>\n<hr>\n<p>参考文献：<a href=\"https://www.weiweiblog.cn/databases/\">https://www.weiweiblog.cn/databases/</a></p>\n","length":676,"excerpt":"","more":"<h1 id=\"数据库其他知识\"><a href=\"#数据库其他知识\" class=\"headerlink\" title=\"数据库其他知识\"></a>数据库其他知识</h1><hr>\n<h2 id=\"其他知识\"><a href=\"#其他知识\" class=\"headerlink\" title=\"其他知识\"></a>其他知识</h2><h3 id=\"delete-truncate-drop区别\"><a href=\"#delete-truncate-drop区别\" class=\"headerlink\" title=\"delete truncate drop区别\"></a>delete truncate drop区别</h3><table>\n<thead>\n<tr>\n<th>区别</th>\n<th>delete</th>\n<th>truncate</th>\n<th>drop</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类型回滚</td>\n<td>可回滚</td>\n<td>不可回滚</td>\n<td>不可回滚</td>\n</tr>\n<tr>\n<td>删除内容</td>\n<td>表结构还在，删除表全部或部分内容</td>\n<td>表结构还在，删除全部内容</td>\n<td>删除表，所有数据、索引、权限一并删除</td>\n</tr>\n<tr>\n<td>删除速度</td>\n<td>逐行删除，速度慢</td>\n<td>速度快</td>\n<td>速度快</td>\n</tr>\n</tbody></table>\n<h3 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h3><p>预编译的sql语句，一次创建，多次使用。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>预编译，效率高。</li>\n<li>存放在数据库，减少网络传输。</li>\n<li>安全性高，需要一定权限。</li>\n<li>一次创建可多次使用，提高开发效率。</li>\n</ol>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h3><p>从一个表或多个表导出的表，是虚表，不存具体数据。</p>\n<h3 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h3><p>将主数据库的DDL、DML操作记录到二进制文件（BINLOG），传输到从数据库，从数据库重新执行，使得从数据库数据和主数据库保持一致。</p>\n<h4 id=\"主从复制作用\"><a href=\"#主从复制作用\" class=\"headerlink\" title=\"主从复制作用\"></a>主从复制作用</h4><ul>\n<li>主数据库故障可以切换到从数据库；</li>\n<li>可以读写分离；</li>\n<li>从数据库可以日志备份。</li>\n</ul>\n<h4 id=\"复制过程\"><a href=\"#复制过程\" class=\"headerlink\" title=\"复制过程\"></a>复制过程</h4><ol>\n<li>主数据库更新数据完成前，将操作记录顺序记录到BINLOG；</li>\n<li>从数据库开启一个I&#x2F;O线程，该线程在主数据库打开一个普通连接，将读到的事件写入到中继日志，如果读取的进度跟上了master，就进入睡眠等待；</li>\n<li>从数据库的SQL线程将读取中继日志，并顺序执行操作。</li>\n</ol>\n<h3 id=\"大表数据查询的优化\"><a href=\"#大表数据查询的优化\" class=\"headerlink\" title=\"大表数据查询的优化\"></a>大表数据查询的优化</h3><ol>\n<li>优化Schema，sql语句、索引。</li>\n<li>加缓存，memcached，redis</li>\n<li>主从复制，读写分离</li>\n<li>垂直拆分，分布式系统</li>\n<li>水平切分，要选择合适的sharding key，为了好的查询效率，表结构也要改变，应用也需要改变，sql中尽量带sharding key，将数据定位到限定的表去查，而不是全部的表。</li>\n</ol>\n<hr>\n<p>参考文献：<a href=\"https://www.weiweiblog.cn/databases/\">https://www.weiweiblog.cn/databases/</a></p>\n"},{"title":"数据库知识整理","date":"2019-03-30T04:48:14.000Z","description":"数据库知识整理","_content":"\n# 数据库相关总结\n\n---\n\n参考：https://www.weiweiblog.cn/databases/\n\n---\n\n## 1. 范式\n### 1. 第一范式\n每个属性都不可再分。\n### 2. 第二范式\n**消除了非主属性对于码的部分函数依赖。**\n所有非主属性都必须和主键有完全依赖关系，不能存在有某个非主属性只和主键的一部分有关。\n\n\n```\n部分函数依赖：若XY是关系R中的属性，X->Y，X'是X的子集，若存在X'->Y，则Y部分函数依赖X。\n\n安全函数依赖：若XY是关系R中的属性，X->Y，X'是X的子集，若每个X'！->Y，则Y完全函数依赖X。\n\n传递函数依赖：在关系R(U)中，XYZ是R的三个属性集合，若X确定Y，Y确定Z，X不包含Y，Y不确定Z，(XUY)∩Z为空，则称Z传递函数依赖于X。\n```\n\n### 3. 第三范式\n**消除了非主属性对于码的传递函数依赖。**\n不仅要满足第二范式，而且所有属性都要互相独立，没有传递关系。\n\n---\n\n## 2. 数据库索引\n索引通常是由B树或者B+树实现。\n### 2.1. B树和B+树的区别\n- B树的键和值也存在内部节点和叶子结点中，B+树内部结点只存键，叶子结点存键和值。\n- B+树的叶子结点有一条链相连。\n\n##### B树的好处\nB树在内部存键值，频繁访问的节点在根节点附近可以提高查询效率，如果特定数据是重复读取，B树更好。\n##### B+树的好处\n一次读取大量数据时，因为B+树内部节点只存键，因此可以读取更多键，又因为叶子节点有链，读取大量数据时不需要每次都遍历内部节点。\n\n### 2.2. 数据库使用B+还是B\n**B树只适合随机检索，B+树同时适合随机检索和顺序检索。**\n\n**B+树空间利用率更高，I/O次数少，磁盘读写少。**\n索引也很大，需要以文件的形式存在磁盘中。索引查找就会产生I/O操作。B+树可以一次读取更多的关键字，因此I/O次数少。\n\n**B+树查询效率更稳定。**\nB树关键字在内部节点中也有，找到关键字就能确定记录。性能代价相当于二分查找。\nB+树每次都是跟到叶节点，效率更稳定。\n\n**B+树顺序遍历效率也不低。**\nB+树叶子结点有链。\n\n### 2.3. 索引类型\n\n- 主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键索引。\n- 唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。\n- 普通索引：没有唯一性限制，可以为空。\n- 全文索引：主要用来查找文本中的关键字，而不是直接与索引中的值相比较。\n- 联合索引：可以多个列共同创建联合索引。一个查询可以使用其中一个列，但必须遵守最左前缀原则。\n\n### 2.4. 聚集索与非聚集索\n- 聚集索引：各行的物理顺序和逻辑顺序相同，一个表只能有一个。\n- 非聚集索引：数据与索引在不同位置，索引中存在指向数据的指针，可以有多个。非聚集索引，分成普通索引，唯一索引，全文索引。\n\nInnoDB的数据文件本身就是索引文件。InnoDB数据文件按聚集索引，所以InnoDB必须有主键。InnoDB聚集索引规则：\n1. 如果有主键，主键就是聚集索引。\n2. 如果没有主键，第一个唯一非空索引就是聚集索引。\n3. 如果1、2都没有，会生成一个隐藏的主键作为聚集索引，它是6个字节的列，随着数据插入自增。\n\n### 2.5. MyISAM和InnoDB索引实现\n\n索引 | MyISAM | InnoDB\n---|---|---\n主键索引 | 在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。 | 索引页仍然存放主键和和指向数据页的偏移量，但数据页存放的是完整的记录。也就是在InnoDB中，数据和主键索引是存放在一起的。\n辅助索引 | 在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。综上所述，在MyISAM中，索引文件和数据文件分开存放，不管是主键索引还是辅助索引，都属于非聚集索引。  | 索引节点存放的内容一样，仍然是键值信息和指向数据页的偏移量；但数据页中存放的是键值信息和该键值对应的主键。然后通过主键查询主键索引就能找到该条记录。\n\n### 2.6. 索引的优点\n- 创建唯一性索引，可以确保每行数据的唯一性。\n- 提高数据检索效率。\n- 加快表与表之间的连接。\n- 使用分组和排序字句检索时，可以加快检索时间。\n- 通过使用索引，在查询过程中，使用查询优化器，提高系统性能。\n\n### 2.7. 索引的缺点\n- 时间方面：创建和维护需要时间。对数据增删改也需要对索引维护。\n- 空间方面：索引需要占据物理空间。\n\n\n### 2.8. 索引的优化\n- 非空字段：索引的列最好为非空。空值很难优化，用其他方式（0，特殊值等）代替空值。\n- 取离散大的列：将更离散的数据放在联合索引前面。\n- 索引字段越小越好：数据以页为单位存储，一页数据越多，一次IO操作得到的数据越多。\n- 对 where,on,group by,order by 中出现的列使用索引。\n- 对于like查询，%不放在前面。\n- 最左前缀匹配原则。\n\n### 2.9. 最左前缀匹配原则\nmysql会向右匹配到范围查询（<,>,between等），=、in放在左边。 = in 可以乱序。\n\n---\n## 3. 事务\n\n事务是一个不可分割的数据库操作序列，是数据库并发操作的基本单位，其结果是从一种一致性状态到另一种一致性状态。\n\n### 3.1. 四大特性（ACID）\n\n#### 原子性（Atomicity）\n事务是数据库逻辑工作单位，其操作要么全做，要么全不做。\n\n#### 一致性（Consistency）\n其结果必须是从一种一致性状态到另一种一致性状态。\n\n#### 隔离性（Isolation）\n一个事务的执行不能被其他事务干扰。\n\n#### 持久性（Duration）\n持久性表示一旦事务被提交了，数据库的数据改变就是永久性的，即使遇到故障也不会丢失提交的操作。\n\n### 3.2. 不考虑隔离性会出现的问题\n\n- **脏读**： 一个事务读到了另一个未提交事务的数据。\n- **不可重复读**：一个事务两次查询的间隔中，另一个事务修改并提交了数据，导致两次查询结果不同。\n- **幻读**：一个事务两次查询中数据笔数不一致。\n\n不可重复读和幻读都是查询中被另一个事务修改并提交了，不同的是不可重复读查询的是同一条数据，幻读是一批数据（比如数据的条数）。\n\n### 3.3 隔离级别\n\n- **Read Uncommitted(读未提交)**：所有事务都可以看到其他事务未提交的结果。一般很少用。\n- **Read commited(读已提交)**：一个事务只能看见已提交的结果。除mysql外大多数数据库默认。\n- **Repeatable Read(可重复读)**：确保了同一个事务的多个实例并发读数据时能看到相同的结果。mysql默认。\n- **Serializable(顺序读)**：最高的隔离级别，解决了幻读，但会出现大量超时和锁竞争。\n\n#### 事务隔离级别对比\n\n\n事务隔离级别 | 脏读 | 不可重复读 | 幻读\n---|:-:| :-:|:-:\nRead Uncommitted | 允许 | 允许 | 允许\nRead commited | 不允许 | 允许 | 允许\nRepeatable Read | 不允许 | 不允许 | 允许\nSerializable | 不允许 | 不允许 | 不允许\n\n#### 隔离级别与锁\nRead Uncommitted：读操作不加S锁。\nRead commited：读操作加S锁，在语句执行完释放锁。\nRepeatable Read：读操作加S锁，事务提交后释放锁。\nSerializable：在Repeatable read的基础上，加范围锁。\n\n### 3.4. 操作\nstart transaction;开始事务\n\ncommit; 提交\n\nrollback; 回滚\n\n---\n\n## 4. 其他知识\n\n### 4.1. delete truncate drop区别\n\n区别 | delete | truncate | drop\n---|--- | --- | ---\n类型回滚 | 可回滚 | 不可回滚 | 不可回滚\n删除内容 | 表结构还在，删除表全部或部分内容 | 表结构还在，删除全部内容 | 删除表，所有数据、索引、权限一并删除\n删除速度 | 逐行删除，速度慢 | 速度快 | 速度快\n\n### 4.2. 存储过程\n预编译的sql语句，一次创建，多次使用。\n#### 优点\n1. 预编译，效率高。\n2. 存放在数据库，减少网络传输。\n3. 安全性高，需要一定权限。\n4. 一次创建可多次使用，提高开发效率。\n\n### 4.3. 视图\n从一个表或多个表导出的表，是虚表，不存具体数据。\n\n### 4.4. 主从复制\n将主数据库的DDL、DML操作记录到二进制文件（BINLOG），传输到从数据库，从数据库重新执行，使得从数据库数据和主数据库保持一致。\n\n#### 主从复制作用\n- 主数据库故障可以切换到从数据库；\n- 可以读写分离；\n- 从数据库可以日志备份。\n\n#### 复制过程\n1. 主数据库更新数据完成前，将操作记录顺序记录到BINLOG；\n2. 从数据库开启一个I/O线程，该线程在主数据库打开一个普通连接，将读到的事件写入到中继日志，如果读取的进度跟上了master，就进入睡眠等待；\n3. 从数据库的SQL线程将读取中继日志，并顺序执行操作。\n\n### 4.5. 大表数据查询的优化\n1. 优化Schema，sql语句、索引。\n2. 加缓存，memcached，redis\n3. 主从复制，读写分离\n4. 垂直拆分，分布式系统\n5. 水平切分，要选择合适的sharding key，为了好的查询效率，表结构也要改变，应用也需要改变，sql中尽量带sharding key，将数据定位到限定的表去查，而不是全部的表。\n\n---\n\n## 5. MVCC\n参考：[MVCC多版本并发控制浅析](https://blog.csdn.net/h330531987/article/details/74364018)\n\n\nMVCC，多版本并发控制，是mysql数据库InnoDB引擎隔离级别的实现。用于Read Committed和Repeatable Read两种隔离级别。\n\nInnoDB会为每一行添加两个字段，分别表示**创建的版本**和**删除的版本**，填入的是事务的版本号，这个版本号随着事务的创建不断递增，具体实现：\n- **select**：满足一下两个条件会返回该行数据：1、 该行的创建版本号小于等于当前版本号，用来确保select操作之前的操作已经执行落地；2、该行的删除版本号大于当前版本号或为空，大于说明当前版本已经有一个并发事务将该行删除了。\n- **insert**：将新插入的行的创建版本号设置为当前的系统版本号。\n- **delete**：将要删除的行的删除版本号设置为当前的系统版本号。\n- **update**：不执行原地操作，还是转化为insert+delete，对旧行执行delete，对新行执行insert。\n\n写操作（update、insert、delete）执行时，将当前的系统版本号递增。\n\n由于旧数据不是真正的删除，所以要对这些数据进行清理，innoDB会开一个后台线程执行，具体规则是将删除版本号小于当前系统版本号的行输出，这个过程叫purge。\n\nMVCC能达到Repeatable Read，但是想达到Serializable还要加锁。\n\n---\n## 6. 封锁\n[数据库锁](https://blog.csdn.net/fantalee/article/details/81661665 )\n### 6.1. 封锁粒度\nMySQL 中提供了两种封锁粒度：行级锁以及表级锁。\n\n在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。\n\n### 6.2. 封锁类型\n#### 读写锁\n- 排它锁（Exclusive），简写为 X 锁，又称写锁。 \n- 共享锁（Shared），简写为 S 锁，又称读锁。 \n\n1. 一个事务对数据对象(数据库、表、页或者行) A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。 \n2. 一个事务对数据对象(数据库、表、页或者行) A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。 \n\n\n· | X | S\n:-:|:-:|:-:\nX | × | × \nS | × | √\n\n#### 意向锁\nInnoDB把意向锁设计得比较简练，没有上面定义那么复杂。其意向锁就是表级别的锁。设计目的主要是为了在一个事务中揭示下一行将被请求的锁类型。\n\n在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。 \n由此，意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：\n1. 一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁； \n2. 一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。\n\n事务 T 想要对表 A 加 X 锁时，只需要先检测是否有其它事务在表 A门口加没加 S/X/IX/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 为整张表加 X 锁失败。进入等待。\n\n表级意向锁与表级的X，S的兼容关系如下（IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突）：\n\n· | X |IX | S | IS\n:-:|:-:|:-:|:-:|:-:\nX | × | × | × | ×\nIX | × | √ | × | √\nS | × | × | √ | √\nIS | × | √ | √ | √\n\n### 6.3. 三级封锁协议\n<font color='red'>保证数据一致性</font>\n\n#### 一级封锁协议\n事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。\n\n没法解决**脏读、不可重复读**。\n\n#### 二级封锁协议\n在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。\n\n**不可重复读**问题还是没有解决。\n\n#### 三级封锁协议\n在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。\n\n### 6.4. 两段锁协议\n<font color='red'>保证并行调度可串行化</font>\n\n可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。\n\n规定在对任何数据进行读写操作之前，事务首先要获得对该数据的封锁；而且在释放一个封锁之后，事务不再获得任何其他封锁。\n\n就是说加锁和解锁分为两个阶段进行。\n\n### 6.5. MySQL 隐式与显示锁定\nMySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。\n\nInnoDB 也可以使用特定的语句进行显示锁定：\n\n```\nSELECT … LOCK In SHARE MODE; \nSELECT … FOR UPDATE;\n```\n","source":"_posts/数据库知识整理.md","raw":"---\ntitle: 数据库知识整理\ndate: 2019-03-30 12:48:14\ntags: [面试,数据库]\ncategories: [面试,数据库]\ndescription: 数据库知识整理\n---\n\n# 数据库相关总结\n\n---\n\n参考：https://www.weiweiblog.cn/databases/\n\n---\n\n## 1. 范式\n### 1. 第一范式\n每个属性都不可再分。\n### 2. 第二范式\n**消除了非主属性对于码的部分函数依赖。**\n所有非主属性都必须和主键有完全依赖关系，不能存在有某个非主属性只和主键的一部分有关。\n\n\n```\n部分函数依赖：若XY是关系R中的属性，X->Y，X'是X的子集，若存在X'->Y，则Y部分函数依赖X。\n\n安全函数依赖：若XY是关系R中的属性，X->Y，X'是X的子集，若每个X'！->Y，则Y完全函数依赖X。\n\n传递函数依赖：在关系R(U)中，XYZ是R的三个属性集合，若X确定Y，Y确定Z，X不包含Y，Y不确定Z，(XUY)∩Z为空，则称Z传递函数依赖于X。\n```\n\n### 3. 第三范式\n**消除了非主属性对于码的传递函数依赖。**\n不仅要满足第二范式，而且所有属性都要互相独立，没有传递关系。\n\n---\n\n## 2. 数据库索引\n索引通常是由B树或者B+树实现。\n### 2.1. B树和B+树的区别\n- B树的键和值也存在内部节点和叶子结点中，B+树内部结点只存键，叶子结点存键和值。\n- B+树的叶子结点有一条链相连。\n\n##### B树的好处\nB树在内部存键值，频繁访问的节点在根节点附近可以提高查询效率，如果特定数据是重复读取，B树更好。\n##### B+树的好处\n一次读取大量数据时，因为B+树内部节点只存键，因此可以读取更多键，又因为叶子节点有链，读取大量数据时不需要每次都遍历内部节点。\n\n### 2.2. 数据库使用B+还是B\n**B树只适合随机检索，B+树同时适合随机检索和顺序检索。**\n\n**B+树空间利用率更高，I/O次数少，磁盘读写少。**\n索引也很大，需要以文件的形式存在磁盘中。索引查找就会产生I/O操作。B+树可以一次读取更多的关键字，因此I/O次数少。\n\n**B+树查询效率更稳定。**\nB树关键字在内部节点中也有，找到关键字就能确定记录。性能代价相当于二分查找。\nB+树每次都是跟到叶节点，效率更稳定。\n\n**B+树顺序遍历效率也不低。**\nB+树叶子结点有链。\n\n### 2.3. 索引类型\n\n- 主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键索引。\n- 唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。\n- 普通索引：没有唯一性限制，可以为空。\n- 全文索引：主要用来查找文本中的关键字，而不是直接与索引中的值相比较。\n- 联合索引：可以多个列共同创建联合索引。一个查询可以使用其中一个列，但必须遵守最左前缀原则。\n\n### 2.4. 聚集索与非聚集索\n- 聚集索引：各行的物理顺序和逻辑顺序相同，一个表只能有一个。\n- 非聚集索引：数据与索引在不同位置，索引中存在指向数据的指针，可以有多个。非聚集索引，分成普通索引，唯一索引，全文索引。\n\nInnoDB的数据文件本身就是索引文件。InnoDB数据文件按聚集索引，所以InnoDB必须有主键。InnoDB聚集索引规则：\n1. 如果有主键，主键就是聚集索引。\n2. 如果没有主键，第一个唯一非空索引就是聚集索引。\n3. 如果1、2都没有，会生成一个隐藏的主键作为聚集索引，它是6个字节的列，随着数据插入自增。\n\n### 2.5. MyISAM和InnoDB索引实现\n\n索引 | MyISAM | InnoDB\n---|---|---\n主键索引 | 在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。 | 索引页仍然存放主键和和指向数据页的偏移量，但数据页存放的是完整的记录。也就是在InnoDB中，数据和主键索引是存放在一起的。\n辅助索引 | 在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。综上所述，在MyISAM中，索引文件和数据文件分开存放，不管是主键索引还是辅助索引，都属于非聚集索引。  | 索引节点存放的内容一样，仍然是键值信息和指向数据页的偏移量；但数据页中存放的是键值信息和该键值对应的主键。然后通过主键查询主键索引就能找到该条记录。\n\n### 2.6. 索引的优点\n- 创建唯一性索引，可以确保每行数据的唯一性。\n- 提高数据检索效率。\n- 加快表与表之间的连接。\n- 使用分组和排序字句检索时，可以加快检索时间。\n- 通过使用索引，在查询过程中，使用查询优化器，提高系统性能。\n\n### 2.7. 索引的缺点\n- 时间方面：创建和维护需要时间。对数据增删改也需要对索引维护。\n- 空间方面：索引需要占据物理空间。\n\n\n### 2.8. 索引的优化\n- 非空字段：索引的列最好为非空。空值很难优化，用其他方式（0，特殊值等）代替空值。\n- 取离散大的列：将更离散的数据放在联合索引前面。\n- 索引字段越小越好：数据以页为单位存储，一页数据越多，一次IO操作得到的数据越多。\n- 对 where,on,group by,order by 中出现的列使用索引。\n- 对于like查询，%不放在前面。\n- 最左前缀匹配原则。\n\n### 2.9. 最左前缀匹配原则\nmysql会向右匹配到范围查询（<,>,between等），=、in放在左边。 = in 可以乱序。\n\n---\n## 3. 事务\n\n事务是一个不可分割的数据库操作序列，是数据库并发操作的基本单位，其结果是从一种一致性状态到另一种一致性状态。\n\n### 3.1. 四大特性（ACID）\n\n#### 原子性（Atomicity）\n事务是数据库逻辑工作单位，其操作要么全做，要么全不做。\n\n#### 一致性（Consistency）\n其结果必须是从一种一致性状态到另一种一致性状态。\n\n#### 隔离性（Isolation）\n一个事务的执行不能被其他事务干扰。\n\n#### 持久性（Duration）\n持久性表示一旦事务被提交了，数据库的数据改变就是永久性的，即使遇到故障也不会丢失提交的操作。\n\n### 3.2. 不考虑隔离性会出现的问题\n\n- **脏读**： 一个事务读到了另一个未提交事务的数据。\n- **不可重复读**：一个事务两次查询的间隔中，另一个事务修改并提交了数据，导致两次查询结果不同。\n- **幻读**：一个事务两次查询中数据笔数不一致。\n\n不可重复读和幻读都是查询中被另一个事务修改并提交了，不同的是不可重复读查询的是同一条数据，幻读是一批数据（比如数据的条数）。\n\n### 3.3 隔离级别\n\n- **Read Uncommitted(读未提交)**：所有事务都可以看到其他事务未提交的结果。一般很少用。\n- **Read commited(读已提交)**：一个事务只能看见已提交的结果。除mysql外大多数数据库默认。\n- **Repeatable Read(可重复读)**：确保了同一个事务的多个实例并发读数据时能看到相同的结果。mysql默认。\n- **Serializable(顺序读)**：最高的隔离级别，解决了幻读，但会出现大量超时和锁竞争。\n\n#### 事务隔离级别对比\n\n\n事务隔离级别 | 脏读 | 不可重复读 | 幻读\n---|:-:| :-:|:-:\nRead Uncommitted | 允许 | 允许 | 允许\nRead commited | 不允许 | 允许 | 允许\nRepeatable Read | 不允许 | 不允许 | 允许\nSerializable | 不允许 | 不允许 | 不允许\n\n#### 隔离级别与锁\nRead Uncommitted：读操作不加S锁。\nRead commited：读操作加S锁，在语句执行完释放锁。\nRepeatable Read：读操作加S锁，事务提交后释放锁。\nSerializable：在Repeatable read的基础上，加范围锁。\n\n### 3.4. 操作\nstart transaction;开始事务\n\ncommit; 提交\n\nrollback; 回滚\n\n---\n\n## 4. 其他知识\n\n### 4.1. delete truncate drop区别\n\n区别 | delete | truncate | drop\n---|--- | --- | ---\n类型回滚 | 可回滚 | 不可回滚 | 不可回滚\n删除内容 | 表结构还在，删除表全部或部分内容 | 表结构还在，删除全部内容 | 删除表，所有数据、索引、权限一并删除\n删除速度 | 逐行删除，速度慢 | 速度快 | 速度快\n\n### 4.2. 存储过程\n预编译的sql语句，一次创建，多次使用。\n#### 优点\n1. 预编译，效率高。\n2. 存放在数据库，减少网络传输。\n3. 安全性高，需要一定权限。\n4. 一次创建可多次使用，提高开发效率。\n\n### 4.3. 视图\n从一个表或多个表导出的表，是虚表，不存具体数据。\n\n### 4.4. 主从复制\n将主数据库的DDL、DML操作记录到二进制文件（BINLOG），传输到从数据库，从数据库重新执行，使得从数据库数据和主数据库保持一致。\n\n#### 主从复制作用\n- 主数据库故障可以切换到从数据库；\n- 可以读写分离；\n- 从数据库可以日志备份。\n\n#### 复制过程\n1. 主数据库更新数据完成前，将操作记录顺序记录到BINLOG；\n2. 从数据库开启一个I/O线程，该线程在主数据库打开一个普通连接，将读到的事件写入到中继日志，如果读取的进度跟上了master，就进入睡眠等待；\n3. 从数据库的SQL线程将读取中继日志，并顺序执行操作。\n\n### 4.5. 大表数据查询的优化\n1. 优化Schema，sql语句、索引。\n2. 加缓存，memcached，redis\n3. 主从复制，读写分离\n4. 垂直拆分，分布式系统\n5. 水平切分，要选择合适的sharding key，为了好的查询效率，表结构也要改变，应用也需要改变，sql中尽量带sharding key，将数据定位到限定的表去查，而不是全部的表。\n\n---\n\n## 5. MVCC\n参考：[MVCC多版本并发控制浅析](https://blog.csdn.net/h330531987/article/details/74364018)\n\n\nMVCC，多版本并发控制，是mysql数据库InnoDB引擎隔离级别的实现。用于Read Committed和Repeatable Read两种隔离级别。\n\nInnoDB会为每一行添加两个字段，分别表示**创建的版本**和**删除的版本**，填入的是事务的版本号，这个版本号随着事务的创建不断递增，具体实现：\n- **select**：满足一下两个条件会返回该行数据：1、 该行的创建版本号小于等于当前版本号，用来确保select操作之前的操作已经执行落地；2、该行的删除版本号大于当前版本号或为空，大于说明当前版本已经有一个并发事务将该行删除了。\n- **insert**：将新插入的行的创建版本号设置为当前的系统版本号。\n- **delete**：将要删除的行的删除版本号设置为当前的系统版本号。\n- **update**：不执行原地操作，还是转化为insert+delete，对旧行执行delete，对新行执行insert。\n\n写操作（update、insert、delete）执行时，将当前的系统版本号递增。\n\n由于旧数据不是真正的删除，所以要对这些数据进行清理，innoDB会开一个后台线程执行，具体规则是将删除版本号小于当前系统版本号的行输出，这个过程叫purge。\n\nMVCC能达到Repeatable Read，但是想达到Serializable还要加锁。\n\n---\n## 6. 封锁\n[数据库锁](https://blog.csdn.net/fantalee/article/details/81661665 )\n### 6.1. 封锁粒度\nMySQL 中提供了两种封锁粒度：行级锁以及表级锁。\n\n在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。\n\n### 6.2. 封锁类型\n#### 读写锁\n- 排它锁（Exclusive），简写为 X 锁，又称写锁。 \n- 共享锁（Shared），简写为 S 锁，又称读锁。 \n\n1. 一个事务对数据对象(数据库、表、页或者行) A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。 \n2. 一个事务对数据对象(数据库、表、页或者行) A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。 \n\n\n· | X | S\n:-:|:-:|:-:\nX | × | × \nS | × | √\n\n#### 意向锁\nInnoDB把意向锁设计得比较简练，没有上面定义那么复杂。其意向锁就是表级别的锁。设计目的主要是为了在一个事务中揭示下一行将被请求的锁类型。\n\n在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。 \n由此，意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：\n1. 一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁； \n2. 一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。\n\n事务 T 想要对表 A 加 X 锁时，只需要先检测是否有其它事务在表 A门口加没加 S/X/IX/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 为整张表加 X 锁失败。进入等待。\n\n表级意向锁与表级的X，S的兼容关系如下（IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突）：\n\n· | X |IX | S | IS\n:-:|:-:|:-:|:-:|:-:\nX | × | × | × | ×\nIX | × | √ | × | √\nS | × | × | √ | √\nIS | × | √ | √ | √\n\n### 6.3. 三级封锁协议\n<font color='red'>保证数据一致性</font>\n\n#### 一级封锁协议\n事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。\n\n没法解决**脏读、不可重复读**。\n\n#### 二级封锁协议\n在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。\n\n**不可重复读**问题还是没有解决。\n\n#### 三级封锁协议\n在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。\n\n### 6.4. 两段锁协议\n<font color='red'>保证并行调度可串行化</font>\n\n可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。\n\n规定在对任何数据进行读写操作之前，事务首先要获得对该数据的封锁；而且在释放一个封锁之后，事务不再获得任何其他封锁。\n\n就是说加锁和解锁分为两个阶段进行。\n\n### 6.5. MySQL 隐式与显示锁定\nMySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。\n\nInnoDB 也可以使用特定的语句进行显示锁定：\n\n```\nSELECT … LOCK In SHARE MODE; \nSELECT … FOR UPDATE;\n```\n","slug":"数据库知识整理","published":1,"updated":"2025-02-22T18:52:19.826Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8b20029v0012gowb8d0","content":"<h1 id=\"数据库相关总结\"><a href=\"#数据库相关总结\" class=\"headerlink\" title=\"数据库相关总结\"></a>数据库相关总结</h1><hr>\n<p>参考：<a href=\"https://www.weiweiblog.cn/databases/\">https://www.weiweiblog.cn/databases/</a></p>\n<hr>\n<h2 id=\"1-范式\"><a href=\"#1-范式\" class=\"headerlink\" title=\"1. 范式\"></a>1. 范式</h2><h3 id=\"1-第一范式\"><a href=\"#1-第一范式\" class=\"headerlink\" title=\"1. 第一范式\"></a>1. 第一范式</h3><p>每个属性都不可再分。</p>\n<h3 id=\"2-第二范式\"><a href=\"#2-第二范式\" class=\"headerlink\" title=\"2. 第二范式\"></a>2. 第二范式</h3><p><strong>消除了非主属性对于码的部分函数依赖。</strong><br>所有非主属性都必须和主键有完全依赖关系，不能存在有某个非主属性只和主键的一部分有关。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">部分函数依赖：若XY是关系R中的属性，X-&gt;Y，X&#x27;是X的子集，若存在X&#x27;-&gt;Y，则Y部分函数依赖X。</span><br><span class=\"line\"></span><br><span class=\"line\">安全函数依赖：若XY是关系R中的属性，X-&gt;Y，X&#x27;是X的子集，若每个X&#x27;！-&gt;Y，则Y完全函数依赖X。</span><br><span class=\"line\"></span><br><span class=\"line\">传递函数依赖：在关系R(U)中，XYZ是R的三个属性集合，若X确定Y，Y确定Z，X不包含Y，Y不确定Z，(XUY)∩Z为空，则称Z传递函数依赖于X。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-第三范式\"><a href=\"#3-第三范式\" class=\"headerlink\" title=\"3. 第三范式\"></a>3. 第三范式</h3><p><strong>消除了非主属性对于码的传递函数依赖。</strong><br>不仅要满足第二范式，而且所有属性都要互相独立，没有传递关系。</p>\n<hr>\n<h2 id=\"2-数据库索引\"><a href=\"#2-数据库索引\" class=\"headerlink\" title=\"2. 数据库索引\"></a>2. 数据库索引</h2><p>索引通常是由B树或者B+树实现。</p>\n<h3 id=\"2-1-B树和B-树的区别\"><a href=\"#2-1-B树和B-树的区别\" class=\"headerlink\" title=\"2.1. B树和B+树的区别\"></a>2.1. B树和B+树的区别</h3><ul>\n<li>B树的键和值也存在内部节点和叶子结点中，B+树内部结点只存键，叶子结点存键和值。</li>\n<li>B+树的叶子结点有一条链相连。</li>\n</ul>\n<h5 id=\"B树的好处\"><a href=\"#B树的好处\" class=\"headerlink\" title=\"B树的好处\"></a>B树的好处</h5><p>B树在内部存键值，频繁访问的节点在根节点附近可以提高查询效率，如果特定数据是重复读取，B树更好。</p>\n<h5 id=\"B-树的好处\"><a href=\"#B-树的好处\" class=\"headerlink\" title=\"B+树的好处\"></a>B+树的好处</h5><p>一次读取大量数据时，因为B+树内部节点只存键，因此可以读取更多键，又因为叶子节点有链，读取大量数据时不需要每次都遍历内部节点。</p>\n<h3 id=\"2-2-数据库使用B-还是B\"><a href=\"#2-2-数据库使用B-还是B\" class=\"headerlink\" title=\"2.2. 数据库使用B+还是B\"></a>2.2. 数据库使用B+还是B</h3><p><strong>B树只适合随机检索，B+树同时适合随机检索和顺序检索。</strong></p>\n<p><strong>B+树空间利用率更高，I&#x2F;O次数少，磁盘读写少。</strong><br>索引也很大，需要以文件的形式存在磁盘中。索引查找就会产生I&#x2F;O操作。B+树可以一次读取更多的关键字，因此I&#x2F;O次数少。</p>\n<p><strong>B+树查询效率更稳定。</strong><br>B树关键字在内部节点中也有，找到关键字就能确定记录。性能代价相当于二分查找。<br>B+树每次都是跟到叶节点，效率更稳定。</p>\n<p><strong>B+树顺序遍历效率也不低。</strong><br>B+树叶子结点有链。</p>\n<h3 id=\"2-3-索引类型\"><a href=\"#2-3-索引类型\" class=\"headerlink\" title=\"2.3. 索引类型\"></a>2.3. 索引类型</h3><ul>\n<li>主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键索引。</li>\n<li>唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。</li>\n<li>普通索引：没有唯一性限制，可以为空。</li>\n<li>全文索引：主要用来查找文本中的关键字，而不是直接与索引中的值相比较。</li>\n<li>联合索引：可以多个列共同创建联合索引。一个查询可以使用其中一个列，但必须遵守最左前缀原则。</li>\n</ul>\n<h3 id=\"2-4-聚集索与非聚集索\"><a href=\"#2-4-聚集索与非聚集索\" class=\"headerlink\" title=\"2.4. 聚集索与非聚集索\"></a>2.4. 聚集索与非聚集索</h3><ul>\n<li>聚集索引：各行的物理顺序和逻辑顺序相同，一个表只能有一个。</li>\n<li>非聚集索引：数据与索引在不同位置，索引中存在指向数据的指针，可以有多个。非聚集索引，分成普通索引，唯一索引，全文索引。</li>\n</ul>\n<p>InnoDB的数据文件本身就是索引文件。InnoDB数据文件按聚集索引，所以InnoDB必须有主键。InnoDB聚集索引规则：</p>\n<ol>\n<li>如果有主键，主键就是聚集索引。</li>\n<li>如果没有主键，第一个唯一非空索引就是聚集索引。</li>\n<li>如果1、2都没有，会生成一个隐藏的主键作为聚集索引，它是6个字节的列，随着数据插入自增。</li>\n</ol>\n<h3 id=\"2-5-MyISAM和InnoDB索引实现\"><a href=\"#2-5-MyISAM和InnoDB索引实现\" class=\"headerlink\" title=\"2.5. MyISAM和InnoDB索引实现\"></a>2.5. MyISAM和InnoDB索引实现</h3><table>\n<thead>\n<tr>\n<th>索引</th>\n<th>MyISAM</th>\n<th>InnoDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键索引</td>\n<td>在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。</td>\n<td>索引页仍然存放主键和和指向数据页的偏移量，但数据页存放的是完整的记录。也就是在InnoDB中，数据和主键索引是存放在一起的。</td>\n</tr>\n<tr>\n<td>辅助索引</td>\n<td>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。综上所述，在MyISAM中，索引文件和数据文件分开存放，不管是主键索引还是辅助索引，都属于非聚集索引。</td>\n<td>索引节点存放的内容一样，仍然是键值信息和指向数据页的偏移量；但数据页中存放的是键值信息和该键值对应的主键。然后通过主键查询主键索引就能找到该条记录。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-6-索引的优点\"><a href=\"#2-6-索引的优点\" class=\"headerlink\" title=\"2.6. 索引的优点\"></a>2.6. 索引的优点</h3><ul>\n<li>创建唯一性索引，可以确保每行数据的唯一性。</li>\n<li>提高数据检索效率。</li>\n<li>加快表与表之间的连接。</li>\n<li>使用分组和排序字句检索时，可以加快检索时间。</li>\n<li>通过使用索引，在查询过程中，使用查询优化器，提高系统性能。</li>\n</ul>\n<h3 id=\"2-7-索引的缺点\"><a href=\"#2-7-索引的缺点\" class=\"headerlink\" title=\"2.7. 索引的缺点\"></a>2.7. 索引的缺点</h3><ul>\n<li>时间方面：创建和维护需要时间。对数据增删改也需要对索引维护。</li>\n<li>空间方面：索引需要占据物理空间。</li>\n</ul>\n<h3 id=\"2-8-索引的优化\"><a href=\"#2-8-索引的优化\" class=\"headerlink\" title=\"2.8. 索引的优化\"></a>2.8. 索引的优化</h3><ul>\n<li>非空字段：索引的列最好为非空。空值很难优化，用其他方式（0，特殊值等）代替空值。</li>\n<li>取离散大的列：将更离散的数据放在联合索引前面。</li>\n<li>索引字段越小越好：数据以页为单位存储，一页数据越多，一次IO操作得到的数据越多。</li>\n<li>对 where,on,group by,order by 中出现的列使用索引。</li>\n<li>对于like查询，%不放在前面。</li>\n<li>最左前缀匹配原则。</li>\n</ul>\n<h3 id=\"2-9-最左前缀匹配原则\"><a href=\"#2-9-最左前缀匹配原则\" class=\"headerlink\" title=\"2.9. 最左前缀匹配原则\"></a>2.9. 最左前缀匹配原则</h3><p>mysql会向右匹配到范围查询（&lt;,&gt;,between等），&#x3D;、in放在左边。 &#x3D; in 可以乱序。</p>\n<hr>\n<h2 id=\"3-事务\"><a href=\"#3-事务\" class=\"headerlink\" title=\"3. 事务\"></a>3. 事务</h2><p>事务是一个不可分割的数据库操作序列，是数据库并发操作的基本单位，其结果是从一种一致性状态到另一种一致性状态。</p>\n<h3 id=\"3-1-四大特性（ACID）\"><a href=\"#3-1-四大特性（ACID）\" class=\"headerlink\" title=\"3.1. 四大特性（ACID）\"></a>3.1. 四大特性（ACID）</h3><h4 id=\"原子性（Atomicity）\"><a href=\"#原子性（Atomicity）\" class=\"headerlink\" title=\"原子性（Atomicity）\"></a>原子性（Atomicity）</h4><p>事务是数据库逻辑工作单位，其操作要么全做，要么全不做。</p>\n<h4 id=\"一致性（Consistency）\"><a href=\"#一致性（Consistency）\" class=\"headerlink\" title=\"一致性（Consistency）\"></a>一致性（Consistency）</h4><p>其结果必须是从一种一致性状态到另一种一致性状态。</p>\n<h4 id=\"隔离性（Isolation）\"><a href=\"#隔离性（Isolation）\" class=\"headerlink\" title=\"隔离性（Isolation）\"></a>隔离性（Isolation）</h4><p>一个事务的执行不能被其他事务干扰。</p>\n<h4 id=\"持久性（Duration）\"><a href=\"#持久性（Duration）\" class=\"headerlink\" title=\"持久性（Duration）\"></a>持久性（Duration）</h4><p>持久性表示一旦事务被提交了，数据库的数据改变就是永久性的，即使遇到故障也不会丢失提交的操作。</p>\n<h3 id=\"3-2-不考虑隔离性会出现的问题\"><a href=\"#3-2-不考虑隔离性会出现的问题\" class=\"headerlink\" title=\"3.2. 不考虑隔离性会出现的问题\"></a>3.2. 不考虑隔离性会出现的问题</h3><ul>\n<li><strong>脏读</strong>： 一个事务读到了另一个未提交事务的数据。</li>\n<li><strong>不可重复读</strong>：一个事务两次查询的间隔中，另一个事务修改并提交了数据，导致两次查询结果不同。</li>\n<li><strong>幻读</strong>：一个事务两次查询中数据笔数不一致。</li>\n</ul>\n<p>不可重复读和幻读都是查询中被另一个事务修改并提交了，不同的是不可重复读查询的是同一条数据，幻读是一批数据（比如数据的条数）。</p>\n<h3 id=\"3-3-隔离级别\"><a href=\"#3-3-隔离级别\" class=\"headerlink\" title=\"3.3 隔离级别\"></a>3.3 隔离级别</h3><ul>\n<li>**Read Uncommitted(读未提交)**：所有事务都可以看到其他事务未提交的结果。一般很少用。</li>\n<li>**Read commited(读已提交)**：一个事务只能看见已提交的结果。除mysql外大多数数据库默认。</li>\n<li>**Repeatable Read(可重复读)**：确保了同一个事务的多个实例并发读数据时能看到相同的结果。mysql默认。</li>\n<li>**Serializable(顺序读)**：最高的隔离级别，解决了幻读，但会出现大量超时和锁竞争。</li>\n</ul>\n<h4 id=\"事务隔离级别对比\"><a href=\"#事务隔离级别对比\" class=\"headerlink\" title=\"事务隔离级别对比\"></a>事务隔离级别对比</h4><table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read Uncommitted</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Read commited</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Repeatable Read</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n</tr>\n</tbody></table>\n<h4 id=\"隔离级别与锁\"><a href=\"#隔离级别与锁\" class=\"headerlink\" title=\"隔离级别与锁\"></a>隔离级别与锁</h4><p>Read Uncommitted：读操作不加S锁。<br>Read commited：读操作加S锁，在语句执行完释放锁。<br>Repeatable Read：读操作加S锁，事务提交后释放锁。<br>Serializable：在Repeatable read的基础上，加范围锁。</p>\n<h3 id=\"3-4-操作\"><a href=\"#3-4-操作\" class=\"headerlink\" title=\"3.4. 操作\"></a>3.4. 操作</h3><p>start transaction;开始事务</p>\n<p>commit; 提交</p>\n<p>rollback; 回滚</p>\n<hr>\n<h2 id=\"4-其他知识\"><a href=\"#4-其他知识\" class=\"headerlink\" title=\"4. 其他知识\"></a>4. 其他知识</h2><h3 id=\"4-1-delete-truncate-drop区别\"><a href=\"#4-1-delete-truncate-drop区别\" class=\"headerlink\" title=\"4.1. delete truncate drop区别\"></a>4.1. delete truncate drop区别</h3><table>\n<thead>\n<tr>\n<th>区别</th>\n<th>delete</th>\n<th>truncate</th>\n<th>drop</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类型回滚</td>\n<td>可回滚</td>\n<td>不可回滚</td>\n<td>不可回滚</td>\n</tr>\n<tr>\n<td>删除内容</td>\n<td>表结构还在，删除表全部或部分内容</td>\n<td>表结构还在，删除全部内容</td>\n<td>删除表，所有数据、索引、权限一并删除</td>\n</tr>\n<tr>\n<td>删除速度</td>\n<td>逐行删除，速度慢</td>\n<td>速度快</td>\n<td>速度快</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-2-存储过程\"><a href=\"#4-2-存储过程\" class=\"headerlink\" title=\"4.2. 存储过程\"></a>4.2. 存储过程</h3><p>预编译的sql语句，一次创建，多次使用。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>预编译，效率高。</li>\n<li>存放在数据库，减少网络传输。</li>\n<li>安全性高，需要一定权限。</li>\n<li>一次创建可多次使用，提高开发效率。</li>\n</ol>\n<h3 id=\"4-3-视图\"><a href=\"#4-3-视图\" class=\"headerlink\" title=\"4.3. 视图\"></a>4.3. 视图</h3><p>从一个表或多个表导出的表，是虚表，不存具体数据。</p>\n<h3 id=\"4-4-主从复制\"><a href=\"#4-4-主从复制\" class=\"headerlink\" title=\"4.4. 主从复制\"></a>4.4. 主从复制</h3><p>将主数据库的DDL、DML操作记录到二进制文件（BINLOG），传输到从数据库，从数据库重新执行，使得从数据库数据和主数据库保持一致。</p>\n<h4 id=\"主从复制作用\"><a href=\"#主从复制作用\" class=\"headerlink\" title=\"主从复制作用\"></a>主从复制作用</h4><ul>\n<li>主数据库故障可以切换到从数据库；</li>\n<li>可以读写分离；</li>\n<li>从数据库可以日志备份。</li>\n</ul>\n<h4 id=\"复制过程\"><a href=\"#复制过程\" class=\"headerlink\" title=\"复制过程\"></a>复制过程</h4><ol>\n<li>主数据库更新数据完成前，将操作记录顺序记录到BINLOG；</li>\n<li>从数据库开启一个I&#x2F;O线程，该线程在主数据库打开一个普通连接，将读到的事件写入到中继日志，如果读取的进度跟上了master，就进入睡眠等待；</li>\n<li>从数据库的SQL线程将读取中继日志，并顺序执行操作。</li>\n</ol>\n<h3 id=\"4-5-大表数据查询的优化\"><a href=\"#4-5-大表数据查询的优化\" class=\"headerlink\" title=\"4.5. 大表数据查询的优化\"></a>4.5. 大表数据查询的优化</h3><ol>\n<li>优化Schema，sql语句、索引。</li>\n<li>加缓存，memcached，redis</li>\n<li>主从复制，读写分离</li>\n<li>垂直拆分，分布式系统</li>\n<li>水平切分，要选择合适的sharding key，为了好的查询效率，表结构也要改变，应用也需要改变，sql中尽量带sharding key，将数据定位到限定的表去查，而不是全部的表。</li>\n</ol>\n<hr>\n<h2 id=\"5-MVCC\"><a href=\"#5-MVCC\" class=\"headerlink\" title=\"5. MVCC\"></a>5. MVCC</h2><p>参考：<a href=\"https://blog.csdn.net/h330531987/article/details/74364018\">MVCC多版本并发控制浅析</a></p>\n<p>MVCC，多版本并发控制，是mysql数据库InnoDB引擎隔离级别的实现。用于Read Committed和Repeatable Read两种隔离级别。</p>\n<p>InnoDB会为每一行添加两个字段，分别表示<strong>创建的版本</strong>和<strong>删除的版本</strong>，填入的是事务的版本号，这个版本号随着事务的创建不断递增，具体实现：</p>\n<ul>\n<li><strong>select</strong>：满足一下两个条件会返回该行数据：1、 该行的创建版本号小于等于当前版本号，用来确保select操作之前的操作已经执行落地；2、该行的删除版本号大于当前版本号或为空，大于说明当前版本已经有一个并发事务将该行删除了。</li>\n<li><strong>insert</strong>：将新插入的行的创建版本号设置为当前的系统版本号。</li>\n<li><strong>delete</strong>：将要删除的行的删除版本号设置为当前的系统版本号。</li>\n<li><strong>update</strong>：不执行原地操作，还是转化为insert+delete，对旧行执行delete，对新行执行insert。</li>\n</ul>\n<p>写操作（update、insert、delete）执行时，将当前的系统版本号递增。</p>\n<p>由于旧数据不是真正的删除，所以要对这些数据进行清理，innoDB会开一个后台线程执行，具体规则是将删除版本号小于当前系统版本号的行输出，这个过程叫purge。</p>\n<p>MVCC能达到Repeatable Read，但是想达到Serializable还要加锁。</p>\n<hr>\n<h2 id=\"6-封锁\"><a href=\"#6-封锁\" class=\"headerlink\" title=\"6. 封锁\"></a>6. 封锁</h2><p><a href=\"https://blog.csdn.net/fantalee/article/details/81661665\">数据库锁</a></p>\n<h3 id=\"6-1-封锁粒度\"><a href=\"#6-1-封锁粒度\" class=\"headerlink\" title=\"6.1. 封锁粒度\"></a>6.1. 封锁粒度</h3><p>MySQL 中提供了两种封锁粒度：行级锁以及表级锁。</p>\n<p>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。</p>\n<h3 id=\"6-2-封锁类型\"><a href=\"#6-2-封锁类型\" class=\"headerlink\" title=\"6.2. 封锁类型\"></a>6.2. 封锁类型</h3><h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><ul>\n<li>排它锁（Exclusive），简写为 X 锁，又称写锁。 </li>\n<li>共享锁（Shared），简写为 S 锁，又称读锁。</li>\n</ul>\n<ol>\n<li>一个事务对数据对象(数据库、表、页或者行) A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。 </li>\n<li>一个事务对数据对象(数据库、表、页或者行) A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">·</th>\n<th align=\"center\">X</th>\n<th align=\"center\">S</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">X</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">S</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n</tr>\n</tbody></table>\n<h4 id=\"意向锁\"><a href=\"#意向锁\" class=\"headerlink\" title=\"意向锁\"></a>意向锁</h4><p>InnoDB把意向锁设计得比较简练，没有上面定义那么复杂。其意向锁就是表级别的锁。设计目的主要是为了在一个事务中揭示下一行将被请求的锁类型。</p>\n<p>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。<br>由此，意向锁在原来的 X&#x2F;S 锁之上引入了 IX&#x2F;IS，IX&#x2F;IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：</p>\n<ol>\n<li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁； </li>\n<li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li>\n</ol>\n<p>事务 T 想要对表 A 加 X 锁时，只需要先检测是否有其它事务在表 A门口加没加 S&#x2F;X&#x2F;IX&#x2F;IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 为整张表加 X 锁失败。进入等待。</p>\n<p>表级意向锁与表级的X，S的兼容关系如下（IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">·</th>\n<th align=\"center\">X</th>\n<th align=\"center\">IX</th>\n<th align=\"center\">S</th>\n<th align=\"center\">IS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">X</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">IX</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">S</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">IS</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n</tbody></table>\n<h3 id=\"6-3-三级封锁协议\"><a href=\"#6-3-三级封锁协议\" class=\"headerlink\" title=\"6.3. 三级封锁协议\"></a>6.3. 三级封锁协议</h3><p><font color='red'>保证数据一致性</font></p>\n<h4 id=\"一级封锁协议\"><a href=\"#一级封锁协议\" class=\"headerlink\" title=\"一级封锁协议\"></a>一级封锁协议</h4><p>事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。</p>\n<p>没法解决<strong>脏读、不可重复读</strong>。</p>\n<h4 id=\"二级封锁协议\"><a href=\"#二级封锁协议\" class=\"headerlink\" title=\"二级封锁协议\"></a>二级封锁协议</h4><p>在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。</p>\n<p><strong>不可重复读</strong>问题还是没有解决。</p>\n<h4 id=\"三级封锁协议\"><a href=\"#三级封锁协议\" class=\"headerlink\" title=\"三级封锁协议\"></a>三级封锁协议</h4><p>在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。</p>\n<h3 id=\"6-4-两段锁协议\"><a href=\"#6-4-两段锁协议\" class=\"headerlink\" title=\"6.4. 两段锁协议\"></a>6.4. 两段锁协议</h3><p><font color='red'>保证并行调度可串行化</font></p>\n<p>可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。</p>\n<p>规定在对任何数据进行读写操作之前，事务首先要获得对该数据的封锁；而且在释放一个封锁之后，事务不再获得任何其他封锁。</p>\n<p>就是说加锁和解锁分为两个阶段进行。</p>\n<h3 id=\"6-5-MySQL-隐式与显示锁定\"><a href=\"#6-5-MySQL-隐式与显示锁定\" class=\"headerlink\" title=\"6.5. MySQL 隐式与显示锁定\"></a>6.5. MySQL 隐式与显示锁定</h3><p>MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</p>\n<p>InnoDB 也可以使用特定的语句进行显示锁定：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT … LOCK In SHARE MODE; </span><br><span class=\"line\">SELECT … FOR UPDATE;</span><br></pre></td></tr></table></figure>\n","length":5329,"excerpt":"","more":"<h1 id=\"数据库相关总结\"><a href=\"#数据库相关总结\" class=\"headerlink\" title=\"数据库相关总结\"></a>数据库相关总结</h1><hr>\n<p>参考：<a href=\"https://www.weiweiblog.cn/databases/\">https://www.weiweiblog.cn/databases/</a></p>\n<hr>\n<h2 id=\"1-范式\"><a href=\"#1-范式\" class=\"headerlink\" title=\"1. 范式\"></a>1. 范式</h2><h3 id=\"1-第一范式\"><a href=\"#1-第一范式\" class=\"headerlink\" title=\"1. 第一范式\"></a>1. 第一范式</h3><p>每个属性都不可再分。</p>\n<h3 id=\"2-第二范式\"><a href=\"#2-第二范式\" class=\"headerlink\" title=\"2. 第二范式\"></a>2. 第二范式</h3><p><strong>消除了非主属性对于码的部分函数依赖。</strong><br>所有非主属性都必须和主键有完全依赖关系，不能存在有某个非主属性只和主键的一部分有关。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">部分函数依赖：若XY是关系R中的属性，X-&gt;Y，X&#x27;是X的子集，若存在X&#x27;-&gt;Y，则Y部分函数依赖X。</span><br><span class=\"line\"></span><br><span class=\"line\">安全函数依赖：若XY是关系R中的属性，X-&gt;Y，X&#x27;是X的子集，若每个X&#x27;！-&gt;Y，则Y完全函数依赖X。</span><br><span class=\"line\"></span><br><span class=\"line\">传递函数依赖：在关系R(U)中，XYZ是R的三个属性集合，若X确定Y，Y确定Z，X不包含Y，Y不确定Z，(XUY)∩Z为空，则称Z传递函数依赖于X。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-第三范式\"><a href=\"#3-第三范式\" class=\"headerlink\" title=\"3. 第三范式\"></a>3. 第三范式</h3><p><strong>消除了非主属性对于码的传递函数依赖。</strong><br>不仅要满足第二范式，而且所有属性都要互相独立，没有传递关系。</p>\n<hr>\n<h2 id=\"2-数据库索引\"><a href=\"#2-数据库索引\" class=\"headerlink\" title=\"2. 数据库索引\"></a>2. 数据库索引</h2><p>索引通常是由B树或者B+树实现。</p>\n<h3 id=\"2-1-B树和B-树的区别\"><a href=\"#2-1-B树和B-树的区别\" class=\"headerlink\" title=\"2.1. B树和B+树的区别\"></a>2.1. B树和B+树的区别</h3><ul>\n<li>B树的键和值也存在内部节点和叶子结点中，B+树内部结点只存键，叶子结点存键和值。</li>\n<li>B+树的叶子结点有一条链相连。</li>\n</ul>\n<h5 id=\"B树的好处\"><a href=\"#B树的好处\" class=\"headerlink\" title=\"B树的好处\"></a>B树的好处</h5><p>B树在内部存键值，频繁访问的节点在根节点附近可以提高查询效率，如果特定数据是重复读取，B树更好。</p>\n<h5 id=\"B-树的好处\"><a href=\"#B-树的好处\" class=\"headerlink\" title=\"B+树的好处\"></a>B+树的好处</h5><p>一次读取大量数据时，因为B+树内部节点只存键，因此可以读取更多键，又因为叶子节点有链，读取大量数据时不需要每次都遍历内部节点。</p>\n<h3 id=\"2-2-数据库使用B-还是B\"><a href=\"#2-2-数据库使用B-还是B\" class=\"headerlink\" title=\"2.2. 数据库使用B+还是B\"></a>2.2. 数据库使用B+还是B</h3><p><strong>B树只适合随机检索，B+树同时适合随机检索和顺序检索。</strong></p>\n<p><strong>B+树空间利用率更高，I&#x2F;O次数少，磁盘读写少。</strong><br>索引也很大，需要以文件的形式存在磁盘中。索引查找就会产生I&#x2F;O操作。B+树可以一次读取更多的关键字，因此I&#x2F;O次数少。</p>\n<p><strong>B+树查询效率更稳定。</strong><br>B树关键字在内部节点中也有，找到关键字就能确定记录。性能代价相当于二分查找。<br>B+树每次都是跟到叶节点，效率更稳定。</p>\n<p><strong>B+树顺序遍历效率也不低。</strong><br>B+树叶子结点有链。</p>\n<h3 id=\"2-3-索引类型\"><a href=\"#2-3-索引类型\" class=\"headerlink\" title=\"2.3. 索引类型\"></a>2.3. 索引类型</h3><ul>\n<li>主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键索引。</li>\n<li>唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。</li>\n<li>普通索引：没有唯一性限制，可以为空。</li>\n<li>全文索引：主要用来查找文本中的关键字，而不是直接与索引中的值相比较。</li>\n<li>联合索引：可以多个列共同创建联合索引。一个查询可以使用其中一个列，但必须遵守最左前缀原则。</li>\n</ul>\n<h3 id=\"2-4-聚集索与非聚集索\"><a href=\"#2-4-聚集索与非聚集索\" class=\"headerlink\" title=\"2.4. 聚集索与非聚集索\"></a>2.4. 聚集索与非聚集索</h3><ul>\n<li>聚集索引：各行的物理顺序和逻辑顺序相同，一个表只能有一个。</li>\n<li>非聚集索引：数据与索引在不同位置，索引中存在指向数据的指针，可以有多个。非聚集索引，分成普通索引，唯一索引，全文索引。</li>\n</ul>\n<p>InnoDB的数据文件本身就是索引文件。InnoDB数据文件按聚集索引，所以InnoDB必须有主键。InnoDB聚集索引规则：</p>\n<ol>\n<li>如果有主键，主键就是聚集索引。</li>\n<li>如果没有主键，第一个唯一非空索引就是聚集索引。</li>\n<li>如果1、2都没有，会生成一个隐藏的主键作为聚集索引，它是6个字节的列，随着数据插入自增。</li>\n</ol>\n<h3 id=\"2-5-MyISAM和InnoDB索引实现\"><a href=\"#2-5-MyISAM和InnoDB索引实现\" class=\"headerlink\" title=\"2.5. MyISAM和InnoDB索引实现\"></a>2.5. MyISAM和InnoDB索引实现</h3><table>\n<thead>\n<tr>\n<th>索引</th>\n<th>MyISAM</th>\n<th>InnoDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键索引</td>\n<td>在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。</td>\n<td>索引页仍然存放主键和和指向数据页的偏移量，但数据页存放的是完整的记录。也就是在InnoDB中，数据和主键索引是存放在一起的。</td>\n</tr>\n<tr>\n<td>辅助索引</td>\n<td>在MyISAM中，主索引和辅助索引（Secondary key）在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。综上所述，在MyISAM中，索引文件和数据文件分开存放，不管是主键索引还是辅助索引，都属于非聚集索引。</td>\n<td>索引节点存放的内容一样，仍然是键值信息和指向数据页的偏移量；但数据页中存放的是键值信息和该键值对应的主键。然后通过主键查询主键索引就能找到该条记录。</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-6-索引的优点\"><a href=\"#2-6-索引的优点\" class=\"headerlink\" title=\"2.6. 索引的优点\"></a>2.6. 索引的优点</h3><ul>\n<li>创建唯一性索引，可以确保每行数据的唯一性。</li>\n<li>提高数据检索效率。</li>\n<li>加快表与表之间的连接。</li>\n<li>使用分组和排序字句检索时，可以加快检索时间。</li>\n<li>通过使用索引，在查询过程中，使用查询优化器，提高系统性能。</li>\n</ul>\n<h3 id=\"2-7-索引的缺点\"><a href=\"#2-7-索引的缺点\" class=\"headerlink\" title=\"2.7. 索引的缺点\"></a>2.7. 索引的缺点</h3><ul>\n<li>时间方面：创建和维护需要时间。对数据增删改也需要对索引维护。</li>\n<li>空间方面：索引需要占据物理空间。</li>\n</ul>\n<h3 id=\"2-8-索引的优化\"><a href=\"#2-8-索引的优化\" class=\"headerlink\" title=\"2.8. 索引的优化\"></a>2.8. 索引的优化</h3><ul>\n<li>非空字段：索引的列最好为非空。空值很难优化，用其他方式（0，特殊值等）代替空值。</li>\n<li>取离散大的列：将更离散的数据放在联合索引前面。</li>\n<li>索引字段越小越好：数据以页为单位存储，一页数据越多，一次IO操作得到的数据越多。</li>\n<li>对 where,on,group by,order by 中出现的列使用索引。</li>\n<li>对于like查询，%不放在前面。</li>\n<li>最左前缀匹配原则。</li>\n</ul>\n<h3 id=\"2-9-最左前缀匹配原则\"><a href=\"#2-9-最左前缀匹配原则\" class=\"headerlink\" title=\"2.9. 最左前缀匹配原则\"></a>2.9. 最左前缀匹配原则</h3><p>mysql会向右匹配到范围查询（&lt;,&gt;,between等），&#x3D;、in放在左边。 &#x3D; in 可以乱序。</p>\n<hr>\n<h2 id=\"3-事务\"><a href=\"#3-事务\" class=\"headerlink\" title=\"3. 事务\"></a>3. 事务</h2><p>事务是一个不可分割的数据库操作序列，是数据库并发操作的基本单位，其结果是从一种一致性状态到另一种一致性状态。</p>\n<h3 id=\"3-1-四大特性（ACID）\"><a href=\"#3-1-四大特性（ACID）\" class=\"headerlink\" title=\"3.1. 四大特性（ACID）\"></a>3.1. 四大特性（ACID）</h3><h4 id=\"原子性（Atomicity）\"><a href=\"#原子性（Atomicity）\" class=\"headerlink\" title=\"原子性（Atomicity）\"></a>原子性（Atomicity）</h4><p>事务是数据库逻辑工作单位，其操作要么全做，要么全不做。</p>\n<h4 id=\"一致性（Consistency）\"><a href=\"#一致性（Consistency）\" class=\"headerlink\" title=\"一致性（Consistency）\"></a>一致性（Consistency）</h4><p>其结果必须是从一种一致性状态到另一种一致性状态。</p>\n<h4 id=\"隔离性（Isolation）\"><a href=\"#隔离性（Isolation）\" class=\"headerlink\" title=\"隔离性（Isolation）\"></a>隔离性（Isolation）</h4><p>一个事务的执行不能被其他事务干扰。</p>\n<h4 id=\"持久性（Duration）\"><a href=\"#持久性（Duration）\" class=\"headerlink\" title=\"持久性（Duration）\"></a>持久性（Duration）</h4><p>持久性表示一旦事务被提交了，数据库的数据改变就是永久性的，即使遇到故障也不会丢失提交的操作。</p>\n<h3 id=\"3-2-不考虑隔离性会出现的问题\"><a href=\"#3-2-不考虑隔离性会出现的问题\" class=\"headerlink\" title=\"3.2. 不考虑隔离性会出现的问题\"></a>3.2. 不考虑隔离性会出现的问题</h3><ul>\n<li><strong>脏读</strong>： 一个事务读到了另一个未提交事务的数据。</li>\n<li><strong>不可重复读</strong>：一个事务两次查询的间隔中，另一个事务修改并提交了数据，导致两次查询结果不同。</li>\n<li><strong>幻读</strong>：一个事务两次查询中数据笔数不一致。</li>\n</ul>\n<p>不可重复读和幻读都是查询中被另一个事务修改并提交了，不同的是不可重复读查询的是同一条数据，幻读是一批数据（比如数据的条数）。</p>\n<h3 id=\"3-3-隔离级别\"><a href=\"#3-3-隔离级别\" class=\"headerlink\" title=\"3.3 隔离级别\"></a>3.3 隔离级别</h3><ul>\n<li>**Read Uncommitted(读未提交)**：所有事务都可以看到其他事务未提交的结果。一般很少用。</li>\n<li>**Read commited(读已提交)**：一个事务只能看见已提交的结果。除mysql外大多数数据库默认。</li>\n<li>**Repeatable Read(可重复读)**：确保了同一个事务的多个实例并发读数据时能看到相同的结果。mysql默认。</li>\n<li>**Serializable(顺序读)**：最高的隔离级别，解决了幻读，但会出现大量超时和锁竞争。</li>\n</ul>\n<h4 id=\"事务隔离级别对比\"><a href=\"#事务隔离级别对比\" class=\"headerlink\" title=\"事务隔离级别对比\"></a>事务隔离级别对比</h4><table>\n<thead>\n<tr>\n<th>事务隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read Uncommitted</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Read commited</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Repeatable Read</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">允许</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n<td align=\"center\">不允许</td>\n</tr>\n</tbody></table>\n<h4 id=\"隔离级别与锁\"><a href=\"#隔离级别与锁\" class=\"headerlink\" title=\"隔离级别与锁\"></a>隔离级别与锁</h4><p>Read Uncommitted：读操作不加S锁。<br>Read commited：读操作加S锁，在语句执行完释放锁。<br>Repeatable Read：读操作加S锁，事务提交后释放锁。<br>Serializable：在Repeatable read的基础上，加范围锁。</p>\n<h3 id=\"3-4-操作\"><a href=\"#3-4-操作\" class=\"headerlink\" title=\"3.4. 操作\"></a>3.4. 操作</h3><p>start transaction;开始事务</p>\n<p>commit; 提交</p>\n<p>rollback; 回滚</p>\n<hr>\n<h2 id=\"4-其他知识\"><a href=\"#4-其他知识\" class=\"headerlink\" title=\"4. 其他知识\"></a>4. 其他知识</h2><h3 id=\"4-1-delete-truncate-drop区别\"><a href=\"#4-1-delete-truncate-drop区别\" class=\"headerlink\" title=\"4.1. delete truncate drop区别\"></a>4.1. delete truncate drop区别</h3><table>\n<thead>\n<tr>\n<th>区别</th>\n<th>delete</th>\n<th>truncate</th>\n<th>drop</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>类型回滚</td>\n<td>可回滚</td>\n<td>不可回滚</td>\n<td>不可回滚</td>\n</tr>\n<tr>\n<td>删除内容</td>\n<td>表结构还在，删除表全部或部分内容</td>\n<td>表结构还在，删除全部内容</td>\n<td>删除表，所有数据、索引、权限一并删除</td>\n</tr>\n<tr>\n<td>删除速度</td>\n<td>逐行删除，速度慢</td>\n<td>速度快</td>\n<td>速度快</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-2-存储过程\"><a href=\"#4-2-存储过程\" class=\"headerlink\" title=\"4.2. 存储过程\"></a>4.2. 存储过程</h3><p>预编译的sql语句，一次创建，多次使用。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>预编译，效率高。</li>\n<li>存放在数据库，减少网络传输。</li>\n<li>安全性高，需要一定权限。</li>\n<li>一次创建可多次使用，提高开发效率。</li>\n</ol>\n<h3 id=\"4-3-视图\"><a href=\"#4-3-视图\" class=\"headerlink\" title=\"4.3. 视图\"></a>4.3. 视图</h3><p>从一个表或多个表导出的表，是虚表，不存具体数据。</p>\n<h3 id=\"4-4-主从复制\"><a href=\"#4-4-主从复制\" class=\"headerlink\" title=\"4.4. 主从复制\"></a>4.4. 主从复制</h3><p>将主数据库的DDL、DML操作记录到二进制文件（BINLOG），传输到从数据库，从数据库重新执行，使得从数据库数据和主数据库保持一致。</p>\n<h4 id=\"主从复制作用\"><a href=\"#主从复制作用\" class=\"headerlink\" title=\"主从复制作用\"></a>主从复制作用</h4><ul>\n<li>主数据库故障可以切换到从数据库；</li>\n<li>可以读写分离；</li>\n<li>从数据库可以日志备份。</li>\n</ul>\n<h4 id=\"复制过程\"><a href=\"#复制过程\" class=\"headerlink\" title=\"复制过程\"></a>复制过程</h4><ol>\n<li>主数据库更新数据完成前，将操作记录顺序记录到BINLOG；</li>\n<li>从数据库开启一个I&#x2F;O线程，该线程在主数据库打开一个普通连接，将读到的事件写入到中继日志，如果读取的进度跟上了master，就进入睡眠等待；</li>\n<li>从数据库的SQL线程将读取中继日志，并顺序执行操作。</li>\n</ol>\n<h3 id=\"4-5-大表数据查询的优化\"><a href=\"#4-5-大表数据查询的优化\" class=\"headerlink\" title=\"4.5. 大表数据查询的优化\"></a>4.5. 大表数据查询的优化</h3><ol>\n<li>优化Schema，sql语句、索引。</li>\n<li>加缓存，memcached，redis</li>\n<li>主从复制，读写分离</li>\n<li>垂直拆分，分布式系统</li>\n<li>水平切分，要选择合适的sharding key，为了好的查询效率，表结构也要改变，应用也需要改变，sql中尽量带sharding key，将数据定位到限定的表去查，而不是全部的表。</li>\n</ol>\n<hr>\n<h2 id=\"5-MVCC\"><a href=\"#5-MVCC\" class=\"headerlink\" title=\"5. MVCC\"></a>5. MVCC</h2><p>参考：<a href=\"https://blog.csdn.net/h330531987/article/details/74364018\">MVCC多版本并发控制浅析</a></p>\n<p>MVCC，多版本并发控制，是mysql数据库InnoDB引擎隔离级别的实现。用于Read Committed和Repeatable Read两种隔离级别。</p>\n<p>InnoDB会为每一行添加两个字段，分别表示<strong>创建的版本</strong>和<strong>删除的版本</strong>，填入的是事务的版本号，这个版本号随着事务的创建不断递增，具体实现：</p>\n<ul>\n<li><strong>select</strong>：满足一下两个条件会返回该行数据：1、 该行的创建版本号小于等于当前版本号，用来确保select操作之前的操作已经执行落地；2、该行的删除版本号大于当前版本号或为空，大于说明当前版本已经有一个并发事务将该行删除了。</li>\n<li><strong>insert</strong>：将新插入的行的创建版本号设置为当前的系统版本号。</li>\n<li><strong>delete</strong>：将要删除的行的删除版本号设置为当前的系统版本号。</li>\n<li><strong>update</strong>：不执行原地操作，还是转化为insert+delete，对旧行执行delete，对新行执行insert。</li>\n</ul>\n<p>写操作（update、insert、delete）执行时，将当前的系统版本号递增。</p>\n<p>由于旧数据不是真正的删除，所以要对这些数据进行清理，innoDB会开一个后台线程执行，具体规则是将删除版本号小于当前系统版本号的行输出，这个过程叫purge。</p>\n<p>MVCC能达到Repeatable Read，但是想达到Serializable还要加锁。</p>\n<hr>\n<h2 id=\"6-封锁\"><a href=\"#6-封锁\" class=\"headerlink\" title=\"6. 封锁\"></a>6. 封锁</h2><p><a href=\"https://blog.csdn.net/fantalee/article/details/81661665\">数据库锁</a></p>\n<h3 id=\"6-1-封锁粒度\"><a href=\"#6-1-封锁粒度\" class=\"headerlink\" title=\"6.1. 封锁粒度\"></a>6.1. 封锁粒度</h3><p>MySQL 中提供了两种封锁粒度：行级锁以及表级锁。</p>\n<p>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。</p>\n<h3 id=\"6-2-封锁类型\"><a href=\"#6-2-封锁类型\" class=\"headerlink\" title=\"6.2. 封锁类型\"></a>6.2. 封锁类型</h3><h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><ul>\n<li>排它锁（Exclusive），简写为 X 锁，又称写锁。 </li>\n<li>共享锁（Shared），简写为 S 锁，又称读锁。</li>\n</ul>\n<ol>\n<li>一个事务对数据对象(数据库、表、页或者行) A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。 </li>\n<li>一个事务对数据对象(数据库、表、页或者行) A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">·</th>\n<th align=\"center\">X</th>\n<th align=\"center\">S</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">X</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">S</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n</tr>\n</tbody></table>\n<h4 id=\"意向锁\"><a href=\"#意向锁\" class=\"headerlink\" title=\"意向锁\"></a>意向锁</h4><p>InnoDB把意向锁设计得比较简练，没有上面定义那么复杂。其意向锁就是表级别的锁。设计目的主要是为了在一个事务中揭示下一行将被请求的锁类型。</p>\n<p>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。<br>由此，意向锁在原来的 X&#x2F;S 锁之上引入了 IX&#x2F;IS，IX&#x2F;IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定：</p>\n<ol>\n<li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁； </li>\n<li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li>\n</ol>\n<p>事务 T 想要对表 A 加 X 锁时，只需要先检测是否有其它事务在表 A门口加没加 S&#x2F;X&#x2F;IX&#x2F;IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 为整张表加 X 锁失败。进入等待。</p>\n<p>表级意向锁与表级的X，S的兼容关系如下（IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">·</th>\n<th align=\"center\">X</th>\n<th align=\"center\">IX</th>\n<th align=\"center\">S</th>\n<th align=\"center\">IS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">X</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">IX</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">S</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">IS</td>\n<td align=\"center\">×</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n</tbody></table>\n<h3 id=\"6-3-三级封锁协议\"><a href=\"#6-3-三级封锁协议\" class=\"headerlink\" title=\"6.3. 三级封锁协议\"></a>6.3. 三级封锁协议</h3><p><font color='red'>保证数据一致性</font></p>\n<h4 id=\"一级封锁协议\"><a href=\"#一级封锁协议\" class=\"headerlink\" title=\"一级封锁协议\"></a>一级封锁协议</h4><p>事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。</p>\n<p>没法解决<strong>脏读、不可重复读</strong>。</p>\n<h4 id=\"二级封锁协议\"><a href=\"#二级封锁协议\" class=\"headerlink\" title=\"二级封锁协议\"></a>二级封锁协议</h4><p>在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。</p>\n<p><strong>不可重复读</strong>问题还是没有解决。</p>\n<h4 id=\"三级封锁协议\"><a href=\"#三级封锁协议\" class=\"headerlink\" title=\"三级封锁协议\"></a>三级封锁协议</h4><p>在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。</p>\n<h3 id=\"6-4-两段锁协议\"><a href=\"#6-4-两段锁协议\" class=\"headerlink\" title=\"6.4. 两段锁协议\"></a>6.4. 两段锁协议</h3><p><font color='red'>保证并行调度可串行化</font></p>\n<p>可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。</p>\n<p>规定在对任何数据进行读写操作之前，事务首先要获得对该数据的封锁；而且在释放一个封锁之后，事务不再获得任何其他封锁。</p>\n<p>就是说加锁和解锁分为两个阶段进行。</p>\n<h3 id=\"6-5-MySQL-隐式与显示锁定\"><a href=\"#6-5-MySQL-隐式与显示锁定\" class=\"headerlink\" title=\"6.5. MySQL 隐式与显示锁定\"></a>6.5. MySQL 隐式与显示锁定</h3><p>MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</p>\n<p>InnoDB 也可以使用特定的语句进行显示锁定：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT … LOCK In SHARE MODE; </span><br><span class=\"line\">SELECT … FOR UPDATE;</span><br></pre></td></tr></table></figure>\n"},{"title":"数据库范式总结","date":"2019-03-22T01:55:13.000Z","_content":"\n# 数据库范式\n## 范式\n### 1. 第一范式\n每个属性都不可再分。\n### 2. 第二范式\n**消除了非主属性对于码的部分函数依赖。**\n所有非主属性都必须和主键有完全依赖关系，不能存在有某个非主属性只和主键的一部分有关。\n\n\n```\n部分函数依赖：若XY是关系R中的属性，X->Y，X'是X的子集，若存在X'->Y，则Y部分函数依赖X。\n\n安全函数依赖：若XY是关系R中的属性，X->Y，X'是X的子集，若每个X'！->Y，则Y完全函数依赖X。\n\n传递函数依赖：在关系R(U)中，XYZ是R的三个属性集合，若X确定Y，Y确定Z，X不包含Y，Y不确定Z，(XUY)∩Z为空，则称Z传递函数依赖于X。\n```\n\n### 3. 第三范式\n**消除了非主属性对于码的传递函数依赖。**\n不仅要满足第二范式，而且所有属性都要互相独立，没有传递关系。\n\n\n","source":"_posts/数据库范式.md","raw":"---\n\ntitle: 数据库范式总结\ndate: 2019-3-22 09:55:13\ntags: [数据库,面试]\ncategories: [面试,数据库]\n\n---\n\n# 数据库范式\n## 范式\n### 1. 第一范式\n每个属性都不可再分。\n### 2. 第二范式\n**消除了非主属性对于码的部分函数依赖。**\n所有非主属性都必须和主键有完全依赖关系，不能存在有某个非主属性只和主键的一部分有关。\n\n\n```\n部分函数依赖：若XY是关系R中的属性，X->Y，X'是X的子集，若存在X'->Y，则Y部分函数依赖X。\n\n安全函数依赖：若XY是关系R中的属性，X->Y，X'是X的子集，若每个X'！->Y，则Y完全函数依赖X。\n\n传递函数依赖：在关系R(U)中，XYZ是R的三个属性集合，若X确定Y，Y确定Z，X不包含Y，Y不确定Z，(XUY)∩Z为空，则称Z传递函数依赖于X。\n```\n\n### 3. 第三范式\n**消除了非主属性对于码的传递函数依赖。**\n不仅要满足第二范式，而且所有属性都要互相独立，没有传递关系。\n\n\n","slug":"数据库范式","published":1,"updated":"2025-02-22T18:52:19.827Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8b3002ev001abel57e4","content":"<h1 id=\"数据库范式\"><a href=\"#数据库范式\" class=\"headerlink\" title=\"数据库范式\"></a>数据库范式</h1><h2 id=\"范式\"><a href=\"#范式\" class=\"headerlink\" title=\"范式\"></a>范式</h2><h3 id=\"1-第一范式\"><a href=\"#1-第一范式\" class=\"headerlink\" title=\"1. 第一范式\"></a>1. 第一范式</h3><p>每个属性都不可再分。</p>\n<h3 id=\"2-第二范式\"><a href=\"#2-第二范式\" class=\"headerlink\" title=\"2. 第二范式\"></a>2. 第二范式</h3><p><strong>消除了非主属性对于码的部分函数依赖。</strong><br>所有非主属性都必须和主键有完全依赖关系，不能存在有某个非主属性只和主键的一部分有关。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">部分函数依赖：若XY是关系R中的属性，X-&gt;Y，X&#x27;是X的子集，若存在X&#x27;-&gt;Y，则Y部分函数依赖X。</span><br><span class=\"line\"></span><br><span class=\"line\">安全函数依赖：若XY是关系R中的属性，X-&gt;Y，X&#x27;是X的子集，若每个X&#x27;！-&gt;Y，则Y完全函数依赖X。</span><br><span class=\"line\"></span><br><span class=\"line\">传递函数依赖：在关系R(U)中，XYZ是R的三个属性集合，若X确定Y，Y确定Z，X不包含Y，Y不确定Z，(XUY)∩Z为空，则称Z传递函数依赖于X。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-第三范式\"><a href=\"#3-第三范式\" class=\"headerlink\" title=\"3. 第三范式\"></a>3. 第三范式</h3><p><strong>消除了非主属性对于码的传递函数依赖。</strong><br>不仅要满足第二范式，而且所有属性都要互相独立，没有传递关系。</p>\n","length":357,"excerpt":"","more":"<h1 id=\"数据库范式\"><a href=\"#数据库范式\" class=\"headerlink\" title=\"数据库范式\"></a>数据库范式</h1><h2 id=\"范式\"><a href=\"#范式\" class=\"headerlink\" title=\"范式\"></a>范式</h2><h3 id=\"1-第一范式\"><a href=\"#1-第一范式\" class=\"headerlink\" title=\"1. 第一范式\"></a>1. 第一范式</h3><p>每个属性都不可再分。</p>\n<h3 id=\"2-第二范式\"><a href=\"#2-第二范式\" class=\"headerlink\" title=\"2. 第二范式\"></a>2. 第二范式</h3><p><strong>消除了非主属性对于码的部分函数依赖。</strong><br>所有非主属性都必须和主键有完全依赖关系，不能存在有某个非主属性只和主键的一部分有关。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">部分函数依赖：若XY是关系R中的属性，X-&gt;Y，X&#x27;是X的子集，若存在X&#x27;-&gt;Y，则Y部分函数依赖X。</span><br><span class=\"line\"></span><br><span class=\"line\">安全函数依赖：若XY是关系R中的属性，X-&gt;Y，X&#x27;是X的子集，若每个X&#x27;！-&gt;Y，则Y完全函数依赖X。</span><br><span class=\"line\"></span><br><span class=\"line\">传递函数依赖：在关系R(U)中，XYZ是R的三个属性集合，若X确定Y，Y确定Z，X不包含Y，Y不确定Z，(XUY)∩Z为空，则称Z传递函数依赖于X。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-第三范式\"><a href=\"#3-第三范式\" class=\"headerlink\" title=\"3. 第三范式\"></a>3. 第三范式</h3><p><strong>消除了非主属性对于码的传递函数依赖。</strong><br>不仅要满足第二范式，而且所有属性都要互相独立，没有传递关系。</p>\n"},{"title":"数据库索引总结","date":"2019-03-22T01:55:13.000Z","_content":"\n# 数据库索引总结\n\n\n\n---\n\n## 数据库索引\n索引通常是由B树或者B+树实现。\n### B树和B+树的区别\n- B树的键和值也存在内部节点和叶子结点中，B+树内部结点只存键，叶子结点存键和值。\n- B+树的叶子结点有一条链相连。\n\n##### B树的好处\nB树在内部存键值，频繁访问的节点在根节点附近可以提高查询效率，如果特定数据是重复读取，B树更好。\n##### B+树的好处\n一次读取大量数据时，因为B+树内部节点只存键，因此可以读取更多键，又因为叶子节点有链，读取大量数据时不需要每次都遍历内部节点。\n\n### 数据库使用B+还不是B\n**B树只适合随机检索，B+树同时适合随机检索和顺序检索。**\n\n**B+树空间利用率更高，I/O次数少，磁盘读写少。**\n索引也很大，需要以文件的形式存在磁盘中。索引查找就会产生I/O操作。B+树可以一次读取更多的关键字，因此I/O次数少。\n\n**B+树查询效率更稳定。**\nB树关键字在内部节点中也有，找到关键字就能确定记录。性能代价相当于二分查找。\nB+树每次都是跟到叶节点，效率更稳定。\n\n**B+树顺序遍历效率也不低。**\nB+树叶子结点有链。\n\n### 索引类型\n\n- 主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键索引。\n- 唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。\n- 普通索引：没有唯一性限制，可以为空。\n- 全文索引：主要用来查找文本中的关键字，而不是直接与索引中的值相比较。\n- 联合索引：可以多个列共同创建联合索引。一个查询可以使用其中一个列，但必须遵守最左前缀原则。\n\n### 聚集索与非聚集索\n- 聚集索引：各行的物理顺序和逻辑顺序相同，一个表只能有一个。\n- 非聚集索引：数据与索引在不同位置，索引中存在指向数据的指针，可以有多个。非聚集索引，分成普通索引，唯一索引，全文索引。\n\nInnoDB的数据文件本身就是索引文件。InnoDB数据文件按聚集索引，所以InnoDB必须有主键。InnoDB聚集索引规则：\n1. 如果有主键，主键就是聚集索引。\n2. 如果没有主键，第一个唯一非空索引就是聚集索引。\n3. 如果1、2都没有，会生成一个隐藏的主键作为聚集索引，它是6个字节的列，随着数据插入自增。\n\n### MyISAM和InnoDB索引实现\n\n索引 | MyISAM | InnoDB\n---|---|---\n主键索引  | 在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。 | 在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。\n辅助索引  | 索引页仍然存放主键和和指向数据页的偏移量，但数据页存放的是完整的记录。  | 索引节点存放的内容一样，仍然是键值信息和指向数据页的偏移量；但数据页中存放的是键值信息和该键值对应的主键。然后通过主键查询主键索引就能找到该条记录。\n\n### 索引的优点\n- 创建唯一性索引，可以确保每行数据的唯一性。\n- 提高数据检索效率。\n- 加快表与表之间的连接。\n- 使用分组和排序字句检索时，可以加快检索时间。\n- 通过使用索引，在查询过程中，使用查询优化器，提高系统性能。\n\n### 索引的缺点\n- 时间方面：创建和维护需要时间。对数据增删改也需要对索引维护。\n- 空间方面：索引需要占据物理空间。\n\n\n### 索引的优化\n- 非空字段：索引的列最好为非空。空值很难优化，用其他方式（0，特殊值等）代替空值。\n- 取离散大的列：将更离散的数据放在联合索引前面。\n- 索引字段越小越好：数据以页为单位存储，一页数据越多，一次IO操作得到的数据越多。\n- 对 where,on,group by,order by 中出现的列使用索引。\n- 对于like查询，%不放在前面。\n- 最左前缀匹配原则。\n\n### 最左前缀匹配原则\nmysql会向右匹配到范围查询（<,>,between等），=、in放在左边。 = in 可以乱序。\n\n\n\n","source":"_posts/数据库索引.md","raw":"---\n\ntitle: 数据库索引总结\ndate: 2019-3-22 09:55:13\ntags: [面试,数据库]\ncategories: [面试,数据库]\n\n---\n\n# 数据库索引总结\n\n\n\n---\n\n## 数据库索引\n索引通常是由B树或者B+树实现。\n### B树和B+树的区别\n- B树的键和值也存在内部节点和叶子结点中，B+树内部结点只存键，叶子结点存键和值。\n- B+树的叶子结点有一条链相连。\n\n##### B树的好处\nB树在内部存键值，频繁访问的节点在根节点附近可以提高查询效率，如果特定数据是重复读取，B树更好。\n##### B+树的好处\n一次读取大量数据时，因为B+树内部节点只存键，因此可以读取更多键，又因为叶子节点有链，读取大量数据时不需要每次都遍历内部节点。\n\n### 数据库使用B+还不是B\n**B树只适合随机检索，B+树同时适合随机检索和顺序检索。**\n\n**B+树空间利用率更高，I/O次数少，磁盘读写少。**\n索引也很大，需要以文件的形式存在磁盘中。索引查找就会产生I/O操作。B+树可以一次读取更多的关键字，因此I/O次数少。\n\n**B+树查询效率更稳定。**\nB树关键字在内部节点中也有，找到关键字就能确定记录。性能代价相当于二分查找。\nB+树每次都是跟到叶节点，效率更稳定。\n\n**B+树顺序遍历效率也不低。**\nB+树叶子结点有链。\n\n### 索引类型\n\n- 主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键索引。\n- 唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。\n- 普通索引：没有唯一性限制，可以为空。\n- 全文索引：主要用来查找文本中的关键字，而不是直接与索引中的值相比较。\n- 联合索引：可以多个列共同创建联合索引。一个查询可以使用其中一个列，但必须遵守最左前缀原则。\n\n### 聚集索与非聚集索\n- 聚集索引：各行的物理顺序和逻辑顺序相同，一个表只能有一个。\n- 非聚集索引：数据与索引在不同位置，索引中存在指向数据的指针，可以有多个。非聚集索引，分成普通索引，唯一索引，全文索引。\n\nInnoDB的数据文件本身就是索引文件。InnoDB数据文件按聚集索引，所以InnoDB必须有主键。InnoDB聚集索引规则：\n1. 如果有主键，主键就是聚集索引。\n2. 如果没有主键，第一个唯一非空索引就是聚集索引。\n3. 如果1、2都没有，会生成一个隐藏的主键作为聚集索引，它是6个字节的列，随着数据插入自增。\n\n### MyISAM和InnoDB索引实现\n\n索引 | MyISAM | InnoDB\n---|---|---\n主键索引  | 在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。 | 在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。\n辅助索引  | 索引页仍然存放主键和和指向数据页的偏移量，但数据页存放的是完整的记录。  | 索引节点存放的内容一样，仍然是键值信息和指向数据页的偏移量；但数据页中存放的是键值信息和该键值对应的主键。然后通过主键查询主键索引就能找到该条记录。\n\n### 索引的优点\n- 创建唯一性索引，可以确保每行数据的唯一性。\n- 提高数据检索效率。\n- 加快表与表之间的连接。\n- 使用分组和排序字句检索时，可以加快检索时间。\n- 通过使用索引，在查询过程中，使用查询优化器，提高系统性能。\n\n### 索引的缺点\n- 时间方面：创建和维护需要时间。对数据增删改也需要对索引维护。\n- 空间方面：索引需要占据物理空间。\n\n\n### 索引的优化\n- 非空字段：索引的列最好为非空。空值很难优化，用其他方式（0，特殊值等）代替空值。\n- 取离散大的列：将更离散的数据放在联合索引前面。\n- 索引字段越小越好：数据以页为单位存储，一页数据越多，一次IO操作得到的数据越多。\n- 对 where,on,group by,order by 中出现的列使用索引。\n- 对于like查询，%不放在前面。\n- 最左前缀匹配原则。\n\n### 最左前缀匹配原则\nmysql会向右匹配到范围查询（<,>,between等），=、in放在左边。 = in 可以乱序。\n\n\n\n","slug":"数据库索引","published":1,"updated":"2025-02-22T18:52:19.827Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8b4002hv001dtyg0wl0","content":"<h1 id=\"数据库索引总结\"><a href=\"#数据库索引总结\" class=\"headerlink\" title=\"数据库索引总结\"></a>数据库索引总结</h1><hr>\n<h2 id=\"数据库索引\"><a href=\"#数据库索引\" class=\"headerlink\" title=\"数据库索引\"></a>数据库索引</h2><p>索引通常是由B树或者B+树实现。</p>\n<h3 id=\"B树和B-树的区别\"><a href=\"#B树和B-树的区别\" class=\"headerlink\" title=\"B树和B+树的区别\"></a>B树和B+树的区别</h3><ul>\n<li>B树的键和值也存在内部节点和叶子结点中，B+树内部结点只存键，叶子结点存键和值。</li>\n<li>B+树的叶子结点有一条链相连。</li>\n</ul>\n<h5 id=\"B树的好处\"><a href=\"#B树的好处\" class=\"headerlink\" title=\"B树的好处\"></a>B树的好处</h5><p>B树在内部存键值，频繁访问的节点在根节点附近可以提高查询效率，如果特定数据是重复读取，B树更好。</p>\n<h5 id=\"B-树的好处\"><a href=\"#B-树的好处\" class=\"headerlink\" title=\"B+树的好处\"></a>B+树的好处</h5><p>一次读取大量数据时，因为B+树内部节点只存键，因此可以读取更多键，又因为叶子节点有链，读取大量数据时不需要每次都遍历内部节点。</p>\n<h3 id=\"数据库使用B-还不是B\"><a href=\"#数据库使用B-还不是B\" class=\"headerlink\" title=\"数据库使用B+还不是B\"></a>数据库使用B+还不是B</h3><p><strong>B树只适合随机检索，B+树同时适合随机检索和顺序检索。</strong></p>\n<p><strong>B+树空间利用率更高，I&#x2F;O次数少，磁盘读写少。</strong><br>索引也很大，需要以文件的形式存在磁盘中。索引查找就会产生I&#x2F;O操作。B+树可以一次读取更多的关键字，因此I&#x2F;O次数少。</p>\n<p><strong>B+树查询效率更稳定。</strong><br>B树关键字在内部节点中也有，找到关键字就能确定记录。性能代价相当于二分查找。<br>B+树每次都是跟到叶节点，效率更稳定。</p>\n<p><strong>B+树顺序遍历效率也不低。</strong><br>B+树叶子结点有链。</p>\n<h3 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h3><ul>\n<li>主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键索引。</li>\n<li>唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。</li>\n<li>普通索引：没有唯一性限制，可以为空。</li>\n<li>全文索引：主要用来查找文本中的关键字，而不是直接与索引中的值相比较。</li>\n<li>联合索引：可以多个列共同创建联合索引。一个查询可以使用其中一个列，但必须遵守最左前缀原则。</li>\n</ul>\n<h3 id=\"聚集索与非聚集索\"><a href=\"#聚集索与非聚集索\" class=\"headerlink\" title=\"聚集索与非聚集索\"></a>聚集索与非聚集索</h3><ul>\n<li>聚集索引：各行的物理顺序和逻辑顺序相同，一个表只能有一个。</li>\n<li>非聚集索引：数据与索引在不同位置，索引中存在指向数据的指针，可以有多个。非聚集索引，分成普通索引，唯一索引，全文索引。</li>\n</ul>\n<p>InnoDB的数据文件本身就是索引文件。InnoDB数据文件按聚集索引，所以InnoDB必须有主键。InnoDB聚集索引规则：</p>\n<ol>\n<li>如果有主键，主键就是聚集索引。</li>\n<li>如果没有主键，第一个唯一非空索引就是聚集索引。</li>\n<li>如果1、2都没有，会生成一个隐藏的主键作为聚集索引，它是6个字节的列，随着数据插入自增。</li>\n</ol>\n<h3 id=\"MyISAM和InnoDB索引实现\"><a href=\"#MyISAM和InnoDB索引实现\" class=\"headerlink\" title=\"MyISAM和InnoDB索引实现\"></a>MyISAM和InnoDB索引实现</h3><table>\n<thead>\n<tr>\n<th>索引</th>\n<th>MyISAM</th>\n<th>InnoDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键索引</td>\n<td>在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。</td>\n<td>在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。</td>\n</tr>\n<tr>\n<td>辅助索引</td>\n<td>索引页仍然存放主键和和指向数据页的偏移量，但数据页存放的是完整的记录。</td>\n<td>索引节点存放的内容一样，仍然是键值信息和指向数据页的偏移量；但数据页中存放的是键值信息和该键值对应的主键。然后通过主键查询主键索引就能找到该条记录。</td>\n</tr>\n</tbody></table>\n<h3 id=\"索引的优点\"><a href=\"#索引的优点\" class=\"headerlink\" title=\"索引的优点\"></a>索引的优点</h3><ul>\n<li>创建唯一性索引，可以确保每行数据的唯一性。</li>\n<li>提高数据检索效率。</li>\n<li>加快表与表之间的连接。</li>\n<li>使用分组和排序字句检索时，可以加快检索时间。</li>\n<li>通过使用索引，在查询过程中，使用查询优化器，提高系统性能。</li>\n</ul>\n<h3 id=\"索引的缺点\"><a href=\"#索引的缺点\" class=\"headerlink\" title=\"索引的缺点\"></a>索引的缺点</h3><ul>\n<li>时间方面：创建和维护需要时间。对数据增删改也需要对索引维护。</li>\n<li>空间方面：索引需要占据物理空间。</li>\n</ul>\n<h3 id=\"索引的优化\"><a href=\"#索引的优化\" class=\"headerlink\" title=\"索引的优化\"></a>索引的优化</h3><ul>\n<li>非空字段：索引的列最好为非空。空值很难优化，用其他方式（0，特殊值等）代替空值。</li>\n<li>取离散大的列：将更离散的数据放在联合索引前面。</li>\n<li>索引字段越小越好：数据以页为单位存储，一页数据越多，一次IO操作得到的数据越多。</li>\n<li>对 where,on,group by,order by 中出现的列使用索引。</li>\n<li>对于like查询，%不放在前面。</li>\n<li>最左前缀匹配原则。</li>\n</ul>\n<h3 id=\"最左前缀匹配原则\"><a href=\"#最左前缀匹配原则\" class=\"headerlink\" title=\"最左前缀匹配原则\"></a>最左前缀匹配原则</h3><p>mysql会向右匹配到范围查询（&lt;,&gt;,between等），&#x3D;、in放在左边。 &#x3D; in 可以乱序。</p>\n","length":1497,"excerpt":"","more":"<h1 id=\"数据库索引总结\"><a href=\"#数据库索引总结\" class=\"headerlink\" title=\"数据库索引总结\"></a>数据库索引总结</h1><hr>\n<h2 id=\"数据库索引\"><a href=\"#数据库索引\" class=\"headerlink\" title=\"数据库索引\"></a>数据库索引</h2><p>索引通常是由B树或者B+树实现。</p>\n<h3 id=\"B树和B-树的区别\"><a href=\"#B树和B-树的区别\" class=\"headerlink\" title=\"B树和B+树的区别\"></a>B树和B+树的区别</h3><ul>\n<li>B树的键和值也存在内部节点和叶子结点中，B+树内部结点只存键，叶子结点存键和值。</li>\n<li>B+树的叶子结点有一条链相连。</li>\n</ul>\n<h5 id=\"B树的好处\"><a href=\"#B树的好处\" class=\"headerlink\" title=\"B树的好处\"></a>B树的好处</h5><p>B树在内部存键值，频繁访问的节点在根节点附近可以提高查询效率，如果特定数据是重复读取，B树更好。</p>\n<h5 id=\"B-树的好处\"><a href=\"#B-树的好处\" class=\"headerlink\" title=\"B+树的好处\"></a>B+树的好处</h5><p>一次读取大量数据时，因为B+树内部节点只存键，因此可以读取更多键，又因为叶子节点有链，读取大量数据时不需要每次都遍历内部节点。</p>\n<h3 id=\"数据库使用B-还不是B\"><a href=\"#数据库使用B-还不是B\" class=\"headerlink\" title=\"数据库使用B+还不是B\"></a>数据库使用B+还不是B</h3><p><strong>B树只适合随机检索，B+树同时适合随机检索和顺序检索。</strong></p>\n<p><strong>B+树空间利用率更高，I&#x2F;O次数少，磁盘读写少。</strong><br>索引也很大，需要以文件的形式存在磁盘中。索引查找就会产生I&#x2F;O操作。B+树可以一次读取更多的关键字，因此I&#x2F;O次数少。</p>\n<p><strong>B+树查询效率更稳定。</strong><br>B树关键字在内部节点中也有，找到关键字就能确定记录。性能代价相当于二分查找。<br>B+树每次都是跟到叶节点，效率更稳定。</p>\n<p><strong>B+树顺序遍历效率也不低。</strong><br>B+树叶子结点有链。</p>\n<h3 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h3><ul>\n<li>主键索引：数据列不允许重复，不允许为null，一个表只能有一个主键索引。</li>\n<li>唯一索引：数据列不允许重复，允许为null，一个表允许多个列创建唯一索引。</li>\n<li>普通索引：没有唯一性限制，可以为空。</li>\n<li>全文索引：主要用来查找文本中的关键字，而不是直接与索引中的值相比较。</li>\n<li>联合索引：可以多个列共同创建联合索引。一个查询可以使用其中一个列，但必须遵守最左前缀原则。</li>\n</ul>\n<h3 id=\"聚集索与非聚集索\"><a href=\"#聚集索与非聚集索\" class=\"headerlink\" title=\"聚集索与非聚集索\"></a>聚集索与非聚集索</h3><ul>\n<li>聚集索引：各行的物理顺序和逻辑顺序相同，一个表只能有一个。</li>\n<li>非聚集索引：数据与索引在不同位置，索引中存在指向数据的指针，可以有多个。非聚集索引，分成普通索引，唯一索引，全文索引。</li>\n</ul>\n<p>InnoDB的数据文件本身就是索引文件。InnoDB数据文件按聚集索引，所以InnoDB必须有主键。InnoDB聚集索引规则：</p>\n<ol>\n<li>如果有主键，主键就是聚集索引。</li>\n<li>如果没有主键，第一个唯一非空索引就是聚集索引。</li>\n<li>如果1、2都没有，会生成一个隐藏的主键作为聚集索引，它是6个字节的列，随着数据插入自增。</li>\n</ol>\n<h3 id=\"MyISAM和InnoDB索引实现\"><a href=\"#MyISAM和InnoDB索引实现\" class=\"headerlink\" title=\"MyISAM和InnoDB索引实现\"></a>MyISAM和InnoDB索引实现</h3><table>\n<thead>\n<tr>\n<th>索引</th>\n<th>MyISAM</th>\n<th>InnoDB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键索引</td>\n<td>在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。</td>\n<td>在主键索引中，索引页中存放的是主键和指向数据页的偏移量；数据页中存放的是主键和该主键所属行记录的地址空间。</td>\n</tr>\n<tr>\n<td>辅助索引</td>\n<td>索引页仍然存放主键和和指向数据页的偏移量，但数据页存放的是完整的记录。</td>\n<td>索引节点存放的内容一样，仍然是键值信息和指向数据页的偏移量；但数据页中存放的是键值信息和该键值对应的主键。然后通过主键查询主键索引就能找到该条记录。</td>\n</tr>\n</tbody></table>\n<h3 id=\"索引的优点\"><a href=\"#索引的优点\" class=\"headerlink\" title=\"索引的优点\"></a>索引的优点</h3><ul>\n<li>创建唯一性索引，可以确保每行数据的唯一性。</li>\n<li>提高数据检索效率。</li>\n<li>加快表与表之间的连接。</li>\n<li>使用分组和排序字句检索时，可以加快检索时间。</li>\n<li>通过使用索引，在查询过程中，使用查询优化器，提高系统性能。</li>\n</ul>\n<h3 id=\"索引的缺点\"><a href=\"#索引的缺点\" class=\"headerlink\" title=\"索引的缺点\"></a>索引的缺点</h3><ul>\n<li>时间方面：创建和维护需要时间。对数据增删改也需要对索引维护。</li>\n<li>空间方面：索引需要占据物理空间。</li>\n</ul>\n<h3 id=\"索引的优化\"><a href=\"#索引的优化\" class=\"headerlink\" title=\"索引的优化\"></a>索引的优化</h3><ul>\n<li>非空字段：索引的列最好为非空。空值很难优化，用其他方式（0，特殊值等）代替空值。</li>\n<li>取离散大的列：将更离散的数据放在联合索引前面。</li>\n<li>索引字段越小越好：数据以页为单位存储，一页数据越多，一次IO操作得到的数据越多。</li>\n<li>对 where,on,group by,order by 中出现的列使用索引。</li>\n<li>对于like查询，%不放在前面。</li>\n<li>最左前缀匹配原则。</li>\n</ul>\n<h3 id=\"最左前缀匹配原则\"><a href=\"#最左前缀匹配原则\" class=\"headerlink\" title=\"最左前缀匹配原则\"></a>最左前缀匹配原则</h3><p>mysql会向右匹配到范围查询（&lt;,&gt;,between等），&#x3D;、in放在左边。 &#x3D; in 可以乱序。</p>\n"},{"title":"文件夹中添加-右键打开命令行窗口（转载）","date":"2018-07-20T03:37:31.000Z","description":"将“在此处打开命令窗口”添加到右键菜单（转载）","_content":"\n\n### 将“在此处打开命令窗口”添加到右键菜单（转载）\n\n\n注册表编辑器中\n\n- \\HKEY_CLASSES_ROOT\\Directory\\shell\\\n- \\HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\\n- \\HKEY_CLASSES_ROOT\\Drive\\shell\\\n- \\HKEY_CLASSES_ROOT\\LibraryFolder\\background\\（要新建shell项）\n\n\n上述项中每个都执行的步骤：\n1. 放在\\shell\\上，右键，选择新建-项：OpenCmdHere\n2. 进入OpenCmdHere，修改值为OpenCmdHere\n3. 选择新建-字符串值：Icon\n4. \\OpenCmdHere，新建-项：command\n5. 进入command，修改值为：\n\n    ```\n    Powershell -windowstyle hidden -Command \"Start-Process cmd.exe -ArgumentList '/s,/k, pushd,%V' -Verb RunAs\"\n    ```\n\n原贴地址：https://www.ithome.com/html/win10/309633.htm","source":"_posts/文件夹中右键打开命令行窗口.md","raw":"---\ntitle: 文件夹中添加-右键打开命令行窗口（转载）\ndate: 2018-07-20 11:37:31\ntags: [tips]\ncategories: Windows tips\ndescription: 将“在此处打开命令窗口”添加到右键菜单（转载）\n---\n\n\n### 将“在此处打开命令窗口”添加到右键菜单（转载）\n\n\n注册表编辑器中\n\n- \\HKEY_CLASSES_ROOT\\Directory\\shell\\\n- \\HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\\n- \\HKEY_CLASSES_ROOT\\Drive\\shell\\\n- \\HKEY_CLASSES_ROOT\\LibraryFolder\\background\\（要新建shell项）\n\n\n上述项中每个都执行的步骤：\n1. 放在\\shell\\上，右键，选择新建-项：OpenCmdHere\n2. 进入OpenCmdHere，修改值为OpenCmdHere\n3. 选择新建-字符串值：Icon\n4. \\OpenCmdHere，新建-项：command\n5. 进入command，修改值为：\n\n    ```\n    Powershell -windowstyle hidden -Command \"Start-Process cmd.exe -ArgumentList '/s,/k, pushd,%V' -Verb RunAs\"\n    ```\n\n原贴地址：https://www.ithome.com/html/win10/309633.htm","slug":"文件夹中右键打开命令行窗口","published":1,"updated":"2025-02-22T18:52:19.827Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8b5002mv001elao49tt","content":"<h3 id=\"将“在此处打开命令窗口”添加到右键菜单（转载）\"><a href=\"#将“在此处打开命令窗口”添加到右键菜单（转载）\" class=\"headerlink\" title=\"将“在此处打开命令窗口”添加到右键菜单（转载）\"></a>将“在此处打开命令窗口”添加到右键菜单（转载）</h3><p>注册表编辑器中</p>\n<ul>\n<li>\\HKEY_CLASSES_ROOT\\Directory\\shell\\</li>\n<li>\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\</li>\n<li>\\HKEY_CLASSES_ROOT\\Drive\\shell\\</li>\n<li>\\HKEY_CLASSES_ROOT\\LibraryFolder\\background\\（要新建shell项）</li>\n</ul>\n<p>上述项中每个都执行的步骤：</p>\n<ol>\n<li><p>放在\\shell\\上，右键，选择新建-项：OpenCmdHere</p>\n</li>\n<li><p>进入OpenCmdHere，修改值为OpenCmdHere</p>\n</li>\n<li><p>选择新建-字符串值：Icon</p>\n</li>\n<li><p>\\OpenCmdHere，新建-项：command</p>\n</li>\n<li><p>进入command，修改值为：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Powershell -windowstyle hidden -Command &quot;Start-Process cmd.exe -ArgumentList &#x27;/s,/k, pushd,%V&#x27; -Verb RunAs&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>原贴地址：<a href=\"https://www.ithome.com/html/win10/309633.htm\">https://www.ithome.com/html/win10/309633.htm</a></p>\n","length":492,"excerpt":"","more":"<h3 id=\"将“在此处打开命令窗口”添加到右键菜单（转载）\"><a href=\"#将“在此处打开命令窗口”添加到右键菜单（转载）\" class=\"headerlink\" title=\"将“在此处打开命令窗口”添加到右键菜单（转载）\"></a>将“在此处打开命令窗口”添加到右键菜单（转载）</h3><p>注册表编辑器中</p>\n<ul>\n<li>\\HKEY_CLASSES_ROOT\\Directory\\shell\\</li>\n<li>\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\</li>\n<li>\\HKEY_CLASSES_ROOT\\Drive\\shell\\</li>\n<li>\\HKEY_CLASSES_ROOT\\LibraryFolder\\background\\（要新建shell项）</li>\n</ul>\n<p>上述项中每个都执行的步骤：</p>\n<ol>\n<li><p>放在\\shell\\上，右键，选择新建-项：OpenCmdHere</p>\n</li>\n<li><p>进入OpenCmdHere，修改值为OpenCmdHere</p>\n</li>\n<li><p>选择新建-字符串值：Icon</p>\n</li>\n<li><p>\\OpenCmdHere，新建-项：command</p>\n</li>\n<li><p>进入command，修改值为：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Powershell -windowstyle hidden -Command &quot;Start-Process cmd.exe -ArgumentList &#x27;/s,/k, pushd,%V&#x27; -Verb RunAs&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>原贴地址：<a href=\"https://www.ithome.com/html/win10/309633.htm\">https://www.ithome.com/html/win10/309633.htm</a></p>\n"},{"title":"计算机网络基础知识总结","date":"2019-03-26T04:19:17.000Z","description":"计算机网络基础知识总结","_content":"\n# 计算机网络基础知识总结\n\n## 1. OSI、TCP/IP、五层协议的体系结构\n\n![architecture.png](/image/interview_prep/architecture.png)\n\n### OSI七层结构\n\n- 物理层：通过媒介传输比特，确定机械及电气规范（Bit）\n- 数据链路层：将比特组装成帧和点到点的传输（帧Frame）\n- 网络层：负责数据包从源到宿的传输和网际互联（数据包Packet）\n- 传输层：提供端对端的可靠报文传输和错误恢复（段Segment）\n- 会话层：建立、管理、终止会话。（会话协议数据单元SPDU）\n- 表示层：对数据翻译，加密，压缩。（表示协议数据单元PPDU）\n- 应用层：允许访问OSI环境的手段。（应用协议数据单元APDU）\n\n### TCP/IP四层结构\n\n- 数据链路层（网络接口层/从主机到网络层）：模型没有真正描述这一层实现，只是为上一层提供接口。\n- 网络层：处理和分组相关，协议主要包括：IP协议（网际协议）、ICMP协议（Internet网络控制报文协议）、IGMP协议（Internet组管理协议）。\n- 传输层：为两台主机应用提供端对端的通信。TCP、UDP。\n- 应用层：负责处理特殊应用程序细节。Telnet、FTP、SMTP、SNMP（简单网络管理协议）\n\nIP层提供不可靠的服务。TCP提供可靠的服务。为了提供可靠服务，TCP采用超时重传、发送和接收端到端的确认分组机制。\n\n## 2. 常用端口和对应服务\n\n\n端口 | 服务\n:-:|:-:\n21 | FTP\n22 | SSH\n23 | TELNET\n25 | SMTP\n53 | DNS\n80 | HTTP\n110 | POP3\n443 | HTTPS\n1080 |SOCKETS\n3306 | MYSQL\n\n## 3. TCP三次握手 四次挥手\n\n**三次握手：**\n\n```\nsequenceDiagram\nClient->>Server: SYN seq = x\nServer->>Client: SYN seq = y, ACK = x+1\nClient->>Server: ACK = y+1\n```\n第一次握手：建立连接，客户端发送连接请求报文段，将SYN位置为1，sequence number为x，然后进入SYN_SEND状态，等待服务端。\n\n第二次握手：服务器接收到请求，对SYN报文段进行确认，设置acknowledge number设置为x+1，将SYN置为1，sequence number为y，将所有信息放入一个报文段中，发送给客户端，进入SYN_RECV状态。\n\n第三次握手：客户端接收到报文段，将acknowledge number置为y+1，向服务端发送ACK报文段，发送完毕后，进入ESTABLISHED状态。\n\n**三次握手的原因**\n\n第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。\n\n**四次挥手：**\n```\nsequenceDiagram\nClient->>Server: FIN seq = x+2, ACK = y+1\nServer->>Client: ACK = x+3\nServer->>Client: FIN seq = y+1\nClient->>Server: ACK = y+2\n```\n第一次挥手：客户端发送FIN请求关闭。\n第二次挥手：服务端接收到FIN，回复ACK，序号为收到的+1。\n第三次挥手：服务端发送一个FIN，关闭服务端到客户端的传输。\n第四次挥手：客户端收到FIN，回复ACK，序号为收到的+1。\n\n**四次挥手的原因**\n\n客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。\n\n## 4. Http和Https的区别\n\nHTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了**隧道**进行通信。\n\n通过使用 SSL，HTTPS 具有了**加密（防窃听）、认证（防伪装）和完整性保护（防篡改）**。\n\nHttp协议运行在TCP之上，明文传输，客户端与服务器端都无法验证对方的身份；Https是身披SSL(Secure Socket Layer)外壳的Http，运行于SSL上，SSL运行于TCP之上，是添加了加密和认证机制的HTTP。二者之间存在如下不同：\n\n- 端口不同：Http与Http使用不同的连接方式，用的端口也不一样，前者是80，后者是443；\n- 资源消耗：和HTTP通信相比，Https通信会由于加减密处理消耗更多的CPU和内存资源；\n- 开销：Https通信需要证书，而证书一般需要向认证机构购买；\n\n## 5. Get与POST的区别\n\n- 功能：GET 用于获取资源，而 POST 用于传输实体主体。。\n- REST服务：GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；\n- 请求参数形式：GET放在HTTP报文请求头中，POST放在请求体中。因为 URL 只支持 ASCII 码；POST 参数支持标准字符集。\n- 安全性：GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。\n- 幂等性：GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。（幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。）\n- 请求大小：GET的URL长度有限，POST没有大小限制。\n\n## 6. IP地址\n\n\n类别 | 网络号| 地址范围|网络号|主机号|私有地址\n:-:|:-:|:-:|:-:|:-:|:-:|\nA类 | 以0开头| 1.0.0.0 – 127.255.255.255| 8位| 24位| 10.0.0.0 - 10.255.255.255\nB类 | 以10开头| 128.0.0.0 – 191.255.255.255| 16位| 16位| 172.16.0.0 - 172.31.255.255\nC类 | 以110开头| 192.0.0.0 – 223.255.255.255| 24位| 8位| 192.168.0.0 - 192.168.255.255\n\n## 7. TCP/UDP区别\n\n### TCP\n\n- 优点：可靠，稳定。需要三次握手才能建立接连。传输时有重传、确认、窗口、拥塞控制。\n- 缺点：慢，效率低。各种机制消耗时间、占用资源。\n\n### UDP\n- 优点：快，比TCP稍安全。\n- 缺点：不可靠，不稳定。网络不好会丢包。\n\n### 区别\n\n\n区别 | TCP | UDP\n---|:--:|:-:\n连接 | 面向连接| 面向无连接\n可靠性 | 可靠，无丢失，无差错，不重复 | 不保证可靠性交付\n模式 | 流模式（字节流） | 数据报模式（报文）\n连接 | 点到点| 支持一对一，一对多，多对一，多对多\n首部开销| 20字节| 8字节\n逻辑通信信道| 全双工的可靠信道| 不可靠信道\n速度 | 慢 | 快\n对系统资源要求 | 较多 | 较少\n\n\n## 8. ARP协议\n1. 首先，每个主机会在自己的ARP缓冲区建立一个ARP列表，保存IP和MAC的对应关系。\n2. 当源主机要发送数据时，现在自己的ARP列表是否要对应的IP地址，如果有，直接发送，如果没有，会在网段内所有主机发送数据包，包括：源主机IP，源主机MAC地址，目的主机IP。\n3. 当本网段所有主机接收到数据包时，先检查数据包中的目的主机是否是自己的IP，如果不是，忽略；如果是，更新自己ARP，将源主机IP和MAC写入，并将自己的MAC地址写入响应包。\n4. 源主机接收到相应包，将目的主机MAC和IP写入ARP列表，然后以此通信。如果一直没有响应包，则ARP查询失败。\n\n## 9. 从输入网址到获得页面的过程\n\n1. DNS查询，查找域名对应的IP地址。这一步会依次查找浏览器缓存，系统缓存，路由器缓存，ISPNDS缓存，根域名服务器。\n2. 浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；\n3. TCP/IP链接建立起来后，浏览器向服务器发送HTTP请求；\n4. 服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；\n5. 浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；\n6. 浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。\n\n## 10. Session 与 Cookie\n\n- 实现机制：Session的实现常常依赖于Cookie机制，通过Cookie机制回传SessionID\n- 大小限制：Cookie有大小限制并且浏览器对每个站点也有cookie的个数限制，Session没有大小限制，理论上只与服务器的内存大小有关\n- 安全性：Cookie存在安全隐患，通过拦截或本地文件找得到cookie后可以进行攻击，而Session由于保存在服务器端，相对更加安全；\n- 服务器资源消耗：Session是保存在服务器端上会存在一段时间才会消失，如果session过多会增加服务器的压力。\n- Application（ServletContext）：与一个Web应用程序相对应，为应用程序提供了一个全局的状态，所有客户都可以使用该状态。\n\n## 11. TCP 拥塞控制\n\nTCP 主要通过四个算法来进行拥塞控制：**慢开始、拥塞避免、快重传、快恢复**。\n\n","source":"_posts/计算机网络.md","raw":"---\ntitle: 计算机网络基础知识总结\ndate: 2019-03-26 12:19:17\ntags: [面试]\ncategories: [面试]\ndescription: 计算机网络基础知识总结\n---\n\n# 计算机网络基础知识总结\n\n## 1. OSI、TCP/IP、五层协议的体系结构\n\n![architecture.png](/image/interview_prep/architecture.png)\n\n### OSI七层结构\n\n- 物理层：通过媒介传输比特，确定机械及电气规范（Bit）\n- 数据链路层：将比特组装成帧和点到点的传输（帧Frame）\n- 网络层：负责数据包从源到宿的传输和网际互联（数据包Packet）\n- 传输层：提供端对端的可靠报文传输和错误恢复（段Segment）\n- 会话层：建立、管理、终止会话。（会话协议数据单元SPDU）\n- 表示层：对数据翻译，加密，压缩。（表示协议数据单元PPDU）\n- 应用层：允许访问OSI环境的手段。（应用协议数据单元APDU）\n\n### TCP/IP四层结构\n\n- 数据链路层（网络接口层/从主机到网络层）：模型没有真正描述这一层实现，只是为上一层提供接口。\n- 网络层：处理和分组相关，协议主要包括：IP协议（网际协议）、ICMP协议（Internet网络控制报文协议）、IGMP协议（Internet组管理协议）。\n- 传输层：为两台主机应用提供端对端的通信。TCP、UDP。\n- 应用层：负责处理特殊应用程序细节。Telnet、FTP、SMTP、SNMP（简单网络管理协议）\n\nIP层提供不可靠的服务。TCP提供可靠的服务。为了提供可靠服务，TCP采用超时重传、发送和接收端到端的确认分组机制。\n\n## 2. 常用端口和对应服务\n\n\n端口 | 服务\n:-:|:-:\n21 | FTP\n22 | SSH\n23 | TELNET\n25 | SMTP\n53 | DNS\n80 | HTTP\n110 | POP3\n443 | HTTPS\n1080 |SOCKETS\n3306 | MYSQL\n\n## 3. TCP三次握手 四次挥手\n\n**三次握手：**\n\n```\nsequenceDiagram\nClient->>Server: SYN seq = x\nServer->>Client: SYN seq = y, ACK = x+1\nClient->>Server: ACK = y+1\n```\n第一次握手：建立连接，客户端发送连接请求报文段，将SYN位置为1，sequence number为x，然后进入SYN_SEND状态，等待服务端。\n\n第二次握手：服务器接收到请求，对SYN报文段进行确认，设置acknowledge number设置为x+1，将SYN置为1，sequence number为y，将所有信息放入一个报文段中，发送给客户端，进入SYN_RECV状态。\n\n第三次握手：客户端接收到报文段，将acknowledge number置为y+1，向服务端发送ACK报文段，发送完毕后，进入ESTABLISHED状态。\n\n**三次握手的原因**\n\n第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。\n\n**四次挥手：**\n```\nsequenceDiagram\nClient->>Server: FIN seq = x+2, ACK = y+1\nServer->>Client: ACK = x+3\nServer->>Client: FIN seq = y+1\nClient->>Server: ACK = y+2\n```\n第一次挥手：客户端发送FIN请求关闭。\n第二次挥手：服务端接收到FIN，回复ACK，序号为收到的+1。\n第三次挥手：服务端发送一个FIN，关闭服务端到客户端的传输。\n第四次挥手：客户端收到FIN，回复ACK，序号为收到的+1。\n\n**四次挥手的原因**\n\n客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。\n\n## 4. Http和Https的区别\n\nHTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了**隧道**进行通信。\n\n通过使用 SSL，HTTPS 具有了**加密（防窃听）、认证（防伪装）和完整性保护（防篡改）**。\n\nHttp协议运行在TCP之上，明文传输，客户端与服务器端都无法验证对方的身份；Https是身披SSL(Secure Socket Layer)外壳的Http，运行于SSL上，SSL运行于TCP之上，是添加了加密和认证机制的HTTP。二者之间存在如下不同：\n\n- 端口不同：Http与Http使用不同的连接方式，用的端口也不一样，前者是80，后者是443；\n- 资源消耗：和HTTP通信相比，Https通信会由于加减密处理消耗更多的CPU和内存资源；\n- 开销：Https通信需要证书，而证书一般需要向认证机构购买；\n\n## 5. Get与POST的区别\n\n- 功能：GET 用于获取资源，而 POST 用于传输实体主体。。\n- REST服务：GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；\n- 请求参数形式：GET放在HTTP报文请求头中，POST放在请求体中。因为 URL 只支持 ASCII 码；POST 参数支持标准字符集。\n- 安全性：GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。\n- 幂等性：GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。（幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。）\n- 请求大小：GET的URL长度有限，POST没有大小限制。\n\n## 6. IP地址\n\n\n类别 | 网络号| 地址范围|网络号|主机号|私有地址\n:-:|:-:|:-:|:-:|:-:|:-:|\nA类 | 以0开头| 1.0.0.0 – 127.255.255.255| 8位| 24位| 10.0.0.0 - 10.255.255.255\nB类 | 以10开头| 128.0.0.0 – 191.255.255.255| 16位| 16位| 172.16.0.0 - 172.31.255.255\nC类 | 以110开头| 192.0.0.0 – 223.255.255.255| 24位| 8位| 192.168.0.0 - 192.168.255.255\n\n## 7. TCP/UDP区别\n\n### TCP\n\n- 优点：可靠，稳定。需要三次握手才能建立接连。传输时有重传、确认、窗口、拥塞控制。\n- 缺点：慢，效率低。各种机制消耗时间、占用资源。\n\n### UDP\n- 优点：快，比TCP稍安全。\n- 缺点：不可靠，不稳定。网络不好会丢包。\n\n### 区别\n\n\n区别 | TCP | UDP\n---|:--:|:-:\n连接 | 面向连接| 面向无连接\n可靠性 | 可靠，无丢失，无差错，不重复 | 不保证可靠性交付\n模式 | 流模式（字节流） | 数据报模式（报文）\n连接 | 点到点| 支持一对一，一对多，多对一，多对多\n首部开销| 20字节| 8字节\n逻辑通信信道| 全双工的可靠信道| 不可靠信道\n速度 | 慢 | 快\n对系统资源要求 | 较多 | 较少\n\n\n## 8. ARP协议\n1. 首先，每个主机会在自己的ARP缓冲区建立一个ARP列表，保存IP和MAC的对应关系。\n2. 当源主机要发送数据时，现在自己的ARP列表是否要对应的IP地址，如果有，直接发送，如果没有，会在网段内所有主机发送数据包，包括：源主机IP，源主机MAC地址，目的主机IP。\n3. 当本网段所有主机接收到数据包时，先检查数据包中的目的主机是否是自己的IP，如果不是，忽略；如果是，更新自己ARP，将源主机IP和MAC写入，并将自己的MAC地址写入响应包。\n4. 源主机接收到相应包，将目的主机MAC和IP写入ARP列表，然后以此通信。如果一直没有响应包，则ARP查询失败。\n\n## 9. 从输入网址到获得页面的过程\n\n1. DNS查询，查找域名对应的IP地址。这一步会依次查找浏览器缓存，系统缓存，路由器缓存，ISPNDS缓存，根域名服务器。\n2. 浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；\n3. TCP/IP链接建立起来后，浏览器向服务器发送HTTP请求；\n4. 服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；\n5. 浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；\n6. 浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。\n\n## 10. Session 与 Cookie\n\n- 实现机制：Session的实现常常依赖于Cookie机制，通过Cookie机制回传SessionID\n- 大小限制：Cookie有大小限制并且浏览器对每个站点也有cookie的个数限制，Session没有大小限制，理论上只与服务器的内存大小有关\n- 安全性：Cookie存在安全隐患，通过拦截或本地文件找得到cookie后可以进行攻击，而Session由于保存在服务器端，相对更加安全；\n- 服务器资源消耗：Session是保存在服务器端上会存在一段时间才会消失，如果session过多会增加服务器的压力。\n- Application（ServletContext）：与一个Web应用程序相对应，为应用程序提供了一个全局的状态，所有客户都可以使用该状态。\n\n## 11. TCP 拥塞控制\n\nTCP 主要通过四个算法来进行拥塞控制：**慢开始、拥塞避免、快重传、快恢复**。\n\n","slug":"计算机网络","published":1,"updated":"2025-02-22T18:52:19.827Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8b6002pv0012soyc18y","content":"<h1 id=\"计算机网络基础知识总结\"><a href=\"#计算机网络基础知识总结\" class=\"headerlink\" title=\"计算机网络基础知识总结\"></a>计算机网络基础知识总结</h1><h2 id=\"1-OSI、TCP-IP、五层协议的体系结构\"><a href=\"#1-OSI、TCP-IP、五层协议的体系结构\" class=\"headerlink\" title=\"1. OSI、TCP&#x2F;IP、五层协议的体系结构\"></a>1. OSI、TCP&#x2F;IP、五层协议的体系结构</h2><p><img src=\"/image/interview_prep/architecture.png\" alt=\"architecture.png\"></p>\n<h3 id=\"OSI七层结构\"><a href=\"#OSI七层结构\" class=\"headerlink\" title=\"OSI七层结构\"></a>OSI七层结构</h3><ul>\n<li>物理层：通过媒介传输比特，确定机械及电气规范（Bit）</li>\n<li>数据链路层：将比特组装成帧和点到点的传输（帧Frame）</li>\n<li>网络层：负责数据包从源到宿的传输和网际互联（数据包Packet）</li>\n<li>传输层：提供端对端的可靠报文传输和错误恢复（段Segment）</li>\n<li>会话层：建立、管理、终止会话。（会话协议数据单元SPDU）</li>\n<li>表示层：对数据翻译，加密，压缩。（表示协议数据单元PPDU）</li>\n<li>应用层：允许访问OSI环境的手段。（应用协议数据单元APDU）</li>\n</ul>\n<h3 id=\"TCP-IP四层结构\"><a href=\"#TCP-IP四层结构\" class=\"headerlink\" title=\"TCP&#x2F;IP四层结构\"></a>TCP&#x2F;IP四层结构</h3><ul>\n<li>数据链路层（网络接口层&#x2F;从主机到网络层）：模型没有真正描述这一层实现，只是为上一层提供接口。</li>\n<li>网络层：处理和分组相关，协议主要包括：IP协议（网际协议）、ICMP协议（Internet网络控制报文协议）、IGMP协议（Internet组管理协议）。</li>\n<li>传输层：为两台主机应用提供端对端的通信。TCP、UDP。</li>\n<li>应用层：负责处理特殊应用程序细节。Telnet、FTP、SMTP、SNMP（简单网络管理协议）</li>\n</ul>\n<p>IP层提供不可靠的服务。TCP提供可靠的服务。为了提供可靠服务，TCP采用超时重传、发送和接收端到端的确认分组机制。</p>\n<h2 id=\"2-常用端口和对应服务\"><a href=\"#2-常用端口和对应服务\" class=\"headerlink\" title=\"2. 常用端口和对应服务\"></a>2. 常用端口和对应服务</h2><table>\n<thead>\n<tr>\n<th align=\"center\">端口</th>\n<th align=\"center\">服务</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">21</td>\n<td align=\"center\">FTP</td>\n</tr>\n<tr>\n<td align=\"center\">22</td>\n<td align=\"center\">SSH</td>\n</tr>\n<tr>\n<td align=\"center\">23</td>\n<td align=\"center\">TELNET</td>\n</tr>\n<tr>\n<td align=\"center\">25</td>\n<td align=\"center\">SMTP</td>\n</tr>\n<tr>\n<td align=\"center\">53</td>\n<td align=\"center\">DNS</td>\n</tr>\n<tr>\n<td align=\"center\">80</td>\n<td align=\"center\">HTTP</td>\n</tr>\n<tr>\n<td align=\"center\">110</td>\n<td align=\"center\">POP3</td>\n</tr>\n<tr>\n<td align=\"center\">443</td>\n<td align=\"center\">HTTPS</td>\n</tr>\n<tr>\n<td align=\"center\">1080</td>\n<td align=\"center\">SOCKETS</td>\n</tr>\n<tr>\n<td align=\"center\">3306</td>\n<td align=\"center\">MYSQL</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-TCP三次握手-四次挥手\"><a href=\"#3-TCP三次握手-四次挥手\" class=\"headerlink\" title=\"3. TCP三次握手 四次挥手\"></a>3. TCP三次握手 四次挥手</h2><p><strong>三次握手：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">Client-&gt;&gt;Server: SYN seq = x</span><br><span class=\"line\">Server-&gt;&gt;Client: SYN seq = y, ACK = x+1</span><br><span class=\"line\">Client-&gt;&gt;Server: ACK = y+1</span><br></pre></td></tr></table></figure>\n<p>第一次握手：建立连接，客户端发送连接请求报文段，将SYN位置为1，sequence number为x，然后进入SYN_SEND状态，等待服务端。</p>\n<p>第二次握手：服务器接收到请求，对SYN报文段进行确认，设置acknowledge number设置为x+1，将SYN置为1，sequence number为y，将所有信息放入一个报文段中，发送给客户端，进入SYN_RECV状态。</p>\n<p>第三次握手：客户端接收到报文段，将acknowledge number置为y+1，向服务端发送ACK报文段，发送完毕后，进入ESTABLISHED状态。</p>\n<p><strong>三次握手的原因</strong></p>\n<p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p>\n<p><strong>四次挥手：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">Client-&gt;&gt;Server: FIN seq = x+2, ACK = y+1</span><br><span class=\"line\">Server-&gt;&gt;Client: ACK = x+3</span><br><span class=\"line\">Server-&gt;&gt;Client: FIN seq = y+1</span><br><span class=\"line\">Client-&gt;&gt;Server: ACK = y+2</span><br></pre></td></tr></table></figure>\n<p>第一次挥手：客户端发送FIN请求关闭。<br>第二次挥手：服务端接收到FIN，回复ACK，序号为收到的+1。<br>第三次挥手：服务端发送一个FIN，关闭服务端到客户端的传输。<br>第四次挥手：客户端收到FIN，回复ACK，序号为收到的+1。</p>\n<p><strong>四次挥手的原因</strong></p>\n<p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p>\n<h2 id=\"4-Http和Https的区别\"><a href=\"#4-Http和Https的区别\" class=\"headerlink\" title=\"4. Http和Https的区别\"></a>4. Http和Https的区别</h2><p>HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了<strong>隧道</strong>进行通信。</p>\n<p>通过使用 SSL，HTTPS 具有了<strong>加密（防窃听）、认证（防伪装）和完整性保护（防篡改）</strong>。</p>\n<p>Http协议运行在TCP之上，明文传输，客户端与服务器端都无法验证对方的身份；Https是身披SSL(Secure Socket Layer)外壳的Http，运行于SSL上，SSL运行于TCP之上，是添加了加密和认证机制的HTTP。二者之间存在如下不同：</p>\n<ul>\n<li>端口不同：Http与Http使用不同的连接方式，用的端口也不一样，前者是80，后者是443；</li>\n<li>资源消耗：和HTTP通信相比，Https通信会由于加减密处理消耗更多的CPU和内存资源；</li>\n<li>开销：Https通信需要证书，而证书一般需要向认证机构购买；</li>\n</ul>\n<h2 id=\"5-Get与POST的区别\"><a href=\"#5-Get与POST的区别\" class=\"headerlink\" title=\"5. Get与POST的区别\"></a>5. Get与POST的区别</h2><ul>\n<li>功能：GET 用于获取资源，而 POST 用于传输实体主体。。</li>\n<li>REST服务：GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；</li>\n<li>请求参数形式：GET放在HTTP报文请求头中，POST放在请求体中。因为 URL 只支持 ASCII 码；POST 参数支持标准字符集。</li>\n<li>安全性：GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</li>\n<li>幂等性：GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。（幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。）</li>\n<li>请求大小：GET的URL长度有限，POST没有大小限制。</li>\n</ul>\n<h2 id=\"6-IP地址\"><a href=\"#6-IP地址\" class=\"headerlink\" title=\"6. IP地址\"></a>6. IP地址</h2><table>\n<thead>\n<tr>\n<th align=\"center\">类别</th>\n<th align=\"center\">网络号</th>\n<th align=\"center\">地址范围</th>\n<th align=\"center\">网络号</th>\n<th align=\"center\">主机号</th>\n<th align=\"center\">私有地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">A类</td>\n<td align=\"center\">以0开头</td>\n<td align=\"center\">1.0.0.0 – 127.255.255.255</td>\n<td align=\"center\">8位</td>\n<td align=\"center\">24位</td>\n<td align=\"center\">10.0.0.0 - 10.255.255.255</td>\n</tr>\n<tr>\n<td align=\"center\">B类</td>\n<td align=\"center\">以10开头</td>\n<td align=\"center\">128.0.0.0 – 191.255.255.255</td>\n<td align=\"center\">16位</td>\n<td align=\"center\">16位</td>\n<td align=\"center\">172.16.0.0 - 172.31.255.255</td>\n</tr>\n<tr>\n<td align=\"center\">C类</td>\n<td align=\"center\">以110开头</td>\n<td align=\"center\">192.0.0.0 – 223.255.255.255</td>\n<td align=\"center\">24位</td>\n<td align=\"center\">8位</td>\n<td align=\"center\">192.168.0.0 - 192.168.255.255</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-TCP-UDP区别\"><a href=\"#7-TCP-UDP区别\" class=\"headerlink\" title=\"7. TCP&#x2F;UDP区别\"></a>7. TCP&#x2F;UDP区别</h2><h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><ul>\n<li>优点：可靠，稳定。需要三次握手才能建立接连。传输时有重传、确认、窗口、拥塞控制。</li>\n<li>缺点：慢，效率低。各种机制消耗时间、占用资源。</li>\n</ul>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><ul>\n<li>优点：快，比TCP稍安全。</li>\n<li>缺点：不可靠，不稳定。网络不好会丢包。</li>\n</ul>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><table>\n<thead>\n<tr>\n<th>区别</th>\n<th align=\"center\">TCP</th>\n<th align=\"center\">UDP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>连接</td>\n<td align=\"center\">面向连接</td>\n<td align=\"center\">面向无连接</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td align=\"center\">可靠，无丢失，无差错，不重复</td>\n<td align=\"center\">不保证可靠性交付</td>\n</tr>\n<tr>\n<td>模式</td>\n<td align=\"center\">流模式（字节流）</td>\n<td align=\"center\">数据报模式（报文）</td>\n</tr>\n<tr>\n<td>连接</td>\n<td align=\"center\">点到点</td>\n<td align=\"center\">支持一对一，一对多，多对一，多对多</td>\n</tr>\n<tr>\n<td>首部开销</td>\n<td align=\"center\">20字节</td>\n<td align=\"center\">8字节</td>\n</tr>\n<tr>\n<td>逻辑通信信道</td>\n<td align=\"center\">全双工的可靠信道</td>\n<td align=\"center\">不可靠信道</td>\n</tr>\n<tr>\n<td>速度</td>\n<td align=\"center\">慢</td>\n<td align=\"center\">快</td>\n</tr>\n<tr>\n<td>对系统资源要求</td>\n<td align=\"center\">较多</td>\n<td align=\"center\">较少</td>\n</tr>\n</tbody></table>\n<h2 id=\"8-ARP协议\"><a href=\"#8-ARP协议\" class=\"headerlink\" title=\"8. ARP协议\"></a>8. ARP协议</h2><ol>\n<li>首先，每个主机会在自己的ARP缓冲区建立一个ARP列表，保存IP和MAC的对应关系。</li>\n<li>当源主机要发送数据时，现在自己的ARP列表是否要对应的IP地址，如果有，直接发送，如果没有，会在网段内所有主机发送数据包，包括：源主机IP，源主机MAC地址，目的主机IP。</li>\n<li>当本网段所有主机接收到数据包时，先检查数据包中的目的主机是否是自己的IP，如果不是，忽略；如果是，更新自己ARP，将源主机IP和MAC写入，并将自己的MAC地址写入响应包。</li>\n<li>源主机接收到相应包，将目的主机MAC和IP写入ARP列表，然后以此通信。如果一直没有响应包，则ARP查询失败。</li>\n</ol>\n<h2 id=\"9-从输入网址到获得页面的过程\"><a href=\"#9-从输入网址到获得页面的过程\" class=\"headerlink\" title=\"9. 从输入网址到获得页面的过程\"></a>9. 从输入网址到获得页面的过程</h2><ol>\n<li>DNS查询，查找域名对应的IP地址。这一步会依次查找浏览器缓存，系统缓存，路由器缓存，ISPNDS缓存，根域名服务器。</li>\n<li>浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；</li>\n<li>TCP&#x2F;IP链接建立起来后，浏览器向服务器发送HTTP请求；</li>\n<li>服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；</li>\n<li>浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；</li>\n<li>浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</li>\n</ol>\n<h2 id=\"10-Session-与-Cookie\"><a href=\"#10-Session-与-Cookie\" class=\"headerlink\" title=\"10. Session 与 Cookie\"></a>10. Session 与 Cookie</h2><ul>\n<li>实现机制：Session的实现常常依赖于Cookie机制，通过Cookie机制回传SessionID</li>\n<li>大小限制：Cookie有大小限制并且浏览器对每个站点也有cookie的个数限制，Session没有大小限制，理论上只与服务器的内存大小有关</li>\n<li>安全性：Cookie存在安全隐患，通过拦截或本地文件找得到cookie后可以进行攻击，而Session由于保存在服务器端，相对更加安全；</li>\n<li>服务器资源消耗：Session是保存在服务器端上会存在一段时间才会消失，如果session过多会增加服务器的压力。</li>\n<li>Application（ServletContext）：与一个Web应用程序相对应，为应用程序提供了一个全局的状态，所有客户都可以使用该状态。</li>\n</ul>\n<h2 id=\"11-TCP-拥塞控制\"><a href=\"#11-TCP-拥塞控制\" class=\"headerlink\" title=\"11. TCP 拥塞控制\"></a>11. TCP 拥塞控制</h2><p>TCP 主要通过四个算法来进行拥塞控制：<strong>慢开始、拥塞避免、快重传、快恢复</strong>。</p>\n","length":3617,"excerpt":"","more":"<h1 id=\"计算机网络基础知识总结\"><a href=\"#计算机网络基础知识总结\" class=\"headerlink\" title=\"计算机网络基础知识总结\"></a>计算机网络基础知识总结</h1><h2 id=\"1-OSI、TCP-IP、五层协议的体系结构\"><a href=\"#1-OSI、TCP-IP、五层协议的体系结构\" class=\"headerlink\" title=\"1. OSI、TCP&#x2F;IP、五层协议的体系结构\"></a>1. OSI、TCP&#x2F;IP、五层协议的体系结构</h2><p><img src=\"/image/interview_prep/architecture.png\" alt=\"architecture.png\"></p>\n<h3 id=\"OSI七层结构\"><a href=\"#OSI七层结构\" class=\"headerlink\" title=\"OSI七层结构\"></a>OSI七层结构</h3><ul>\n<li>物理层：通过媒介传输比特，确定机械及电气规范（Bit）</li>\n<li>数据链路层：将比特组装成帧和点到点的传输（帧Frame）</li>\n<li>网络层：负责数据包从源到宿的传输和网际互联（数据包Packet）</li>\n<li>传输层：提供端对端的可靠报文传输和错误恢复（段Segment）</li>\n<li>会话层：建立、管理、终止会话。（会话协议数据单元SPDU）</li>\n<li>表示层：对数据翻译，加密，压缩。（表示协议数据单元PPDU）</li>\n<li>应用层：允许访问OSI环境的手段。（应用协议数据单元APDU）</li>\n</ul>\n<h3 id=\"TCP-IP四层结构\"><a href=\"#TCP-IP四层结构\" class=\"headerlink\" title=\"TCP&#x2F;IP四层结构\"></a>TCP&#x2F;IP四层结构</h3><ul>\n<li>数据链路层（网络接口层&#x2F;从主机到网络层）：模型没有真正描述这一层实现，只是为上一层提供接口。</li>\n<li>网络层：处理和分组相关，协议主要包括：IP协议（网际协议）、ICMP协议（Internet网络控制报文协议）、IGMP协议（Internet组管理协议）。</li>\n<li>传输层：为两台主机应用提供端对端的通信。TCP、UDP。</li>\n<li>应用层：负责处理特殊应用程序细节。Telnet、FTP、SMTP、SNMP（简单网络管理协议）</li>\n</ul>\n<p>IP层提供不可靠的服务。TCP提供可靠的服务。为了提供可靠服务，TCP采用超时重传、发送和接收端到端的确认分组机制。</p>\n<h2 id=\"2-常用端口和对应服务\"><a href=\"#2-常用端口和对应服务\" class=\"headerlink\" title=\"2. 常用端口和对应服务\"></a>2. 常用端口和对应服务</h2><table>\n<thead>\n<tr>\n<th align=\"center\">端口</th>\n<th align=\"center\">服务</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">21</td>\n<td align=\"center\">FTP</td>\n</tr>\n<tr>\n<td align=\"center\">22</td>\n<td align=\"center\">SSH</td>\n</tr>\n<tr>\n<td align=\"center\">23</td>\n<td align=\"center\">TELNET</td>\n</tr>\n<tr>\n<td align=\"center\">25</td>\n<td align=\"center\">SMTP</td>\n</tr>\n<tr>\n<td align=\"center\">53</td>\n<td align=\"center\">DNS</td>\n</tr>\n<tr>\n<td align=\"center\">80</td>\n<td align=\"center\">HTTP</td>\n</tr>\n<tr>\n<td align=\"center\">110</td>\n<td align=\"center\">POP3</td>\n</tr>\n<tr>\n<td align=\"center\">443</td>\n<td align=\"center\">HTTPS</td>\n</tr>\n<tr>\n<td align=\"center\">1080</td>\n<td align=\"center\">SOCKETS</td>\n</tr>\n<tr>\n<td align=\"center\">3306</td>\n<td align=\"center\">MYSQL</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-TCP三次握手-四次挥手\"><a href=\"#3-TCP三次握手-四次挥手\" class=\"headerlink\" title=\"3. TCP三次握手 四次挥手\"></a>3. TCP三次握手 四次挥手</h2><p><strong>三次握手：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">Client-&gt;&gt;Server: SYN seq = x</span><br><span class=\"line\">Server-&gt;&gt;Client: SYN seq = y, ACK = x+1</span><br><span class=\"line\">Client-&gt;&gt;Server: ACK = y+1</span><br></pre></td></tr></table></figure>\n<p>第一次握手：建立连接，客户端发送连接请求报文段，将SYN位置为1，sequence number为x，然后进入SYN_SEND状态，等待服务端。</p>\n<p>第二次握手：服务器接收到请求，对SYN报文段进行确认，设置acknowledge number设置为x+1，将SYN置为1，sequence number为y，将所有信息放入一个报文段中，发送给客户端，进入SYN_RECV状态。</p>\n<p>第三次握手：客户端接收到报文段，将acknowledge number置为y+1，向服务端发送ACK报文段，发送完毕后，进入ESTABLISHED状态。</p>\n<p><strong>三次握手的原因</strong></p>\n<p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p>\n<p><strong>四次挥手：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">Client-&gt;&gt;Server: FIN seq = x+2, ACK = y+1</span><br><span class=\"line\">Server-&gt;&gt;Client: ACK = x+3</span><br><span class=\"line\">Server-&gt;&gt;Client: FIN seq = y+1</span><br><span class=\"line\">Client-&gt;&gt;Server: ACK = y+2</span><br></pre></td></tr></table></figure>\n<p>第一次挥手：客户端发送FIN请求关闭。<br>第二次挥手：服务端接收到FIN，回复ACK，序号为收到的+1。<br>第三次挥手：服务端发送一个FIN，关闭服务端到客户端的传输。<br>第四次挥手：客户端收到FIN，回复ACK，序号为收到的+1。</p>\n<p><strong>四次挥手的原因</strong></p>\n<p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p>\n<h2 id=\"4-Http和Https的区别\"><a href=\"#4-Http和Https的区别\" class=\"headerlink\" title=\"4. Http和Https的区别\"></a>4. Http和Https的区别</h2><p>HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了<strong>隧道</strong>进行通信。</p>\n<p>通过使用 SSL，HTTPS 具有了<strong>加密（防窃听）、认证（防伪装）和完整性保护（防篡改）</strong>。</p>\n<p>Http协议运行在TCP之上，明文传输，客户端与服务器端都无法验证对方的身份；Https是身披SSL(Secure Socket Layer)外壳的Http，运行于SSL上，SSL运行于TCP之上，是添加了加密和认证机制的HTTP。二者之间存在如下不同：</p>\n<ul>\n<li>端口不同：Http与Http使用不同的连接方式，用的端口也不一样，前者是80，后者是443；</li>\n<li>资源消耗：和HTTP通信相比，Https通信会由于加减密处理消耗更多的CPU和内存资源；</li>\n<li>开销：Https通信需要证书，而证书一般需要向认证机构购买；</li>\n</ul>\n<h2 id=\"5-Get与POST的区别\"><a href=\"#5-Get与POST的区别\" class=\"headerlink\" title=\"5. Get与POST的区别\"></a>5. Get与POST的区别</h2><ul>\n<li>功能：GET 用于获取资源，而 POST 用于传输实体主体。。</li>\n<li>REST服务：GET是幂等的，即读取同一个资源，总是得到相同的数据，而POST不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET不会改变服务器上的资源，而POST会对服务器资源进行改变；</li>\n<li>请求参数形式：GET放在HTTP报文请求头中，POST放在请求体中。因为 URL 只支持 ASCII 码；POST 参数支持标准字符集。</li>\n<li>安全性：GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</li>\n<li>幂等性：GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。（幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。）</li>\n<li>请求大小：GET的URL长度有限，POST没有大小限制。</li>\n</ul>\n<h2 id=\"6-IP地址\"><a href=\"#6-IP地址\" class=\"headerlink\" title=\"6. IP地址\"></a>6. IP地址</h2><table>\n<thead>\n<tr>\n<th align=\"center\">类别</th>\n<th align=\"center\">网络号</th>\n<th align=\"center\">地址范围</th>\n<th align=\"center\">网络号</th>\n<th align=\"center\">主机号</th>\n<th align=\"center\">私有地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">A类</td>\n<td align=\"center\">以0开头</td>\n<td align=\"center\">1.0.0.0 – 127.255.255.255</td>\n<td align=\"center\">8位</td>\n<td align=\"center\">24位</td>\n<td align=\"center\">10.0.0.0 - 10.255.255.255</td>\n</tr>\n<tr>\n<td align=\"center\">B类</td>\n<td align=\"center\">以10开头</td>\n<td align=\"center\">128.0.0.0 – 191.255.255.255</td>\n<td align=\"center\">16位</td>\n<td align=\"center\">16位</td>\n<td align=\"center\">172.16.0.0 - 172.31.255.255</td>\n</tr>\n<tr>\n<td align=\"center\">C类</td>\n<td align=\"center\">以110开头</td>\n<td align=\"center\">192.0.0.0 – 223.255.255.255</td>\n<td align=\"center\">24位</td>\n<td align=\"center\">8位</td>\n<td align=\"center\">192.168.0.0 - 192.168.255.255</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-TCP-UDP区别\"><a href=\"#7-TCP-UDP区别\" class=\"headerlink\" title=\"7. TCP&#x2F;UDP区别\"></a>7. TCP&#x2F;UDP区别</h2><h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><ul>\n<li>优点：可靠，稳定。需要三次握手才能建立接连。传输时有重传、确认、窗口、拥塞控制。</li>\n<li>缺点：慢，效率低。各种机制消耗时间、占用资源。</li>\n</ul>\n<h3 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h3><ul>\n<li>优点：快，比TCP稍安全。</li>\n<li>缺点：不可靠，不稳定。网络不好会丢包。</li>\n</ul>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><table>\n<thead>\n<tr>\n<th>区别</th>\n<th align=\"center\">TCP</th>\n<th align=\"center\">UDP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>连接</td>\n<td align=\"center\">面向连接</td>\n<td align=\"center\">面向无连接</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td align=\"center\">可靠，无丢失，无差错，不重复</td>\n<td align=\"center\">不保证可靠性交付</td>\n</tr>\n<tr>\n<td>模式</td>\n<td align=\"center\">流模式（字节流）</td>\n<td align=\"center\">数据报模式（报文）</td>\n</tr>\n<tr>\n<td>连接</td>\n<td align=\"center\">点到点</td>\n<td align=\"center\">支持一对一，一对多，多对一，多对多</td>\n</tr>\n<tr>\n<td>首部开销</td>\n<td align=\"center\">20字节</td>\n<td align=\"center\">8字节</td>\n</tr>\n<tr>\n<td>逻辑通信信道</td>\n<td align=\"center\">全双工的可靠信道</td>\n<td align=\"center\">不可靠信道</td>\n</tr>\n<tr>\n<td>速度</td>\n<td align=\"center\">慢</td>\n<td align=\"center\">快</td>\n</tr>\n<tr>\n<td>对系统资源要求</td>\n<td align=\"center\">较多</td>\n<td align=\"center\">较少</td>\n</tr>\n</tbody></table>\n<h2 id=\"8-ARP协议\"><a href=\"#8-ARP协议\" class=\"headerlink\" title=\"8. ARP协议\"></a>8. ARP协议</h2><ol>\n<li>首先，每个主机会在自己的ARP缓冲区建立一个ARP列表，保存IP和MAC的对应关系。</li>\n<li>当源主机要发送数据时，现在自己的ARP列表是否要对应的IP地址，如果有，直接发送，如果没有，会在网段内所有主机发送数据包，包括：源主机IP，源主机MAC地址，目的主机IP。</li>\n<li>当本网段所有主机接收到数据包时，先检查数据包中的目的主机是否是自己的IP，如果不是，忽略；如果是，更新自己ARP，将源主机IP和MAC写入，并将自己的MAC地址写入响应包。</li>\n<li>源主机接收到相应包，将目的主机MAC和IP写入ARP列表，然后以此通信。如果一直没有响应包，则ARP查询失败。</li>\n</ol>\n<h2 id=\"9-从输入网址到获得页面的过程\"><a href=\"#9-从输入网址到获得页面的过程\" class=\"headerlink\" title=\"9. 从输入网址到获得页面的过程\"></a>9. 从输入网址到获得页面的过程</h2><ol>\n<li>DNS查询，查找域名对应的IP地址。这一步会依次查找浏览器缓存，系统缓存，路由器缓存，ISPNDS缓存，根域名服务器。</li>\n<li>浏览器获得域名对应的IP地址以后，浏览器向服务器请求建立链接，发起三次握手；</li>\n<li>TCP&#x2F;IP链接建立起来后，浏览器向服务器发送HTTP请求；</li>\n<li>服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；</li>\n<li>浏览器解析并渲染视图，若遇到对js文件、css文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；</li>\n<li>浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</li>\n</ol>\n<h2 id=\"10-Session-与-Cookie\"><a href=\"#10-Session-与-Cookie\" class=\"headerlink\" title=\"10. Session 与 Cookie\"></a>10. Session 与 Cookie</h2><ul>\n<li>实现机制：Session的实现常常依赖于Cookie机制，通过Cookie机制回传SessionID</li>\n<li>大小限制：Cookie有大小限制并且浏览器对每个站点也有cookie的个数限制，Session没有大小限制，理论上只与服务器的内存大小有关</li>\n<li>安全性：Cookie存在安全隐患，通过拦截或本地文件找得到cookie后可以进行攻击，而Session由于保存在服务器端，相对更加安全；</li>\n<li>服务器资源消耗：Session是保存在服务器端上会存在一段时间才会消失，如果session过多会增加服务器的压力。</li>\n<li>Application（ServletContext）：与一个Web应用程序相对应，为应用程序提供了一个全局的状态，所有客户都可以使用该状态。</li>\n</ul>\n<h2 id=\"11-TCP-拥塞控制\"><a href=\"#11-TCP-拥塞控制\" class=\"headerlink\" title=\"11. TCP 拥塞控制\"></a>11. TCP 拥塞控制</h2><p>TCP 主要通过四个算法来进行拥塞控制：<strong>慢开始、拥塞避免、快重传、快恢复</strong>。</p>\n"},{"title":"队列同步器（AQS）","date":"2019-05-11T07:47:59.000Z","description":"队列选择器（AbstractQueuedSynchronizer）是用来构建锁或者其他同步组件的基础框架。","_content":"\n# 队列同步器（AQS）\n\n队列选择器（AbstractQueuedSynchronizer）是用来构建锁或者其他同步组件的基础框架。\n\n同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。\n\n同步器是实现锁的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。**锁是面向使用者的，同步器面向的是锁的实现者。**\n\n## 接口\n\n同步器的设计是基于模板方法。使用者继承同步器并重写制定的方法，随后将同步器组合在自定义同步组件的实现中，并调用模板方法，模板方法调用的是使用者重写的方法。\n\n同步器提供3个方法访问和修改同步状态：\n\n- getState()：获取当前同步状态。\n- setState(int newState)：设置当前同步状态。\n- compareAndSetState(int expect, int update)：使用CAS设置。\n\n同步器可重写的方法：\n\n- protected boolean tryAcquire(int arg)：独占式获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再使用CAS设置同步状态。\n- protected boolean tryRelease(int arg)：独占式释放同步状态，等待同步状态的线程将有机会获取同步状态。\n- protected int tryAcquireShared(int arg)：共享式获取同步状态，返回大于等与0的值则表示获取成功，否则获取失败\n- protected boolean tryReleaseShared(int arg)：共享式释放同步状态。\n- protected boolean isHeldExclusively()：当前同步器是否在独占模式下被线程占用，一般该方法表示是否被当前线程所独占。\n\n模板方法：\n\n- public final void acquire(int arg)：独占式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，该方法需要调用重写的tryAcquire(int arg)方法\n- public final void acquireInterruptibly(int arg) throws InterruptedException：独占式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，但同时该方法也会响应中断，如果线程在同步队列中被中断，则该方法会抛出InterruptedException并返回。\n- public final boolean tryAcquireNanos(int arg, long nanosTimeout)\n              throws InterruptedException：在acquireInterruptibly(int arg)增加了超时限制，超时未获得同步状态返回false，否则返回true\n- public final void acquireShared(int arg)：共享式获取同步状态，如果未获取到则进入同步队列等待，与独占式不同的是，共享式可以同时有多个线程获取到同步状态。\n- public final void acquireSharedInterruptibly(int arg)：共享式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，但同时该方法也会响应中断，如果线程在同步队列中被中断，则该方法会抛出InterruptedException并返回。\n- public final boolean tryAcquireSharedNanos(int arg, long nanosTimeout)\n              throws InterruptedException：在acquireSharedInterruptibly(int arg)基础上增加了超时限制，超时未获得同步状态返回false，否则返回true\n- public final boolean release(int arg)：独占式释放同步状态，该方法会在释放同步状态之后，唤醒同步队列中第一个节点中的线程。\n- public final boolean releaseShared(int arg)：共享式释放同步状态。\n- public final Collection<Thread> getQueuedThreads()：获取在同步队列上等待的线程集合。\n\n## 实现\n\n### 共享式获取与独占式获取\n\n- 共享式访问资源时，其他共享式的访问均被允许，独占式访问被阻塞。\n- 独占式访问资源时，其他访问均被阻塞。\n\n### 同步队列\n\n同步器依赖内部的同步队列（一个FIFO双向队列）来完成同步状态的管理，当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点并加入队列，同时阻塞当前线程，当同步状态释放时，会把首节点中的线程唤醒，使其再次尝试获取同步状态。\n\n节点是构成同步队列的基础，同步器拥有首节点和尾节点，没有成功获取同步状态的线程会将成为节点加入该队列的尾部。\n\n- 设置尾节点需要CAS方法：compareAndSetTail(Node expect, Node update)。\n- 获取首节点是通过同步成功的线程，所以不需要CAS。\n\n### 独占式同步状态\n\n通过acquire(int arg)可以获取同步状态。主要逻辑：\n\n首先调用自定义同步器实现的tryAcquire(int arg)方法（保证线程安全的获取同步），通过addWaiter(Node node)方法将该节点加入到队列尾部，最后acquireQueued(Node node, int arg)，使得该节点以死循环的方式获取同步状态。\n\n![aqc_ex.png](\\image\\interview_prep\\java\\aqc_ex.png)\n\n通过release(int arg)方法可以释放同步状态，该方法释放了同步状态后，会唤醒其后继节点（进而使后继节点重新尝试获取同步状态）。\n\n### 共享式同步状态\n\n通过调用acquireShared(int arg)可以共享式获取同步状态。具体：\n\n- 调用tryAcquireShared(int arg)尝试获取同步状态，当返回值大于等于0，表示能获取到同步。\n\n- doAcquireShared(int arg)自旋过程中，如果当前节点的前驱为头节点时，尝试获取同步，如果返回值大于等于0，表示获取成功并退出自旋。\n\n调用releaseShared(int arg)释放同步状态。和独占式的区别是tryReleaseShared(int arg)必须保证同步状态线程安全释放，一般是通过循环和CAS保证。\n\n### 独占式超时获取同步\n\n通过调用doAcquireNanos(int arg, long nanosTimeout)可以超时获取同步。在支持响应中断的基础上，增加了超时获取的特性。\n\n过程和独占式类似，但在同步获取失败时判断是否超时。\n\n- 如果没有超时，重新 计算超时间隔，然后使当前线程等待nanosTimeout。\n- 如果nanosTimeout小于等于spinForTimeoutThrehold时，将不会将使该线程进行超时等待，而是进入快速自旋。\n\n![aqs_nano.png](\\image\\interview_prep\\java\\aqs_nano.png)\n\n参考：\n\n[深入学习Lock锁（1）——队列同步器](<https://yq.aliyun.com/articles/639608>)","source":"_posts/队列同步器.md","raw":"---\ntitle: 队列同步器（AQS）\ndate: 2019-05-11 15:47:59\ntags: [面试,Java,锁]\ncategories: [面试,Java,锁]\ndescription: 队列选择器（AbstractQueuedSynchronizer）是用来构建锁或者其他同步组件的基础框架。\n---\n\n# 队列同步器（AQS）\n\n队列选择器（AbstractQueuedSynchronizer）是用来构建锁或者其他同步组件的基础框架。\n\n同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。\n\n同步器是实现锁的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。**锁是面向使用者的，同步器面向的是锁的实现者。**\n\n## 接口\n\n同步器的设计是基于模板方法。使用者继承同步器并重写制定的方法，随后将同步器组合在自定义同步组件的实现中，并调用模板方法，模板方法调用的是使用者重写的方法。\n\n同步器提供3个方法访问和修改同步状态：\n\n- getState()：获取当前同步状态。\n- setState(int newState)：设置当前同步状态。\n- compareAndSetState(int expect, int update)：使用CAS设置。\n\n同步器可重写的方法：\n\n- protected boolean tryAcquire(int arg)：独占式获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再使用CAS设置同步状态。\n- protected boolean tryRelease(int arg)：独占式释放同步状态，等待同步状态的线程将有机会获取同步状态。\n- protected int tryAcquireShared(int arg)：共享式获取同步状态，返回大于等与0的值则表示获取成功，否则获取失败\n- protected boolean tryReleaseShared(int arg)：共享式释放同步状态。\n- protected boolean isHeldExclusively()：当前同步器是否在独占模式下被线程占用，一般该方法表示是否被当前线程所独占。\n\n模板方法：\n\n- public final void acquire(int arg)：独占式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，该方法需要调用重写的tryAcquire(int arg)方法\n- public final void acquireInterruptibly(int arg) throws InterruptedException：独占式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，但同时该方法也会响应中断，如果线程在同步队列中被中断，则该方法会抛出InterruptedException并返回。\n- public final boolean tryAcquireNanos(int arg, long nanosTimeout)\n              throws InterruptedException：在acquireInterruptibly(int arg)增加了超时限制，超时未获得同步状态返回false，否则返回true\n- public final void acquireShared(int arg)：共享式获取同步状态，如果未获取到则进入同步队列等待，与独占式不同的是，共享式可以同时有多个线程获取到同步状态。\n- public final void acquireSharedInterruptibly(int arg)：共享式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，但同时该方法也会响应中断，如果线程在同步队列中被中断，则该方法会抛出InterruptedException并返回。\n- public final boolean tryAcquireSharedNanos(int arg, long nanosTimeout)\n              throws InterruptedException：在acquireSharedInterruptibly(int arg)基础上增加了超时限制，超时未获得同步状态返回false，否则返回true\n- public final boolean release(int arg)：独占式释放同步状态，该方法会在释放同步状态之后，唤醒同步队列中第一个节点中的线程。\n- public final boolean releaseShared(int arg)：共享式释放同步状态。\n- public final Collection<Thread> getQueuedThreads()：获取在同步队列上等待的线程集合。\n\n## 实现\n\n### 共享式获取与独占式获取\n\n- 共享式访问资源时，其他共享式的访问均被允许，独占式访问被阻塞。\n- 独占式访问资源时，其他访问均被阻塞。\n\n### 同步队列\n\n同步器依赖内部的同步队列（一个FIFO双向队列）来完成同步状态的管理，当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点并加入队列，同时阻塞当前线程，当同步状态释放时，会把首节点中的线程唤醒，使其再次尝试获取同步状态。\n\n节点是构成同步队列的基础，同步器拥有首节点和尾节点，没有成功获取同步状态的线程会将成为节点加入该队列的尾部。\n\n- 设置尾节点需要CAS方法：compareAndSetTail(Node expect, Node update)。\n- 获取首节点是通过同步成功的线程，所以不需要CAS。\n\n### 独占式同步状态\n\n通过acquire(int arg)可以获取同步状态。主要逻辑：\n\n首先调用自定义同步器实现的tryAcquire(int arg)方法（保证线程安全的获取同步），通过addWaiter(Node node)方法将该节点加入到队列尾部，最后acquireQueued(Node node, int arg)，使得该节点以死循环的方式获取同步状态。\n\n![aqc_ex.png](\\image\\interview_prep\\java\\aqc_ex.png)\n\n通过release(int arg)方法可以释放同步状态，该方法释放了同步状态后，会唤醒其后继节点（进而使后继节点重新尝试获取同步状态）。\n\n### 共享式同步状态\n\n通过调用acquireShared(int arg)可以共享式获取同步状态。具体：\n\n- 调用tryAcquireShared(int arg)尝试获取同步状态，当返回值大于等于0，表示能获取到同步。\n\n- doAcquireShared(int arg)自旋过程中，如果当前节点的前驱为头节点时，尝试获取同步，如果返回值大于等于0，表示获取成功并退出自旋。\n\n调用releaseShared(int arg)释放同步状态。和独占式的区别是tryReleaseShared(int arg)必须保证同步状态线程安全释放，一般是通过循环和CAS保证。\n\n### 独占式超时获取同步\n\n通过调用doAcquireNanos(int arg, long nanosTimeout)可以超时获取同步。在支持响应中断的基础上，增加了超时获取的特性。\n\n过程和独占式类似，但在同步获取失败时判断是否超时。\n\n- 如果没有超时，重新 计算超时间隔，然后使当前线程等待nanosTimeout。\n- 如果nanosTimeout小于等于spinForTimeoutThrehold时，将不会将使该线程进行超时等待，而是进入快速自旋。\n\n![aqs_nano.png](\\image\\interview_prep\\java\\aqs_nano.png)\n\n参考：\n\n[深入学习Lock锁（1）——队列同步器](<https://yq.aliyun.com/articles/639608>)","slug":"队列同步器","published":1,"updated":"2025-02-22T18:52:19.828Z","comments":1,"layout":"post","photos":[],"_id":"cm7hqj8b7002tv001czgy3gmb","content":"<h1 id=\"队列同步器（AQS）\"><a href=\"#队列同步器（AQS）\" class=\"headerlink\" title=\"队列同步器（AQS）\"></a>队列同步器（AQS）</h1><p>队列选择器（AbstractQueuedSynchronizer）是用来构建锁或者其他同步组件的基础框架。</p>\n<p>同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。</p>\n<p>同步器是实现锁的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。<strong>锁是面向使用者的，同步器面向的是锁的实现者。</strong></p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>同步器的设计是基于模板方法。使用者继承同步器并重写制定的方法，随后将同步器组合在自定义同步组件的实现中，并调用模板方法，模板方法调用的是使用者重写的方法。</p>\n<p>同步器提供3个方法访问和修改同步状态：</p>\n<ul>\n<li>getState()：获取当前同步状态。</li>\n<li>setState(int newState)：设置当前同步状态。</li>\n<li>compareAndSetState(int expect, int update)：使用CAS设置。</li>\n</ul>\n<p>同步器可重写的方法：</p>\n<ul>\n<li>protected boolean tryAcquire(int arg)：独占式获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再使用CAS设置同步状态。</li>\n<li>protected boolean tryRelease(int arg)：独占式释放同步状态，等待同步状态的线程将有机会获取同步状态。</li>\n<li>protected int tryAcquireShared(int arg)：共享式获取同步状态，返回大于等与0的值则表示获取成功，否则获取失败</li>\n<li>protected boolean tryReleaseShared(int arg)：共享式释放同步状态。</li>\n<li>protected boolean isHeldExclusively()：当前同步器是否在独占模式下被线程占用，一般该方法表示是否被当前线程所独占。</li>\n</ul>\n<p>模板方法：</p>\n<ul>\n<li>public final void acquire(int arg)：独占式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，该方法需要调用重写的tryAcquire(int arg)方法</li>\n<li>public final void acquireInterruptibly(int arg) throws InterruptedException：独占式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，但同时该方法也会响应中断，如果线程在同步队列中被中断，则该方法会抛出InterruptedException并返回。</li>\n<li>public final boolean tryAcquireNanos(int arg, long nanosTimeout)<br>        throws InterruptedException：在acquireInterruptibly(int arg)增加了超时限制，超时未获得同步状态返回false，否则返回true</li>\n<li>public final void acquireShared(int arg)：共享式获取同步状态，如果未获取到则进入同步队列等待，与独占式不同的是，共享式可以同时有多个线程获取到同步状态。</li>\n<li>public final void acquireSharedInterruptibly(int arg)：共享式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，但同时该方法也会响应中断，如果线程在同步队列中被中断，则该方法会抛出InterruptedException并返回。</li>\n<li>public final boolean tryAcquireSharedNanos(int arg, long nanosTimeout)<br>        throws InterruptedException：在acquireSharedInterruptibly(int arg)基础上增加了超时限制，超时未获得同步状态返回false，否则返回true</li>\n<li>public final boolean release(int arg)：独占式释放同步状态，该方法会在释放同步状态之后，唤醒同步队列中第一个节点中的线程。</li>\n<li>public final boolean releaseShared(int arg)：共享式释放同步状态。</li>\n<li>public final Collection<Thread> getQueuedThreads()：获取在同步队列上等待的线程集合。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"共享式获取与独占式获取\"><a href=\"#共享式获取与独占式获取\" class=\"headerlink\" title=\"共享式获取与独占式获取\"></a>共享式获取与独占式获取</h3><ul>\n<li>共享式访问资源时，其他共享式的访问均被允许，独占式访问被阻塞。</li>\n<li>独占式访问资源时，其他访问均被阻塞。</li>\n</ul>\n<h3 id=\"同步队列\"><a href=\"#同步队列\" class=\"headerlink\" title=\"同步队列\"></a>同步队列</h3><p>同步器依赖内部的同步队列（一个FIFO双向队列）来完成同步状态的管理，当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点并加入队列，同时阻塞当前线程，当同步状态释放时，会把首节点中的线程唤醒，使其再次尝试获取同步状态。</p>\n<p>节点是构成同步队列的基础，同步器拥有首节点和尾节点，没有成功获取同步状态的线程会将成为节点加入该队列的尾部。</p>\n<ul>\n<li>设置尾节点需要CAS方法：compareAndSetTail(Node expect, Node update)。</li>\n<li>获取首节点是通过同步成功的线程，所以不需要CAS。</li>\n</ul>\n<h3 id=\"独占式同步状态\"><a href=\"#独占式同步状态\" class=\"headerlink\" title=\"独占式同步状态\"></a>独占式同步状态</h3><p>通过acquire(int arg)可以获取同步状态。主要逻辑：</p>\n<p>首先调用自定义同步器实现的tryAcquire(int arg)方法（保证线程安全的获取同步），通过addWaiter(Node node)方法将该节点加入到队列尾部，最后acquireQueued(Node node, int arg)，使得该节点以死循环的方式获取同步状态。</p>\n<p><img src=\"/%5Cimage%5Cinterview_prep%5Cjava%5Caqc_ex.png\" alt=\"aqc_ex.png\"></p>\n<p>通过release(int arg)方法可以释放同步状态，该方法释放了同步状态后，会唤醒其后继节点（进而使后继节点重新尝试获取同步状态）。</p>\n<h3 id=\"共享式同步状态\"><a href=\"#共享式同步状态\" class=\"headerlink\" title=\"共享式同步状态\"></a>共享式同步状态</h3><p>通过调用acquireShared(int arg)可以共享式获取同步状态。具体：</p>\n<ul>\n<li><p>调用tryAcquireShared(int arg)尝试获取同步状态，当返回值大于等于0，表示能获取到同步。</p>\n</li>\n<li><p>doAcquireShared(int arg)自旋过程中，如果当前节点的前驱为头节点时，尝试获取同步，如果返回值大于等于0，表示获取成功并退出自旋。</p>\n</li>\n</ul>\n<p>调用releaseShared(int arg)释放同步状态。和独占式的区别是tryReleaseShared(int arg)必须保证同步状态线程安全释放，一般是通过循环和CAS保证。</p>\n<h3 id=\"独占式超时获取同步\"><a href=\"#独占式超时获取同步\" class=\"headerlink\" title=\"独占式超时获取同步\"></a>独占式超时获取同步</h3><p>通过调用doAcquireNanos(int arg, long nanosTimeout)可以超时获取同步。在支持响应中断的基础上，增加了超时获取的特性。</p>\n<p>过程和独占式类似，但在同步获取失败时判断是否超时。</p>\n<ul>\n<li>如果没有超时，重新 计算超时间隔，然后使当前线程等待nanosTimeout。</li>\n<li>如果nanosTimeout小于等于spinForTimeoutThrehold时，将不会将使该线程进行超时等待，而是进入快速自旋。</li>\n</ul>\n<p><img src=\"/%5Cimage%5Cinterview_prep%5Cjava%5Caqs_nano.png\" alt=\"aqs_nano.png\"></p>\n<p>参考：</p>\n<p><a href=\"https://yq.aliyun.com/articles/639608\">深入学习Lock锁（1）——队列同步器</a></p>\n","length":2799,"excerpt":"","more":"<h1 id=\"队列同步器（AQS）\"><a href=\"#队列同步器（AQS）\" class=\"headerlink\" title=\"队列同步器（AQS）\"></a>队列同步器（AQS）</h1><p>队列选择器（AbstractQueuedSynchronizer）是用来构建锁或者其他同步组件的基础框架。</p>\n<p>同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态。</p>\n<p>同步器是实现锁的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。<strong>锁是面向使用者的，同步器面向的是锁的实现者。</strong></p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>同步器的设计是基于模板方法。使用者继承同步器并重写制定的方法，随后将同步器组合在自定义同步组件的实现中，并调用模板方法，模板方法调用的是使用者重写的方法。</p>\n<p>同步器提供3个方法访问和修改同步状态：</p>\n<ul>\n<li>getState()：获取当前同步状态。</li>\n<li>setState(int newState)：设置当前同步状态。</li>\n<li>compareAndSetState(int expect, int update)：使用CAS设置。</li>\n</ul>\n<p>同步器可重写的方法：</p>\n<ul>\n<li>protected boolean tryAcquire(int arg)：独占式获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再使用CAS设置同步状态。</li>\n<li>protected boolean tryRelease(int arg)：独占式释放同步状态，等待同步状态的线程将有机会获取同步状态。</li>\n<li>protected int tryAcquireShared(int arg)：共享式获取同步状态，返回大于等与0的值则表示获取成功，否则获取失败</li>\n<li>protected boolean tryReleaseShared(int arg)：共享式释放同步状态。</li>\n<li>protected boolean isHeldExclusively()：当前同步器是否在独占模式下被线程占用，一般该方法表示是否被当前线程所独占。</li>\n</ul>\n<p>模板方法：</p>\n<ul>\n<li>public final void acquire(int arg)：独占式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，该方法需要调用重写的tryAcquire(int arg)方法</li>\n<li>public final void acquireInterruptibly(int arg) throws InterruptedException：独占式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，但同时该方法也会响应中断，如果线程在同步队列中被中断，则该方法会抛出InterruptedException并返回。</li>\n<li>public final boolean tryAcquireNanos(int arg, long nanosTimeout)<br>        throws InterruptedException：在acquireInterruptibly(int arg)增加了超时限制，超时未获得同步状态返回false，否则返回true</li>\n<li>public final void acquireShared(int arg)：共享式获取同步状态，如果未获取到则进入同步队列等待，与独占式不同的是，共享式可以同时有多个线程获取到同步状态。</li>\n<li>public final void acquireSharedInterruptibly(int arg)：共享式获取同步状态，如果当前线程获取同步状态成功，则会返回，否则当前线程会进入同步队列等待，但同时该方法也会响应中断，如果线程在同步队列中被中断，则该方法会抛出InterruptedException并返回。</li>\n<li>public final boolean tryAcquireSharedNanos(int arg, long nanosTimeout)<br>        throws InterruptedException：在acquireSharedInterruptibly(int arg)基础上增加了超时限制，超时未获得同步状态返回false，否则返回true</li>\n<li>public final boolean release(int arg)：独占式释放同步状态，该方法会在释放同步状态之后，唤醒同步队列中第一个节点中的线程。</li>\n<li>public final boolean releaseShared(int arg)：共享式释放同步状态。</li>\n<li>public final Collection<Thread> getQueuedThreads()：获取在同步队列上等待的线程集合。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"共享式获取与独占式获取\"><a href=\"#共享式获取与独占式获取\" class=\"headerlink\" title=\"共享式获取与独占式获取\"></a>共享式获取与独占式获取</h3><ul>\n<li>共享式访问资源时，其他共享式的访问均被允许，独占式访问被阻塞。</li>\n<li>独占式访问资源时，其他访问均被阻塞。</li>\n</ul>\n<h3 id=\"同步队列\"><a href=\"#同步队列\" class=\"headerlink\" title=\"同步队列\"></a>同步队列</h3><p>同步器依赖内部的同步队列（一个FIFO双向队列）来完成同步状态的管理，当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点并加入队列，同时阻塞当前线程，当同步状态释放时，会把首节点中的线程唤醒，使其再次尝试获取同步状态。</p>\n<p>节点是构成同步队列的基础，同步器拥有首节点和尾节点，没有成功获取同步状态的线程会将成为节点加入该队列的尾部。</p>\n<ul>\n<li>设置尾节点需要CAS方法：compareAndSetTail(Node expect, Node update)。</li>\n<li>获取首节点是通过同步成功的线程，所以不需要CAS。</li>\n</ul>\n<h3 id=\"独占式同步状态\"><a href=\"#独占式同步状态\" class=\"headerlink\" title=\"独占式同步状态\"></a>独占式同步状态</h3><p>通过acquire(int arg)可以获取同步状态。主要逻辑：</p>\n<p>首先调用自定义同步器实现的tryAcquire(int arg)方法（保证线程安全的获取同步），通过addWaiter(Node node)方法将该节点加入到队列尾部，最后acquireQueued(Node node, int arg)，使得该节点以死循环的方式获取同步状态。</p>\n<p><img src=\"/%5Cimage%5Cinterview_prep%5Cjava%5Caqc_ex.png\" alt=\"aqc_ex.png\"></p>\n<p>通过release(int arg)方法可以释放同步状态，该方法释放了同步状态后，会唤醒其后继节点（进而使后继节点重新尝试获取同步状态）。</p>\n<h3 id=\"共享式同步状态\"><a href=\"#共享式同步状态\" class=\"headerlink\" title=\"共享式同步状态\"></a>共享式同步状态</h3><p>通过调用acquireShared(int arg)可以共享式获取同步状态。具体：</p>\n<ul>\n<li><p>调用tryAcquireShared(int arg)尝试获取同步状态，当返回值大于等于0，表示能获取到同步。</p>\n</li>\n<li><p>doAcquireShared(int arg)自旋过程中，如果当前节点的前驱为头节点时，尝试获取同步，如果返回值大于等于0，表示获取成功并退出自旋。</p>\n</li>\n</ul>\n<p>调用releaseShared(int arg)释放同步状态。和独占式的区别是tryReleaseShared(int arg)必须保证同步状态线程安全释放，一般是通过循环和CAS保证。</p>\n<h3 id=\"独占式超时获取同步\"><a href=\"#独占式超时获取同步\" class=\"headerlink\" title=\"独占式超时获取同步\"></a>独占式超时获取同步</h3><p>通过调用doAcquireNanos(int arg, long nanosTimeout)可以超时获取同步。在支持响应中断的基础上，增加了超时获取的特性。</p>\n<p>过程和独占式类似，但在同步获取失败时判断是否超时。</p>\n<ul>\n<li>如果没有超时，重新 计算超时间隔，然后使当前线程等待nanosTimeout。</li>\n<li>如果nanosTimeout小于等于spinForTimeoutThrehold时，将不会将使该线程进行超时等待，而是进入快速自旋。</li>\n</ul>\n<p><img src=\"/%5Cimage%5Cinterview_prep%5Cjava%5Caqs_nano.png\" alt=\"aqs_nano.png\"></p>\n<p>参考：</p>\n<p><a href=\"https://yq.aliyun.com/articles/639608\">深入学习Lock锁（1）——队列同步器</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm7hqj8ae0007v0010fwddoq5","category_id":"cm7hqj8aj000ev001eepufku2","_id":"cm7hqj8ao000qv001ejsd7naf"},{"post_id":"cm7hqj8al000iv001e585dlar","category_id":"cm7hqj8aj000ev001eepufku2","_id":"cm7hqj8ap000vv00121eehqtd"},{"post_id":"cm7hqj8af0008v00113rt1kai","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8aq000zv0015bh56qfy"},{"post_id":"cm7hqj8af0008v00113rt1kai","category_id":"cm7hqj8am000kv00189485dj4","_id":"cm7hqj8ar0013v001at5qf8cu"},{"post_id":"cm7hqj8a60001v0012bemdjk9","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8as0016v0019l07cewh"},{"post_id":"cm7hqj8a60001v0012bemdjk9","category_id":"cm7hqj8ao000sv00104aj4a5b","_id":"cm7hqj8at001av00174izbfwy"},{"post_id":"cm7hqj8ag0009v00148cnc86s","category_id":"cm7hqj8ar0010v0010zgybugh","_id":"cm7hqj8av001gv0011nmu1o7f"},{"post_id":"cm7hqj8ar0014v001744wgrgq","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8aw001jv001c1p4gvtg"},{"post_id":"cm7hqj8ar0014v001744wgrgq","category_id":"cm7hqj8ao000sv00104aj4a5b","_id":"cm7hqj8ax001nv001ays841x9"},{"post_id":"cm7hqj8as0017v0015t62f53k","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8ay001rv00186wia7bz"},{"post_id":"cm7hqj8as0017v0015t62f53k","category_id":"cm7hqj8ao000sv00104aj4a5b","_id":"cm7hqj8az001vv0016bj7fq5h"},{"post_id":"cm7hqj8ai000cv001gwnr2jcq","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b0001zv001au1ag4ar"},{"post_id":"cm7hqj8ai000cv001gwnr2jcq","category_id":"cm7hqj8am000kv00189485dj4","_id":"cm7hqj8b10022v001ekqhfsp9"},{"post_id":"cm7hqj8av001iv001839w50f7","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b20027v0010arvgx4a"},{"post_id":"cm7hqj8aa0003v001110qfsyt","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b3002av0015gmb67ro"},{"post_id":"cm7hqj8aa0003v001110qfsyt","category_id":"cm7hqj8ao000sv00104aj4a5b","_id":"cm7hqj8b4002fv001gf5o9ep4"},{"post_id":"cm7hqj8aj000dv0018fg90wb9","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b4002iv0013j5saydu"},{"post_id":"cm7hqj8aj000dv0018fg90wb9","category_id":"cm7hqj8ao000sv00104aj4a5b","_id":"cm7hqj8b6002nv0017kzheoiz"},{"post_id":"cm7hqj8b0001yv0019gzecrtp","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b6002qv00120z5gz33"},{"post_id":"cm7hqj8ak000gv0019qskdxyh","category_id":"cm7hqj8az001uv001elpmhdzn","_id":"cm7hqj8b7002vv00162so014h"},{"post_id":"cm7hqj8am000mv00197930ezt","category_id":"cm7hqj8b10024v0015259e9tg","_id":"cm7hqj8b7002xv00122iv7efd"},{"post_id":"cm7hqj8an000ov001cyovcj3a","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b80030v001ee6vc1v2"},{"post_id":"cm7hqj8an000ov001cyovcj3a","category_id":"cm7hqj8b3002dv0018ekr7ui4","_id":"cm7hqj8b80033v001gup63xn1"},{"post_id":"cm7hqj8b6002pv0012soyc18y","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b80036v001bvdj1xiv"},{"post_id":"cm7hqj8ap000tv001gfq8e9gk","category_id":"cm7hqj8b5002lv001hcxy9cqe","_id":"cm7hqj8b90039v001079k7w1s"},{"post_id":"cm7hqj8aq000wv001axqucdrx","category_id":"cm7hqj8ar0010v0010zgybugh","_id":"cm7hqj8b9003bv001ggqf4ckg"},{"post_id":"cm7hqj8ar0011v0012ky2ghi2","category_id":"cm7hqj8ar0010v0010zgybugh","_id":"cm7hqj8b9003fv0016wym3j4z"},{"post_id":"cm7hqj8at001bv00149gseitx","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8b9003iv0013gsm05gb"},{"post_id":"cm7hqj8at001bv00149gseitx","category_id":"cm7hqj8b80035v001dz0jbtt9","_id":"cm7hqj8ba003lv0019xci91ot"},{"post_id":"cm7hqj8au001ev0012n7aci93","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8ba003nv0017q3lgy31"},{"post_id":"cm7hqj8au001ev0012n7aci93","category_id":"cm7hqj8b80035v001dz0jbtt9","_id":"cm7hqj8ba003rv001es0uggci"},{"post_id":"cm7hqj8aw001lv00131wee50f","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8ba003tv001c5wz6ak5"},{"post_id":"cm7hqj8aw001lv00131wee50f","category_id":"cm7hqj8b9003hv001b6d45ad4","_id":"cm7hqj8bb003xv0015acid0vm"},{"post_id":"cm7hqj8ay001qv001dfz3h3bl","category_id":"cm7hqj8ba003pv001hpwxcqb9","_id":"cm7hqj8bb0040v0012vlq7acy"},{"post_id":"cm7hqj8ay001tv001hqq4dlwe","category_id":"cm7hqj8bb003vv001d1yibcqc","_id":"cm7hqj8bc0044v001fr1r3f7b"},{"post_id":"cm7hqj8b10021v0015ln191oo","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8bc0049v001gol553cy"},{"post_id":"cm7hqj8b10021v0015ln191oo","category_id":"cm7hqj8bb0041v0014byfe1ab","_id":"cm7hqj8bc004bv0012fbshg86"},{"post_id":"cm7hqj8b20026v001c75l9c2d","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8bd004fv001hd3d99k8"},{"post_id":"cm7hqj8b20026v001c75l9c2d","category_id":"cm7hqj8bb0041v0014byfe1ab","_id":"cm7hqj8bd004hv001a9qrbe9j"},{"post_id":"cm7hqj8b20029v0012gowb8d0","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8bd004lv001hd4uhk3b"},{"post_id":"cm7hqj8b20029v0012gowb8d0","category_id":"cm7hqj8bb0041v0014byfe1ab","_id":"cm7hqj8be004nv0014j9y6ng7"},{"post_id":"cm7hqj8b3002ev001abel57e4","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8bh004rv0017ay5dwoo"},{"post_id":"cm7hqj8b3002ev001abel57e4","category_id":"cm7hqj8bb0041v0014byfe1ab","_id":"cm7hqj8bh004tv0016agie5tu"},{"post_id":"cm7hqj8b4002hv001dtyg0wl0","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8bi004wv001di8pga1m"},{"post_id":"cm7hqj8b4002hv001dtyg0wl0","category_id":"cm7hqj8bb0041v0014byfe1ab","_id":"cm7hqj8bi004zv0015u7c5ib0"},{"post_id":"cm7hqj8b5002mv001elao49tt","category_id":"cm7hqj8bg004qv001655q65dk","_id":"cm7hqj8bj0052v0013zdqanqp"},{"post_id":"cm7hqj8b7002tv001czgy3gmb","category_id":"cm7hqj8ac0004v00189hr1kx7","_id":"cm7hqj8bj0054v001gt1d3f76"},{"post_id":"cm7hqj8b7002tv001czgy3gmb","category_id":"cm7hqj8ao000sv00104aj4a5b","_id":"cm7hqj8bj0056v0013df48hsi"},{"post_id":"cm7hqj8b7002tv001czgy3gmb","category_id":"cm7hqj8bi004xv001288cciu6","_id":"cm7hqj8bj0058v001h7ln34nx"}],"PostTag":[{"post_id":"cm7hqj8a60001v0012bemdjk9","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8al000hv0017efagwg9"},{"post_id":"cm7hqj8a60001v0012bemdjk9","tag_id":"cm7hqj8ah000bv0013c1wcjdw","_id":"cm7hqj8am000jv001cziehyjb"},{"post_id":"cm7hqj8aj000dv0018fg90wb9","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8an000nv00147um4i01"},{"post_id":"cm7hqj8aj000dv0018fg90wb9","tag_id":"cm7hqj8ah000bv0013c1wcjdw","_id":"cm7hqj8ao000pv0019gzngnxk"},{"post_id":"cm7hqj8ak000gv0019qskdxyh","tag_id":"cm7hqj8ah000bv0013c1wcjdw","_id":"cm7hqj8ap000uv00111yregfp"},{"post_id":"cm7hqj8aa0003v001110qfsyt","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8aq000xv001376s9ag0"},{"post_id":"cm7hqj8aa0003v001110qfsyt","tag_id":"cm7hqj8ah000bv0013c1wcjdw","_id":"cm7hqj8ar0012v0016lmdhhxf"},{"post_id":"cm7hqj8ae0007v0010fwddoq5","tag_id":"cm7hqj8ah000bv0013c1wcjdw","_id":"cm7hqj8at0019v001cqvje42g"},{"post_id":"cm7hqj8ae0007v0010fwddoq5","tag_id":"cm7hqj8aq000yv001bah0a5hz","_id":"cm7hqj8au001cv0012d8h6ann"},{"post_id":"cm7hqj8ar0014v001744wgrgq","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8av001hv00141lu3w7r"},{"post_id":"cm7hqj8ar0014v001744wgrgq","tag_id":"cm7hqj8ah000bv0013c1wcjdw","_id":"cm7hqj8aw001kv001fe2w69en"},{"post_id":"cm7hqj8as0017v0015t62f53k","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8ax001pv001gpo024vq"},{"post_id":"cm7hqj8as0017v0015t62f53k","tag_id":"cm7hqj8ah000bv0013c1wcjdw","_id":"cm7hqj8ay001sv00196tw9yew"},{"post_id":"cm7hqj8af0008v00113rt1kai","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8b0001xv001hail8n0t"},{"post_id":"cm7hqj8af0008v00113rt1kai","tag_id":"cm7hqj8as0015v001gma151ij","_id":"cm7hqj8b00020v001bv925ug3"},{"post_id":"cm7hqj8av001iv001839w50f7","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8b20025v001df4m5eo5"},{"post_id":"cm7hqj8ag0009v00148cnc86s","tag_id":"cm7hqj8au001dv0010vj010zt","_id":"cm7hqj8b20028v0014dkhay1d"},{"post_id":"cm7hqj8ai000cv001gwnr2jcq","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8b3002cv001849ceuut"},{"post_id":"cm7hqj8ai000cv001gwnr2jcq","tag_id":"cm7hqj8as0015v001gma151ij","_id":"cm7hqj8b4002gv0011v2a6gqa"},{"post_id":"cm7hqj8b0001yv0019gzecrtp","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8b5002jv00123ozgpxk"},{"post_id":"cm7hqj8al000iv001e585dlar","tag_id":"cm7hqj8ah000bv0013c1wcjdw","_id":"cm7hqj8b6002ov00113p58ahm"},{"post_id":"cm7hqj8al000iv001e585dlar","tag_id":"cm7hqj8aq000yv001bah0a5hz","_id":"cm7hqj8b6002rv0018gcq140p"},{"post_id":"cm7hqj8am000mv00197930ezt","tag_id":"cm7hqj8b10023v001arqnbv4a","_id":"cm7hqj8b7002wv001c0ade0ui"},{"post_id":"cm7hqj8am000mv00197930ezt","tag_id":"cm7hqj8b3002bv0019xt7cj11","_id":"cm7hqj8b8002yv0019g0yexe4"},{"post_id":"cm7hqj8an000ov001cyovcj3a","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8b80032v00147c8fjq2"},{"post_id":"cm7hqj8an000ov001cyovcj3a","tag_id":"cm7hqj8b5002kv001c1t3c5hy","_id":"cm7hqj8b80034v001d8x1gllm"},{"post_id":"cm7hqj8b6002pv0012soyc18y","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8b90038v001cscmgh9s"},{"post_id":"cm7hqj8ap000tv001gfq8e9gk","tag_id":"cm7hqj8b6002sv0018zff06dg","_id":"cm7hqj8b9003av001dpujbtdp"},{"post_id":"cm7hqj8aq000wv001axqucdrx","tag_id":"cm7hqj8au001dv0010vj010zt","_id":"cm7hqj8b9003ev0012ppg7xim"},{"post_id":"cm7hqj8ar0011v0012ky2ghi2","tag_id":"cm7hqj8au001dv0010vj010zt","_id":"cm7hqj8b9003gv00181nuh4af"},{"post_id":"cm7hqj8at001bv00149gseitx","tag_id":"cm7hqj8b9003cv001cv7r4s4t","_id":"cm7hqj8ba003kv0012sqm55w0"},{"post_id":"cm7hqj8at001bv00149gseitx","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8ba003mv001btff6rqz"},{"post_id":"cm7hqj8au001ev0012n7aci93","tag_id":"cm7hqj8b9003cv001cv7r4s4t","_id":"cm7hqj8ba003qv0012suvegdy"},{"post_id":"cm7hqj8au001ev0012n7aci93","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8ba003sv001e85ch1as"},{"post_id":"cm7hqj8aw001lv00131wee50f","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8bb003wv0011s6n0avh"},{"post_id":"cm7hqj8aw001lv00131wee50f","tag_id":"cm7hqj8ba003ov0016pmvb7cd","_id":"cm7hqj8bb003yv0016et9hbk1"},{"post_id":"cm7hqj8ay001qv001dfz3h3bl","tag_id":"cm7hqj8b10023v001arqnbv4a","_id":"cm7hqj8bb0042v0016rv03cyr"},{"post_id":"cm7hqj8ay001tv001hqq4dlwe","tag_id":"cm7hqj8bb003zv001gdigdxyg","_id":"cm7hqj8bc0046v00128jrcjm7"},{"post_id":"cm7hqj8b10021v0015ln191oo","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8bc004av001efwp9g6d"},{"post_id":"cm7hqj8b10021v0015ln191oo","tag_id":"cm7hqj8bc0043v0012vkd8fry","_id":"cm7hqj8bd004cv001g96fenmx"},{"post_id":"cm7hqj8b20026v001c75l9c2d","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8bd004gv001bnu4a9pc"},{"post_id":"cm7hqj8b20026v001c75l9c2d","tag_id":"cm7hqj8bc0043v0012vkd8fry","_id":"cm7hqj8bd004iv001etxheeo7"},{"post_id":"cm7hqj8b20029v0012gowb8d0","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8be004mv001b8jghyvh"},{"post_id":"cm7hqj8b20029v0012gowb8d0","tag_id":"cm7hqj8bc0043v0012vkd8fry","_id":"cm7hqj8bg004ov0011zzn1pmk"},{"post_id":"cm7hqj8b3002ev001abel57e4","tag_id":"cm7hqj8bc0043v0012vkd8fry","_id":"cm7hqj8bh004sv001enamdyvk"},{"post_id":"cm7hqj8b3002ev001abel57e4","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8bh004uv0019fmicev8"},{"post_id":"cm7hqj8b4002hv001dtyg0wl0","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8bi004yv0016gxv0e2f"},{"post_id":"cm7hqj8b4002hv001dtyg0wl0","tag_id":"cm7hqj8bc0043v0012vkd8fry","_id":"cm7hqj8bi0050v0015j5u7acz"},{"post_id":"cm7hqj8b5002mv001elao49tt","tag_id":"cm7hqj8bh004vv001728rdq3q","_id":"cm7hqj8bj0053v0013cjpe9br"},{"post_id":"cm7hqj8b7002tv001czgy3gmb","tag_id":"cm7hqj8ad0005v0010zpofnhh","_id":"cm7hqj8bj0055v001bjxcgx0b"},{"post_id":"cm7hqj8b7002tv001czgy3gmb","tag_id":"cm7hqj8ah000bv0013c1wcjdw","_id":"cm7hqj8bj0057v0018dfj7qdp"},{"post_id":"cm7hqj8b7002tv001czgy3gmb","tag_id":"cm7hqj8bi0051v001exxxfe1x","_id":"cm7hqj8bj0059v0012jzu3f26"}],"Tag":[{"name":"面试","_id":"cm7hqj8ad0005v0010zpofnhh"},{"name":"Java","_id":"cm7hqj8ah000bv0013c1wcjdw"},{"name":"并发编程","_id":"cm7hqj8aq000yv001bah0a5hz"},{"name":"JVM","_id":"cm7hqj8as0015v001gma151ij"},{"name":"Hexo","_id":"cm7hqj8au001dv0010vj010zt"},{"name":"Python","_id":"cm7hqj8b10023v001arqnbv4a"},{"name":"scrapy","_id":"cm7hqj8b3002bv0019xt7cj11"},{"name":"Spring","_id":"cm7hqj8b5002kv001c1t3c5hy"},{"name":"Nginx","_id":"cm7hqj8b6002sv0018zff06dg"},{"name":"刷题","_id":"cm7hqj8b9003cv001cv7r4s4t"},{"name":"设计模式","_id":"cm7hqj8ba003ov0016pmvb7cd"},{"name":"ShadowSocks","_id":"cm7hqj8bb003zv001gdigdxyg"},{"name":"数据库","_id":"cm7hqj8bc0043v0012vkd8fry"},{"name":"tips","_id":"cm7hqj8bh004vv001728rdq3q"},{"name":"锁","_id":"cm7hqj8bi0051v001exxxfe1x"}]}}